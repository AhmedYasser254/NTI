
Nti_R7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00005990  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000128  00800060  00005990  00005a24  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000010  00800188  00800188  00005b4c  2**0
                  ALLOC
  3 .stab         00004a04  00000000  00000000  00005b4c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002519  00000000  00000000  0000a550  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000ca69  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000cc09  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000cdfb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000f206  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0001058c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00011764  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00011924  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00011c1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012588  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8b 0b 	jmp	0x1716	; 0x1716 <__vector_1>
       8:	0c 94 ba 0b 	jmp	0x1774	; 0x1774 <__vector_2>
       c:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 fd 0c 	jmp	0x19fa	; 0x19fa <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 ba 0c 	jmp	0x1974	; 0x1974 <__vector_9>
      28:	0c 94 77 0c 	jmp	0x18ee	; 0x18ee <__vector_10>
      2c:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e9       	ldi	r30, 0x90	; 144
      68:	f9 e5       	ldi	r31, 0x59	; 89
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 38       	cpi	r26, 0x88	; 136
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a8 e8       	ldi	r26, 0x88	; 136
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a8 39       	cpi	r26, 0x98	; 152
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 1d 2c 	call	0x583a	; 0x583a <main>
      8a:	0c 94 c6 2c 	jmp	0x598c	; 0x598c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 5e 2c 	jmp	0x58bc	; 0x58bc <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 7a 2c 	jmp	0x58f4	; 0x58f4 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 6a 2c 	jmp	0x58d4	; 0x58d4 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 86 2c 	jmp	0x590c	; 0x590c <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 6a 2c 	jmp	0x58d4	; 0x58d4 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 86 2c 	jmp	0x590c	; 0x590c <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 5e 2c 	jmp	0x58bc	; 0x58bc <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 7a 2c 	jmp	0x58f4	; 0x58f4 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 66 2c 	jmp	0x58cc	; 0x58cc <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 82 2c 	jmp	0x5904	; 0x5904 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 6a 2c 	jmp	0x58d4	; 0x58d4 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 86 2c 	jmp	0x590c	; 0x590c <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 6a 2c 	jmp	0x58d4	; 0x58d4 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 86 2c 	jmp	0x590c	; 0x590c <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 6a 2c 	jmp	0x58d4	; 0x58d4 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 86 2c 	jmp	0x590c	; 0x590c <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 6e 2c 	jmp	0x58dc	; 0x58dc <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 8a 2c 	jmp	0x5914	; 0x5914 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 66 2c 	jmp	0x58cc	; 0x58cc <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 82 2c 	jmp	0x5904	; 0x5904 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_16>:




void __vector_16 ()
{
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT (SREG ,I) ;
     e58:	af e5       	ldi	r26, 0x5F	; 95
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	ef e5       	ldi	r30, 0x5F	; 95
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	8f 77       	andi	r24, 0x7F	; 127
     e64:	8c 93       	st	X, r24
	adc_ptr ();
     e66:	e0 91 90 01 	lds	r30, 0x0190
     e6a:	f0 91 91 01 	lds	r31, 0x0191
     e6e:	09 95       	icall
	ADC_BASE->ADCSRA_Reg.Bitfield.B4 = 1;
     e70:	e4 e2       	ldi	r30, 0x24	; 36
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	82 81       	ldd	r24, Z+2	; 0x02
     e76:	80 61       	ori	r24, 0x10	; 16
     e78:	82 83       	std	Z+2, r24	; 0x02
}
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	ff 91       	pop	r31
     e80:	ef 91       	pop	r30
     e82:	bf 91       	pop	r27
     e84:	af 91       	pop	r26
     e86:	9f 91       	pop	r25
     e88:	8f 91       	pop	r24
     e8a:	7f 91       	pop	r23
     e8c:	6f 91       	pop	r22
     e8e:	5f 91       	pop	r21
     e90:	4f 91       	pop	r20
     e92:	3f 91       	pop	r19
     e94:	2f 91       	pop	r18
     e96:	0f 90       	pop	r0
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	0f 90       	pop	r0
     e9c:	1f 90       	pop	r1
     e9e:	18 95       	reti

00000ea0 <ADC_init>:
/*
 * this function should select ( Vref , Right or Left adjust
, prescaler , autotrigger or Not , and ADC enable).
 */
void ADC_init( const ADC_Config_t * Config_Ptr)
{
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <ADC_init+0x6>
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	9a 83       	std	Y+2, r25	; 0x02
     eac:	89 83       	std	Y+1, r24	; 0x01


	/*Inserting the ref Volatage*/
	ADC_BASE->ADMUX_Reg.Reg = (ADC_BASE->ADMUX_Reg.Reg & VOLTAGE_SELECTION_MASK) | ((Config_Ptr->ref_volt) << REFS0);
     eae:	a4 e2       	ldi	r26, 0x24	; 36
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e4 e2       	ldi	r30, 0x24	; 36
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	83 81       	ldd	r24, Z+3	; 0x03
     eb8:	28 2f       	mov	r18, r24
     eba:	2f 73       	andi	r18, 0x3F	; 63
     ebc:	e9 81       	ldd	r30, Y+1	; 0x01
     ebe:	fa 81       	ldd	r31, Y+2	; 0x02
     ec0:	80 81       	ld	r24, Z
     ec2:	88 2f       	mov	r24, r24
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	00 24       	eor	r0, r0
     ec8:	96 95       	lsr	r25
     eca:	87 95       	ror	r24
     ecc:	07 94       	ror	r0
     ece:	96 95       	lsr	r25
     ed0:	87 95       	ror	r24
     ed2:	07 94       	ror	r0
     ed4:	98 2f       	mov	r25, r24
     ed6:	80 2d       	mov	r24, r0
     ed8:	82 2b       	or	r24, r18
     eda:	13 96       	adiw	r26, 0x03	; 3
     edc:	8c 93       	st	X, r24

	/*Inserting the Prescalar*/
	ADC_BASE->ADCSRA_Reg.Reg = (ADC_BASE->ADCSRA_Reg.Reg & ADC_Prescaler_Select_Bits_Mask) | (Config_Ptr->prescaler);
     ede:	a4 e2       	ldi	r26, 0x24	; 36
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e4 e2       	ldi	r30, 0x24	; 36
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	82 81       	ldd	r24, Z+2	; 0x02
     ee8:	98 2f       	mov	r25, r24
     eea:	98 7f       	andi	r25, 0xF8	; 248
     eec:	e9 81       	ldd	r30, Y+1	; 0x01
     eee:	fa 81       	ldd	r31, Y+2	; 0x02
     ef0:	81 81       	ldd	r24, Z+1	; 0x01
     ef2:	89 2b       	or	r24, r25
     ef4:	12 96       	adiw	r26, 0x02	; 2
     ef6:	8c 93       	st	X, r24

	SET_BIT(ADC_BASE->ADCSRA_Reg.Reg,ADEN);
     ef8:	a4 e2       	ldi	r26, 0x24	; 36
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e4 e2       	ldi	r30, 0x24	; 36
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	82 81       	ldd	r24, Z+2	; 0x02
     f02:	80 68       	ori	r24, 0x80	; 128
     f04:	12 96       	adiw	r26, 0x02	; 2
     f06:	8c 93       	st	X, r24
     f08:	12 97       	sbiw	r26, 0x02	; 2



if(Config_Ptr->adjust == Left_adjust)
     f0a:	e9 81       	ldd	r30, Y+1	; 0x01
     f0c:	fa 81       	ldd	r31, Y+2	; 0x02
     f0e:	83 81       	ldd	r24, Z+3	; 0x03
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	a1 f4       	brne	.+40     	; 0xf3c <ADC_init+0x9c>
	ADC_BASE->ADMUX_Reg.Bitfield.B5 = Config_Ptr->adjust;
     f14:	a4 e2       	ldi	r26, 0x24	; 36
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e9 81       	ldd	r30, Y+1	; 0x01
     f1a:	fa 81       	ldd	r31, Y+2	; 0x02
     f1c:	83 81       	ldd	r24, Z+3	; 0x03
     f1e:	81 70       	andi	r24, 0x01	; 1
     f20:	81 70       	andi	r24, 0x01	; 1
     f22:	98 2f       	mov	r25, r24
     f24:	92 95       	swap	r25
     f26:	99 0f       	add	r25, r25
     f28:	90 7e       	andi	r25, 0xE0	; 224
     f2a:	13 96       	adiw	r26, 0x03	; 3
     f2c:	8c 91       	ld	r24, X
     f2e:	13 97       	sbiw	r26, 0x03	; 3
     f30:	8f 7d       	andi	r24, 0xDF	; 223
     f32:	89 2b       	or	r24, r25
     f34:	13 96       	adiw	r26, 0x03	; 3
     f36:	8c 93       	st	X, r24
     f38:	13 97       	sbiw	r26, 0x03	; 3
     f3a:	18 c0       	rjmp	.+48     	; 0xf6c <ADC_init+0xcc>
else if(Config_Ptr->adjust == Right_adjust)
     f3c:	e9 81       	ldd	r30, Y+1	; 0x01
     f3e:	fa 81       	ldd	r31, Y+2	; 0x02
     f40:	83 81       	ldd	r24, Z+3	; 0x03
     f42:	88 23       	and	r24, r24
     f44:	99 f4       	brne	.+38     	; 0xf6c <ADC_init+0xcc>
	ADC_BASE->ADMUX_Reg.Bitfield.B5 = Config_Ptr->adjust;
     f46:	a4 e2       	ldi	r26, 0x24	; 36
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e9 81       	ldd	r30, Y+1	; 0x01
     f4c:	fa 81       	ldd	r31, Y+2	; 0x02
     f4e:	83 81       	ldd	r24, Z+3	; 0x03
     f50:	81 70       	andi	r24, 0x01	; 1
     f52:	81 70       	andi	r24, 0x01	; 1
     f54:	98 2f       	mov	r25, r24
     f56:	92 95       	swap	r25
     f58:	99 0f       	add	r25, r25
     f5a:	90 7e       	andi	r25, 0xE0	; 224
     f5c:	13 96       	adiw	r26, 0x03	; 3
     f5e:	8c 91       	ld	r24, X
     f60:	13 97       	sbiw	r26, 0x03	; 3
     f62:	8f 7d       	andi	r24, 0xDF	; 223
     f64:	89 2b       	or	r24, r25
     f66:	13 96       	adiw	r26, 0x03	; 3
     f68:	8c 93       	st	X, r24
     f6a:	13 97       	sbiw	r26, 0x03	; 3


	if(Config_Ptr->AutoTrigger == Enable_AutoTrigger)
     f6c:	e9 81       	ldd	r30, Y+1	; 0x01
     f6e:	fa 81       	ldd	r31, Y+2	; 0x02
     f70:	84 81       	ldd	r24, Z+4	; 0x04
     f72:	88 23       	and	r24, r24
     f74:	f9 f4       	brne	.+62     	; 0xfb4 <ADC_init+0x114>
	{
		ADC_BASE->ADCSRA_Reg.Bitfield.B5 = 0;
     f76:	e4 e2       	ldi	r30, 0x24	; 36
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	82 81       	ldd	r24, Z+2	; 0x02
     f7c:	8f 7d       	andi	r24, 0xDF	; 223
     f7e:	82 83       	std	Z+2, r24	; 0x02

		ADC_BASE->ADCSRA_Reg.Bitfield.B5 = 1;
     f80:	e4 e2       	ldi	r30, 0x24	; 36
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	82 81       	ldd	r24, Z+2	; 0x02
     f86:	80 62       	ori	r24, 0x20	; 32
     f88:	82 83       	std	Z+2, r24	; 0x02
		SFIOR |= (Config_Ptr->AutoTrigger_Source) << 5;
     f8a:	a0 e5       	ldi	r26, 0x50	; 80
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e0 e5       	ldi	r30, 0x50	; 80
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	28 2f       	mov	r18, r24
     f96:	e9 81       	ldd	r30, Y+1	; 0x01
     f98:	fa 81       	ldd	r31, Y+2	; 0x02
     f9a:	85 81       	ldd	r24, Z+5	; 0x05
     f9c:	88 2f       	mov	r24, r24
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	82 95       	swap	r24
     fa6:	92 95       	swap	r25
     fa8:	90 7f       	andi	r25, 0xF0	; 240
     faa:	98 27       	eor	r25, r24
     fac:	80 7f       	andi	r24, 0xF0	; 240
     fae:	98 27       	eor	r25, r24
     fb0:	82 2b       	or	r24, r18
     fb2:	8c 93       	st	X, r24
	}



}
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <ADC_getDigitalValueSynchNonBlocking>:




unsigned short ADC_getDigitalValueSynchNonBlocking(ANALOG_CHANNEL channel)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <ADC_getDigitalValueSynchNonBlocking+0x6>
     fc4:	0f 92       	push	r0
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	89 83       	std	Y+1, r24	; 0x01
	/* Inserting Channel */
	ADC_BASE->ADMUX_Reg.Reg = (ADC_BASE->ADMUX_Reg.Reg & Analog_Channel_Mask) | channel;
     fcc:	a4 e2       	ldi	r26, 0x24	; 36
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e4 e2       	ldi	r30, 0x24	; 36
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	83 81       	ldd	r24, Z+3	; 0x03
     fd6:	98 2f       	mov	r25, r24
     fd8:	90 7e       	andi	r25, 0xE0	; 224
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	89 2b       	or	r24, r25
     fde:	13 96       	adiw	r26, 0x03	; 3
     fe0:	8c 93       	st	X, r24

	/*Start Conversion */
	SET_BIT(ADC_BASE->ADCSRA_Reg.Reg , ADSC);
     fe2:	a4 e2       	ldi	r26, 0x24	; 36
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e4 e2       	ldi	r30, 0x24	; 36
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	82 81       	ldd	r24, Z+2	; 0x02
     fec:	80 64       	ori	r24, 0x40	; 64
     fee:	12 96       	adiw	r26, 0x02	; 2
     ff0:	8c 93       	st	X, r24
     ff2:	12 97       	sbiw	r26, 0x02	; 2




	if(ADC_BASE->ADCSRA_Reg.Bitfield.B4 == 0)
     ff4:	e4 e2       	ldi	r30, 0x24	; 36
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	82 81       	ldd	r24, Z+2	; 0x02
     ffa:	80 71       	andi	r24, 0x10	; 16
     ffc:	88 23       	and	r24, r24
     ffe:	91 f4       	brne	.+36     	; 0x1024 <ADC_getDigitalValueSynchNonBlocking+0x66>
	{
		SET_BIT(ADC_BASE->ADCSRA_Reg.Reg,ADIF);
    1000:	a4 e2       	ldi	r26, 0x24	; 36
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e4 e2       	ldi	r30, 0x24	; 36
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	82 81       	ldd	r24, Z+2	; 0x02
    100a:	80 61       	ori	r24, 0x10	; 16
    100c:	12 96       	adiw	r26, 0x02	; 2
    100e:	8c 93       	st	X, r24
    1010:	12 97       	sbiw	r26, 0x02	; 2
		return 	 ADC_BASE->ADCL_Reg;
    1012:	e4 e2       	ldi	r30, 0x24	; 36
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	91 81       	ldd	r25, Z+1	; 0x01
    101a:	9b 83       	std	Y+3, r25	; 0x03
    101c:	8a 83       	std	Y+2, r24	; 0x02
	}

}
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	9b 81       	ldd	r25, Y+3	; 0x03
    1022:	00 c0       	rjmp	.+0      	; 0x1024 <ADC_getDigitalValueSynchNonBlocking+0x66>
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <ADC_getDigitalValueAsynchCallBack>:
 * needs to know channel and the call back pointer ,
 *	this fn enables Interrupt and selects the channel and
 *	starts conversion.
 */
void ADC_getDigitalValueAsynchCallBack( ANALOG_CHANNEL channel,void(*fnptr)(void))
{	/* Inserting Channel */
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	00 d0       	rcall	.+0      	; 0x1036 <ADC_getDigitalValueAsynchCallBack+0x6>
    1036:	0f 92       	push	r0
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	89 83       	std	Y+1, r24	; 0x01
    103e:	7b 83       	std	Y+3, r23	; 0x03
    1040:	6a 83       	std	Y+2, r22	; 0x02
	ADC_BASE->ADMUX_Reg.Reg = (ADC_BASE->ADMUX_Reg.Reg & Analog_Channel_Mask) | channel;
    1042:	a4 e2       	ldi	r26, 0x24	; 36
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e4 e2       	ldi	r30, 0x24	; 36
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	83 81       	ldd	r24, Z+3	; 0x03
    104c:	98 2f       	mov	r25, r24
    104e:	90 7e       	andi	r25, 0xE0	; 224
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	89 2b       	or	r24, r25
    1054:	13 96       	adiw	r26, 0x03	; 3
    1056:	8c 93       	st	X, r24

	SET_BIT (SREG , I) ;
    1058:	af e5       	ldi	r26, 0x5F	; 95
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	ef e5       	ldi	r30, 0x5F	; 95
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	80 68       	ori	r24, 0x80	; 128
    1064:	8c 93       	st	X, r24
	SET_BIT(ADC_BASE->ADCSRA_Reg.Reg,ADIE);
    1066:	a4 e2       	ldi	r26, 0x24	; 36
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e4 e2       	ldi	r30, 0x24	; 36
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	82 81       	ldd	r24, Z+2	; 0x02
    1070:	88 60       	ori	r24, 0x08	; 8
    1072:	12 96       	adiw	r26, 0x02	; 2
    1074:	8c 93       	st	X, r24

	/*Start Conversion */
	SET_BIT(ADC_BASE->ADCSRA_Reg.Reg , ADSC);
    1076:	a4 e2       	ldi	r26, 0x24	; 36
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e4 e2       	ldi	r30, 0x24	; 36
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	82 81       	ldd	r24, Z+2	; 0x02
    1080:	80 64       	ori	r24, 0x40	; 64
    1082:	12 96       	adiw	r26, 0x02	; 2
    1084:	8c 93       	st	X, r24
    1086:	12 97       	sbiw	r26, 0x02	; 2
	adc_ptr = fnptr;
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	9b 81       	ldd	r25, Y+3	; 0x03
    108c:	90 93 91 01 	sts	0x0191, r25
    1090:	80 93 90 01 	sts	0x0190, r24


}
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <DIO_voidSetPinDirection>:
 *@param [in] 			-Value: Pin Value
 * @retval 			-none
 * Note				-none
 */
void DIO_voidSetPinDirection(Port_Def* ptr,Pin_ID_t Copy_u8PinId,Pin_Direction_t Copy_u8Direction)
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <DIO_voidSetPinDirection+0x6>
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <DIO_voidSetPinDirection+0x8>
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <DIO_voidSetPinDirection+0xa>
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
    10ae:	9a 83       	std	Y+2, r25	; 0x02
    10b0:	89 83       	std	Y+1, r24	; 0x01
    10b2:	6b 83       	std	Y+3, r22	; 0x03
    10b4:	4c 83       	std	Y+4, r20	; 0x04

	switch (Copy_u8PinId)
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	3e 83       	std	Y+6, r19	; 0x06
    10be:	2d 83       	std	Y+5, r18	; 0x05
    10c0:	8d 81       	ldd	r24, Y+5	; 0x05
    10c2:	9e 81       	ldd	r25, Y+6	; 0x06
    10c4:	83 30       	cpi	r24, 0x03	; 3
    10c6:	91 05       	cpc	r25, r1
    10c8:	09 f4       	brne	.+2      	; 0x10cc <DIO_voidSetPinDirection+0x2c>
    10ca:	51 c0       	rjmp	.+162    	; 0x116e <DIO_voidSetPinDirection+0xce>
    10cc:	2d 81       	ldd	r18, Y+5	; 0x05
    10ce:	3e 81       	ldd	r19, Y+6	; 0x06
    10d0:	24 30       	cpi	r18, 0x04	; 4
    10d2:	31 05       	cpc	r19, r1
    10d4:	7c f4       	brge	.+30     	; 0x10f4 <DIO_voidSetPinDirection+0x54>
    10d6:	8d 81       	ldd	r24, Y+5	; 0x05
    10d8:	9e 81       	ldd	r25, Y+6	; 0x06
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	91 05       	cpc	r25, r1
    10de:	71 f1       	breq	.+92     	; 0x113c <DIO_voidSetPinDirection+0x9c>
    10e0:	2d 81       	ldd	r18, Y+5	; 0x05
    10e2:	3e 81       	ldd	r19, Y+6	; 0x06
    10e4:	22 30       	cpi	r18, 0x02	; 2
    10e6:	31 05       	cpc	r19, r1
    10e8:	ac f5       	brge	.+106    	; 0x1154 <DIO_voidSetPinDirection+0xb4>
    10ea:	8d 81       	ldd	r24, Y+5	; 0x05
    10ec:	9e 81       	ldd	r25, Y+6	; 0x06
    10ee:	00 97       	sbiw	r24, 0x00	; 0
    10f0:	d1 f0       	breq	.+52     	; 0x1126 <DIO_voidSetPinDirection+0x86>
    10f2:	81 c0       	rjmp	.+258    	; 0x11f6 <DIO_voidSetPinDirection+0x156>
    10f4:	2d 81       	ldd	r18, Y+5	; 0x05
    10f6:	3e 81       	ldd	r19, Y+6	; 0x06
    10f8:	25 30       	cpi	r18, 0x05	; 5
    10fa:	31 05       	cpc	r19, r1
    10fc:	09 f4       	brne	.+2      	; 0x1100 <DIO_voidSetPinDirection+0x60>
    10fe:	52 c0       	rjmp	.+164    	; 0x11a4 <DIO_voidSetPinDirection+0x104>
    1100:	8d 81       	ldd	r24, Y+5	; 0x05
    1102:	9e 81       	ldd	r25, Y+6	; 0x06
    1104:	85 30       	cpi	r24, 0x05	; 5
    1106:	91 05       	cpc	r25, r1
    1108:	0c f4       	brge	.+2      	; 0x110c <DIO_voidSetPinDirection+0x6c>
    110a:	3f c0       	rjmp	.+126    	; 0x118a <DIO_voidSetPinDirection+0xea>
    110c:	2d 81       	ldd	r18, Y+5	; 0x05
    110e:	3e 81       	ldd	r19, Y+6	; 0x06
    1110:	26 30       	cpi	r18, 0x06	; 6
    1112:	31 05       	cpc	r19, r1
    1114:	09 f4       	brne	.+2      	; 0x1118 <DIO_voidSetPinDirection+0x78>
    1116:	54 c0       	rjmp	.+168    	; 0x11c0 <DIO_voidSetPinDirection+0x120>
    1118:	8d 81       	ldd	r24, Y+5	; 0x05
    111a:	9e 81       	ldd	r25, Y+6	; 0x06
    111c:	87 30       	cpi	r24, 0x07	; 7
    111e:	91 05       	cpc	r25, r1
    1120:	09 f4       	brne	.+2      	; 0x1124 <DIO_voidSetPinDirection+0x84>
    1122:	5d c0       	rjmp	.+186    	; 0x11de <DIO_voidSetPinDirection+0x13e>
    1124:	68 c0       	rjmp	.+208    	; 0x11f6 <DIO_voidSetPinDirection+0x156>
	{
	case 0:
		ptr->DDR.Bitfield.B0=Copy_u8Direction;
    1126:	8c 81       	ldd	r24, Y+4	; 0x04
    1128:	81 70       	andi	r24, 0x01	; 1
    112a:	e9 81       	ldd	r30, Y+1	; 0x01
    112c:	fa 81       	ldd	r31, Y+2	; 0x02
    112e:	98 2f       	mov	r25, r24
    1130:	91 70       	andi	r25, 0x01	; 1
    1132:	81 81       	ldd	r24, Z+1	; 0x01
    1134:	8e 7f       	andi	r24, 0xFE	; 254
    1136:	89 2b       	or	r24, r25
    1138:	81 83       	std	Z+1, r24	; 0x01
    113a:	5d c0       	rjmp	.+186    	; 0x11f6 <DIO_voidSetPinDirection+0x156>
		break;
	case 1:
		ptr->DDR.Bitfield.B1=Copy_u8Direction;
    113c:	8c 81       	ldd	r24, Y+4	; 0x04
    113e:	81 70       	andi	r24, 0x01	; 1
    1140:	e9 81       	ldd	r30, Y+1	; 0x01
    1142:	fa 81       	ldd	r31, Y+2	; 0x02
    1144:	81 70       	andi	r24, 0x01	; 1
    1146:	98 2f       	mov	r25, r24
    1148:	99 0f       	add	r25, r25
    114a:	81 81       	ldd	r24, Z+1	; 0x01
    114c:	8d 7f       	andi	r24, 0xFD	; 253
    114e:	89 2b       	or	r24, r25
    1150:	81 83       	std	Z+1, r24	; 0x01
    1152:	51 c0       	rjmp	.+162    	; 0x11f6 <DIO_voidSetPinDirection+0x156>
		break;
	case 2:
		ptr->DDR.Bitfield.B2=Copy_u8Direction;
    1154:	8c 81       	ldd	r24, Y+4	; 0x04
    1156:	81 70       	andi	r24, 0x01	; 1
    1158:	e9 81       	ldd	r30, Y+1	; 0x01
    115a:	fa 81       	ldd	r31, Y+2	; 0x02
    115c:	81 70       	andi	r24, 0x01	; 1
    115e:	98 2f       	mov	r25, r24
    1160:	99 0f       	add	r25, r25
    1162:	99 0f       	add	r25, r25
    1164:	81 81       	ldd	r24, Z+1	; 0x01
    1166:	8b 7f       	andi	r24, 0xFB	; 251
    1168:	89 2b       	or	r24, r25
    116a:	81 83       	std	Z+1, r24	; 0x01
    116c:	44 c0       	rjmp	.+136    	; 0x11f6 <DIO_voidSetPinDirection+0x156>
		break;
	case 3:
		ptr->DDR.Bitfield.B3=Copy_u8Direction;
    116e:	8c 81       	ldd	r24, Y+4	; 0x04
    1170:	81 70       	andi	r24, 0x01	; 1
    1172:	e9 81       	ldd	r30, Y+1	; 0x01
    1174:	fa 81       	ldd	r31, Y+2	; 0x02
    1176:	81 70       	andi	r24, 0x01	; 1
    1178:	98 2f       	mov	r25, r24
    117a:	99 0f       	add	r25, r25
    117c:	99 0f       	add	r25, r25
    117e:	99 0f       	add	r25, r25
    1180:	81 81       	ldd	r24, Z+1	; 0x01
    1182:	87 7f       	andi	r24, 0xF7	; 247
    1184:	89 2b       	or	r24, r25
    1186:	81 83       	std	Z+1, r24	; 0x01
    1188:	36 c0       	rjmp	.+108    	; 0x11f6 <DIO_voidSetPinDirection+0x156>
		break;
	case 4:
		ptr->DDR.Bitfield.B4=Copy_u8Direction;
    118a:	8c 81       	ldd	r24, Y+4	; 0x04
    118c:	81 70       	andi	r24, 0x01	; 1
    118e:	e9 81       	ldd	r30, Y+1	; 0x01
    1190:	fa 81       	ldd	r31, Y+2	; 0x02
    1192:	81 70       	andi	r24, 0x01	; 1
    1194:	98 2f       	mov	r25, r24
    1196:	92 95       	swap	r25
    1198:	90 7f       	andi	r25, 0xF0	; 240
    119a:	81 81       	ldd	r24, Z+1	; 0x01
    119c:	8f 7e       	andi	r24, 0xEF	; 239
    119e:	89 2b       	or	r24, r25
    11a0:	81 83       	std	Z+1, r24	; 0x01
    11a2:	29 c0       	rjmp	.+82     	; 0x11f6 <DIO_voidSetPinDirection+0x156>
		break;
	case 5:
		ptr->DDR.Bitfield.B5=Copy_u8Direction;
    11a4:	8c 81       	ldd	r24, Y+4	; 0x04
    11a6:	81 70       	andi	r24, 0x01	; 1
    11a8:	e9 81       	ldd	r30, Y+1	; 0x01
    11aa:	fa 81       	ldd	r31, Y+2	; 0x02
    11ac:	81 70       	andi	r24, 0x01	; 1
    11ae:	98 2f       	mov	r25, r24
    11b0:	92 95       	swap	r25
    11b2:	99 0f       	add	r25, r25
    11b4:	90 7e       	andi	r25, 0xE0	; 224
    11b6:	81 81       	ldd	r24, Z+1	; 0x01
    11b8:	8f 7d       	andi	r24, 0xDF	; 223
    11ba:	89 2b       	or	r24, r25
    11bc:	81 83       	std	Z+1, r24	; 0x01
    11be:	1b c0       	rjmp	.+54     	; 0x11f6 <DIO_voidSetPinDirection+0x156>
		break;
	case 6:
		ptr->DDR.Bitfield.B6=Copy_u8Direction;
    11c0:	8c 81       	ldd	r24, Y+4	; 0x04
    11c2:	81 70       	andi	r24, 0x01	; 1
    11c4:	e9 81       	ldd	r30, Y+1	; 0x01
    11c6:	fa 81       	ldd	r31, Y+2	; 0x02
    11c8:	81 70       	andi	r24, 0x01	; 1
    11ca:	98 2f       	mov	r25, r24
    11cc:	92 95       	swap	r25
    11ce:	99 0f       	add	r25, r25
    11d0:	99 0f       	add	r25, r25
    11d2:	90 7c       	andi	r25, 0xC0	; 192
    11d4:	81 81       	ldd	r24, Z+1	; 0x01
    11d6:	8f 7b       	andi	r24, 0xBF	; 191
    11d8:	89 2b       	or	r24, r25
    11da:	81 83       	std	Z+1, r24	; 0x01
    11dc:	0c c0       	rjmp	.+24     	; 0x11f6 <DIO_voidSetPinDirection+0x156>
		break;
	case 7:
		ptr->DDR.Bitfield.B7=Copy_u8Direction;
    11de:	8c 81       	ldd	r24, Y+4	; 0x04
    11e0:	81 70       	andi	r24, 0x01	; 1
    11e2:	e9 81       	ldd	r30, Y+1	; 0x01
    11e4:	fa 81       	ldd	r31, Y+2	; 0x02
    11e6:	98 2f       	mov	r25, r24
    11e8:	97 95       	ror	r25
    11ea:	99 27       	eor	r25, r25
    11ec:	97 95       	ror	r25
    11ee:	81 81       	ldd	r24, Z+1	; 0x01
    11f0:	8f 77       	andi	r24, 0x7F	; 127
    11f2:	89 2b       	or	r24, r25
    11f4:	81 83       	std	Z+1, r24	; 0x01
		break;

	}
}
    11f6:	26 96       	adiw	r28, 0x06	; 6
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	08 95       	ret

00001208 <DIO_voidSetPinValue>:
 *@param [in] 			-Copy_u8Value: Pin Value
 * @retval 			-none
 * Note				-none
 */
void DIO_voidSetPinValue(Port_Def* ptr,Pin_ID_t Copy_u8PinId, PIN_VALUE_t Copy_u8Value)
{
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	00 d0       	rcall	.+0      	; 0x120e <DIO_voidSetPinValue+0x6>
    120e:	00 d0       	rcall	.+0      	; 0x1210 <DIO_voidSetPinValue+0x8>
    1210:	00 d0       	rcall	.+0      	; 0x1212 <DIO_voidSetPinValue+0xa>
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	9a 83       	std	Y+2, r25	; 0x02
    1218:	89 83       	std	Y+1, r24	; 0x01
    121a:	6b 83       	std	Y+3, r22	; 0x03
    121c:	4c 83       	std	Y+4, r20	; 0x04

	switch (Copy_u8PinId)
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	3e 83       	std	Y+6, r19	; 0x06
    1226:	2d 83       	std	Y+5, r18	; 0x05
    1228:	8d 81       	ldd	r24, Y+5	; 0x05
    122a:	9e 81       	ldd	r25, Y+6	; 0x06
    122c:	83 30       	cpi	r24, 0x03	; 3
    122e:	91 05       	cpc	r25, r1
    1230:	09 f4       	brne	.+2      	; 0x1234 <DIO_voidSetPinValue+0x2c>
    1232:	51 c0       	rjmp	.+162    	; 0x12d6 <DIO_voidSetPinValue+0xce>
    1234:	2d 81       	ldd	r18, Y+5	; 0x05
    1236:	3e 81       	ldd	r19, Y+6	; 0x06
    1238:	24 30       	cpi	r18, 0x04	; 4
    123a:	31 05       	cpc	r19, r1
    123c:	7c f4       	brge	.+30     	; 0x125c <DIO_voidSetPinValue+0x54>
    123e:	8d 81       	ldd	r24, Y+5	; 0x05
    1240:	9e 81       	ldd	r25, Y+6	; 0x06
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	91 05       	cpc	r25, r1
    1246:	71 f1       	breq	.+92     	; 0x12a4 <DIO_voidSetPinValue+0x9c>
    1248:	2d 81       	ldd	r18, Y+5	; 0x05
    124a:	3e 81       	ldd	r19, Y+6	; 0x06
    124c:	22 30       	cpi	r18, 0x02	; 2
    124e:	31 05       	cpc	r19, r1
    1250:	ac f5       	brge	.+106    	; 0x12bc <DIO_voidSetPinValue+0xb4>
    1252:	8d 81       	ldd	r24, Y+5	; 0x05
    1254:	9e 81       	ldd	r25, Y+6	; 0x06
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	d1 f0       	breq	.+52     	; 0x128e <DIO_voidSetPinValue+0x86>
    125a:	81 c0       	rjmp	.+258    	; 0x135e <DIO_voidSetPinValue+0x156>
    125c:	2d 81       	ldd	r18, Y+5	; 0x05
    125e:	3e 81       	ldd	r19, Y+6	; 0x06
    1260:	25 30       	cpi	r18, 0x05	; 5
    1262:	31 05       	cpc	r19, r1
    1264:	09 f4       	brne	.+2      	; 0x1268 <DIO_voidSetPinValue+0x60>
    1266:	52 c0       	rjmp	.+164    	; 0x130c <DIO_voidSetPinValue+0x104>
    1268:	8d 81       	ldd	r24, Y+5	; 0x05
    126a:	9e 81       	ldd	r25, Y+6	; 0x06
    126c:	85 30       	cpi	r24, 0x05	; 5
    126e:	91 05       	cpc	r25, r1
    1270:	0c f4       	brge	.+2      	; 0x1274 <DIO_voidSetPinValue+0x6c>
    1272:	3f c0       	rjmp	.+126    	; 0x12f2 <DIO_voidSetPinValue+0xea>
    1274:	2d 81       	ldd	r18, Y+5	; 0x05
    1276:	3e 81       	ldd	r19, Y+6	; 0x06
    1278:	26 30       	cpi	r18, 0x06	; 6
    127a:	31 05       	cpc	r19, r1
    127c:	09 f4       	brne	.+2      	; 0x1280 <DIO_voidSetPinValue+0x78>
    127e:	54 c0       	rjmp	.+168    	; 0x1328 <DIO_voidSetPinValue+0x120>
    1280:	8d 81       	ldd	r24, Y+5	; 0x05
    1282:	9e 81       	ldd	r25, Y+6	; 0x06
    1284:	87 30       	cpi	r24, 0x07	; 7
    1286:	91 05       	cpc	r25, r1
    1288:	09 f4       	brne	.+2      	; 0x128c <DIO_voidSetPinValue+0x84>
    128a:	5d c0       	rjmp	.+186    	; 0x1346 <DIO_voidSetPinValue+0x13e>
    128c:	68 c0       	rjmp	.+208    	; 0x135e <DIO_voidSetPinValue+0x156>
	{
	case 0:
		ptr->PORT.Bitfield.B0=Copy_u8Value;
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	81 70       	andi	r24, 0x01	; 1
    1292:	e9 81       	ldd	r30, Y+1	; 0x01
    1294:	fa 81       	ldd	r31, Y+2	; 0x02
    1296:	98 2f       	mov	r25, r24
    1298:	91 70       	andi	r25, 0x01	; 1
    129a:	82 81       	ldd	r24, Z+2	; 0x02
    129c:	8e 7f       	andi	r24, 0xFE	; 254
    129e:	89 2b       	or	r24, r25
    12a0:	82 83       	std	Z+2, r24	; 0x02
    12a2:	5d c0       	rjmp	.+186    	; 0x135e <DIO_voidSetPinValue+0x156>
		break;
	case 1:
		ptr->PORT.Bitfield.B1=Copy_u8Value;
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	81 70       	andi	r24, 0x01	; 1
    12a8:	e9 81       	ldd	r30, Y+1	; 0x01
    12aa:	fa 81       	ldd	r31, Y+2	; 0x02
    12ac:	81 70       	andi	r24, 0x01	; 1
    12ae:	98 2f       	mov	r25, r24
    12b0:	99 0f       	add	r25, r25
    12b2:	82 81       	ldd	r24, Z+2	; 0x02
    12b4:	8d 7f       	andi	r24, 0xFD	; 253
    12b6:	89 2b       	or	r24, r25
    12b8:	82 83       	std	Z+2, r24	; 0x02
    12ba:	51 c0       	rjmp	.+162    	; 0x135e <DIO_voidSetPinValue+0x156>
		break;
	case 2:
		ptr->PORT.Bitfield.B2=Copy_u8Value;
    12bc:	8c 81       	ldd	r24, Y+4	; 0x04
    12be:	81 70       	andi	r24, 0x01	; 1
    12c0:	e9 81       	ldd	r30, Y+1	; 0x01
    12c2:	fa 81       	ldd	r31, Y+2	; 0x02
    12c4:	81 70       	andi	r24, 0x01	; 1
    12c6:	98 2f       	mov	r25, r24
    12c8:	99 0f       	add	r25, r25
    12ca:	99 0f       	add	r25, r25
    12cc:	82 81       	ldd	r24, Z+2	; 0x02
    12ce:	8b 7f       	andi	r24, 0xFB	; 251
    12d0:	89 2b       	or	r24, r25
    12d2:	82 83       	std	Z+2, r24	; 0x02
    12d4:	44 c0       	rjmp	.+136    	; 0x135e <DIO_voidSetPinValue+0x156>
		break;
	case 3:
		ptr->PORT.Bitfield.B3=Copy_u8Value;
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	81 70       	andi	r24, 0x01	; 1
    12da:	e9 81       	ldd	r30, Y+1	; 0x01
    12dc:	fa 81       	ldd	r31, Y+2	; 0x02
    12de:	81 70       	andi	r24, 0x01	; 1
    12e0:	98 2f       	mov	r25, r24
    12e2:	99 0f       	add	r25, r25
    12e4:	99 0f       	add	r25, r25
    12e6:	99 0f       	add	r25, r25
    12e8:	82 81       	ldd	r24, Z+2	; 0x02
    12ea:	87 7f       	andi	r24, 0xF7	; 247
    12ec:	89 2b       	or	r24, r25
    12ee:	82 83       	std	Z+2, r24	; 0x02
    12f0:	36 c0       	rjmp	.+108    	; 0x135e <DIO_voidSetPinValue+0x156>
		break;
	case 4:
		ptr->PORT.Bitfield.B4=Copy_u8Value;
    12f2:	8c 81       	ldd	r24, Y+4	; 0x04
    12f4:	81 70       	andi	r24, 0x01	; 1
    12f6:	e9 81       	ldd	r30, Y+1	; 0x01
    12f8:	fa 81       	ldd	r31, Y+2	; 0x02
    12fa:	81 70       	andi	r24, 0x01	; 1
    12fc:	98 2f       	mov	r25, r24
    12fe:	92 95       	swap	r25
    1300:	90 7f       	andi	r25, 0xF0	; 240
    1302:	82 81       	ldd	r24, Z+2	; 0x02
    1304:	8f 7e       	andi	r24, 0xEF	; 239
    1306:	89 2b       	or	r24, r25
    1308:	82 83       	std	Z+2, r24	; 0x02
    130a:	29 c0       	rjmp	.+82     	; 0x135e <DIO_voidSetPinValue+0x156>
		break;
	case 5:
		ptr->PORT.Bitfield.B5=Copy_u8Value;
    130c:	8c 81       	ldd	r24, Y+4	; 0x04
    130e:	81 70       	andi	r24, 0x01	; 1
    1310:	e9 81       	ldd	r30, Y+1	; 0x01
    1312:	fa 81       	ldd	r31, Y+2	; 0x02
    1314:	81 70       	andi	r24, 0x01	; 1
    1316:	98 2f       	mov	r25, r24
    1318:	92 95       	swap	r25
    131a:	99 0f       	add	r25, r25
    131c:	90 7e       	andi	r25, 0xE0	; 224
    131e:	82 81       	ldd	r24, Z+2	; 0x02
    1320:	8f 7d       	andi	r24, 0xDF	; 223
    1322:	89 2b       	or	r24, r25
    1324:	82 83       	std	Z+2, r24	; 0x02
    1326:	1b c0       	rjmp	.+54     	; 0x135e <DIO_voidSetPinValue+0x156>
		break;
	case 6:
		ptr->PORT.Bitfield.B6=Copy_u8Value;
    1328:	8c 81       	ldd	r24, Y+4	; 0x04
    132a:	81 70       	andi	r24, 0x01	; 1
    132c:	e9 81       	ldd	r30, Y+1	; 0x01
    132e:	fa 81       	ldd	r31, Y+2	; 0x02
    1330:	81 70       	andi	r24, 0x01	; 1
    1332:	98 2f       	mov	r25, r24
    1334:	92 95       	swap	r25
    1336:	99 0f       	add	r25, r25
    1338:	99 0f       	add	r25, r25
    133a:	90 7c       	andi	r25, 0xC0	; 192
    133c:	82 81       	ldd	r24, Z+2	; 0x02
    133e:	8f 7b       	andi	r24, 0xBF	; 191
    1340:	89 2b       	or	r24, r25
    1342:	82 83       	std	Z+2, r24	; 0x02
    1344:	0c c0       	rjmp	.+24     	; 0x135e <DIO_voidSetPinValue+0x156>
		break;
	case 7:
		ptr->PORT.Bitfield.B7=Copy_u8Value;
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	81 70       	andi	r24, 0x01	; 1
    134a:	e9 81       	ldd	r30, Y+1	; 0x01
    134c:	fa 81       	ldd	r31, Y+2	; 0x02
    134e:	98 2f       	mov	r25, r24
    1350:	97 95       	ror	r25
    1352:	99 27       	eor	r25, r25
    1354:	97 95       	ror	r25
    1356:	82 81       	ldd	r24, Z+2	; 0x02
    1358:	8f 77       	andi	r24, 0x7F	; 127
    135a:	89 2b       	or	r24, r25
    135c:	82 83       	std	Z+2, r24	; 0x02
		break;

	}
}
    135e:	26 96       	adiw	r28, 0x06	; 6
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	f8 94       	cli
    1364:	de bf       	out	0x3e, r29	; 62
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	cd bf       	out	0x3d, r28	; 61
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <DIO_voidGetPinValue>:
 * @retval
 * Note			-none
 */

uint8 DIO_voidGetPinValue(Port_Def* ptr,Pin_ID_t Copy_u8PinId)
{
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	00 d0       	rcall	.+0      	; 0x1376 <DIO_voidGetPinValue+0x6>
    1376:	00 d0       	rcall	.+0      	; 0x1378 <DIO_voidGetPinValue+0x8>
    1378:	00 d0       	rcall	.+0      	; 0x137a <DIO_voidGetPinValue+0xa>
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	9b 83       	std	Y+3, r25	; 0x03
    1380:	8a 83       	std	Y+2, r24	; 0x02
    1382:	6c 83       	std	Y+4, r22	; 0x04
	uint8 value=0;
    1384:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8PinId)
    1386:	8c 81       	ldd	r24, Y+4	; 0x04
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	3e 83       	std	Y+6, r19	; 0x06
    138e:	2d 83       	std	Y+5, r18	; 0x05
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	9e 81       	ldd	r25, Y+6	; 0x06
    1394:	83 30       	cpi	r24, 0x03	; 3
    1396:	91 05       	cpc	r25, r1
    1398:	09 f4       	brne	.+2      	; 0x139c <DIO_voidGetPinValue+0x2c>
    139a:	3e c0       	rjmp	.+124    	; 0x1418 <DIO_voidGetPinValue+0xa8>
    139c:	2d 81       	ldd	r18, Y+5	; 0x05
    139e:	3e 81       	ldd	r19, Y+6	; 0x06
    13a0:	24 30       	cpi	r18, 0x04	; 4
    13a2:	31 05       	cpc	r19, r1
    13a4:	7c f4       	brge	.+30     	; 0x13c4 <DIO_voidGetPinValue+0x54>
    13a6:	8d 81       	ldd	r24, Y+5	; 0x05
    13a8:	9e 81       	ldd	r25, Y+6	; 0x06
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	91 05       	cpc	r25, r1
    13ae:	29 f1       	breq	.+74     	; 0x13fa <DIO_voidGetPinValue+0x8a>
    13b0:	2d 81       	ldd	r18, Y+5	; 0x05
    13b2:	3e 81       	ldd	r19, Y+6	; 0x06
    13b4:	22 30       	cpi	r18, 0x02	; 2
    13b6:	31 05       	cpc	r19, r1
    13b8:	3c f5       	brge	.+78     	; 0x1408 <DIO_voidGetPinValue+0x98>
    13ba:	8d 81       	ldd	r24, Y+5	; 0x05
    13bc:	9e 81       	ldd	r25, Y+6	; 0x06
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	b1 f0       	breq	.+44     	; 0x13ee <DIO_voidGetPinValue+0x7e>
    13c2:	55 c0       	rjmp	.+170    	; 0x146e <DIO_voidGetPinValue+0xfe>
    13c4:	2d 81       	ldd	r18, Y+5	; 0x05
    13c6:	3e 81       	ldd	r19, Y+6	; 0x06
    13c8:	25 30       	cpi	r18, 0x05	; 5
    13ca:	31 05       	cpc	r19, r1
    13cc:	b1 f1       	breq	.+108    	; 0x143a <DIO_voidGetPinValue+0xca>
    13ce:	8d 81       	ldd	r24, Y+5	; 0x05
    13d0:	9e 81       	ldd	r25, Y+6	; 0x06
    13d2:	85 30       	cpi	r24, 0x05	; 5
    13d4:	91 05       	cpc	r25, r1
    13d6:	4c f1       	brlt	.+82     	; 0x142a <DIO_voidGetPinValue+0xba>
    13d8:	2d 81       	ldd	r18, Y+5	; 0x05
    13da:	3e 81       	ldd	r19, Y+6	; 0x06
    13dc:	26 30       	cpi	r18, 0x06	; 6
    13de:	31 05       	cpc	r19, r1
    13e0:	a9 f1       	breq	.+106    	; 0x144c <DIO_voidGetPinValue+0xdc>
    13e2:	8d 81       	ldd	r24, Y+5	; 0x05
    13e4:	9e 81       	ldd	r25, Y+6	; 0x06
    13e6:	87 30       	cpi	r24, 0x07	; 7
    13e8:	91 05       	cpc	r25, r1
    13ea:	d1 f1       	breq	.+116    	; 0x1460 <DIO_voidGetPinValue+0xf0>
    13ec:	40 c0       	rjmp	.+128    	; 0x146e <DIO_voidGetPinValue+0xfe>
	{
	case 0:
		value=ptr->Pin.Bitfield.B0;
    13ee:	ea 81       	ldd	r30, Y+2	; 0x02
    13f0:	fb 81       	ldd	r31, Y+3	; 0x03
    13f2:	80 81       	ld	r24, Z
    13f4:	81 70       	andi	r24, 0x01	; 1
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	3a c0       	rjmp	.+116    	; 0x146e <DIO_voidGetPinValue+0xfe>
		break;
	case 1:
		value=ptr->Pin.Bitfield.B1;
    13fa:	ea 81       	ldd	r30, Y+2	; 0x02
    13fc:	fb 81       	ldd	r31, Y+3	; 0x03
    13fe:	80 81       	ld	r24, Z
    1400:	86 95       	lsr	r24
    1402:	81 70       	andi	r24, 0x01	; 1
    1404:	89 83       	std	Y+1, r24	; 0x01
    1406:	33 c0       	rjmp	.+102    	; 0x146e <DIO_voidGetPinValue+0xfe>
		break;
	case 2:
		value=ptr->Pin.Bitfield.B2;
    1408:	ea 81       	ldd	r30, Y+2	; 0x02
    140a:	fb 81       	ldd	r31, Y+3	; 0x03
    140c:	80 81       	ld	r24, Z
    140e:	86 95       	lsr	r24
    1410:	86 95       	lsr	r24
    1412:	81 70       	andi	r24, 0x01	; 1
    1414:	89 83       	std	Y+1, r24	; 0x01
    1416:	2b c0       	rjmp	.+86     	; 0x146e <DIO_voidGetPinValue+0xfe>
		break;
	case 3:
		value=ptr->Pin.Bitfield.B3;
    1418:	ea 81       	ldd	r30, Y+2	; 0x02
    141a:	fb 81       	ldd	r31, Y+3	; 0x03
    141c:	80 81       	ld	r24, Z
    141e:	86 95       	lsr	r24
    1420:	86 95       	lsr	r24
    1422:	86 95       	lsr	r24
    1424:	81 70       	andi	r24, 0x01	; 1
    1426:	89 83       	std	Y+1, r24	; 0x01
    1428:	22 c0       	rjmp	.+68     	; 0x146e <DIO_voidGetPinValue+0xfe>
		break;
	case 4:
		value=ptr->Pin.Bitfield.B4;
    142a:	ea 81       	ldd	r30, Y+2	; 0x02
    142c:	fb 81       	ldd	r31, Y+3	; 0x03
    142e:	80 81       	ld	r24, Z
    1430:	82 95       	swap	r24
    1432:	8f 70       	andi	r24, 0x0F	; 15
    1434:	81 70       	andi	r24, 0x01	; 1
    1436:	89 83       	std	Y+1, r24	; 0x01
    1438:	1a c0       	rjmp	.+52     	; 0x146e <DIO_voidGetPinValue+0xfe>
		break;
	case 5:
		value=ptr->Pin.Bitfield.B5;
    143a:	ea 81       	ldd	r30, Y+2	; 0x02
    143c:	fb 81       	ldd	r31, Y+3	; 0x03
    143e:	80 81       	ld	r24, Z
    1440:	82 95       	swap	r24
    1442:	86 95       	lsr	r24
    1444:	87 70       	andi	r24, 0x07	; 7
    1446:	81 70       	andi	r24, 0x01	; 1
    1448:	89 83       	std	Y+1, r24	; 0x01
    144a:	11 c0       	rjmp	.+34     	; 0x146e <DIO_voidGetPinValue+0xfe>
		break;
	case 6:
		value=ptr->Pin.Bitfield.B6;
    144c:	ea 81       	ldd	r30, Y+2	; 0x02
    144e:	fb 81       	ldd	r31, Y+3	; 0x03
    1450:	80 81       	ld	r24, Z
    1452:	82 95       	swap	r24
    1454:	86 95       	lsr	r24
    1456:	86 95       	lsr	r24
    1458:	83 70       	andi	r24, 0x03	; 3
    145a:	81 70       	andi	r24, 0x01	; 1
    145c:	89 83       	std	Y+1, r24	; 0x01
    145e:	07 c0       	rjmp	.+14     	; 0x146e <DIO_voidGetPinValue+0xfe>
		break;
	case 7:
		value=ptr->Pin.Bitfield.B7;
    1460:	ea 81       	ldd	r30, Y+2	; 0x02
    1462:	fb 81       	ldd	r31, Y+3	; 0x03
    1464:	80 81       	ld	r24, Z
    1466:	88 1f       	adc	r24, r24
    1468:	88 27       	eor	r24, r24
    146a:	88 1f       	adc	r24, r24
    146c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return value;
    146e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1470:	26 96       	adiw	r28, 0x06	; 6
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	f8 94       	cli
    1476:	de bf       	out	0x3e, r29	; 62
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	cd bf       	out	0x3d, r28	; 61
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <DIO_voidSetPortDirection>:
 *@param [in] 			-Copy_u8Direction:  specifies the port bit to Make direction. Set by @ref GPIO_PORT_Value
 * @retval 			-none
 * Note				-none
 */
void DIO_voidSetPortDirection(Port_Def* ptr,Port_Direction_t Copy_u8Direction)
{
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	00 d0       	rcall	.+0      	; 0x1488 <DIO_voidSetPortDirection+0x6>
    1488:	0f 92       	push	r0
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	9a 83       	std	Y+2, r25	; 0x02
    1490:	89 83       	std	Y+1, r24	; 0x01
    1492:	6b 83       	std	Y+3, r22	; 0x03
	ptr->DDR.Reg=Copy_u8Direction;
    1494:	e9 81       	ldd	r30, Y+1	; 0x01
    1496:	fa 81       	ldd	r31, Y+2	; 0x02
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	81 83       	std	Z+1, r24	; 0x01
}
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	08 95       	ret

000014a8 <DIO_voidSetPortValue>:
 *
 * @retval 				-none
 * Note					-none
 */
void DIO_voidSetPortValue(Port_Def* ptr,PORT_VALUE_t Copy_u8Value)
{
    14a8:	df 93       	push	r29
    14aa:	cf 93       	push	r28
    14ac:	00 d0       	rcall	.+0      	; 0x14ae <DIO_voidSetPortValue+0x6>
    14ae:	0f 92       	push	r0
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    14b4:	9a 83       	std	Y+2, r25	; 0x02
    14b6:	89 83       	std	Y+1, r24	; 0x01
    14b8:	6b 83       	std	Y+3, r22	; 0x03
	ptr->PORT.Reg=Copy_u8Value;
    14ba:	e9 81       	ldd	r30, Y+1	; 0x01
    14bc:	fa 81       	ldd	r31, Y+2	; 0x02
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	82 83       	std	Z+2, r24	; 0x02
}
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <DIO_voidGetPortValue>:



uint8 DIO_voidGetPortValue(Port_Def* ptr)
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <DIO_voidGetPortValue+0x6>
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	9a 83       	std	Y+2, r25	; 0x02
    14da:	89 83       	std	Y+1, r24	; 0x01
	return ptr->Pin.Reg;
    14dc:	e9 81       	ldd	r30, Y+1	; 0x01
    14de:	fa 81       	ldd	r31, Y+2	; 0x02
    14e0:	80 81       	ld	r24, Z
}
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <MCAL_EXTI_INIT>:

void (* EXT_INT_POINTERS [3]) (void) ;


void MCAL_EXTI_INIT(EXTI_CONFIG_t* EXTI_Config)
{
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <MCAL_EXTI_INIT+0x6>
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <MCAL_EXTI_INIT+0x8>
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	9a 83       	std	Y+2, r25	; 0x02
    14fa:	89 83       	std	Y+1, r24	; 0x01
	ENABLE_GIC();
    14fc:	0e 94 18 0c 	call	0x1830	; 0x1830 <ENABLE_GIC>


	SET_BIT(EXTI_BASE->GICR_Reg.Reg, EXTI_Config->external_number);
    1500:	a4 e5       	ldi	r26, 0x54	; 84
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e4 e5       	ldi	r30, 0x54	; 84
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	87 81       	ldd	r24, Z+7	; 0x07
    150a:	48 2f       	mov	r20, r24
    150c:	e9 81       	ldd	r30, Y+1	; 0x01
    150e:	fa 81       	ldd	r31, Y+2	; 0x02
    1510:	80 81       	ld	r24, Z
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <MCAL_EXTI_INIT+0x34>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	2a 95       	dec	r18
    1522:	e2 f7       	brpl	.-8      	; 0x151c <MCAL_EXTI_INIT+0x30>
    1524:	84 2b       	or	r24, r20
    1526:	17 96       	adiw	r26, 0x07	; 7
    1528:	8c 93       	st	X, r24
    152a:	17 97       	sbiw	r26, 0x07	; 7

	switch (EXTI_Config->external_number)
    152c:	e9 81       	ldd	r30, Y+1	; 0x01
    152e:	fa 81       	ldd	r31, Y+2	; 0x02
    1530:	80 81       	ld	r24, Z
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	3c 83       	std	Y+4, r19	; 0x04
    1538:	2b 83       	std	Y+3, r18	; 0x03
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	9c 81       	ldd	r25, Y+4	; 0x04
    153e:	86 30       	cpi	r24, 0x06	; 6
    1540:	91 05       	cpc	r25, r1
    1542:	61 f0       	breq	.+24     	; 0x155c <MCAL_EXTI_INIT+0x70>
    1544:	2b 81       	ldd	r18, Y+3	; 0x03
    1546:	3c 81       	ldd	r19, Y+4	; 0x04
    1548:	27 30       	cpi	r18, 0x07	; 7
    154a:	31 05       	cpc	r19, r1
    154c:	19 f1       	breq	.+70     	; 0x1594 <MCAL_EXTI_INIT+0xa8>
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	9c 81       	ldd	r25, Y+4	; 0x04
    1552:	85 30       	cpi	r24, 0x05	; 5
    1554:	91 05       	cpc	r25, r1
    1556:	09 f4       	brne	.+2      	; 0x155a <MCAL_EXTI_INIT+0x6e>
    1558:	41 c0       	rjmp	.+130    	; 0x15dc <MCAL_EXTI_INIT+0xf0>
    155a:	66 c0       	rjmp	.+204    	; 0x1628 <MCAL_EXTI_INIT+0x13c>
	{
	case EXTI_NUM_0:
		EXTI_BASE->MCUCR_Reg.Reg &= ~(INT0_MASK);
    155c:	a4 e5       	ldi	r26, 0x54	; 84
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e4 e5       	ldi	r30, 0x54	; 84
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	81 81       	ldd	r24, Z+1	; 0x01
    1566:	11 96       	adiw	r26, 0x01	; 1
    1568:	8c 93       	st	X, r24
		EXTI_BASE->MCUCR_Reg.Reg |= EXTI_Config->trigger_edge;
    156a:	a4 e5       	ldi	r26, 0x54	; 84
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e4 e5       	ldi	r30, 0x54	; 84
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	91 81       	ldd	r25, Z+1	; 0x01
    1574:	e9 81       	ldd	r30, Y+1	; 0x01
    1576:	fa 81       	ldd	r31, Y+2	; 0x02
    1578:	81 81       	ldd	r24, Z+1	; 0x01
    157a:	89 2b       	or	r24, r25
    157c:	11 96       	adiw	r26, 0x01	; 1
    157e:	8c 93       	st	X, r24
    1580:	11 97       	sbiw	r26, 0x01	; 1
		EXT_INT_POINTERS[0]  = EXTI_Config->P_IRQ_CallBack;
    1582:	e9 81       	ldd	r30, Y+1	; 0x01
    1584:	fa 81       	ldd	r31, Y+2	; 0x02
    1586:	82 81       	ldd	r24, Z+2	; 0x02
    1588:	93 81       	ldd	r25, Z+3	; 0x03
    158a:	90 93 93 01 	sts	0x0193, r25
    158e:	80 93 92 01 	sts	0x0192, r24
    1592:	4a c0       	rjmp	.+148    	; 0x1628 <MCAL_EXTI_INIT+0x13c>
		break;
	case EXTI_NUM_1:
		EXTI_BASE->MCUCR_Reg.Reg &= (INT1_MASK);
    1594:	a4 e5       	ldi	r26, 0x54	; 84
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e4 e5       	ldi	r30, 0x54	; 84
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	81 81       	ldd	r24, Z+1	; 0x01
    159e:	81 71       	andi	r24, 0x11	; 17
    15a0:	11 96       	adiw	r26, 0x01	; 1
    15a2:	8c 93       	st	X, r24
		EXTI_BASE->MCUCR_Reg.Reg |= (EXTI_Config->trigger_edge)<<2 ;
    15a4:	a4 e5       	ldi	r26, 0x54	; 84
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e4 e5       	ldi	r30, 0x54	; 84
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	81 81       	ldd	r24, Z+1	; 0x01
    15ae:	28 2f       	mov	r18, r24
    15b0:	e9 81       	ldd	r30, Y+1	; 0x01
    15b2:	fa 81       	ldd	r31, Y+2	; 0x02
    15b4:	81 81       	ldd	r24, Z+1	; 0x01
    15b6:	88 2f       	mov	r24, r24
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	82 2b       	or	r24, r18
    15c4:	11 96       	adiw	r26, 0x01	; 1
    15c6:	8c 93       	st	X, r24
    15c8:	11 97       	sbiw	r26, 0x01	; 1
		EXT_INT_POINTERS[1]  = EXTI_Config->P_IRQ_CallBack;
    15ca:	e9 81       	ldd	r30, Y+1	; 0x01
    15cc:	fa 81       	ldd	r31, Y+2	; 0x02
    15ce:	82 81       	ldd	r24, Z+2	; 0x02
    15d0:	93 81       	ldd	r25, Z+3	; 0x03
    15d2:	90 93 95 01 	sts	0x0195, r25
    15d6:	80 93 94 01 	sts	0x0194, r24
    15da:	26 c0       	rjmp	.+76     	; 0x1628 <MCAL_EXTI_INIT+0x13c>

		break;
	case EXTI_NUM_2:
		EXTI_BASE->MCUCSR_Reg.Reg &= (INT2_MASK);
    15dc:	a4 e5       	ldi	r26, 0x54	; 84
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e4 e5       	ldi	r30, 0x54	; 84
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	81 71       	andi	r24, 0x11	; 17
    15e8:	8c 93       	st	X, r24
		EXTI_BASE->MCUCSR_Reg.Reg |= (EXTI_Config->trigger_edge - 2)<<6;
    15ea:	a4 e5       	ldi	r26, 0x54	; 84
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e4 e5       	ldi	r30, 0x54	; 84
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	28 2f       	mov	r18, r24
    15f6:	e9 81       	ldd	r30, Y+1	; 0x01
    15f8:	fa 81       	ldd	r31, Y+2	; 0x02
    15fa:	81 81       	ldd	r24, Z+1	; 0x01
    15fc:	88 2f       	mov	r24, r24
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	02 97       	sbiw	r24, 0x02	; 2
    1602:	00 24       	eor	r0, r0
    1604:	96 95       	lsr	r25
    1606:	87 95       	ror	r24
    1608:	07 94       	ror	r0
    160a:	96 95       	lsr	r25
    160c:	87 95       	ror	r24
    160e:	07 94       	ror	r0
    1610:	98 2f       	mov	r25, r24
    1612:	80 2d       	mov	r24, r0
    1614:	82 2b       	or	r24, r18
    1616:	8c 93       	st	X, r24
		EXT_INT_POINTERS[2]  = EXTI_Config->P_IRQ_CallBack;
    1618:	e9 81       	ldd	r30, Y+1	; 0x01
    161a:	fa 81       	ldd	r31, Y+2	; 0x02
    161c:	82 81       	ldd	r24, Z+2	; 0x02
    161e:	93 81       	ldd	r25, Z+3	; 0x03
    1620:	90 93 97 01 	sts	0x0197, r25
    1624:	80 93 96 01 	sts	0x0196, r24
		break;

	}
}
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <MCAL_EXTI_GPIO_DeInit>:



void MCAL_EXTI_GPIO_DeInit (EXTI_CONFIG_t* EXTI_Config)
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	00 d0       	rcall	.+0      	; 0x163c <MCAL_EXTI_GPIO_DeInit+0x6>
    163c:	00 d0       	rcall	.+0      	; 0x163e <MCAL_EXTI_GPIO_DeInit+0x8>
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	9a 83       	std	Y+2, r25	; 0x02
    1644:	89 83       	std	Y+1, r24	; 0x01
	switch(EXTI_Config->external_number)
    1646:	e9 81       	ldd	r30, Y+1	; 0x01
    1648:	fa 81       	ldd	r31, Y+2	; 0x02
    164a:	80 81       	ld	r24, Z
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	3c 83       	std	Y+4, r19	; 0x04
    1652:	2b 83       	std	Y+3, r18	; 0x03
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	9c 81       	ldd	r25, Y+4	; 0x04
    1658:	86 30       	cpi	r24, 0x06	; 6
    165a:	91 05       	cpc	r25, r1
    165c:	59 f0       	breq	.+22     	; 0x1674 <MCAL_EXTI_GPIO_DeInit+0x3e>
    165e:	2b 81       	ldd	r18, Y+3	; 0x03
    1660:	3c 81       	ldd	r19, Y+4	; 0x04
    1662:	27 30       	cpi	r18, 0x07	; 7
    1664:	31 05       	cpc	r19, r1
    1666:	f9 f0       	breq	.+62     	; 0x16a6 <MCAL_EXTI_GPIO_DeInit+0x70>
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	9c 81       	ldd	r25, Y+4	; 0x04
    166c:	85 30       	cpi	r24, 0x05	; 5
    166e:	91 05       	cpc	r25, r1
    1670:	99 f1       	breq	.+102    	; 0x16d8 <MCAL_EXTI_GPIO_DeInit+0xa2>
    1672:	4a c0       	rjmp	.+148    	; 0x1708 <MCAL_EXTI_GPIO_DeInit+0xd2>
	{
	case EXTI_NUM_0:

		CLR_BIT(EXTI_BASE->GICR_Reg.Reg,EXTI_Config->external_number);
    1674:	a4 e5       	ldi	r26, 0x54	; 84
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e4 e5       	ldi	r30, 0x54	; 84
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	87 81       	ldd	r24, Z+7	; 0x07
    167e:	48 2f       	mov	r20, r24
    1680:	e9 81       	ldd	r30, Y+1	; 0x01
    1682:	fa 81       	ldd	r31, Y+2	; 0x02
    1684:	80 81       	ld	r24, Z
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	02 2e       	mov	r0, r18
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <MCAL_EXTI_GPIO_DeInit+0x60>
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	0a 94       	dec	r0
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <MCAL_EXTI_GPIO_DeInit+0x5c>
    169a:	80 95       	com	r24
    169c:	84 23       	and	r24, r20
    169e:	17 96       	adiw	r26, 0x07	; 7
    16a0:	8c 93       	st	X, r24
    16a2:	17 97       	sbiw	r26, 0x07	; 7
    16a4:	31 c0       	rjmp	.+98     	; 0x1708 <MCAL_EXTI_GPIO_DeInit+0xd2>
		break;
	case EXTI_NUM_1:

		CLR_BIT(EXTI_BASE->GICR_Reg.Reg,EXTI_Config->external_number);
    16a6:	a4 e5       	ldi	r26, 0x54	; 84
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e4 e5       	ldi	r30, 0x54	; 84
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	87 81       	ldd	r24, Z+7	; 0x07
    16b0:	48 2f       	mov	r20, r24
    16b2:	e9 81       	ldd	r30, Y+1	; 0x01
    16b4:	fa 81       	ldd	r31, Y+2	; 0x02
    16b6:	80 81       	ld	r24, Z
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 2e       	mov	r0, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <MCAL_EXTI_GPIO_DeInit+0x92>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	0a 94       	dec	r0
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <MCAL_EXTI_GPIO_DeInit+0x8e>
    16cc:	80 95       	com	r24
    16ce:	84 23       	and	r24, r20
    16d0:	17 96       	adiw	r26, 0x07	; 7
    16d2:	8c 93       	st	X, r24
    16d4:	17 97       	sbiw	r26, 0x07	; 7
    16d6:	18 c0       	rjmp	.+48     	; 0x1708 <MCAL_EXTI_GPIO_DeInit+0xd2>
		break;

	case EXTI_NUM_2:

		CLR_BIT(EXTI_BASE->GICR_Reg.Reg,EXTI_Config->external_number);
    16d8:	a4 e5       	ldi	r26, 0x54	; 84
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e4 e5       	ldi	r30, 0x54	; 84
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	87 81       	ldd	r24, Z+7	; 0x07
    16e2:	48 2f       	mov	r20, r24
    16e4:	e9 81       	ldd	r30, Y+1	; 0x01
    16e6:	fa 81       	ldd	r31, Y+2	; 0x02
    16e8:	80 81       	ld	r24, Z
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	02 2e       	mov	r0, r18
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <MCAL_EXTI_GPIO_DeInit+0xc4>
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	0a 94       	dec	r0
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <MCAL_EXTI_GPIO_DeInit+0xc0>
    16fe:	80 95       	com	r24
    1700:	84 23       	and	r24, r20
    1702:	17 96       	adiw	r26, 0x07	; 7
    1704:	8c 93       	st	X, r24
    1706:	17 97       	sbiw	r26, 0x07	; 7
		break;


	}
}
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	08 95       	ret

00001716 <__vector_1>:



void __vector_1 (void)
{
    1716:	1f 92       	push	r1
    1718:	0f 92       	push	r0
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	0f 92       	push	r0
    171e:	11 24       	eor	r1, r1
    1720:	2f 93       	push	r18
    1722:	3f 93       	push	r19
    1724:	4f 93       	push	r20
    1726:	5f 93       	push	r21
    1728:	6f 93       	push	r22
    172a:	7f 93       	push	r23
    172c:	8f 93       	push	r24
    172e:	9f 93       	push	r25
    1730:	af 93       	push	r26
    1732:	bf 93       	push	r27
    1734:	ef 93       	push	r30
    1736:	ff 93       	push	r31
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
	DISABLE_GIC();
    1740:	0e 94 26 0c 	call	0x184c	; 0x184c <DISABLE_GIC>
	EXT_INT_POINTERS[0]();
    1744:	e0 91 92 01 	lds	r30, 0x0192
    1748:	f0 91 93 01 	lds	r31, 0x0193
    174c:	09 95       	icall
}
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	ff 91       	pop	r31
    1754:	ef 91       	pop	r30
    1756:	bf 91       	pop	r27
    1758:	af 91       	pop	r26
    175a:	9f 91       	pop	r25
    175c:	8f 91       	pop	r24
    175e:	7f 91       	pop	r23
    1760:	6f 91       	pop	r22
    1762:	5f 91       	pop	r21
    1764:	4f 91       	pop	r20
    1766:	3f 91       	pop	r19
    1768:	2f 91       	pop	r18
    176a:	0f 90       	pop	r0
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	0f 90       	pop	r0
    1770:	1f 90       	pop	r1
    1772:	18 95       	reti

00001774 <__vector_2>:



void __vector_2 (void)
{
    1774:	1f 92       	push	r1
    1776:	0f 92       	push	r0
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	0f 92       	push	r0
    177c:	11 24       	eor	r1, r1
    177e:	2f 93       	push	r18
    1780:	3f 93       	push	r19
    1782:	4f 93       	push	r20
    1784:	5f 93       	push	r21
    1786:	6f 93       	push	r22
    1788:	7f 93       	push	r23
    178a:	8f 93       	push	r24
    178c:	9f 93       	push	r25
    178e:	af 93       	push	r26
    1790:	bf 93       	push	r27
    1792:	ef 93       	push	r30
    1794:	ff 93       	push	r31
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
	DISABLE_GIC();
    179e:	0e 94 26 0c 	call	0x184c	; 0x184c <DISABLE_GIC>
	EXT_INT_POINTERS[1]();
    17a2:	e0 91 94 01 	lds	r30, 0x0194
    17a6:	f0 91 95 01 	lds	r31, 0x0195
    17aa:	09 95       	icall
}
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	ff 91       	pop	r31
    17b2:	ef 91       	pop	r30
    17b4:	bf 91       	pop	r27
    17b6:	af 91       	pop	r26
    17b8:	9f 91       	pop	r25
    17ba:	8f 91       	pop	r24
    17bc:	7f 91       	pop	r23
    17be:	6f 91       	pop	r22
    17c0:	5f 91       	pop	r21
    17c2:	4f 91       	pop	r20
    17c4:	3f 91       	pop	r19
    17c6:	2f 91       	pop	r18
    17c8:	0f 90       	pop	r0
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	0f 90       	pop	r0
    17ce:	1f 90       	pop	r1
    17d0:	18 95       	reti

000017d2 <__vector_3>:




void __vector_3 (void)
{
    17d2:	1f 92       	push	r1
    17d4:	0f 92       	push	r0
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	0f 92       	push	r0
    17da:	11 24       	eor	r1, r1
    17dc:	2f 93       	push	r18
    17de:	3f 93       	push	r19
    17e0:	4f 93       	push	r20
    17e2:	5f 93       	push	r21
    17e4:	6f 93       	push	r22
    17e6:	7f 93       	push	r23
    17e8:	8f 93       	push	r24
    17ea:	9f 93       	push	r25
    17ec:	af 93       	push	r26
    17ee:	bf 93       	push	r27
    17f0:	ef 93       	push	r30
    17f2:	ff 93       	push	r31
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
	DISABLE_GIC();
    17fc:	0e 94 26 0c 	call	0x184c	; 0x184c <DISABLE_GIC>
	EXT_INT_POINTERS[2]();
    1800:	e0 91 96 01 	lds	r30, 0x0196
    1804:	f0 91 97 01 	lds	r31, 0x0197
    1808:	09 95       	icall
}
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	ff 91       	pop	r31
    1810:	ef 91       	pop	r30
    1812:	bf 91       	pop	r27
    1814:	af 91       	pop	r26
    1816:	9f 91       	pop	r25
    1818:	8f 91       	pop	r24
    181a:	7f 91       	pop	r23
    181c:	6f 91       	pop	r22
    181e:	5f 91       	pop	r21
    1820:	4f 91       	pop	r20
    1822:	3f 91       	pop	r19
    1824:	2f 91       	pop	r18
    1826:	0f 90       	pop	r0
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	0f 90       	pop	r0
    182c:	1f 90       	pop	r1
    182e:	18 95       	reti

00001830 <ENABLE_GIC>:
 *******************************************************************************/
#include "GIC.h"


void ENABLE_GIC()
{
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
    1838:	af e5       	ldi	r26, 0x5F	; 95
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	ef e5       	ldi	r30, 0x5F	; 95
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	80 68       	ori	r24, 0x80	; 128
    1844:	8c 93       	st	X, r24
}
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <DISABLE_GIC>:

void DISABLE_GIC()
{
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    1854:	af e5       	ldi	r26, 0x5F	; 95
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	ef e5       	ldi	r30, 0x5F	; 95
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	8f 77       	andi	r24, 0x7F	; 127
    1860:	8c 93       	st	X, r24
}
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	08 95       	ret

00001868 <__vector_11>:
static  void (*g_Timer1CallBackPtr)(void) = NULL_PTR;


/* Timer0 overflow*/
ISR(TIMER0_OVF_vect)
{
    1868:	1f 92       	push	r1
    186a:	0f 92       	push	r0
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	0f 92       	push	r0
    1870:	11 24       	eor	r1, r1
    1872:	2f 93       	push	r18
    1874:	3f 93       	push	r19
    1876:	4f 93       	push	r20
    1878:	5f 93       	push	r21
    187a:	6f 93       	push	r22
    187c:	7f 93       	push	r23
    187e:	8f 93       	push	r24
    1880:	9f 93       	push	r25
    1882:	af 93       	push	r26
    1884:	bf 93       	push	r27
    1886:	ef 93       	push	r30
    1888:	ff 93       	push	r31
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    1892:	af e5       	ldi	r26, 0x5F	; 95
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	ef e5       	ldi	r30, 0x5F	; 95
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	8f 77       	andi	r24, 0x7F	; 127
    189e:	8c 93       	st	X, r24
	SET_BIT(Timer0_BASE->TIFR_Reg.Reg,TOV0); /* Clear Flag W1C*/
    18a0:	a2 e5       	ldi	r26, 0x52	; 82
    18a2:	b0 e0       	ldi	r27, 0x00	; 0
    18a4:	e2 e5       	ldi	r30, 0x52	; 82
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	86 81       	ldd	r24, Z+6	; 0x06
    18aa:	81 60       	ori	r24, 0x01	; 1
    18ac:	16 96       	adiw	r26, 0x06	; 6
    18ae:	8c 93       	st	X, r24
    18b0:	16 97       	sbiw	r26, 0x06	; 6

	if (gTimer0_Call_BackPOINTER != NULL_PTR)
    18b2:	80 91 88 01 	lds	r24, 0x0188
    18b6:	90 91 89 01 	lds	r25, 0x0189
    18ba:	00 97       	sbiw	r24, 0x00	; 0
    18bc:	29 f0       	breq	.+10     	; 0x18c8 <__vector_11+0x60>
	{
		(*gTimer0_Call_BackPOINTER)();
    18be:	e0 91 88 01 	lds	r30, 0x0188
    18c2:	f0 91 89 01 	lds	r31, 0x0189
    18c6:	09 95       	icall
	}
}
    18c8:	cf 91       	pop	r28
    18ca:	df 91       	pop	r29
    18cc:	ff 91       	pop	r31
    18ce:	ef 91       	pop	r30
    18d0:	bf 91       	pop	r27
    18d2:	af 91       	pop	r26
    18d4:	9f 91       	pop	r25
    18d6:	8f 91       	pop	r24
    18d8:	7f 91       	pop	r23
    18da:	6f 91       	pop	r22
    18dc:	5f 91       	pop	r21
    18de:	4f 91       	pop	r20
    18e0:	3f 91       	pop	r19
    18e2:	2f 91       	pop	r18
    18e4:	0f 90       	pop	r0
    18e6:	0f be       	out	0x3f, r0	; 63
    18e8:	0f 90       	pop	r0
    18ea:	1f 90       	pop	r1
    18ec:	18 95       	reti

000018ee <__vector_10>:

/* Timer0 Compare*/
ISR(TIMER0_COMP_vect)
{
    18ee:	1f 92       	push	r1
    18f0:	0f 92       	push	r0
    18f2:	0f b6       	in	r0, 0x3f	; 63
    18f4:	0f 92       	push	r0
    18f6:	11 24       	eor	r1, r1
    18f8:	2f 93       	push	r18
    18fa:	3f 93       	push	r19
    18fc:	4f 93       	push	r20
    18fe:	5f 93       	push	r21
    1900:	6f 93       	push	r22
    1902:	7f 93       	push	r23
    1904:	8f 93       	push	r24
    1906:	9f 93       	push	r25
    1908:	af 93       	push	r26
    190a:	bf 93       	push	r27
    190c:	ef 93       	push	r30
    190e:	ff 93       	push	r31
    1910:	df 93       	push	r29
    1912:	cf 93       	push	r28
    1914:	cd b7       	in	r28, 0x3d	; 61
    1916:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    1918:	af e5       	ldi	r26, 0x5F	; 95
    191a:	b0 e0       	ldi	r27, 0x00	; 0
    191c:	ef e5       	ldi	r30, 0x5F	; 95
    191e:	f0 e0       	ldi	r31, 0x00	; 0
    1920:	80 81       	ld	r24, Z
    1922:	8f 77       	andi	r24, 0x7F	; 127
    1924:	8c 93       	st	X, r24
	SET_BIT(Timer0_BASE->TIFR_Reg.Reg,OCF0); /* Clear Flag W1C*/
    1926:	a2 e5       	ldi	r26, 0x52	; 82
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	e2 e5       	ldi	r30, 0x52	; 82
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	86 81       	ldd	r24, Z+6	; 0x06
    1930:	82 60       	ori	r24, 0x02	; 2
    1932:	16 96       	adiw	r26, 0x06	; 6
    1934:	8c 93       	st	X, r24
    1936:	16 97       	sbiw	r26, 0x06	; 6
	if (gTimer0_Call_BackPOINTER != NULL_PTR)
    1938:	80 91 88 01 	lds	r24, 0x0188
    193c:	90 91 89 01 	lds	r25, 0x0189
    1940:	00 97       	sbiw	r24, 0x00	; 0
    1942:	29 f0       	breq	.+10     	; 0x194e <__vector_10+0x60>
	{
		(*gTimer0_Call_BackPOINTER)();
    1944:	e0 91 88 01 	lds	r30, 0x0188
    1948:	f0 91 89 01 	lds	r31, 0x0189
    194c:	09 95       	icall
	}
}
    194e:	cf 91       	pop	r28
    1950:	df 91       	pop	r29
    1952:	ff 91       	pop	r31
    1954:	ef 91       	pop	r30
    1956:	bf 91       	pop	r27
    1958:	af 91       	pop	r26
    195a:	9f 91       	pop	r25
    195c:	8f 91       	pop	r24
    195e:	7f 91       	pop	r23
    1960:	6f 91       	pop	r22
    1962:	5f 91       	pop	r21
    1964:	4f 91       	pop	r20
    1966:	3f 91       	pop	r19
    1968:	2f 91       	pop	r18
    196a:	0f 90       	pop	r0
    196c:	0f be       	out	0x3f, r0	; 63
    196e:	0f 90       	pop	r0
    1970:	1f 90       	pop	r1
    1972:	18 95       	reti

00001974 <__vector_9>:


/* Timer1 overflow*/
ISR(TIMER1_OVF_vect)
{
    1974:	1f 92       	push	r1
    1976:	0f 92       	push	r0
    1978:	0f b6       	in	r0, 0x3f	; 63
    197a:	0f 92       	push	r0
    197c:	11 24       	eor	r1, r1
    197e:	2f 93       	push	r18
    1980:	3f 93       	push	r19
    1982:	4f 93       	push	r20
    1984:	5f 93       	push	r21
    1986:	6f 93       	push	r22
    1988:	7f 93       	push	r23
    198a:	8f 93       	push	r24
    198c:	9f 93       	push	r25
    198e:	af 93       	push	r26
    1990:	bf 93       	push	r27
    1992:	ef 93       	push	r30
    1994:	ff 93       	push	r31
    1996:	df 93       	push	r29
    1998:	cf 93       	push	r28
    199a:	cd b7       	in	r28, 0x3d	; 61
    199c:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    199e:	af e5       	ldi	r26, 0x5F	; 95
    19a0:	b0 e0       	ldi	r27, 0x00	; 0
    19a2:	ef e5       	ldi	r30, 0x5F	; 95
    19a4:	f0 e0       	ldi	r31, 0x00	; 0
    19a6:	80 81       	ld	r24, Z
    19a8:	8f 77       	andi	r24, 0x7F	; 127
    19aa:	8c 93       	st	X, r24
	SET_BIT(Timer0_BASE->TIFR_Reg.Reg,TOV1); /* enable overflow flag */
    19ac:	a2 e5       	ldi	r26, 0x52	; 82
    19ae:	b0 e0       	ldi	r27, 0x00	; 0
    19b0:	e2 e5       	ldi	r30, 0x52	; 82
    19b2:	f0 e0       	ldi	r31, 0x00	; 0
    19b4:	86 81       	ldd	r24, Z+6	; 0x06
    19b6:	84 60       	ori	r24, 0x04	; 4
    19b8:	16 96       	adiw	r26, 0x06	; 6
    19ba:	8c 93       	st	X, r24
    19bc:	16 97       	sbiw	r26, 0x06	; 6

	if (g_Timer1CallBackPtr != NULL_PTR)
    19be:	80 91 8a 01 	lds	r24, 0x018A
    19c2:	90 91 8b 01 	lds	r25, 0x018B
    19c6:	00 97       	sbiw	r24, 0x00	; 0
    19c8:	29 f0       	breq	.+10     	; 0x19d4 <__vector_9+0x60>
	{
		(*g_Timer1CallBackPtr)();
    19ca:	e0 91 8a 01 	lds	r30, 0x018A
    19ce:	f0 91 8b 01 	lds	r31, 0x018B
    19d2:	09 95       	icall
	}
}
    19d4:	cf 91       	pop	r28
    19d6:	df 91       	pop	r29
    19d8:	ff 91       	pop	r31
    19da:	ef 91       	pop	r30
    19dc:	bf 91       	pop	r27
    19de:	af 91       	pop	r26
    19e0:	9f 91       	pop	r25
    19e2:	8f 91       	pop	r24
    19e4:	7f 91       	pop	r23
    19e6:	6f 91       	pop	r22
    19e8:	5f 91       	pop	r21
    19ea:	4f 91       	pop	r20
    19ec:	3f 91       	pop	r19
    19ee:	2f 91       	pop	r18
    19f0:	0f 90       	pop	r0
    19f2:	0f be       	out	0x3f, r0	; 63
    19f4:	0f 90       	pop	r0
    19f6:	1f 90       	pop	r1
    19f8:	18 95       	reti

000019fa <__vector_7>:

/* Timer1 compare */
ISR(TIMER1_COMPA_vect)
{
    19fa:	1f 92       	push	r1
    19fc:	0f 92       	push	r0
    19fe:	0f b6       	in	r0, 0x3f	; 63
    1a00:	0f 92       	push	r0
    1a02:	11 24       	eor	r1, r1
    1a04:	2f 93       	push	r18
    1a06:	3f 93       	push	r19
    1a08:	4f 93       	push	r20
    1a0a:	5f 93       	push	r21
    1a0c:	6f 93       	push	r22
    1a0e:	7f 93       	push	r23
    1a10:	8f 93       	push	r24
    1a12:	9f 93       	push	r25
    1a14:	af 93       	push	r26
    1a16:	bf 93       	push	r27
    1a18:	ef 93       	push	r30
    1a1a:	ff 93       	push	r31
    1a1c:	df 93       	push	r29
    1a1e:	cf 93       	push	r28
    1a20:	cd b7       	in	r28, 0x3d	; 61
    1a22:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    1a24:	af e5       	ldi	r26, 0x5F	; 95
    1a26:	b0 e0       	ldi	r27, 0x00	; 0
    1a28:	ef e5       	ldi	r30, 0x5F	; 95
    1a2a:	f0 e0       	ldi	r31, 0x00	; 0
    1a2c:	80 81       	ld	r24, Z
    1a2e:	8f 77       	andi	r24, 0x7F	; 127
    1a30:	8c 93       	st	X, r24
	SET_BIT(Timer0_BASE->TIFR_Reg.Reg,OCF1A);
    1a32:	a2 e5       	ldi	r26, 0x52	; 82
    1a34:	b0 e0       	ldi	r27, 0x00	; 0
    1a36:	e2 e5       	ldi	r30, 0x52	; 82
    1a38:	f0 e0       	ldi	r31, 0x00	; 0
    1a3a:	86 81       	ldd	r24, Z+6	; 0x06
    1a3c:	80 61       	ori	r24, 0x10	; 16
    1a3e:	16 96       	adiw	r26, 0x06	; 6
    1a40:	8c 93       	st	X, r24
    1a42:	16 97       	sbiw	r26, 0x06	; 6
	if (g_Timer1CallBackPtr != NULL_PTR)
    1a44:	80 91 8a 01 	lds	r24, 0x018A
    1a48:	90 91 8b 01 	lds	r25, 0x018B
    1a4c:	00 97       	sbiw	r24, 0x00	; 0
    1a4e:	29 f0       	breq	.+10     	; 0x1a5a <__vector_7+0x60>
	{
		(*g_Timer1CallBackPtr)();
    1a50:	e0 91 8a 01 	lds	r30, 0x018A
    1a54:	f0 91 8b 01 	lds	r31, 0x018B
    1a58:	09 95       	icall
	}
}
    1a5a:	cf 91       	pop	r28
    1a5c:	df 91       	pop	r29
    1a5e:	ff 91       	pop	r31
    1a60:	ef 91       	pop	r30
    1a62:	bf 91       	pop	r27
    1a64:	af 91       	pop	r26
    1a66:	9f 91       	pop	r25
    1a68:	8f 91       	pop	r24
    1a6a:	7f 91       	pop	r23
    1a6c:	6f 91       	pop	r22
    1a6e:	5f 91       	pop	r21
    1a70:	4f 91       	pop	r20
    1a72:	3f 91       	pop	r19
    1a74:	2f 91       	pop	r18
    1a76:	0f 90       	pop	r0
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	0f 90       	pop	r0
    1a7c:	1f 90       	pop	r1
    1a7e:	18 95       	reti

00001a80 <Timer_Init>:




void Timer_Init(Timer_Config *Config_ptr)
{
    1a80:	df 93       	push	r29
    1a82:	cf 93       	push	r28
    1a84:	00 d0       	rcall	.+0      	; 0x1a86 <Timer_Init+0x6>
    1a86:	00 d0       	rcall	.+0      	; 0x1a88 <Timer_Init+0x8>
    1a88:	00 d0       	rcall	.+0      	; 0x1a8a <Timer_Init+0xa>
    1a8a:	cd b7       	in	r28, 0x3d	; 61
    1a8c:	de b7       	in	r29, 0x3e	; 62
    1a8e:	9a 83       	std	Y+2, r25	; 0x02
    1a90:	89 83       	std	Y+1, r24	; 0x01

	if(Config_ptr->Timer_ID == Timer0)
    1a92:	e9 81       	ldd	r30, Y+1	; 0x01
    1a94:	fa 81       	ldd	r31, Y+2	; 0x02
    1a96:	87 81       	ldd	r24, Z+7	; 0x07
    1a98:	88 23       	and	r24, r24
    1a9a:	09 f0       	breq	.+2      	; 0x1a9e <Timer_Init+0x1e>
    1a9c:	f5 c0       	rjmp	.+490    	; 0x1c88 <Timer_Init+0x208>
	{
		/* Inserting Clock Sourc */
		Timer0_BASE->TCCR0_Reg.Reg |= Config_ptr->prescalar;
    1a9e:	a2 e5       	ldi	r26, 0x52	; 82
    1aa0:	b0 e0       	ldi	r27, 0x00	; 0
    1aa2:	e2 e5       	ldi	r30, 0x52	; 82
    1aa4:	f0 e0       	ldi	r31, 0x00	; 0
    1aa6:	91 81       	ldd	r25, Z+1	; 0x01
    1aa8:	e9 81       	ldd	r30, Y+1	; 0x01
    1aaa:	fa 81       	ldd	r31, Y+2	; 0x02
    1aac:	81 81       	ldd	r24, Z+1	; 0x01
    1aae:	89 2b       	or	r24, r25
    1ab0:	11 96       	adiw	r26, 0x01	; 1
    1ab2:	8c 93       	st	X, r24
    1ab4:	11 97       	sbiw	r26, 0x01	; 1

		switch(Config_ptr->mode)
    1ab6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ab8:	fa 81       	ldd	r31, Y+2	; 0x02
    1aba:	80 81       	ld	r24, Z
    1abc:	28 2f       	mov	r18, r24
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	3e 83       	std	Y+6, r19	; 0x06
    1ac2:	2d 83       	std	Y+5, r18	; 0x05
    1ac4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac8:	81 30       	cpi	r24, 0x01	; 1
    1aca:	91 05       	cpc	r25, r1
    1acc:	09 f4       	brne	.+2      	; 0x1ad0 <Timer_Init+0x50>
    1ace:	54 c0       	rjmp	.+168    	; 0x1b78 <Timer_Init+0xf8>
    1ad0:	2d 81       	ldd	r18, Y+5	; 0x05
    1ad2:	3e 81       	ldd	r19, Y+6	; 0x06
    1ad4:	22 30       	cpi	r18, 0x02	; 2
    1ad6:	31 05       	cpc	r19, r1
    1ad8:	2c f4       	brge	.+10     	; 0x1ae4 <Timer_Init+0x64>
    1ada:	8d 81       	ldd	r24, Y+5	; 0x05
    1adc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ade:	00 97       	sbiw	r24, 0x00	; 0
    1ae0:	69 f0       	breq	.+26     	; 0x1afc <Timer_Init+0x7c>
    1ae2:	93 c3       	rjmp	.+1830   	; 0x220a <Timer_Init+0x78a>
    1ae4:	2d 81       	ldd	r18, Y+5	; 0x05
    1ae6:	3e 81       	ldd	r19, Y+6	; 0x06
    1ae8:	22 30       	cpi	r18, 0x02	; 2
    1aea:	31 05       	cpc	r19, r1
    1aec:	b9 f0       	breq	.+46     	; 0x1b1c <Timer_Init+0x9c>
    1aee:	8d 81       	ldd	r24, Y+5	; 0x05
    1af0:	9e 81       	ldd	r25, Y+6	; 0x06
    1af2:	83 30       	cpi	r24, 0x03	; 3
    1af4:	91 05       	cpc	r25, r1
    1af6:	09 f4       	brne	.+2      	; 0x1afa <Timer_Init+0x7a>
    1af8:	83 c0       	rjmp	.+262    	; 0x1c00 <Timer_Init+0x180>
    1afa:	87 c3       	rjmp	.+1806   	; 0x220a <Timer_Init+0x78a>
		{
		case TIMER0_NORMAL:

			SET_BIT(Timer0_BASE->TCCR0_Reg.Reg,FOC0);
    1afc:	a2 e5       	ldi	r26, 0x52	; 82
    1afe:	b0 e0       	ldi	r27, 0x00	; 0
    1b00:	e2 e5       	ldi	r30, 0x52	; 82
    1b02:	f0 e0       	ldi	r31, 0x00	; 0
    1b04:	81 81       	ldd	r24, Z+1	; 0x01
    1b06:	80 68       	ori	r24, 0x80	; 128
    1b08:	11 96       	adiw	r26, 0x01	; 1
    1b0a:	8c 93       	st	X, r24
			//Timer0_BASE->TCCR0_Reg.Reg = 0;

			/* Inserting Clock Sourc */

			Timer0_BASE->TCNT0_Reg.Reg = Config_ptr -> reload_value;
    1b0c:	a2 e5       	ldi	r26, 0x52	; 82
    1b0e:	b0 e0       	ldi	r27, 0x00	; 0
    1b10:	e9 81       	ldd	r30, Y+1	; 0x01
    1b12:	fa 81       	ldd	r31, Y+2	; 0x02
    1b14:	83 81       	ldd	r24, Z+3	; 0x03
    1b16:	94 81       	ldd	r25, Z+4	; 0x04
    1b18:	8c 93       	st	X, r24
    1b1a:	77 c3       	rjmp	.+1774   	; 0x220a <Timer_Init+0x78a>

			break;

		case TIMER0_CTC:
			SET_BIT(Timer0_BASE->TCCR0_Reg.Reg,FOC0);
    1b1c:	a2 e5       	ldi	r26, 0x52	; 82
    1b1e:	b0 e0       	ldi	r27, 0x00	; 0
    1b20:	e2 e5       	ldi	r30, 0x52	; 82
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	81 81       	ldd	r24, Z+1	; 0x01
    1b26:	80 68       	ori	r24, 0x80	; 128
    1b28:	11 96       	adiw	r26, 0x01	; 1
    1b2a:	8c 93       	st	X, r24

			SET_BIT(Timer0_BASE->TCCR0_Reg.Reg,WGM01);
    1b2c:	a2 e5       	ldi	r26, 0x52	; 82
    1b2e:	b0 e0       	ldi	r27, 0x00	; 0
    1b30:	e2 e5       	ldi	r30, 0x52	; 82
    1b32:	f0 e0       	ldi	r31, 0x00	; 0
    1b34:	81 81       	ldd	r24, Z+1	; 0x01
    1b36:	88 60       	ori	r24, 0x08	; 8
    1b38:	11 96       	adiw	r26, 0x01	; 1
    1b3a:	8c 93       	st	X, r24


			Timer0_BASE->TCCR0_Reg.Reg |= ((Config_ptr->signal_output) )<< COM00;
    1b3c:	a2 e5       	ldi	r26, 0x52	; 82
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	e2 e5       	ldi	r30, 0x52	; 82
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	81 81       	ldd	r24, Z+1	; 0x01
    1b46:	28 2f       	mov	r18, r24
    1b48:	e9 81       	ldd	r30, Y+1	; 0x01
    1b4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b4c:	82 81       	ldd	r24, Z+2	; 0x02
    1b4e:	88 2f       	mov	r24, r24
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	82 95       	swap	r24
    1b54:	92 95       	swap	r25
    1b56:	90 7f       	andi	r25, 0xF0	; 240
    1b58:	98 27       	eor	r25, r24
    1b5a:	80 7f       	andi	r24, 0xF0	; 240
    1b5c:	98 27       	eor	r25, r24
    1b5e:	82 2b       	or	r24, r18
    1b60:	11 96       	adiw	r26, 0x01	; 1
    1b62:	8c 93       	st	X, r24
			Timer0_BASE->OCR0_Reg.Reg = Config_ptr->compare_value;
    1b64:	a2 e5       	ldi	r26, 0x52	; 82
    1b66:	b0 e0       	ldi	r27, 0x00	; 0
    1b68:	e9 81       	ldd	r30, Y+1	; 0x01
    1b6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b6c:	85 81       	ldd	r24, Z+5	; 0x05
    1b6e:	96 81       	ldd	r25, Z+6	; 0x06
    1b70:	1a 96       	adiw	r26, 0x0a	; 10
    1b72:	8c 93       	st	X, r24
    1b74:	1a 97       	sbiw	r26, 0x0a	; 10
    1b76:	49 c3       	rjmp	.+1682   	; 0x220a <Timer_Init+0x78a>
			break;

		case TIMER0_PWM_PHASE_CORRECT:
			SET_BIT(Timer0_BASE->TCCR0_Reg.Reg,WGM00);
    1b78:	a2 e5       	ldi	r26, 0x52	; 82
    1b7a:	b0 e0       	ldi	r27, 0x00	; 0
    1b7c:	e2 e5       	ldi	r30, 0x52	; 82
    1b7e:	f0 e0       	ldi	r31, 0x00	; 0
    1b80:	81 81       	ldd	r24, Z+1	; 0x01
    1b82:	80 64       	ori	r24, 0x40	; 64
    1b84:	11 96       	adiw	r26, 0x01	; 1
    1b86:	8c 93       	st	X, r24
			CLR_BIT(Timer0_BASE->TCCR0_Reg.Reg,WGM01);
    1b88:	a2 e5       	ldi	r26, 0x52	; 82
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e2 e5       	ldi	r30, 0x52	; 82
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	81 81       	ldd	r24, Z+1	; 0x01
    1b92:	87 7f       	andi	r24, 0xF7	; 247
    1b94:	11 96       	adiw	r26, 0x01	; 1
    1b96:	8c 93       	st	X, r24
			/* Inserting Clock Sourc */
			Timer0_BASE->TCCR0_Reg.Reg |= ((Config_ptr->signal_output) )<< COM00;
    1b98:	a2 e5       	ldi	r26, 0x52	; 82
    1b9a:	b0 e0       	ldi	r27, 0x00	; 0
    1b9c:	e2 e5       	ldi	r30, 0x52	; 82
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	81 81       	ldd	r24, Z+1	; 0x01
    1ba2:	28 2f       	mov	r18, r24
    1ba4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba8:	82 81       	ldd	r24, Z+2	; 0x02
    1baa:	88 2f       	mov	r24, r24
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	82 95       	swap	r24
    1bb0:	92 95       	swap	r25
    1bb2:	90 7f       	andi	r25, 0xF0	; 240
    1bb4:	98 27       	eor	r25, r24
    1bb6:	80 7f       	andi	r24, 0xF0	; 240
    1bb8:	98 27       	eor	r25, r24
    1bba:	82 2b       	or	r24, r18
    1bbc:	11 96       	adiw	r26, 0x01	; 1
    1bbe:	8c 93       	st	X, r24
    1bc0:	11 97       	sbiw	r26, 0x01	; 1

			if(Config_ptr->signal_output == Clear_OCx)
    1bc2:	e9 81       	ldd	r30, Y+1	; 0x01
    1bc4:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc6:	82 81       	ldd	r24, Z+2	; 0x02
    1bc8:	82 30       	cpi	r24, 0x02	; 2
    1bca:	51 f4       	brne	.+20     	; 0x1be0 <Timer_Init+0x160>
			{
				Timer0_BASE->TCCR0_Reg.Reg |= (1 << COM01);
    1bcc:	a2 e5       	ldi	r26, 0x52	; 82
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e2 e5       	ldi	r30, 0x52	; 82
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	81 81       	ldd	r24, Z+1	; 0x01
    1bd6:	80 62       	ori	r24, 0x20	; 32
    1bd8:	11 96       	adiw	r26, 0x01	; 1
    1bda:	8c 93       	st	X, r24
    1bdc:	11 97       	sbiw	r26, 0x01	; 1
    1bde:	15 c3       	rjmp	.+1578   	; 0x220a <Timer_Init+0x78a>
			}
			else if(Config_ptr->signal_output == Set_OCx)
    1be0:	e9 81       	ldd	r30, Y+1	; 0x01
    1be2:	fa 81       	ldd	r31, Y+2	; 0x02
    1be4:	82 81       	ldd	r24, Z+2	; 0x02
    1be6:	83 30       	cpi	r24, 0x03	; 3
    1be8:	09 f0       	breq	.+2      	; 0x1bec <Timer_Init+0x16c>
    1bea:	0f c3       	rjmp	.+1566   	; 0x220a <Timer_Init+0x78a>
			{
				Timer0_BASE->TCCR0_Reg.Reg |= (1 << COM01) | (1<<COM00);
    1bec:	a2 e5       	ldi	r26, 0x52	; 82
    1bee:	b0 e0       	ldi	r27, 0x00	; 0
    1bf0:	e2 e5       	ldi	r30, 0x52	; 82
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	81 81       	ldd	r24, Z+1	; 0x01
    1bf6:	80 63       	ori	r24, 0x30	; 48
    1bf8:	11 96       	adiw	r26, 0x01	; 1
    1bfa:	8c 93       	st	X, r24
    1bfc:	11 97       	sbiw	r26, 0x01	; 1
    1bfe:	05 c3       	rjmp	.+1546   	; 0x220a <Timer_Init+0x78a>



		case TIMER0_FAST_PWM:

			SET_BIT(Timer0_BASE->TCCR0_Reg.Reg,WGM01);
    1c00:	a2 e5       	ldi	r26, 0x52	; 82
    1c02:	b0 e0       	ldi	r27, 0x00	; 0
    1c04:	e2 e5       	ldi	r30, 0x52	; 82
    1c06:	f0 e0       	ldi	r31, 0x00	; 0
    1c08:	81 81       	ldd	r24, Z+1	; 0x01
    1c0a:	88 60       	ori	r24, 0x08	; 8
    1c0c:	11 96       	adiw	r26, 0x01	; 1
    1c0e:	8c 93       	st	X, r24
			SET_BIT(Timer0_BASE->TCCR0_Reg.Reg,WGM00);
    1c10:	a2 e5       	ldi	r26, 0x52	; 82
    1c12:	b0 e0       	ldi	r27, 0x00	; 0
    1c14:	e2 e5       	ldi	r30, 0x52	; 82
    1c16:	f0 e0       	ldi	r31, 0x00	; 0
    1c18:	81 81       	ldd	r24, Z+1	; 0x01
    1c1a:	80 64       	ori	r24, 0x40	; 64
    1c1c:	11 96       	adiw	r26, 0x01	; 1
    1c1e:	8c 93       	st	X, r24


			Timer0_BASE->TCCR0_Reg.Reg |= ((Config_ptr->signal_output) )<< COM00;
    1c20:	a2 e5       	ldi	r26, 0x52	; 82
    1c22:	b0 e0       	ldi	r27, 0x00	; 0
    1c24:	e2 e5       	ldi	r30, 0x52	; 82
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	81 81       	ldd	r24, Z+1	; 0x01
    1c2a:	28 2f       	mov	r18, r24
    1c2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c30:	82 81       	ldd	r24, Z+2	; 0x02
    1c32:	88 2f       	mov	r24, r24
    1c34:	90 e0       	ldi	r25, 0x00	; 0
    1c36:	82 95       	swap	r24
    1c38:	92 95       	swap	r25
    1c3a:	90 7f       	andi	r25, 0xF0	; 240
    1c3c:	98 27       	eor	r25, r24
    1c3e:	80 7f       	andi	r24, 0xF0	; 240
    1c40:	98 27       	eor	r25, r24
    1c42:	82 2b       	or	r24, r18
    1c44:	11 96       	adiw	r26, 0x01	; 1
    1c46:	8c 93       	st	X, r24
    1c48:	11 97       	sbiw	r26, 0x01	; 1
			if(Config_ptr->signal_output == Non_inverting)
    1c4a:	e9 81       	ldd	r30, Y+1	; 0x01
    1c4c:	fa 81       	ldd	r31, Y+2	; 0x02
    1c4e:	82 81       	ldd	r24, Z+2	; 0x02
    1c50:	82 30       	cpi	r24, 0x02	; 2
    1c52:	51 f4       	brne	.+20     	; 0x1c68 <Timer_Init+0x1e8>
			{
				Timer0_BASE->TCCR0_Reg.Reg |= (1 << COM01);
    1c54:	a2 e5       	ldi	r26, 0x52	; 82
    1c56:	b0 e0       	ldi	r27, 0x00	; 0
    1c58:	e2 e5       	ldi	r30, 0x52	; 82
    1c5a:	f0 e0       	ldi	r31, 0x00	; 0
    1c5c:	81 81       	ldd	r24, Z+1	; 0x01
    1c5e:	80 62       	ori	r24, 0x20	; 32
    1c60:	11 96       	adiw	r26, 0x01	; 1
    1c62:	8c 93       	st	X, r24
    1c64:	11 97       	sbiw	r26, 0x01	; 1
    1c66:	d1 c2       	rjmp	.+1442   	; 0x220a <Timer_Init+0x78a>

			}
			else if(Config_ptr->signal_output == Inverting)
    1c68:	e9 81       	ldd	r30, Y+1	; 0x01
    1c6a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c6c:	82 81       	ldd	r24, Z+2	; 0x02
    1c6e:	83 30       	cpi	r24, 0x03	; 3
    1c70:	09 f0       	breq	.+2      	; 0x1c74 <Timer_Init+0x1f4>
    1c72:	cb c2       	rjmp	.+1430   	; 0x220a <Timer_Init+0x78a>
			{
				Timer0_BASE->TCCR0_Reg.Reg |= (1 << COM01) | (1<<COM00);
    1c74:	a2 e5       	ldi	r26, 0x52	; 82
    1c76:	b0 e0       	ldi	r27, 0x00	; 0
    1c78:	e2 e5       	ldi	r30, 0x52	; 82
    1c7a:	f0 e0       	ldi	r31, 0x00	; 0
    1c7c:	81 81       	ldd	r24, Z+1	; 0x01
    1c7e:	80 63       	ori	r24, 0x30	; 48
    1c80:	11 96       	adiw	r26, 0x01	; 1
    1c82:	8c 93       	st	X, r24
    1c84:	11 97       	sbiw	r26, 0x01	; 1
    1c86:	c1 c2       	rjmp	.+1410   	; 0x220a <Timer_Init+0x78a>

			break;

		}
	}
	else if (Config_ptr -> Timer_ID == Timer1)
    1c88:	e9 81       	ldd	r30, Y+1	; 0x01
    1c8a:	fa 81       	ldd	r31, Y+2	; 0x02
    1c8c:	87 81       	ldd	r24, Z+7	; 0x07
    1c8e:	81 30       	cpi	r24, 0x01	; 1
    1c90:	09 f0       	breq	.+2      	; 0x1c94 <Timer_Init+0x214>
    1c92:	bb c2       	rjmp	.+1398   	; 0x220a <Timer_Init+0x78a>
	{
		Timer1_BASE->TCCR1A_t.Reg = 0;
    1c94:	e6 e4       	ldi	r30, 0x46	; 70
    1c96:	f0 e0       	ldi	r31, 0x00	; 0
    1c98:	11 86       	std	Z+9, r1	; 0x09
		Timer1_BASE->TCCR1B_t.Reg |= Config_ptr->prescalar;
    1c9a:	a6 e4       	ldi	r26, 0x46	; 70
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	e6 e4       	ldi	r30, 0x46	; 70
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	90 85       	ldd	r25, Z+8	; 0x08
    1ca4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ca6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ca8:	81 81       	ldd	r24, Z+1	; 0x01
    1caa:	89 2b       	or	r24, r25
    1cac:	18 96       	adiw	r26, 0x08	; 8
    1cae:	8c 93       	st	X, r24
    1cb0:	18 97       	sbiw	r26, 0x08	; 8

		switch (Config_ptr->mode)
    1cb2:	e9 81       	ldd	r30, Y+1	; 0x01
    1cb4:	fa 81       	ldd	r31, Y+2	; 0x02
    1cb6:	80 81       	ld	r24, Z
    1cb8:	28 2f       	mov	r18, r24
    1cba:	30 e0       	ldi	r19, 0x00	; 0
    1cbc:	3c 83       	std	Y+4, r19	; 0x04
    1cbe:	2b 83       	std	Y+3, r18	; 0x03
    1cc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cc4:	87 30       	cpi	r24, 0x07	; 7
    1cc6:	91 05       	cpc	r25, r1
    1cc8:	09 f4       	brne	.+2      	; 0x1ccc <Timer_Init+0x24c>
    1cca:	5b c1       	rjmp	.+694    	; 0x1f82 <Timer_Init+0x502>
    1ccc:	2b 81       	ldd	r18, Y+3	; 0x03
    1cce:	3c 81       	ldd	r19, Y+4	; 0x04
    1cd0:	28 30       	cpi	r18, 0x08	; 8
    1cd2:	31 05       	cpc	r19, r1
    1cd4:	4c f5       	brge	.+82     	; 0x1d28 <Timer_Init+0x2a8>
    1cd6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cda:	83 30       	cpi	r24, 0x03	; 3
    1cdc:	91 05       	cpc	r25, r1
    1cde:	09 f4       	brne	.+2      	; 0x1ce2 <Timer_Init+0x262>
    1ce0:	be c0       	rjmp	.+380    	; 0x1e5e <Timer_Init+0x3de>
    1ce2:	2b 81       	ldd	r18, Y+3	; 0x03
    1ce4:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce6:	24 30       	cpi	r18, 0x04	; 4
    1ce8:	31 05       	cpc	r19, r1
    1cea:	8c f4       	brge	.+34     	; 0x1d0e <Timer_Init+0x28e>
    1cec:	8b 81       	ldd	r24, Y+3	; 0x03
    1cee:	9c 81       	ldd	r25, Y+4	; 0x04
    1cf0:	81 30       	cpi	r24, 0x01	; 1
    1cf2:	91 05       	cpc	r25, r1
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <Timer_Init+0x278>
    1cf6:	6f c0       	rjmp	.+222    	; 0x1dd6 <Timer_Init+0x356>
    1cf8:	2b 81       	ldd	r18, Y+3	; 0x03
    1cfa:	3c 81       	ldd	r19, Y+4	; 0x04
    1cfc:	22 30       	cpi	r18, 0x02	; 2
    1cfe:	31 05       	cpc	r19, r1
    1d00:	0c f0       	brlt	.+2      	; 0x1d04 <Timer_Init+0x284>
    1d02:	8b c0       	rjmp	.+278    	; 0x1e1a <Timer_Init+0x39a>
    1d04:	8b 81       	ldd	r24, Y+3	; 0x03
    1d06:	9c 81       	ldd	r25, Y+4	; 0x04
    1d08:	00 97       	sbiw	r24, 0x00	; 0
    1d0a:	c9 f1       	breq	.+114    	; 0x1d7e <Timer_Init+0x2fe>
    1d0c:	49 c2       	rjmp	.+1170   	; 0x21a0 <Timer_Init+0x720>
    1d0e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d10:	3c 81       	ldd	r19, Y+4	; 0x04
    1d12:	25 30       	cpi	r18, 0x05	; 5
    1d14:	31 05       	cpc	r19, r1
    1d16:	09 f4       	brne	.+2      	; 0x1d1a <Timer_Init+0x29a>
    1d18:	f0 c0       	rjmp	.+480    	; 0x1efa <Timer_Init+0x47a>
    1d1a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d1e:	86 30       	cpi	r24, 0x06	; 6
    1d20:	91 05       	cpc	r25, r1
    1d22:	0c f0       	brlt	.+2      	; 0x1d26 <Timer_Init+0x2a6>
    1d24:	0c c1       	rjmp	.+536    	; 0x1f3e <Timer_Init+0x4be>
    1d26:	bd c0       	rjmp	.+378    	; 0x1ea2 <Timer_Init+0x422>
    1d28:	2b 81       	ldd	r18, Y+3	; 0x03
    1d2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d2c:	2b 30       	cpi	r18, 0x0B	; 11
    1d2e:	31 05       	cpc	r19, r1
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <Timer_Init+0x2b4>
    1d32:	af c1       	rjmp	.+862    	; 0x2092 <Timer_Init+0x612>
    1d34:	8b 81       	ldd	r24, Y+3	; 0x03
    1d36:	9c 81       	ldd	r25, Y+4	; 0x04
    1d38:	8c 30       	cpi	r24, 0x0C	; 12
    1d3a:	91 05       	cpc	r25, r1
    1d3c:	6c f4       	brge	.+26     	; 0x1d58 <Timer_Init+0x2d8>
    1d3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1d40:	3c 81       	ldd	r19, Y+4	; 0x04
    1d42:	29 30       	cpi	r18, 0x09	; 9
    1d44:	31 05       	cpc	r19, r1
    1d46:	09 f4       	brne	.+2      	; 0x1d4a <Timer_Init+0x2ca>
    1d48:	60 c1       	rjmp	.+704    	; 0x200a <Timer_Init+0x58a>
    1d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4e:	8a 30       	cpi	r24, 0x0A	; 10
    1d50:	91 05       	cpc	r25, r1
    1d52:	0c f0       	brlt	.+2      	; 0x1d56 <Timer_Init+0x2d6>
    1d54:	7c c1       	rjmp	.+760    	; 0x204e <Timer_Init+0x5ce>
    1d56:	37 c1       	rjmp	.+622    	; 0x1fc6 <Timer_Init+0x546>
    1d58:	2b 81       	ldd	r18, Y+3	; 0x03
    1d5a:	3c 81       	ldd	r19, Y+4	; 0x04
    1d5c:	2e 30       	cpi	r18, 0x0E	; 14
    1d5e:	31 05       	cpc	r19, r1
    1d60:	09 f4       	brne	.+2      	; 0x1d64 <Timer_Init+0x2e4>
    1d62:	db c1       	rjmp	.+950    	; 0x211a <Timer_Init+0x69a>
    1d64:	8b 81       	ldd	r24, Y+3	; 0x03
    1d66:	9c 81       	ldd	r25, Y+4	; 0x04
    1d68:	8f 30       	cpi	r24, 0x0F	; 15
    1d6a:	91 05       	cpc	r25, r1
    1d6c:	09 f4       	brne	.+2      	; 0x1d70 <Timer_Init+0x2f0>
    1d6e:	f7 c1       	rjmp	.+1006   	; 0x215e <Timer_Init+0x6de>
    1d70:	2b 81       	ldd	r18, Y+3	; 0x03
    1d72:	3c 81       	ldd	r19, Y+4	; 0x04
    1d74:	2c 30       	cpi	r18, 0x0C	; 12
    1d76:	31 05       	cpc	r19, r1
    1d78:	09 f4       	brne	.+2      	; 0x1d7c <Timer_Init+0x2fc>
    1d7a:	ad c1       	rjmp	.+858    	; 0x20d6 <Timer_Init+0x656>
    1d7c:	11 c2       	rjmp	.+1058   	; 0x21a0 <Timer_Init+0x720>
		{

		case TIMER1_NORMAL:
			Timer1_BASE->TCNT1_t = Config_ptr->reload_value;
    1d7e:	a6 e4       	ldi	r26, 0x46	; 70
    1d80:	b0 e0       	ldi	r27, 0x00	; 0
    1d82:	e9 81       	ldd	r30, Y+1	; 0x01
    1d84:	fa 81       	ldd	r31, Y+2	; 0x02
    1d86:	83 81       	ldd	r24, Z+3	; 0x03
    1d88:	94 81       	ldd	r25, Z+4	; 0x04
    1d8a:	17 96       	adiw	r26, 0x07	; 7
    1d8c:	9c 93       	st	X, r25
    1d8e:	8e 93       	st	-X, r24
    1d90:	16 97       	sbiw	r26, 0x06	; 6
			CLR_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    1d92:	a6 e4       	ldi	r26, 0x46	; 70
    1d94:	b0 e0       	ldi	r27, 0x00	; 0
    1d96:	e6 e4       	ldi	r30, 0x46	; 70
    1d98:	f0 e0       	ldi	r31, 0x00	; 0
    1d9a:	81 85       	ldd	r24, Z+9	; 0x09
    1d9c:	8e 7f       	andi	r24, 0xFE	; 254
    1d9e:	19 96       	adiw	r26, 0x09	; 9
    1da0:	8c 93       	st	X, r24
			CLR_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    1da2:	a6 e4       	ldi	r26, 0x46	; 70
    1da4:	b0 e0       	ldi	r27, 0x00	; 0
    1da6:	e6 e4       	ldi	r30, 0x46	; 70
    1da8:	f0 e0       	ldi	r31, 0x00	; 0
    1daa:	81 85       	ldd	r24, Z+9	; 0x09
    1dac:	8d 7f       	andi	r24, 0xFD	; 253
    1dae:	19 96       	adiw	r26, 0x09	; 9
    1db0:	8c 93       	st	X, r24
			CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    1db2:	a6 e4       	ldi	r26, 0x46	; 70
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e6 e4       	ldi	r30, 0x46	; 70
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 85       	ldd	r24, Z+8	; 0x08
    1dbc:	87 7f       	andi	r24, 0xF7	; 247
    1dbe:	18 96       	adiw	r26, 0x08	; 8
    1dc0:	8c 93       	st	X, r24
			CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    1dc2:	a6 e4       	ldi	r26, 0x46	; 70
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	e6 e4       	ldi	r30, 0x46	; 70
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 85       	ldd	r24, Z+8	; 0x08
    1dcc:	8f 7e       	andi	r24, 0xEF	; 239
    1dce:	18 96       	adiw	r26, 0x08	; 8
    1dd0:	8c 93       	st	X, r24
    1dd2:	18 97       	sbiw	r26, 0x08	; 8
    1dd4:	e5 c1       	rjmp	.+970    	; 0x21a0 <Timer_Init+0x720>
			break;

		case TIMER1_PWM_PHASE_CORRECT_8BIT:
			SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    1dd6:	a6 e4       	ldi	r26, 0x46	; 70
    1dd8:	b0 e0       	ldi	r27, 0x00	; 0
    1dda:	e6 e4       	ldi	r30, 0x46	; 70
    1ddc:	f0 e0       	ldi	r31, 0x00	; 0
    1dde:	81 85       	ldd	r24, Z+9	; 0x09
    1de0:	81 60       	ori	r24, 0x01	; 1
    1de2:	19 96       	adiw	r26, 0x09	; 9
    1de4:	8c 93       	st	X, r24
			CLR_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    1de6:	a6 e4       	ldi	r26, 0x46	; 70
    1de8:	b0 e0       	ldi	r27, 0x00	; 0
    1dea:	e6 e4       	ldi	r30, 0x46	; 70
    1dec:	f0 e0       	ldi	r31, 0x00	; 0
    1dee:	81 85       	ldd	r24, Z+9	; 0x09
    1df0:	8d 7f       	andi	r24, 0xFD	; 253
    1df2:	19 96       	adiw	r26, 0x09	; 9
    1df4:	8c 93       	st	X, r24
			CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    1df6:	a6 e4       	ldi	r26, 0x46	; 70
    1df8:	b0 e0       	ldi	r27, 0x00	; 0
    1dfa:	e6 e4       	ldi	r30, 0x46	; 70
    1dfc:	f0 e0       	ldi	r31, 0x00	; 0
    1dfe:	80 85       	ldd	r24, Z+8	; 0x08
    1e00:	87 7f       	andi	r24, 0xF7	; 247
    1e02:	18 96       	adiw	r26, 0x08	; 8
    1e04:	8c 93       	st	X, r24
			CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    1e06:	a6 e4       	ldi	r26, 0x46	; 70
    1e08:	b0 e0       	ldi	r27, 0x00	; 0
    1e0a:	e6 e4       	ldi	r30, 0x46	; 70
    1e0c:	f0 e0       	ldi	r31, 0x00	; 0
    1e0e:	80 85       	ldd	r24, Z+8	; 0x08
    1e10:	8f 7e       	andi	r24, 0xEF	; 239
    1e12:	18 96       	adiw	r26, 0x08	; 8
    1e14:	8c 93       	st	X, r24
    1e16:	18 97       	sbiw	r26, 0x08	; 8
    1e18:	c3 c1       	rjmp	.+902    	; 0x21a0 <Timer_Init+0x720>
			break;

		case TIMER1_PWM_PHASE_CORRECT_9BIT:
			CLR_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    1e1a:	a6 e4       	ldi	r26, 0x46	; 70
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e6 e4       	ldi	r30, 0x46	; 70
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	81 85       	ldd	r24, Z+9	; 0x09
    1e24:	8e 7f       	andi	r24, 0xFE	; 254
    1e26:	19 96       	adiw	r26, 0x09	; 9
    1e28:	8c 93       	st	X, r24
			SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    1e2a:	a6 e4       	ldi	r26, 0x46	; 70
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	e6 e4       	ldi	r30, 0x46	; 70
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	81 85       	ldd	r24, Z+9	; 0x09
    1e34:	82 60       	ori	r24, 0x02	; 2
    1e36:	19 96       	adiw	r26, 0x09	; 9
    1e38:	8c 93       	st	X, r24
			CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    1e3a:	a6 e4       	ldi	r26, 0x46	; 70
    1e3c:	b0 e0       	ldi	r27, 0x00	; 0
    1e3e:	e6 e4       	ldi	r30, 0x46	; 70
    1e40:	f0 e0       	ldi	r31, 0x00	; 0
    1e42:	80 85       	ldd	r24, Z+8	; 0x08
    1e44:	87 7f       	andi	r24, 0xF7	; 247
    1e46:	18 96       	adiw	r26, 0x08	; 8
    1e48:	8c 93       	st	X, r24
			CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    1e4a:	a6 e4       	ldi	r26, 0x46	; 70
    1e4c:	b0 e0       	ldi	r27, 0x00	; 0
    1e4e:	e6 e4       	ldi	r30, 0x46	; 70
    1e50:	f0 e0       	ldi	r31, 0x00	; 0
    1e52:	80 85       	ldd	r24, Z+8	; 0x08
    1e54:	8f 7e       	andi	r24, 0xEF	; 239
    1e56:	18 96       	adiw	r26, 0x08	; 8
    1e58:	8c 93       	st	X, r24
    1e5a:	18 97       	sbiw	r26, 0x08	; 8
    1e5c:	a1 c1       	rjmp	.+834    	; 0x21a0 <Timer_Init+0x720>
			break;

		case TIMER1_PWM_PHASE_CORRECT_10BIT:
			SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    1e5e:	a6 e4       	ldi	r26, 0x46	; 70
    1e60:	b0 e0       	ldi	r27, 0x00	; 0
    1e62:	e6 e4       	ldi	r30, 0x46	; 70
    1e64:	f0 e0       	ldi	r31, 0x00	; 0
    1e66:	81 85       	ldd	r24, Z+9	; 0x09
    1e68:	81 60       	ori	r24, 0x01	; 1
    1e6a:	19 96       	adiw	r26, 0x09	; 9
    1e6c:	8c 93       	st	X, r24
			SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    1e6e:	a6 e4       	ldi	r26, 0x46	; 70
    1e70:	b0 e0       	ldi	r27, 0x00	; 0
    1e72:	e6 e4       	ldi	r30, 0x46	; 70
    1e74:	f0 e0       	ldi	r31, 0x00	; 0
    1e76:	81 85       	ldd	r24, Z+9	; 0x09
    1e78:	82 60       	ori	r24, 0x02	; 2
    1e7a:	19 96       	adiw	r26, 0x09	; 9
    1e7c:	8c 93       	st	X, r24
			CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    1e7e:	a6 e4       	ldi	r26, 0x46	; 70
    1e80:	b0 e0       	ldi	r27, 0x00	; 0
    1e82:	e6 e4       	ldi	r30, 0x46	; 70
    1e84:	f0 e0       	ldi	r31, 0x00	; 0
    1e86:	80 85       	ldd	r24, Z+8	; 0x08
    1e88:	87 7f       	andi	r24, 0xF7	; 247
    1e8a:	18 96       	adiw	r26, 0x08	; 8
    1e8c:	8c 93       	st	X, r24
			CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    1e8e:	a6 e4       	ldi	r26, 0x46	; 70
    1e90:	b0 e0       	ldi	r27, 0x00	; 0
    1e92:	e6 e4       	ldi	r30, 0x46	; 70
    1e94:	f0 e0       	ldi	r31, 0x00	; 0
    1e96:	80 85       	ldd	r24, Z+8	; 0x08
    1e98:	8f 7e       	andi	r24, 0xEF	; 239
    1e9a:	18 96       	adiw	r26, 0x08	; 8
    1e9c:	8c 93       	st	X, r24
    1e9e:	18 97       	sbiw	r26, 0x08	; 8
    1ea0:	7f c1       	rjmp	.+766    	; 0x21a0 <Timer_Init+0x720>
			break;

		case TIMER1_CTC_OCR:
			Timer1_BASE->OCR1A_t = Config_ptr->compare_value;
    1ea2:	a6 e4       	ldi	r26, 0x46	; 70
    1ea4:	b0 e0       	ldi	r27, 0x00	; 0
    1ea6:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea8:	fa 81       	ldd	r31, Y+2	; 0x02
    1eaa:	85 81       	ldd	r24, Z+5	; 0x05
    1eac:	96 81       	ldd	r25, Z+6	; 0x06
    1eae:	15 96       	adiw	r26, 0x05	; 5
    1eb0:	9c 93       	st	X, r25
    1eb2:	8e 93       	st	-X, r24
    1eb4:	14 97       	sbiw	r26, 0x04	; 4
			CLR_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    1eb6:	a6 e4       	ldi	r26, 0x46	; 70
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	e6 e4       	ldi	r30, 0x46	; 70
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	81 85       	ldd	r24, Z+9	; 0x09
    1ec0:	8e 7f       	andi	r24, 0xFE	; 254
    1ec2:	19 96       	adiw	r26, 0x09	; 9
    1ec4:	8c 93       	st	X, r24
			CLR_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    1ec6:	a6 e4       	ldi	r26, 0x46	; 70
    1ec8:	b0 e0       	ldi	r27, 0x00	; 0
    1eca:	e6 e4       	ldi	r30, 0x46	; 70
    1ecc:	f0 e0       	ldi	r31, 0x00	; 0
    1ece:	81 85       	ldd	r24, Z+9	; 0x09
    1ed0:	8d 7f       	andi	r24, 0xFD	; 253
    1ed2:	19 96       	adiw	r26, 0x09	; 9
    1ed4:	8c 93       	st	X, r24
			SET_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    1ed6:	a6 e4       	ldi	r26, 0x46	; 70
    1ed8:	b0 e0       	ldi	r27, 0x00	; 0
    1eda:	e6 e4       	ldi	r30, 0x46	; 70
    1edc:	f0 e0       	ldi	r31, 0x00	; 0
    1ede:	80 85       	ldd	r24, Z+8	; 0x08
    1ee0:	88 60       	ori	r24, 0x08	; 8
    1ee2:	18 96       	adiw	r26, 0x08	; 8
    1ee4:	8c 93       	st	X, r24
			CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    1ee6:	a6 e4       	ldi	r26, 0x46	; 70
    1ee8:	b0 e0       	ldi	r27, 0x00	; 0
    1eea:	e6 e4       	ldi	r30, 0x46	; 70
    1eec:	f0 e0       	ldi	r31, 0x00	; 0
    1eee:	80 85       	ldd	r24, Z+8	; 0x08
    1ef0:	8f 7e       	andi	r24, 0xEF	; 239
    1ef2:	18 96       	adiw	r26, 0x08	; 8
    1ef4:	8c 93       	st	X, r24
    1ef6:	18 97       	sbiw	r26, 0x08	; 8
    1ef8:	53 c1       	rjmp	.+678    	; 0x21a0 <Timer_Init+0x720>
			break;

		case TIMER1_FAST_PWM_8BIT:
			SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    1efa:	a6 e4       	ldi	r26, 0x46	; 70
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	e6 e4       	ldi	r30, 0x46	; 70
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	81 85       	ldd	r24, Z+9	; 0x09
    1f04:	81 60       	ori	r24, 0x01	; 1
    1f06:	19 96       	adiw	r26, 0x09	; 9
    1f08:	8c 93       	st	X, r24
			CLR_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    1f0a:	a6 e4       	ldi	r26, 0x46	; 70
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	e6 e4       	ldi	r30, 0x46	; 70
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	81 85       	ldd	r24, Z+9	; 0x09
    1f14:	8d 7f       	andi	r24, 0xFD	; 253
    1f16:	19 96       	adiw	r26, 0x09	; 9
    1f18:	8c 93       	st	X, r24
			SET_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    1f1a:	a6 e4       	ldi	r26, 0x46	; 70
    1f1c:	b0 e0       	ldi	r27, 0x00	; 0
    1f1e:	e6 e4       	ldi	r30, 0x46	; 70
    1f20:	f0 e0       	ldi	r31, 0x00	; 0
    1f22:	80 85       	ldd	r24, Z+8	; 0x08
    1f24:	88 60       	ori	r24, 0x08	; 8
    1f26:	18 96       	adiw	r26, 0x08	; 8
    1f28:	8c 93       	st	X, r24
			CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    1f2a:	a6 e4       	ldi	r26, 0x46	; 70
    1f2c:	b0 e0       	ldi	r27, 0x00	; 0
    1f2e:	e6 e4       	ldi	r30, 0x46	; 70
    1f30:	f0 e0       	ldi	r31, 0x00	; 0
    1f32:	80 85       	ldd	r24, Z+8	; 0x08
    1f34:	8f 7e       	andi	r24, 0xEF	; 239
    1f36:	18 96       	adiw	r26, 0x08	; 8
    1f38:	8c 93       	st	X, r24
    1f3a:	18 97       	sbiw	r26, 0x08	; 8
    1f3c:	31 c1       	rjmp	.+610    	; 0x21a0 <Timer_Init+0x720>
			break;

		case TIMER1_FAST_PWM_9BIT:
			CLR_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    1f3e:	a6 e4       	ldi	r26, 0x46	; 70
    1f40:	b0 e0       	ldi	r27, 0x00	; 0
    1f42:	e6 e4       	ldi	r30, 0x46	; 70
    1f44:	f0 e0       	ldi	r31, 0x00	; 0
    1f46:	81 85       	ldd	r24, Z+9	; 0x09
    1f48:	8e 7f       	andi	r24, 0xFE	; 254
    1f4a:	19 96       	adiw	r26, 0x09	; 9
    1f4c:	8c 93       	st	X, r24
			SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    1f4e:	a6 e4       	ldi	r26, 0x46	; 70
    1f50:	b0 e0       	ldi	r27, 0x00	; 0
    1f52:	e6 e4       	ldi	r30, 0x46	; 70
    1f54:	f0 e0       	ldi	r31, 0x00	; 0
    1f56:	81 85       	ldd	r24, Z+9	; 0x09
    1f58:	82 60       	ori	r24, 0x02	; 2
    1f5a:	19 96       	adiw	r26, 0x09	; 9
    1f5c:	8c 93       	st	X, r24
			SET_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    1f5e:	a6 e4       	ldi	r26, 0x46	; 70
    1f60:	b0 e0       	ldi	r27, 0x00	; 0
    1f62:	e6 e4       	ldi	r30, 0x46	; 70
    1f64:	f0 e0       	ldi	r31, 0x00	; 0
    1f66:	80 85       	ldd	r24, Z+8	; 0x08
    1f68:	88 60       	ori	r24, 0x08	; 8
    1f6a:	18 96       	adiw	r26, 0x08	; 8
    1f6c:	8c 93       	st	X, r24
			CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    1f6e:	a6 e4       	ldi	r26, 0x46	; 70
    1f70:	b0 e0       	ldi	r27, 0x00	; 0
    1f72:	e6 e4       	ldi	r30, 0x46	; 70
    1f74:	f0 e0       	ldi	r31, 0x00	; 0
    1f76:	80 85       	ldd	r24, Z+8	; 0x08
    1f78:	8f 7e       	andi	r24, 0xEF	; 239
    1f7a:	18 96       	adiw	r26, 0x08	; 8
    1f7c:	8c 93       	st	X, r24
    1f7e:	18 97       	sbiw	r26, 0x08	; 8
    1f80:	0f c1       	rjmp	.+542    	; 0x21a0 <Timer_Init+0x720>
			break;

		case TIMER1_FAST_PWM_10BIT:
			SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    1f82:	a6 e4       	ldi	r26, 0x46	; 70
    1f84:	b0 e0       	ldi	r27, 0x00	; 0
    1f86:	e6 e4       	ldi	r30, 0x46	; 70
    1f88:	f0 e0       	ldi	r31, 0x00	; 0
    1f8a:	81 85       	ldd	r24, Z+9	; 0x09
    1f8c:	81 60       	ori	r24, 0x01	; 1
    1f8e:	19 96       	adiw	r26, 0x09	; 9
    1f90:	8c 93       	st	X, r24
			SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    1f92:	a6 e4       	ldi	r26, 0x46	; 70
    1f94:	b0 e0       	ldi	r27, 0x00	; 0
    1f96:	e6 e4       	ldi	r30, 0x46	; 70
    1f98:	f0 e0       	ldi	r31, 0x00	; 0
    1f9a:	81 85       	ldd	r24, Z+9	; 0x09
    1f9c:	82 60       	ori	r24, 0x02	; 2
    1f9e:	19 96       	adiw	r26, 0x09	; 9
    1fa0:	8c 93       	st	X, r24
			SET_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    1fa2:	a6 e4       	ldi	r26, 0x46	; 70
    1fa4:	b0 e0       	ldi	r27, 0x00	; 0
    1fa6:	e6 e4       	ldi	r30, 0x46	; 70
    1fa8:	f0 e0       	ldi	r31, 0x00	; 0
    1faa:	80 85       	ldd	r24, Z+8	; 0x08
    1fac:	88 60       	ori	r24, 0x08	; 8
    1fae:	18 96       	adiw	r26, 0x08	; 8
    1fb0:	8c 93       	st	X, r24
			CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    1fb2:	a6 e4       	ldi	r26, 0x46	; 70
    1fb4:	b0 e0       	ldi	r27, 0x00	; 0
    1fb6:	e6 e4       	ldi	r30, 0x46	; 70
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	80 85       	ldd	r24, Z+8	; 0x08
    1fbc:	8f 7e       	andi	r24, 0xEF	; 239
    1fbe:	18 96       	adiw	r26, 0x08	; 8
    1fc0:	8c 93       	st	X, r24
    1fc2:	18 97       	sbiw	r26, 0x08	; 8
    1fc4:	ed c0       	rjmp	.+474    	; 0x21a0 <Timer_Init+0x720>
			break;

		case TIMER1_PWM_PHASE_FREQUENCY_CORRECT_ICR:
			CLR_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    1fc6:	a6 e4       	ldi	r26, 0x46	; 70
    1fc8:	b0 e0       	ldi	r27, 0x00	; 0
    1fca:	e6 e4       	ldi	r30, 0x46	; 70
    1fcc:	f0 e0       	ldi	r31, 0x00	; 0
    1fce:	81 85       	ldd	r24, Z+9	; 0x09
    1fd0:	8e 7f       	andi	r24, 0xFE	; 254
    1fd2:	19 96       	adiw	r26, 0x09	; 9
    1fd4:	8c 93       	st	X, r24
			CLR_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    1fd6:	a6 e4       	ldi	r26, 0x46	; 70
    1fd8:	b0 e0       	ldi	r27, 0x00	; 0
    1fda:	e6 e4       	ldi	r30, 0x46	; 70
    1fdc:	f0 e0       	ldi	r31, 0x00	; 0
    1fde:	81 85       	ldd	r24, Z+9	; 0x09
    1fe0:	8d 7f       	andi	r24, 0xFD	; 253
    1fe2:	19 96       	adiw	r26, 0x09	; 9
    1fe4:	8c 93       	st	X, r24
			CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    1fe6:	a6 e4       	ldi	r26, 0x46	; 70
    1fe8:	b0 e0       	ldi	r27, 0x00	; 0
    1fea:	e6 e4       	ldi	r30, 0x46	; 70
    1fec:	f0 e0       	ldi	r31, 0x00	; 0
    1fee:	80 85       	ldd	r24, Z+8	; 0x08
    1ff0:	87 7f       	andi	r24, 0xF7	; 247
    1ff2:	18 96       	adiw	r26, 0x08	; 8
    1ff4:	8c 93       	st	X, r24
			SET_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    1ff6:	a6 e4       	ldi	r26, 0x46	; 70
    1ff8:	b0 e0       	ldi	r27, 0x00	; 0
    1ffa:	e6 e4       	ldi	r30, 0x46	; 70
    1ffc:	f0 e0       	ldi	r31, 0x00	; 0
    1ffe:	80 85       	ldd	r24, Z+8	; 0x08
    2000:	80 61       	ori	r24, 0x10	; 16
    2002:	18 96       	adiw	r26, 0x08	; 8
    2004:	8c 93       	st	X, r24
    2006:	18 97       	sbiw	r26, 0x08	; 8
    2008:	cb c0       	rjmp	.+406    	; 0x21a0 <Timer_Init+0x720>
			break;

		case TIMER1_PWM_PHASE_FREQUENCY_CORRECT_OCR:
			SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    200a:	a6 e4       	ldi	r26, 0x46	; 70
    200c:	b0 e0       	ldi	r27, 0x00	; 0
    200e:	e6 e4       	ldi	r30, 0x46	; 70
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	81 85       	ldd	r24, Z+9	; 0x09
    2014:	81 60       	ori	r24, 0x01	; 1
    2016:	19 96       	adiw	r26, 0x09	; 9
    2018:	8c 93       	st	X, r24
			CLR_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    201a:	a6 e4       	ldi	r26, 0x46	; 70
    201c:	b0 e0       	ldi	r27, 0x00	; 0
    201e:	e6 e4       	ldi	r30, 0x46	; 70
    2020:	f0 e0       	ldi	r31, 0x00	; 0
    2022:	81 85       	ldd	r24, Z+9	; 0x09
    2024:	8d 7f       	andi	r24, 0xFD	; 253
    2026:	19 96       	adiw	r26, 0x09	; 9
    2028:	8c 93       	st	X, r24
			CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    202a:	a6 e4       	ldi	r26, 0x46	; 70
    202c:	b0 e0       	ldi	r27, 0x00	; 0
    202e:	e6 e4       	ldi	r30, 0x46	; 70
    2030:	f0 e0       	ldi	r31, 0x00	; 0
    2032:	80 85       	ldd	r24, Z+8	; 0x08
    2034:	87 7f       	andi	r24, 0xF7	; 247
    2036:	18 96       	adiw	r26, 0x08	; 8
    2038:	8c 93       	st	X, r24
			SET_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    203a:	a6 e4       	ldi	r26, 0x46	; 70
    203c:	b0 e0       	ldi	r27, 0x00	; 0
    203e:	e6 e4       	ldi	r30, 0x46	; 70
    2040:	f0 e0       	ldi	r31, 0x00	; 0
    2042:	80 85       	ldd	r24, Z+8	; 0x08
    2044:	80 61       	ori	r24, 0x10	; 16
    2046:	18 96       	adiw	r26, 0x08	; 8
    2048:	8c 93       	st	X, r24
    204a:	18 97       	sbiw	r26, 0x08	; 8
    204c:	a9 c0       	rjmp	.+338    	; 0x21a0 <Timer_Init+0x720>
			break;

		case TIMER1_PWM_PHASE_CORRECT_ICR:
			CLR_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    204e:	a6 e4       	ldi	r26, 0x46	; 70
    2050:	b0 e0       	ldi	r27, 0x00	; 0
    2052:	e6 e4       	ldi	r30, 0x46	; 70
    2054:	f0 e0       	ldi	r31, 0x00	; 0
    2056:	81 85       	ldd	r24, Z+9	; 0x09
    2058:	8e 7f       	andi	r24, 0xFE	; 254
    205a:	19 96       	adiw	r26, 0x09	; 9
    205c:	8c 93       	st	X, r24
			SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    205e:	a6 e4       	ldi	r26, 0x46	; 70
    2060:	b0 e0       	ldi	r27, 0x00	; 0
    2062:	e6 e4       	ldi	r30, 0x46	; 70
    2064:	f0 e0       	ldi	r31, 0x00	; 0
    2066:	81 85       	ldd	r24, Z+9	; 0x09
    2068:	82 60       	ori	r24, 0x02	; 2
    206a:	19 96       	adiw	r26, 0x09	; 9
    206c:	8c 93       	st	X, r24
			CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    206e:	a6 e4       	ldi	r26, 0x46	; 70
    2070:	b0 e0       	ldi	r27, 0x00	; 0
    2072:	e6 e4       	ldi	r30, 0x46	; 70
    2074:	f0 e0       	ldi	r31, 0x00	; 0
    2076:	80 85       	ldd	r24, Z+8	; 0x08
    2078:	87 7f       	andi	r24, 0xF7	; 247
    207a:	18 96       	adiw	r26, 0x08	; 8
    207c:	8c 93       	st	X, r24
			SET_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    207e:	a6 e4       	ldi	r26, 0x46	; 70
    2080:	b0 e0       	ldi	r27, 0x00	; 0
    2082:	e6 e4       	ldi	r30, 0x46	; 70
    2084:	f0 e0       	ldi	r31, 0x00	; 0
    2086:	80 85       	ldd	r24, Z+8	; 0x08
    2088:	80 61       	ori	r24, 0x10	; 16
    208a:	18 96       	adiw	r26, 0x08	; 8
    208c:	8c 93       	st	X, r24
    208e:	18 97       	sbiw	r26, 0x08	; 8
    2090:	87 c0       	rjmp	.+270    	; 0x21a0 <Timer_Init+0x720>
			break;

		case TIMER1_PWM_PHASE_CORRECT_OCR:
			SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    2092:	a6 e4       	ldi	r26, 0x46	; 70
    2094:	b0 e0       	ldi	r27, 0x00	; 0
    2096:	e6 e4       	ldi	r30, 0x46	; 70
    2098:	f0 e0       	ldi	r31, 0x00	; 0
    209a:	81 85       	ldd	r24, Z+9	; 0x09
    209c:	81 60       	ori	r24, 0x01	; 1
    209e:	19 96       	adiw	r26, 0x09	; 9
    20a0:	8c 93       	st	X, r24
			SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    20a2:	a6 e4       	ldi	r26, 0x46	; 70
    20a4:	b0 e0       	ldi	r27, 0x00	; 0
    20a6:	e6 e4       	ldi	r30, 0x46	; 70
    20a8:	f0 e0       	ldi	r31, 0x00	; 0
    20aa:	81 85       	ldd	r24, Z+9	; 0x09
    20ac:	82 60       	ori	r24, 0x02	; 2
    20ae:	19 96       	adiw	r26, 0x09	; 9
    20b0:	8c 93       	st	X, r24
			CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    20b2:	a6 e4       	ldi	r26, 0x46	; 70
    20b4:	b0 e0       	ldi	r27, 0x00	; 0
    20b6:	e6 e4       	ldi	r30, 0x46	; 70
    20b8:	f0 e0       	ldi	r31, 0x00	; 0
    20ba:	80 85       	ldd	r24, Z+8	; 0x08
    20bc:	87 7f       	andi	r24, 0xF7	; 247
    20be:	18 96       	adiw	r26, 0x08	; 8
    20c0:	8c 93       	st	X, r24
			SET_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    20c2:	a6 e4       	ldi	r26, 0x46	; 70
    20c4:	b0 e0       	ldi	r27, 0x00	; 0
    20c6:	e6 e4       	ldi	r30, 0x46	; 70
    20c8:	f0 e0       	ldi	r31, 0x00	; 0
    20ca:	80 85       	ldd	r24, Z+8	; 0x08
    20cc:	80 61       	ori	r24, 0x10	; 16
    20ce:	18 96       	adiw	r26, 0x08	; 8
    20d0:	8c 93       	st	X, r24
    20d2:	18 97       	sbiw	r26, 0x08	; 8
    20d4:	65 c0       	rjmp	.+202    	; 0x21a0 <Timer_Init+0x720>
			break;

		case TIMER1_CTC_ICR:
			CLR_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    20d6:	a6 e4       	ldi	r26, 0x46	; 70
    20d8:	b0 e0       	ldi	r27, 0x00	; 0
    20da:	e6 e4       	ldi	r30, 0x46	; 70
    20dc:	f0 e0       	ldi	r31, 0x00	; 0
    20de:	81 85       	ldd	r24, Z+9	; 0x09
    20e0:	8e 7f       	andi	r24, 0xFE	; 254
    20e2:	19 96       	adiw	r26, 0x09	; 9
    20e4:	8c 93       	st	X, r24
			CLR_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    20e6:	a6 e4       	ldi	r26, 0x46	; 70
    20e8:	b0 e0       	ldi	r27, 0x00	; 0
    20ea:	e6 e4       	ldi	r30, 0x46	; 70
    20ec:	f0 e0       	ldi	r31, 0x00	; 0
    20ee:	81 85       	ldd	r24, Z+9	; 0x09
    20f0:	8d 7f       	andi	r24, 0xFD	; 253
    20f2:	19 96       	adiw	r26, 0x09	; 9
    20f4:	8c 93       	st	X, r24
			SET_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    20f6:	a6 e4       	ldi	r26, 0x46	; 70
    20f8:	b0 e0       	ldi	r27, 0x00	; 0
    20fa:	e6 e4       	ldi	r30, 0x46	; 70
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 85       	ldd	r24, Z+8	; 0x08
    2100:	88 60       	ori	r24, 0x08	; 8
    2102:	18 96       	adiw	r26, 0x08	; 8
    2104:	8c 93       	st	X, r24
			SET_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    2106:	a6 e4       	ldi	r26, 0x46	; 70
    2108:	b0 e0       	ldi	r27, 0x00	; 0
    210a:	e6 e4       	ldi	r30, 0x46	; 70
    210c:	f0 e0       	ldi	r31, 0x00	; 0
    210e:	80 85       	ldd	r24, Z+8	; 0x08
    2110:	80 61       	ori	r24, 0x10	; 16
    2112:	18 96       	adiw	r26, 0x08	; 8
    2114:	8c 93       	st	X, r24
    2116:	18 97       	sbiw	r26, 0x08	; 8
    2118:	43 c0       	rjmp	.+134    	; 0x21a0 <Timer_Init+0x720>
			break;

		case TIMER1_FAST_PWM_ICR:
			CLR_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    211a:	a6 e4       	ldi	r26, 0x46	; 70
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	e6 e4       	ldi	r30, 0x46	; 70
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	81 85       	ldd	r24, Z+9	; 0x09
    2124:	8e 7f       	andi	r24, 0xFE	; 254
    2126:	19 96       	adiw	r26, 0x09	; 9
    2128:	8c 93       	st	X, r24
			SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    212a:	a6 e4       	ldi	r26, 0x46	; 70
    212c:	b0 e0       	ldi	r27, 0x00	; 0
    212e:	e6 e4       	ldi	r30, 0x46	; 70
    2130:	f0 e0       	ldi	r31, 0x00	; 0
    2132:	81 85       	ldd	r24, Z+9	; 0x09
    2134:	82 60       	ori	r24, 0x02	; 2
    2136:	19 96       	adiw	r26, 0x09	; 9
    2138:	8c 93       	st	X, r24
			SET_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    213a:	a6 e4       	ldi	r26, 0x46	; 70
    213c:	b0 e0       	ldi	r27, 0x00	; 0
    213e:	e6 e4       	ldi	r30, 0x46	; 70
    2140:	f0 e0       	ldi	r31, 0x00	; 0
    2142:	80 85       	ldd	r24, Z+8	; 0x08
    2144:	88 60       	ori	r24, 0x08	; 8
    2146:	18 96       	adiw	r26, 0x08	; 8
    2148:	8c 93       	st	X, r24
			SET_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    214a:	a6 e4       	ldi	r26, 0x46	; 70
    214c:	b0 e0       	ldi	r27, 0x00	; 0
    214e:	e6 e4       	ldi	r30, 0x46	; 70
    2150:	f0 e0       	ldi	r31, 0x00	; 0
    2152:	80 85       	ldd	r24, Z+8	; 0x08
    2154:	80 61       	ori	r24, 0x10	; 16
    2156:	18 96       	adiw	r26, 0x08	; 8
    2158:	8c 93       	st	X, r24
    215a:	18 97       	sbiw	r26, 0x08	; 8
    215c:	21 c0       	rjmp	.+66     	; 0x21a0 <Timer_Init+0x720>
			break;

		case TIMER1_FAST_PWM_OCR:
			SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    215e:	a6 e4       	ldi	r26, 0x46	; 70
    2160:	b0 e0       	ldi	r27, 0x00	; 0
    2162:	e6 e4       	ldi	r30, 0x46	; 70
    2164:	f0 e0       	ldi	r31, 0x00	; 0
    2166:	81 85       	ldd	r24, Z+9	; 0x09
    2168:	81 60       	ori	r24, 0x01	; 1
    216a:	19 96       	adiw	r26, 0x09	; 9
    216c:	8c 93       	st	X, r24
			SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    216e:	a6 e4       	ldi	r26, 0x46	; 70
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	e6 e4       	ldi	r30, 0x46	; 70
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	81 85       	ldd	r24, Z+9	; 0x09
    2178:	82 60       	ori	r24, 0x02	; 2
    217a:	19 96       	adiw	r26, 0x09	; 9
    217c:	8c 93       	st	X, r24
			SET_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    217e:	a6 e4       	ldi	r26, 0x46	; 70
    2180:	b0 e0       	ldi	r27, 0x00	; 0
    2182:	e6 e4       	ldi	r30, 0x46	; 70
    2184:	f0 e0       	ldi	r31, 0x00	; 0
    2186:	80 85       	ldd	r24, Z+8	; 0x08
    2188:	88 60       	ori	r24, 0x08	; 8
    218a:	18 96       	adiw	r26, 0x08	; 8
    218c:	8c 93       	st	X, r24
			SET_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    218e:	a6 e4       	ldi	r26, 0x46	; 70
    2190:	b0 e0       	ldi	r27, 0x00	; 0
    2192:	e6 e4       	ldi	r30, 0x46	; 70
    2194:	f0 e0       	ldi	r31, 0x00	; 0
    2196:	80 85       	ldd	r24, Z+8	; 0x08
    2198:	80 61       	ori	r24, 0x10	; 16
    219a:	18 96       	adiw	r26, 0x08	; 8
    219c:	8c 93       	st	X, r24
    219e:	18 97       	sbiw	r26, 0x08	; 8
			break;

		default:
			break;
		}
		if(Config_ptr->Channels == ChannelB)
    21a0:	e9 81       	ldd	r30, Y+1	; 0x01
    21a2:	fa 81       	ldd	r31, Y+2	; 0x02
    21a4:	80 85       	ldd	r24, Z+8	; 0x08
    21a6:	81 30       	cpi	r24, 0x01	; 1
    21a8:	d1 f4       	brne	.+52     	; 0x21de <Timer_Init+0x75e>
		{
			Timer1_BASE->TCCR1B_t.Reg = ((Timer1_BASE->TCCR1B_t.Reg & 0x3F) | (Config_ptr->signal_output) << COM1A0);
    21aa:	a6 e4       	ldi	r26, 0x46	; 70
    21ac:	b0 e0       	ldi	r27, 0x00	; 0
    21ae:	e6 e4       	ldi	r30, 0x46	; 70
    21b0:	f0 e0       	ldi	r31, 0x00	; 0
    21b2:	80 85       	ldd	r24, Z+8	; 0x08
    21b4:	28 2f       	mov	r18, r24
    21b6:	2f 73       	andi	r18, 0x3F	; 63
    21b8:	e9 81       	ldd	r30, Y+1	; 0x01
    21ba:	fa 81       	ldd	r31, Y+2	; 0x02
    21bc:	82 81       	ldd	r24, Z+2	; 0x02
    21be:	88 2f       	mov	r24, r24
    21c0:	90 e0       	ldi	r25, 0x00	; 0
    21c2:	00 24       	eor	r0, r0
    21c4:	96 95       	lsr	r25
    21c6:	87 95       	ror	r24
    21c8:	07 94       	ror	r0
    21ca:	96 95       	lsr	r25
    21cc:	87 95       	ror	r24
    21ce:	07 94       	ror	r0
    21d0:	98 2f       	mov	r25, r24
    21d2:	80 2d       	mov	r24, r0
    21d4:	82 2b       	or	r24, r18
    21d6:	18 96       	adiw	r26, 0x08	; 8
    21d8:	8c 93       	st	X, r24
    21da:	18 97       	sbiw	r26, 0x08	; 8
    21dc:	16 c0       	rjmp	.+44     	; 0x220a <Timer_Init+0x78a>
		}
		else
		{
			Timer1_BASE->TCCR1A_t.Reg = ((Timer1_BASE->TCCR1A_t.Reg & 0xCF) | (Config_ptr->signal_output) << COM1B0);
    21de:	a6 e4       	ldi	r26, 0x46	; 70
    21e0:	b0 e0       	ldi	r27, 0x00	; 0
    21e2:	e6 e4       	ldi	r30, 0x46	; 70
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	81 85       	ldd	r24, Z+9	; 0x09
    21e8:	28 2f       	mov	r18, r24
    21ea:	2f 7c       	andi	r18, 0xCF	; 207
    21ec:	e9 81       	ldd	r30, Y+1	; 0x01
    21ee:	fa 81       	ldd	r31, Y+2	; 0x02
    21f0:	82 81       	ldd	r24, Z+2	; 0x02
    21f2:	88 2f       	mov	r24, r24
    21f4:	90 e0       	ldi	r25, 0x00	; 0
    21f6:	82 95       	swap	r24
    21f8:	92 95       	swap	r25
    21fa:	90 7f       	andi	r25, 0xF0	; 240
    21fc:	98 27       	eor	r25, r24
    21fe:	80 7f       	andi	r24, 0xF0	; 240
    2200:	98 27       	eor	r25, r24
    2202:	82 2b       	or	r24, r18
    2204:	19 96       	adiw	r26, 0x09	; 9
    2206:	8c 93       	st	X, r24
    2208:	19 97       	sbiw	r26, 0x09	; 9
		}

	}


}
    220a:	26 96       	adiw	r28, 0x06	; 6
    220c:	0f b6       	in	r0, 0x3f	; 63
    220e:	f8 94       	cli
    2210:	de bf       	out	0x3e, r29	; 62
    2212:	0f be       	out	0x3f, r0	; 63
    2214:	cd bf       	out	0x3d, r28	; 61
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	08 95       	ret

0000221c <Timer_start>:


void Timer_start(Timer_Config *Config_ptr)
{
    221c:	df 93       	push	r29
    221e:	cf 93       	push	r28
    2220:	00 d0       	rcall	.+0      	; 0x2222 <Timer_start+0x6>
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
    2226:	9a 83       	std	Y+2, r25	; 0x02
    2228:	89 83       	std	Y+1, r24	; 0x01
	Timer0_BASE->TCCR0_Reg.Reg |= Config_ptr->prescalar;
    222a:	a2 e5       	ldi	r26, 0x52	; 82
    222c:	b0 e0       	ldi	r27, 0x00	; 0
    222e:	e2 e5       	ldi	r30, 0x52	; 82
    2230:	f0 e0       	ldi	r31, 0x00	; 0
    2232:	91 81       	ldd	r25, Z+1	; 0x01
    2234:	e9 81       	ldd	r30, Y+1	; 0x01
    2236:	fa 81       	ldd	r31, Y+2	; 0x02
    2238:	81 81       	ldd	r24, Z+1	; 0x01
    223a:	89 2b       	or	r24, r25
    223c:	11 96       	adiw	r26, 0x01	; 1
    223e:	8c 93       	st	X, r24
    2240:	11 97       	sbiw	r26, 0x01	; 1

}
    2242:	0f 90       	pop	r0
    2244:	0f 90       	pop	r0
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <Timer_stop>:


void Timer_stop()
{
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
	Timer0_BASE->TCCR0_Reg.Reg &= 0xF8;
    2254:	a2 e5       	ldi	r26, 0x52	; 82
    2256:	b0 e0       	ldi	r27, 0x00	; 0
    2258:	e2 e5       	ldi	r30, 0x52	; 82
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	81 81       	ldd	r24, Z+1	; 0x01
    225e:	88 7f       	andi	r24, 0xF8	; 248
    2260:	11 96       	adiw	r26, 0x01	; 1
    2262:	8c 93       	st	X, r24
    2264:	11 97       	sbiw	r26, 0x01	; 1

}
    2266:	cf 91       	pop	r28
    2268:	df 91       	pop	r29
    226a:	08 95       	ret

0000226c <EnableInt>:




void EnableInt(	Timer_Config *Config_ptr,void(*fnptr)(void))
{
    226c:	df 93       	push	r29
    226e:	cf 93       	push	r28
    2270:	cd b7       	in	r28, 0x3d	; 61
    2272:	de b7       	in	r29, 0x3e	; 62
    2274:	28 97       	sbiw	r28, 0x08	; 8
    2276:	0f b6       	in	r0, 0x3f	; 63
    2278:	f8 94       	cli
    227a:	de bf       	out	0x3e, r29	; 62
    227c:	0f be       	out	0x3f, r0	; 63
    227e:	cd bf       	out	0x3d, r28	; 61
    2280:	9a 83       	std	Y+2, r25	; 0x02
    2282:	89 83       	std	Y+1, r24	; 0x01
    2284:	7c 83       	std	Y+4, r23	; 0x04
    2286:	6b 83       	std	Y+3, r22	; 0x03

	if(Config_ptr->Timer_ID == Timer0)
    2288:	e9 81       	ldd	r30, Y+1	; 0x01
    228a:	fa 81       	ldd	r31, Y+2	; 0x02
    228c:	87 81       	ldd	r24, Z+7	; 0x07
    228e:	88 23       	and	r24, r24
    2290:	09 f0       	breq	.+2      	; 0x2294 <EnableInt+0x28>
    2292:	49 c0       	rjmp	.+146    	; 0x2326 <EnableInt+0xba>
	{
		switch(Config_ptr->mode)
    2294:	e9 81       	ldd	r30, Y+1	; 0x01
    2296:	fa 81       	ldd	r31, Y+2	; 0x02
    2298:	80 81       	ld	r24, Z
    229a:	28 2f       	mov	r18, r24
    229c:	30 e0       	ldi	r19, 0x00	; 0
    229e:	38 87       	std	Y+8, r19	; 0x08
    22a0:	2f 83       	std	Y+7, r18	; 0x07
    22a2:	8f 81       	ldd	r24, Y+7	; 0x07
    22a4:	98 85       	ldd	r25, Y+8	; 0x08
    22a6:	00 97       	sbiw	r24, 0x00	; 0
    22a8:	31 f0       	breq	.+12     	; 0x22b6 <EnableInt+0x4a>
    22aa:	2f 81       	ldd	r18, Y+7	; 0x07
    22ac:	38 85       	ldd	r19, Y+8	; 0x08
    22ae:	22 30       	cpi	r18, 0x02	; 2
    22b0:	31 05       	cpc	r19, r1
    22b2:	e9 f0       	breq	.+58     	; 0x22ee <EnableInt+0x82>
    22b4:	86 c0       	rjmp	.+268    	; 0x23c2 <EnableInt+0x156>
		{
		case TIMER0_NORMAL:

			SET_BIT(Timer0_BASE->TIMSK_Reg.Reg,TOIE0); /* enable interrupts for overflow mode */
    22b6:	a2 e5       	ldi	r26, 0x52	; 82
    22b8:	b0 e0       	ldi	r27, 0x00	; 0
    22ba:	e2 e5       	ldi	r30, 0x52	; 82
    22bc:	f0 e0       	ldi	r31, 0x00	; 0
    22be:	87 81       	ldd	r24, Z+7	; 0x07
    22c0:	81 60       	ori	r24, 0x01	; 1
    22c2:	17 96       	adiw	r26, 0x07	; 7
    22c4:	8c 93       	st	X, r24
			SET_BIT(Timer0_BASE->TIFR_Reg.Reg,TOV0); /* enable overflow flag */
    22c6:	a2 e5       	ldi	r26, 0x52	; 82
    22c8:	b0 e0       	ldi	r27, 0x00	; 0
    22ca:	e2 e5       	ldi	r30, 0x52	; 82
    22cc:	f0 e0       	ldi	r31, 0x00	; 0
    22ce:	86 81       	ldd	r24, Z+6	; 0x06
    22d0:	81 60       	ori	r24, 0x01	; 1
    22d2:	16 96       	adiw	r26, 0x06	; 6
    22d4:	8c 93       	st	X, r24
			SET_BIT(SREG,I);
    22d6:	af e5       	ldi	r26, 0x5F	; 95
    22d8:	b0 e0       	ldi	r27, 0x00	; 0
    22da:	ef e5       	ldi	r30, 0x5F	; 95
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	80 68       	ori	r24, 0x80	; 128
    22e2:	8c 93       	st	X, r24
			Timer0_setCallBack(fnptr);
    22e4:	8b 81       	ldd	r24, Y+3	; 0x03
    22e6:	9c 81       	ldd	r25, Y+4	; 0x04
    22e8:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <Timer0_setCallBack>
    22ec:	6a c0       	rjmp	.+212    	; 0x23c2 <EnableInt+0x156>
			break;

		case TIMER0_CTC:


			SET_BIT(Timer0_BASE->TIMSK_Reg.Reg,OCIE0); /* enable interrupts for overflow mode */
    22ee:	a2 e5       	ldi	r26, 0x52	; 82
    22f0:	b0 e0       	ldi	r27, 0x00	; 0
    22f2:	e2 e5       	ldi	r30, 0x52	; 82
    22f4:	f0 e0       	ldi	r31, 0x00	; 0
    22f6:	87 81       	ldd	r24, Z+7	; 0x07
    22f8:	82 60       	ori	r24, 0x02	; 2
    22fa:	17 96       	adiw	r26, 0x07	; 7
    22fc:	8c 93       	st	X, r24
			SET_BIT(Timer0_BASE->TIFR_Reg.Reg,OCF0); /* enable overflow flag */
    22fe:	a2 e5       	ldi	r26, 0x52	; 82
    2300:	b0 e0       	ldi	r27, 0x00	; 0
    2302:	e2 e5       	ldi	r30, 0x52	; 82
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	86 81       	ldd	r24, Z+6	; 0x06
    2308:	82 60       	ori	r24, 0x02	; 2
    230a:	16 96       	adiw	r26, 0x06	; 6
    230c:	8c 93       	st	X, r24
			SET_BIT(SREG,I);
    230e:	af e5       	ldi	r26, 0x5F	; 95
    2310:	b0 e0       	ldi	r27, 0x00	; 0
    2312:	ef e5       	ldi	r30, 0x5F	; 95
    2314:	f0 e0       	ldi	r31, 0x00	; 0
    2316:	80 81       	ld	r24, Z
    2318:	80 68       	ori	r24, 0x80	; 128
    231a:	8c 93       	st	X, r24
			Timer0_setCallBack(fnptr);
    231c:	8b 81       	ldd	r24, Y+3	; 0x03
    231e:	9c 81       	ldd	r25, Y+4	; 0x04
    2320:	0e 94 eb 12 	call	0x25d6	; 0x25d6 <Timer0_setCallBack>
    2324:	4e c0       	rjmp	.+156    	; 0x23c2 <EnableInt+0x156>


		}
	}

	else if (Config_ptr->Timer_ID == Timer1)
    2326:	e9 81       	ldd	r30, Y+1	; 0x01
    2328:	fa 81       	ldd	r31, Y+2	; 0x02
    232a:	87 81       	ldd	r24, Z+7	; 0x07
    232c:	81 30       	cpi	r24, 0x01	; 1
    232e:	09 f0       	breq	.+2      	; 0x2332 <EnableInt+0xc6>
    2330:	48 c0       	rjmp	.+144    	; 0x23c2 <EnableInt+0x156>
	{
		switch(Config_ptr->mode)
    2332:	e9 81       	ldd	r30, Y+1	; 0x01
    2334:	fa 81       	ldd	r31, Y+2	; 0x02
    2336:	80 81       	ld	r24, Z
    2338:	28 2f       	mov	r18, r24
    233a:	30 e0       	ldi	r19, 0x00	; 0
    233c:	3e 83       	std	Y+6, r19	; 0x06
    233e:	2d 83       	std	Y+5, r18	; 0x05
    2340:	8d 81       	ldd	r24, Y+5	; 0x05
    2342:	9e 81       	ldd	r25, Y+6	; 0x06
    2344:	00 97       	sbiw	r24, 0x00	; 0
    2346:	31 f0       	breq	.+12     	; 0x2354 <EnableInt+0xe8>
    2348:	2d 81       	ldd	r18, Y+5	; 0x05
    234a:	3e 81       	ldd	r19, Y+6	; 0x06
    234c:	24 30       	cpi	r18, 0x04	; 4
    234e:	31 05       	cpc	r19, r1
    2350:	e9 f0       	breq	.+58     	; 0x238c <EnableInt+0x120>
    2352:	37 c0       	rjmp	.+110    	; 0x23c2 <EnableInt+0x156>
		{
		case TIMER1_NORMAL:

			SET_BIT(Timer0_BASE->TIMSK_Reg.Reg,TOIE1); /* enable interrupts for overflow mode */
    2354:	a2 e5       	ldi	r26, 0x52	; 82
    2356:	b0 e0       	ldi	r27, 0x00	; 0
    2358:	e2 e5       	ldi	r30, 0x52	; 82
    235a:	f0 e0       	ldi	r31, 0x00	; 0
    235c:	87 81       	ldd	r24, Z+7	; 0x07
    235e:	84 60       	ori	r24, 0x04	; 4
    2360:	17 96       	adiw	r26, 0x07	; 7
    2362:	8c 93       	st	X, r24
			SET_BIT(Timer0_BASE->TIFR_Reg.Reg,TOV1); /* enable overflow flag */
    2364:	a2 e5       	ldi	r26, 0x52	; 82
    2366:	b0 e0       	ldi	r27, 0x00	; 0
    2368:	e2 e5       	ldi	r30, 0x52	; 82
    236a:	f0 e0       	ldi	r31, 0x00	; 0
    236c:	86 81       	ldd	r24, Z+6	; 0x06
    236e:	84 60       	ori	r24, 0x04	; 4
    2370:	16 96       	adiw	r26, 0x06	; 6
    2372:	8c 93       	st	X, r24
			SET_BIT(SREG,I);
    2374:	af e5       	ldi	r26, 0x5F	; 95
    2376:	b0 e0       	ldi	r27, 0x00	; 0
    2378:	ef e5       	ldi	r30, 0x5F	; 95
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	80 68       	ori	r24, 0x80	; 128
    2380:	8c 93       	st	X, r24
			Timer1_setCallBack(fnptr);
    2382:	8b 81       	ldd	r24, Y+3	; 0x03
    2384:	9c 81       	ldd	r25, Y+4	; 0x04
    2386:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <Timer1_setCallBack>
    238a:	1b c0       	rjmp	.+54     	; 0x23c2 <EnableInt+0x156>
			break;

		case TIMER1_CTC_OCR:


			SET_BIT(Timer0_BASE->TIMSK_Reg.Reg,OCIE1A); /* enable interrupts for overflow mode */
    238c:	a2 e5       	ldi	r26, 0x52	; 82
    238e:	b0 e0       	ldi	r27, 0x00	; 0
    2390:	e2 e5       	ldi	r30, 0x52	; 82
    2392:	f0 e0       	ldi	r31, 0x00	; 0
    2394:	87 81       	ldd	r24, Z+7	; 0x07
    2396:	80 61       	ori	r24, 0x10	; 16
    2398:	17 96       	adiw	r26, 0x07	; 7
    239a:	8c 93       	st	X, r24
			SET_BIT(Timer0_BASE->TIFR_Reg.Reg,OCF1A); /* enable overflow flag */
    239c:	a2 e5       	ldi	r26, 0x52	; 82
    239e:	b0 e0       	ldi	r27, 0x00	; 0
    23a0:	e2 e5       	ldi	r30, 0x52	; 82
    23a2:	f0 e0       	ldi	r31, 0x00	; 0
    23a4:	86 81       	ldd	r24, Z+6	; 0x06
    23a6:	80 61       	ori	r24, 0x10	; 16
    23a8:	16 96       	adiw	r26, 0x06	; 6
    23aa:	8c 93       	st	X, r24
			SET_BIT(SREG,I);
    23ac:	af e5       	ldi	r26, 0x5F	; 95
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	ef e5       	ldi	r30, 0x5F	; 95
    23b2:	f0 e0       	ldi	r31, 0x00	; 0
    23b4:	80 81       	ld	r24, Z
    23b6:	80 68       	ori	r24, 0x80	; 128
    23b8:	8c 93       	st	X, r24
			Timer1_setCallBack(fnptr);
    23ba:	8b 81       	ldd	r24, Y+3	; 0x03
    23bc:	9c 81       	ldd	r25, Y+4	; 0x04
    23be:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <Timer1_setCallBack>



		}
	}
}
    23c2:	28 96       	adiw	r28, 0x08	; 8
    23c4:	0f b6       	in	r0, 0x3f	; 63
    23c6:	f8 94       	cli
    23c8:	de bf       	out	0x3e, r29	; 62
    23ca:	0f be       	out	0x3f, r0	; 63
    23cc:	cd bf       	out	0x3d, r28	; 61
    23ce:	cf 91       	pop	r28
    23d0:	df 91       	pop	r29
    23d2:	08 95       	ret

000023d4 <DisableInt>:

void DisableInt(Timer_Config *Config_ptr,void(*fnptr)(void))
{
    23d4:	df 93       	push	r29
    23d6:	cf 93       	push	r28
    23d8:	00 d0       	rcall	.+0      	; 0x23da <DisableInt+0x6>
    23da:	00 d0       	rcall	.+0      	; 0x23dc <DisableInt+0x8>
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
    23e0:	9a 83       	std	Y+2, r25	; 0x02
    23e2:	89 83       	std	Y+1, r24	; 0x01
    23e4:	7c 83       	std	Y+4, r23	; 0x04
    23e6:	6b 83       	std	Y+3, r22	; 0x03

	CLR_BIT(SREG,I);
    23e8:	af e5       	ldi	r26, 0x5F	; 95
    23ea:	b0 e0       	ldi	r27, 0x00	; 0
    23ec:	ef e5       	ldi	r30, 0x5F	; 95
    23ee:	f0 e0       	ldi	r31, 0x00	; 0
    23f0:	80 81       	ld	r24, Z
    23f2:	8f 77       	andi	r24, 0x7F	; 127
    23f4:	8c 93       	st	X, r24
}
    23f6:	0f 90       	pop	r0
    23f8:	0f 90       	pop	r0
    23fa:	0f 90       	pop	r0
    23fc:	0f 90       	pop	r0
    23fe:	cf 91       	pop	r28
    2400:	df 91       	pop	r29
    2402:	08 95       	ret

00002404 <setFastPWM>:

void setFastPWM(uint8 duty,Compare_Output_Mode_t SignalOutput)
{
    2404:	df 93       	push	r29
    2406:	cf 93       	push	r28
    2408:	cd b7       	in	r28, 0x3d	; 61
    240a:	de b7       	in	r29, 0x3e	; 62
    240c:	2a 97       	sbiw	r28, 0x0a	; 10
    240e:	0f b6       	in	r0, 0x3f	; 63
    2410:	f8 94       	cli
    2412:	de bf       	out	0x3e, r29	; 62
    2414:	0f be       	out	0x3f, r0	; 63
    2416:	cd bf       	out	0x3d, r28	; 61
    2418:	89 83       	std	Y+1, r24	; 0x01
    241a:	6a 83       	std	Y+2, r22	; 0x02


	if(SignalOutput == Non_inverting)
    241c:	8a 81       	ldd	r24, Y+2	; 0x02
    241e:	82 30       	cpi	r24, 0x02	; 2
    2420:	71 f5       	brne	.+92     	; 0x247e <setFastPWM+0x7a>
	{
		Timer0_BASE->OCR0_Reg.Reg  = abs (((duty*255)/100)-1);
    2422:	82 e5       	ldi	r24, 0x52	; 82
    2424:	90 e0       	ldi	r25, 0x00	; 0
    2426:	9a 87       	std	Y+10, r25	; 0x0a
    2428:	89 87       	std	Y+9, r24	; 0x09
    242a:	89 81       	ldd	r24, Y+1	; 0x01
    242c:	48 2f       	mov	r20, r24
    242e:	50 e0       	ldi	r21, 0x00	; 0
    2430:	ca 01       	movw	r24, r20
    2432:	9c 01       	movw	r18, r24
    2434:	22 0f       	add	r18, r18
    2436:	33 1f       	adc	r19, r19
    2438:	c9 01       	movw	r24, r18
    243a:	96 95       	lsr	r25
    243c:	98 2f       	mov	r25, r24
    243e:	88 27       	eor	r24, r24
    2440:	97 95       	ror	r25
    2442:	87 95       	ror	r24
    2444:	82 1b       	sub	r24, r18
    2446:	93 0b       	sbc	r25, r19
    2448:	84 0f       	add	r24, r20
    244a:	95 1f       	adc	r25, r21
    244c:	24 e6       	ldi	r18, 0x64	; 100
    244e:	30 e0       	ldi	r19, 0x00	; 0
    2450:	b9 01       	movw	r22, r18
    2452:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__divmodhi4>
    2456:	cb 01       	movw	r24, r22
    2458:	01 97       	sbiw	r24, 0x01	; 1
    245a:	98 87       	std	Y+8, r25	; 0x08
    245c:	8f 83       	std	Y+7, r24	; 0x07
    245e:	ef 81       	ldd	r30, Y+7	; 0x07
    2460:	f8 85       	ldd	r31, Y+8	; 0x08
    2462:	ff 23       	and	r31, r31
    2464:	3c f4       	brge	.+14     	; 0x2474 <setFastPWM+0x70>
    2466:	8f 81       	ldd	r24, Y+7	; 0x07
    2468:	98 85       	ldd	r25, Y+8	; 0x08
    246a:	90 95       	com	r25
    246c:	81 95       	neg	r24
    246e:	9f 4f       	sbci	r25, 0xFF	; 255
    2470:	98 87       	std	Y+8, r25	; 0x08
    2472:	8f 83       	std	Y+7, r24	; 0x07
    2474:	8f 81       	ldd	r24, Y+7	; 0x07
    2476:	e9 85       	ldd	r30, Y+9	; 0x09
    2478:	fa 85       	ldd	r31, Y+10	; 0x0a
    247a:	82 87       	std	Z+10, r24	; 0x0a
    247c:	28 c0       	rjmp	.+80     	; 0x24ce <setFastPWM+0xca>
	}
	else if(SignalOutput== Inverting)
    247e:	8a 81       	ldd	r24, Y+2	; 0x02
    2480:	83 30       	cpi	r24, 0x03	; 3
    2482:	29 f5       	brne	.+74     	; 0x24ce <setFastPWM+0xca>
	{
		Timer0_BASE->OCR0_Reg.Reg  = abs(255-((duty*256)/100));
    2484:	82 e5       	ldi	r24, 0x52	; 82
    2486:	90 e0       	ldi	r25, 0x00	; 0
    2488:	9e 83       	std	Y+6, r25	; 0x06
    248a:	8d 83       	std	Y+5, r24	; 0x05
    248c:	89 81       	ldd	r24, Y+1	; 0x01
    248e:	88 2f       	mov	r24, r24
    2490:	90 e0       	ldi	r25, 0x00	; 0
    2492:	98 2f       	mov	r25, r24
    2494:	88 27       	eor	r24, r24
    2496:	24 e6       	ldi	r18, 0x64	; 100
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	b9 01       	movw	r22, r18
    249c:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__divmodhi4>
    24a0:	cb 01       	movw	r24, r22
    24a2:	9c 01       	movw	r18, r24
    24a4:	8f ef       	ldi	r24, 0xFF	; 255
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	82 1b       	sub	r24, r18
    24aa:	93 0b       	sbc	r25, r19
    24ac:	9c 83       	std	Y+4, r25	; 0x04
    24ae:	8b 83       	std	Y+3, r24	; 0x03
    24b0:	eb 81       	ldd	r30, Y+3	; 0x03
    24b2:	fc 81       	ldd	r31, Y+4	; 0x04
    24b4:	ff 23       	and	r31, r31
    24b6:	3c f4       	brge	.+14     	; 0x24c6 <setFastPWM+0xc2>
    24b8:	8b 81       	ldd	r24, Y+3	; 0x03
    24ba:	9c 81       	ldd	r25, Y+4	; 0x04
    24bc:	90 95       	com	r25
    24be:	81 95       	neg	r24
    24c0:	9f 4f       	sbci	r25, 0xFF	; 255
    24c2:	9c 83       	std	Y+4, r25	; 0x04
    24c4:	8b 83       	std	Y+3, r24	; 0x03
    24c6:	8b 81       	ldd	r24, Y+3	; 0x03
    24c8:	ed 81       	ldd	r30, Y+5	; 0x05
    24ca:	fe 81       	ldd	r31, Y+6	; 0x06
    24cc:	82 87       	std	Z+10, r24	; 0x0a

	}



}
    24ce:	2a 96       	adiw	r28, 0x0a	; 10
    24d0:	0f b6       	in	r0, 0x3f	; 63
    24d2:	f8 94       	cli
    24d4:	de bf       	out	0x3e, r29	; 62
    24d6:	0f be       	out	0x3f, r0	; 63
    24d8:	cd bf       	out	0x3d, r28	; 61
    24da:	cf 91       	pop	r28
    24dc:	df 91       	pop	r29
    24de:	08 95       	ret

000024e0 <setphaseCorrectPWM>:


void setphaseCorrectPWM(uint8 duty)
{
    24e0:	df 93       	push	r29
    24e2:	cf 93       	push	r28
    24e4:	0f 92       	push	r0
    24e6:	cd b7       	in	r28, 0x3d	; 61
    24e8:	de b7       	in	r29, 0x3e	; 62
    24ea:	89 83       	std	Y+1, r24	; 0x01


	Timer0_BASE->OCR0_Reg.Reg  = (duty*255)/100;
    24ec:	e2 e5       	ldi	r30, 0x52	; 82
    24ee:	f0 e0       	ldi	r31, 0x00	; 0
    24f0:	89 81       	ldd	r24, Y+1	; 0x01
    24f2:	48 2f       	mov	r20, r24
    24f4:	50 e0       	ldi	r21, 0x00	; 0
    24f6:	ca 01       	movw	r24, r20
    24f8:	9c 01       	movw	r18, r24
    24fa:	22 0f       	add	r18, r18
    24fc:	33 1f       	adc	r19, r19
    24fe:	c9 01       	movw	r24, r18
    2500:	96 95       	lsr	r25
    2502:	98 2f       	mov	r25, r24
    2504:	88 27       	eor	r24, r24
    2506:	97 95       	ror	r25
    2508:	87 95       	ror	r24
    250a:	82 1b       	sub	r24, r18
    250c:	93 0b       	sbc	r25, r19
    250e:	84 0f       	add	r24, r20
    2510:	95 1f       	adc	r25, r21
    2512:	24 e6       	ldi	r18, 0x64	; 100
    2514:	30 e0       	ldi	r19, 0x00	; 0
    2516:	b9 01       	movw	r22, r18
    2518:	0e 94 4b 2c 	call	0x5896	; 0x5896 <__divmodhi4>
    251c:	cb 01       	movw	r24, r22
    251e:	82 87       	std	Z+10, r24	; 0x0a

}
    2520:	0f 90       	pop	r0
    2522:	cf 91       	pop	r28
    2524:	df 91       	pop	r29
    2526:	08 95       	ret

00002528 <Timer_setDelayTimeMilliSec>:


void Timer_setDelayTimeMilliSec(uint16 milliseconds,Timer_Config *Config_ptr)
{
    2528:	df 93       	push	r29
    252a:	cf 93       	push	r28
    252c:	00 d0       	rcall	.+0      	; 0x252e <Timer_setDelayTimeMilliSec+0x6>
    252e:	00 d0       	rcall	.+0      	; 0x2530 <Timer_setDelayTimeMilliSec+0x8>
    2530:	00 d0       	rcall	.+0      	; 0x2532 <Timer_setDelayTimeMilliSec+0xa>
    2532:	cd b7       	in	r28, 0x3d	; 61
    2534:	de b7       	in	r29, 0x3e	; 62
    2536:	9c 83       	std	Y+4, r25	; 0x04
    2538:	8b 83       	std	Y+3, r24	; 0x03
    253a:	7e 83       	std	Y+6, r23	; 0x06
    253c:	6d 83       	std	Y+5, r22	; 0x05
	// Calculate the number of timer counts required for the delay
	uint16 counts = (uint16)((milliseconds * 1000) / Config_ptr->prescalar);
    253e:	2b 81       	ldd	r18, Y+3	; 0x03
    2540:	3c 81       	ldd	r19, Y+4	; 0x04
    2542:	88 ee       	ldi	r24, 0xE8	; 232
    2544:	93 e0       	ldi	r25, 0x03	; 3
    2546:	28 9f       	mul	r18, r24
    2548:	a0 01       	movw	r20, r0
    254a:	29 9f       	mul	r18, r25
    254c:	50 0d       	add	r21, r0
    254e:	38 9f       	mul	r19, r24
    2550:	50 0d       	add	r21, r0
    2552:	11 24       	eor	r1, r1
    2554:	ed 81       	ldd	r30, Y+5	; 0x05
    2556:	fe 81       	ldd	r31, Y+6	; 0x06
    2558:	81 81       	ldd	r24, Z+1	; 0x01
    255a:	28 2f       	mov	r18, r24
    255c:	30 e0       	ldi	r19, 0x00	; 0
    255e:	ca 01       	movw	r24, r20
    2560:	b9 01       	movw	r22, r18
    2562:	0e 94 37 2c 	call	0x586e	; 0x586e <__udivmodhi4>
    2566:	cb 01       	movw	r24, r22
    2568:	9a 83       	std	Y+2, r25	; 0x02
    256a:	89 83       	std	Y+1, r24	; 0x01

	// Set the compare value
	Timer0_BASE->OCR0_Reg.Reg = counts - 1;
    256c:	e2 e5       	ldi	r30, 0x52	; 82
    256e:	f0 e0       	ldi	r31, 0x00	; 0
    2570:	89 81       	ldd	r24, Y+1	; 0x01
    2572:	81 50       	subi	r24, 0x01	; 1
    2574:	82 87       	std	Z+10, r24	; 0x0a

	// Clear the timer counter
	Timer0_BASE->TCNT0_Reg.Reg  = 0;
    2576:	e2 e5       	ldi	r30, 0x52	; 82
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	10 82       	st	Z, r1

	// Wait until the compare match flag is set
	while (!(Timer0_BASE->TIFR_Reg.Reg & (1 << OCF0)));
    257c:	e2 e5       	ldi	r30, 0x52	; 82
    257e:	f0 e0       	ldi	r31, 0x00	; 0
    2580:	86 81       	ldd	r24, Z+6	; 0x06
    2582:	88 2f       	mov	r24, r24
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	82 70       	andi	r24, 0x02	; 2
    2588:	90 70       	andi	r25, 0x00	; 0
    258a:	00 97       	sbiw	r24, 0x00	; 0
    258c:	b9 f3       	breq	.-18     	; 0x257c <Timer_setDelayTimeMilliSec+0x54>

	// Clear the compare match flag by writing a 1 to it
	Timer0_BASE->TIFR_Reg.Reg |= (1 << OCF0);
    258e:	a2 e5       	ldi	r26, 0x52	; 82
    2590:	b0 e0       	ldi	r27, 0x00	; 0
    2592:	e2 e5       	ldi	r30, 0x52	; 82
    2594:	f0 e0       	ldi	r31, 0x00	; 0
    2596:	86 81       	ldd	r24, Z+6	; 0x06
    2598:	82 60       	ori	r24, 0x02	; 2
    259a:	16 96       	adiw	r26, 0x06	; 6
    259c:	8c 93       	st	X, r24
    259e:	16 97       	sbiw	r26, 0x06	; 6
}
    25a0:	26 96       	adiw	r28, 0x06	; 6
    25a2:	0f b6       	in	r0, 0x3f	; 63
    25a4:	f8 94       	cli
    25a6:	de bf       	out	0x3e, r29	; 62
    25a8:	0f be       	out	0x3f, r0	; 63
    25aa:	cd bf       	out	0x3d, r28	; 61
    25ac:	cf 91       	pop	r28
    25ae:	df 91       	pop	r29
    25b0:	08 95       	ret

000025b2 <Timer1_setCallBack>:


void Timer1_setCallBack(void(*a_ptr)(void))
{
    25b2:	df 93       	push	r29
    25b4:	cf 93       	push	r28
    25b6:	00 d0       	rcall	.+0      	; 0x25b8 <Timer1_setCallBack+0x6>
    25b8:	cd b7       	in	r28, 0x3d	; 61
    25ba:	de b7       	in	r29, 0x3e	; 62
    25bc:	9a 83       	std	Y+2, r25	; 0x02
    25be:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1CallBackPtr = a_ptr;
    25c0:	89 81       	ldd	r24, Y+1	; 0x01
    25c2:	9a 81       	ldd	r25, Y+2	; 0x02
    25c4:	90 93 8b 01 	sts	0x018B, r25
    25c8:	80 93 8a 01 	sts	0x018A, r24
}
    25cc:	0f 90       	pop	r0
    25ce:	0f 90       	pop	r0
    25d0:	cf 91       	pop	r28
    25d2:	df 91       	pop	r29
    25d4:	08 95       	ret

000025d6 <Timer0_setCallBack>:

void Timer0_setCallBack(void(*a_ptr)(void))
{
    25d6:	df 93       	push	r29
    25d8:	cf 93       	push	r28
    25da:	00 d0       	rcall	.+0      	; 0x25dc <Timer0_setCallBack+0x6>
    25dc:	cd b7       	in	r28, 0x3d	; 61
    25de:	de b7       	in	r29, 0x3e	; 62
    25e0:	9a 83       	std	Y+2, r25	; 0x02
    25e2:	89 83       	std	Y+1, r24	; 0x01
	gTimer0_Call_BackPOINTER = a_ptr;
    25e4:	89 81       	ldd	r24, Y+1	; 0x01
    25e6:	9a 81       	ldd	r25, Y+2	; 0x02
    25e8:	90 93 89 01 	sts	0x0189, r25
    25ec:	80 93 88 01 	sts	0x0188, r24
}
    25f0:	0f 90       	pop	r0
    25f2:	0f 90       	pop	r0
    25f4:	cf 91       	pop	r28
    25f6:	df 91       	pop	r29
    25f8:	08 95       	ret

000025fa <Button_Init>:

#include "Button.h"
#include <util/delay.h>

void Button_Init(Port_Def* GPIOx,Pin_ID_t pin)
{
    25fa:	df 93       	push	r29
    25fc:	cf 93       	push	r28
    25fe:	00 d0       	rcall	.+0      	; 0x2600 <Button_Init+0x6>
    2600:	0f 92       	push	r0
    2602:	cd b7       	in	r28, 0x3d	; 61
    2604:	de b7       	in	r29, 0x3e	; 62
    2606:	9a 83       	std	Y+2, r25	; 0x02
    2608:	89 83       	std	Y+1, r24	; 0x01
    260a:	6b 83       	std	Y+3, r22	; 0x03
	DIO_voidSetPinDirection(GPIOx, pin, PIN_INPUT);
    260c:	89 81       	ldd	r24, Y+1	; 0x01
    260e:	9a 81       	ldd	r25, Y+2	; 0x02
    2610:	6b 81       	ldd	r22, Y+3	; 0x03
    2612:	40 e0       	ldi	r20, 0x00	; 0
    2614:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
}
    2618:	0f 90       	pop	r0
    261a:	0f 90       	pop	r0
    261c:	0f 90       	pop	r0
    261e:	cf 91       	pop	r28
    2620:	df 91       	pop	r29
    2622:	08 95       	ret

00002624 <Single_press>:



Key_status Single_press(Port_Def* GPIOx, Pin_ID_t pin)
{
    2624:	df 93       	push	r29
    2626:	cf 93       	push	r28
    2628:	cd b7       	in	r28, 0x3d	; 61
    262a:	de b7       	in	r29, 0x3e	; 62
    262c:	62 97       	sbiw	r28, 0x12	; 18
    262e:	0f b6       	in	r0, 0x3f	; 63
    2630:	f8 94       	cli
    2632:	de bf       	out	0x3e, r29	; 62
    2634:	0f be       	out	0x3f, r0	; 63
    2636:	cd bf       	out	0x3d, r28	; 61
    2638:	98 8b       	std	Y+16, r25	; 0x10
    263a:	8f 87       	std	Y+15, r24	; 0x0f
    263c:	69 8b       	std	Y+17, r22	; 0x11
	DIO_voidSetPinDirection(GPIOx, pin, PIN_INPUT);
    263e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2640:	98 89       	ldd	r25, Y+16	; 0x10
    2642:	69 89       	ldd	r22, Y+17	; 0x11
    2644:	40 e0       	ldi	r20, 0x00	; 0
    2646:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
	static uint8 flag ;
	if(!DIO_voidGetPinValue(GPIOx, pin))
    264a:	8f 85       	ldd	r24, Y+15	; 0x0f
    264c:	98 89       	ldd	r25, Y+16	; 0x10
    264e:	69 89       	ldd	r22, Y+17	; 0x11
    2650:	0e 94 b8 09 	call	0x1370	; 0x1370 <DIO_voidGetPinValue>
    2654:	88 23       	and	r24, r24
    2656:	09 f0       	breq	.+2      	; 0x265a <Single_press+0x36>
    2658:	83 c0       	rjmp	.+262    	; 0x2760 <Single_press+0x13c>
    265a:	80 e0       	ldi	r24, 0x00	; 0
    265c:	90 e0       	ldi	r25, 0x00	; 0
    265e:	a8 e4       	ldi	r26, 0x48	; 72
    2660:	b2 e4       	ldi	r27, 0x42	; 66
    2662:	8b 87       	std	Y+11, r24	; 0x0b
    2664:	9c 87       	std	Y+12, r25	; 0x0c
    2666:	ad 87       	std	Y+13, r26	; 0x0d
    2668:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    266a:	6b 85       	ldd	r22, Y+11	; 0x0b
    266c:	7c 85       	ldd	r23, Y+12	; 0x0c
    266e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2670:	9e 85       	ldd	r25, Y+14	; 0x0e
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	4a e7       	ldi	r20, 0x7A	; 122
    2678:	55 e4       	ldi	r21, 0x45	; 69
    267a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267e:	dc 01       	movw	r26, r24
    2680:	cb 01       	movw	r24, r22
    2682:	8f 83       	std	Y+7, r24	; 0x07
    2684:	98 87       	std	Y+8, r25	; 0x08
    2686:	a9 87       	std	Y+9, r26	; 0x09
    2688:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    268a:	6f 81       	ldd	r22, Y+7	; 0x07
    268c:	78 85       	ldd	r23, Y+8	; 0x08
    268e:	89 85       	ldd	r24, Y+9	; 0x09
    2690:	9a 85       	ldd	r25, Y+10	; 0x0a
    2692:	20 e0       	ldi	r18, 0x00	; 0
    2694:	30 e0       	ldi	r19, 0x00	; 0
    2696:	40 e8       	ldi	r20, 0x80	; 128
    2698:	5f e3       	ldi	r21, 0x3F	; 63
    269a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    269e:	88 23       	and	r24, r24
    26a0:	2c f4       	brge	.+10     	; 0x26ac <Single_press+0x88>
		__ticks = 1;
    26a2:	81 e0       	ldi	r24, 0x01	; 1
    26a4:	90 e0       	ldi	r25, 0x00	; 0
    26a6:	9e 83       	std	Y+6, r25	; 0x06
    26a8:	8d 83       	std	Y+5, r24	; 0x05
    26aa:	3f c0       	rjmp	.+126    	; 0x272a <Single_press+0x106>
	else if (__tmp > 65535)
    26ac:	6f 81       	ldd	r22, Y+7	; 0x07
    26ae:	78 85       	ldd	r23, Y+8	; 0x08
    26b0:	89 85       	ldd	r24, Y+9	; 0x09
    26b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	3f ef       	ldi	r19, 0xFF	; 255
    26b8:	4f e7       	ldi	r20, 0x7F	; 127
    26ba:	57 e4       	ldi	r21, 0x47	; 71
    26bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26c0:	18 16       	cp	r1, r24
    26c2:	4c f5       	brge	.+82     	; 0x2716 <Single_press+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    26cc:	20 e0       	ldi	r18, 0x00	; 0
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	40 e2       	ldi	r20, 0x20	; 32
    26d2:	51 e4       	ldi	r21, 0x41	; 65
    26d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d8:	dc 01       	movw	r26, r24
    26da:	cb 01       	movw	r24, r22
    26dc:	bc 01       	movw	r22, r24
    26de:	cd 01       	movw	r24, r26
    26e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	9e 83       	std	Y+6, r25	; 0x06
    26ea:	8d 83       	std	Y+5, r24	; 0x05
    26ec:	0f c0       	rjmp	.+30     	; 0x270c <Single_press+0xe8>
    26ee:	80 e9       	ldi	r24, 0x90	; 144
    26f0:	91 e0       	ldi	r25, 0x01	; 1
    26f2:	9c 83       	std	Y+4, r25	; 0x04
    26f4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26f6:	8b 81       	ldd	r24, Y+3	; 0x03
    26f8:	9c 81       	ldd	r25, Y+4	; 0x04
    26fa:	01 97       	sbiw	r24, 0x01	; 1
    26fc:	f1 f7       	brne	.-4      	; 0x26fa <Single_press+0xd6>
    26fe:	9c 83       	std	Y+4, r25	; 0x04
    2700:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2702:	8d 81       	ldd	r24, Y+5	; 0x05
    2704:	9e 81       	ldd	r25, Y+6	; 0x06
    2706:	01 97       	sbiw	r24, 0x01	; 1
    2708:	9e 83       	std	Y+6, r25	; 0x06
    270a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270c:	8d 81       	ldd	r24, Y+5	; 0x05
    270e:	9e 81       	ldd	r25, Y+6	; 0x06
    2710:	00 97       	sbiw	r24, 0x00	; 0
    2712:	69 f7       	brne	.-38     	; 0x26ee <Single_press+0xca>
    2714:	14 c0       	rjmp	.+40     	; 0x273e <Single_press+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2716:	6f 81       	ldd	r22, Y+7	; 0x07
    2718:	78 85       	ldd	r23, Y+8	; 0x08
    271a:	89 85       	ldd	r24, Y+9	; 0x09
    271c:	9a 85       	ldd	r25, Y+10	; 0x0a
    271e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2722:	dc 01       	movw	r26, r24
    2724:	cb 01       	movw	r24, r22
    2726:	9e 83       	std	Y+6, r25	; 0x06
    2728:	8d 83       	std	Y+5, r24	; 0x05
    272a:	8d 81       	ldd	r24, Y+5	; 0x05
    272c:	9e 81       	ldd	r25, Y+6	; 0x06
    272e:	9a 83       	std	Y+2, r25	; 0x02
    2730:	89 83       	std	Y+1, r24	; 0x01
    2732:	89 81       	ldd	r24, Y+1	; 0x01
    2734:	9a 81       	ldd	r25, Y+2	; 0x02
    2736:	01 97       	sbiw	r24, 0x01	; 1
    2738:	f1 f7       	brne	.-4      	; 0x2736 <Single_press+0x112>
    273a:	9a 83       	std	Y+2, r25	; 0x02
    273c:	89 83       	std	Y+1, r24	; 0x01
	{

		_delay_ms(50);
		if(!DIO_voidGetPinValue(GPIOx, pin))
    273e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2740:	98 89       	ldd	r25, Y+16	; 0x10
    2742:	69 89       	ldd	r22, Y+17	; 0x11
    2744:	0e 94 b8 09 	call	0x1370	; 0x1370 <DIO_voidGetPinValue>
    2748:	88 23       	and	r24, r24
    274a:	61 f4       	brne	.+24     	; 0x2764 <Single_press+0x140>
		{
			if(flag == 0)
    274c:	80 91 8c 01 	lds	r24, 0x018C
    2750:	88 23       	and	r24, r24
    2752:	41 f4       	brne	.+16     	; 0x2764 <Single_press+0x140>
			{
				flag =1;
    2754:	81 e0       	ldi	r24, 0x01	; 1
    2756:	80 93 8c 01 	sts	0x018C, r24
				return pressed;
    275a:	81 e0       	ldi	r24, 0x01	; 1
    275c:	8a 8b       	std	Y+18, r24	; 0x12
    275e:	03 c0       	rjmp	.+6      	; 0x2766 <Single_press+0x142>
		}

	}
	else
	{
		flag = 0;
    2760:	10 92 8c 01 	sts	0x018C, r1
	}

	return released;
    2764:	1a 8a       	std	Y+18, r1	; 0x12
    2766:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2768:	62 96       	adiw	r28, 0x12	; 18
    276a:	0f b6       	in	r0, 0x3f	; 63
    276c:	f8 94       	cli
    276e:	de bf       	out	0x3e, r29	; 62
    2770:	0f be       	out	0x3f, r0	; 63
    2772:	cd bf       	out	0x3d, r28	; 61
    2774:	cf 91       	pop	r28
    2776:	df 91       	pop	r29
    2778:	08 95       	ret

0000277a <DcMotor_Init>:
/*******************************************************************************
 *                         Function Definitions                                *
 *******************************************************************************/

void DcMotor_Init(void)
{
    277a:	df 93       	push	r29
    277c:	cf 93       	push	r28
    277e:	cd b7       	in	r28, 0x3d	; 61
    2780:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(DC_MOTOR_PORT_ID ,DC_MOTOR_PIN,1);
    2782:	86 e3       	ldi	r24, 0x36	; 54
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	67 e0       	ldi	r22, 0x07	; 7
    2788:	41 e0       	ldi	r20, 0x01	; 1
    278a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>

}
    278e:	cf 91       	pop	r28
    2790:	df 91       	pop	r29
    2792:	08 95       	ret

00002794 <DcMotor_Rotate>:
void DcMotor_Rotate(DcMotor_State state,uint8 speed)
{
    2794:	df 93       	push	r29
    2796:	cf 93       	push	r28
    2798:	00 d0       	rcall	.+0      	; 0x279a <DcMotor_Rotate+0x6>
    279a:	0f 92       	push	r0
    279c:	cd b7       	in	r28, 0x3d	; 61
    279e:	de b7       	in	r29, 0x3e	; 62
    27a0:	8a 83       	std	Y+2, r24	; 0x02
    27a2:	6b 83       	std	Y+3, r22	; 0x03
	uint8 duty = ((float)speed/100)*255;
    27a4:	8b 81       	ldd	r24, Y+3	; 0x03
    27a6:	88 2f       	mov	r24, r24
    27a8:	90 e0       	ldi	r25, 0x00	; 0
    27aa:	a0 e0       	ldi	r26, 0x00	; 0
    27ac:	b0 e0       	ldi	r27, 0x00	; 0
    27ae:	bc 01       	movw	r22, r24
    27b0:	cd 01       	movw	r24, r26
    27b2:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    27b6:	dc 01       	movw	r26, r24
    27b8:	cb 01       	movw	r24, r22
    27ba:	bc 01       	movw	r22, r24
    27bc:	cd 01       	movw	r24, r26
    27be:	20 e0       	ldi	r18, 0x00	; 0
    27c0:	30 e0       	ldi	r19, 0x00	; 0
    27c2:	48 ec       	ldi	r20, 0xC8	; 200
    27c4:	52 e4       	ldi	r21, 0x42	; 66
    27c6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27ca:	dc 01       	movw	r26, r24
    27cc:	cb 01       	movw	r24, r22
    27ce:	bc 01       	movw	r22, r24
    27d0:	cd 01       	movw	r24, r26
    27d2:	20 e0       	ldi	r18, 0x00	; 0
    27d4:	30 e0       	ldi	r19, 0x00	; 0
    27d6:	4f e7       	ldi	r20, 0x7F	; 127
    27d8:	53 e4       	ldi	r21, 0x43	; 67
    27da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27de:	dc 01       	movw	r26, r24
    27e0:	cb 01       	movw	r24, r22
    27e2:	bc 01       	movw	r22, r24
    27e4:	cd 01       	movw	r24, r26
    27e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ea:	dc 01       	movw	r26, r24
    27ec:	cb 01       	movw	r24, r22
    27ee:	89 83       	std	Y+1, r24	; 0x01
//
//
//
//	}

}
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	cf 91       	pop	r28
    27f8:	df 91       	pop	r29
    27fa:	08 95       	ret

000027fc <KEYPAD_INIT>:
uint8_t arr [4][4] = 		{{'1','2','3','+'},	//keypad layout design for calculator app
		{'4','5','6','-'},
		{'7','8','9','*'},
		{					'0','=','c','/' } };
void KEYPAD_INIT()
{
    27fc:	df 93       	push	r29
    27fe:	cf 93       	push	r28
    2800:	cd b7       	in	r28, 0x3d	; 61
    2802:	de b7       	in	r29, 0x3e	; 62
	/* do nothing */
	DIO_voidSetPinDirection(COL_PORT, C1_PIN, PIN_INPUT);
    2804:	80 e3       	ldi	r24, 0x30	; 48
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	67 e0       	ldi	r22, 0x07	; 7
    280a:	40 e0       	ldi	r20, 0x00	; 0
    280c:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(COL_PORT, C2_PIN, PIN_INPUT);
    2810:	80 e3       	ldi	r24, 0x30	; 48
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	66 e0       	ldi	r22, 0x06	; 6
    2816:	40 e0       	ldi	r20, 0x00	; 0
    2818:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(COL_PORT, C3_PIN, PIN_INPUT);
    281c:	80 e3       	ldi	r24, 0x30	; 48
    281e:	90 e0       	ldi	r25, 0x00	; 0
    2820:	65 e0       	ldi	r22, 0x05	; 5
    2822:	40 e0       	ldi	r20, 0x00	; 0
    2824:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(COL_PORT, C4_PIN, PIN_INPUT);
    2828:	80 e3       	ldi	r24, 0x30	; 48
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	63 e0       	ldi	r22, 0x03	; 3
    282e:	40 e0       	ldi	r20, 0x00	; 0
    2830:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>


	DIO_voidSetPinDirection(ROW_PORT, R4_PIN, Pin_OUTPUT);
    2834:	83 e3       	ldi	r24, 0x33	; 51
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	62 e0       	ldi	r22, 0x02	; 2
    283a:	41 e0       	ldi	r20, 0x01	; 1
    283c:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ROW_PORT, R3_PIN, Pin_OUTPUT);
    2840:	83 e3       	ldi	r24, 0x33	; 51
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	63 e0       	ldi	r22, 0x03	; 3
    2846:	41 e0       	ldi	r20, 0x01	; 1
    2848:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ROW_PORT, R2_PIN, Pin_OUTPUT);
    284c:	83 e3       	ldi	r24, 0x33	; 51
    284e:	90 e0       	ldi	r25, 0x00	; 0
    2850:	64 e0       	ldi	r22, 0x04	; 4
    2852:	41 e0       	ldi	r20, 0x01	; 1
    2854:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(ROW_PORT, R1_PIN, Pin_OUTPUT);
    2858:	83 e3       	ldi	r24, 0x33	; 51
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	65 e0       	ldi	r22, 0x05	; 5
    285e:	41 e0       	ldi	r20, 0x01	; 1
    2860:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>




}
    2864:	cf 91       	pop	r28
    2866:	df 91       	pop	r29
    2868:	08 95       	ret

0000286a <KEYPAD_Get_Pressed_Key>:


uint8_t KEYPAD_Get_Pressed_Key(void)
{
    286a:	df 93       	push	r29
    286c:	cf 93       	push	r28
    286e:	cd b7       	in	r28, 0x3d	; 61
    2870:	de b7       	in	r29, 0x3e	; 62
    2872:	af 97       	sbiw	r28, 0x2f	; 47
    2874:	0f b6       	in	r0, 0x3f	; 63
    2876:	f8 94       	cli
    2878:	de bf       	out	0x3e, r29	; 62
    287a:	0f be       	out	0x3f, r0	; 63
    287c:	cd bf       	out	0x3d, r28	; 61
	uint8_t  i,j;
	uint8_t rows[]={R1_PIN,R2_PIN,R3_PIN,R4_PIN};
    287e:	85 e0       	ldi	r24, 0x05	; 5
    2880:	8b 8b       	std	Y+19, r24	; 0x13
    2882:	84 e0       	ldi	r24, 0x04	; 4
    2884:	8c 8b       	std	Y+20, r24	; 0x14
    2886:	83 e0       	ldi	r24, 0x03	; 3
    2888:	8d 8b       	std	Y+21, r24	; 0x15
    288a:	82 e0       	ldi	r24, 0x02	; 2
    288c:	8e 8b       	std	Y+22, r24	; 0x16
	uint8_t cols[]={C1_PIN,C2_PIN,C3_PIN,C4_PIN};
    288e:	87 e0       	ldi	r24, 0x07	; 7
    2890:	8f 8b       	std	Y+23, r24	; 0x17
    2892:	86 e0       	ldi	r24, 0x06	; 6
    2894:	88 8f       	std	Y+24, r24	; 0x18
    2896:	85 e0       	ldi	r24, 0x05	; 5
    2898:	89 8f       	std	Y+25, r24	; 0x19
    289a:	83 e0       	ldi	r24, 0x03	; 3
    289c:	8a 8f       	std	Y+26, r24	; 0x1a
	uint8_t KEYPAD_ARR[4][4] = KEYPAD;
    289e:	ce 01       	movw	r24, r28
    28a0:	4b 96       	adiw	r24, 0x1b	; 27
    28a2:	9c a7       	std	Y+44, r25	; 0x2c
    28a4:	8b a7       	std	Y+43, r24	; 0x2b
    28a6:	e8 e7       	ldi	r30, 0x78	; 120
    28a8:	f1 e0       	ldi	r31, 0x01	; 1
    28aa:	fe a7       	std	Y+46, r31	; 0x2e
    28ac:	ed a7       	std	Y+45, r30	; 0x2d
    28ae:	f0 e1       	ldi	r31, 0x10	; 16
    28b0:	ff a7       	std	Y+47, r31	; 0x2f
    28b2:	ed a5       	ldd	r30, Y+45	; 0x2d
    28b4:	fe a5       	ldd	r31, Y+46	; 0x2e
    28b6:	00 80       	ld	r0, Z
    28b8:	8d a5       	ldd	r24, Y+45	; 0x2d
    28ba:	9e a5       	ldd	r25, Y+46	; 0x2e
    28bc:	01 96       	adiw	r24, 0x01	; 1
    28be:	9e a7       	std	Y+46, r25	; 0x2e
    28c0:	8d a7       	std	Y+45, r24	; 0x2d
    28c2:	eb a5       	ldd	r30, Y+43	; 0x2b
    28c4:	fc a5       	ldd	r31, Y+44	; 0x2c
    28c6:	00 82       	st	Z, r0
    28c8:	8b a5       	ldd	r24, Y+43	; 0x2b
    28ca:	9c a5       	ldd	r25, Y+44	; 0x2c
    28cc:	01 96       	adiw	r24, 0x01	; 1
    28ce:	9c a7       	std	Y+44, r25	; 0x2c
    28d0:	8b a7       	std	Y+43, r24	; 0x2b
    28d2:	9f a5       	ldd	r25, Y+47	; 0x2f
    28d4:	91 50       	subi	r25, 0x01	; 1
    28d6:	9f a7       	std	Y+47, r25	; 0x2f
    28d8:	ef a5       	ldd	r30, Y+47	; 0x2f
    28da:	ee 23       	and	r30, r30
    28dc:	51 f7       	brne	.-44     	; 0x28b2 <KEYPAD_Get_Pressed_Key+0x48>
	uint8_t key ;

	 uint8_t flag;
	while(1)
	{
	for(i = 0; i<=4; i++)
    28de:	1a 8a       	std	Y+18, r1	; 0x12
    28e0:	cb c0       	rjmp	.+406    	; 0x2a78 <KEYPAD_Get_Pressed_Key+0x20e>
	{
		DIO_voidSetPinValue(ROW_PORT, rows[i], LOW);
    28e2:	8a 89       	ldd	r24, Y+18	; 0x12
    28e4:	28 2f       	mov	r18, r24
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	ce 01       	movw	r24, r28
    28ea:	43 96       	adiw	r24, 0x13	; 19
    28ec:	fc 01       	movw	r30, r24
    28ee:	e2 0f       	add	r30, r18
    28f0:	f3 1f       	adc	r31, r19
    28f2:	20 81       	ld	r18, Z
    28f4:	83 e3       	ldi	r24, 0x33	; 51
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	62 2f       	mov	r22, r18
    28fa:	40 e0       	ldi	r20, 0x00	; 0
    28fc:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>

		for(j = 0; j<=4; j++)
    2900:	19 8a       	std	Y+17, r1	; 0x11
    2902:	33 c0       	rjmp	.+102    	; 0x296a <KEYPAD_Get_Pressed_Key+0x100>
		{
		flag = Single_press(COL_PORT, cols[j]);
    2904:	89 89       	ldd	r24, Y+17	; 0x11
    2906:	28 2f       	mov	r18, r24
    2908:	30 e0       	ldi	r19, 0x00	; 0
    290a:	ce 01       	movw	r24, r28
    290c:	47 96       	adiw	r24, 0x17	; 23
    290e:	fc 01       	movw	r30, r24
    2910:	e2 0f       	add	r30, r18
    2912:	f3 1f       	adc	r31, r19
    2914:	20 81       	ld	r18, Z
    2916:	80 e3       	ldi	r24, 0x30	; 48
    2918:	90 e0       	ldi	r25, 0x00	; 0
    291a:	62 2f       	mov	r22, r18
    291c:	0e 94 12 13 	call	0x2624	; 0x2624 <Single_press>
    2920:	8f 87       	std	Y+15, r24	; 0x0f
			if(flag == pressed)
    2922:	8f 85       	ldd	r24, Y+15	; 0x0f
    2924:	81 30       	cpi	r24, 0x01	; 1
    2926:	f1 f4       	brne	.+60     	; 0x2964 <KEYPAD_Get_Pressed_Key+0xfa>
			{
				key = KEYPAD_ARR[i][j];
    2928:	8a 89       	ldd	r24, Y+18	; 0x12
    292a:	28 2f       	mov	r18, r24
    292c:	30 e0       	ldi	r19, 0x00	; 0
    292e:	89 89       	ldd	r24, Y+17	; 0x11
    2930:	48 2f       	mov	r20, r24
    2932:	50 e0       	ldi	r21, 0x00	; 0
    2934:	22 0f       	add	r18, r18
    2936:	33 1f       	adc	r19, r19
    2938:	22 0f       	add	r18, r18
    293a:	33 1f       	adc	r19, r19
    293c:	ce 01       	movw	r24, r28
    293e:	01 96       	adiw	r24, 0x01	; 1
    2940:	82 0f       	add	r24, r18
    2942:	93 1f       	adc	r25, r19
    2944:	84 0f       	add	r24, r20
    2946:	95 1f       	adc	r25, r21
    2948:	fc 01       	movw	r30, r24
    294a:	7a 96       	adiw	r30, 0x1a	; 26
    294c:	80 81       	ld	r24, Z
    294e:	88 8b       	std	Y+16, r24	; 0x10
				return key;
    2950:	88 89       	ldd	r24, Y+16	; 0x10
		DIO_voidSetPinValue(ROW_PORT, rows[i], HIGH);
		_delay_ms(10);

	}
}
}
    2952:	af 96       	adiw	r28, 0x2f	; 47
    2954:	0f b6       	in	r0, 0x3f	; 63
    2956:	f8 94       	cli
    2958:	de bf       	out	0x3e, r29	; 62
    295a:	0f be       	out	0x3f, r0	; 63
    295c:	cd bf       	out	0x3d, r28	; 61
    295e:	cf 91       	pop	r28
    2960:	df 91       	pop	r29
    2962:	08 95       	ret
	{
	for(i = 0; i<=4; i++)
	{
		DIO_voidSetPinValue(ROW_PORT, rows[i], LOW);

		for(j = 0; j<=4; j++)
    2964:	89 89       	ldd	r24, Y+17	; 0x11
    2966:	8f 5f       	subi	r24, 0xFF	; 255
    2968:	89 8b       	std	Y+17, r24	; 0x11
    296a:	89 89       	ldd	r24, Y+17	; 0x11
    296c:	85 30       	cpi	r24, 0x05	; 5
    296e:	50 f2       	brcs	.-108    	; 0x2904 <KEYPAD_Get_Pressed_Key+0x9a>
				return key;

			}

		}
		DIO_voidSetPinValue(ROW_PORT, rows[i], HIGH);
    2970:	8a 89       	ldd	r24, Y+18	; 0x12
    2972:	28 2f       	mov	r18, r24
    2974:	30 e0       	ldi	r19, 0x00	; 0
    2976:	ce 01       	movw	r24, r28
    2978:	43 96       	adiw	r24, 0x13	; 19
    297a:	fc 01       	movw	r30, r24
    297c:	e2 0f       	add	r30, r18
    297e:	f3 1f       	adc	r31, r19
    2980:	20 81       	ld	r18, Z
    2982:	83 e3       	ldi	r24, 0x33	; 51
    2984:	90 e0       	ldi	r25, 0x00	; 0
    2986:	62 2f       	mov	r22, r18
    2988:	41 e0       	ldi	r20, 0x01	; 1
    298a:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    298e:	80 e0       	ldi	r24, 0x00	; 0
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	a0 e2       	ldi	r26, 0x20	; 32
    2994:	b1 e4       	ldi	r27, 0x41	; 65
    2996:	8b 87       	std	Y+11, r24	; 0x0b
    2998:	9c 87       	std	Y+12, r25	; 0x0c
    299a:	ad 87       	std	Y+13, r26	; 0x0d
    299c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    299e:	6b 85       	ldd	r22, Y+11	; 0x0b
    29a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29a6:	20 e0       	ldi	r18, 0x00	; 0
    29a8:	30 e0       	ldi	r19, 0x00	; 0
    29aa:	4a e7       	ldi	r20, 0x7A	; 122
    29ac:	55 e4       	ldi	r21, 0x45	; 69
    29ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29b2:	dc 01       	movw	r26, r24
    29b4:	cb 01       	movw	r24, r22
    29b6:	8f 83       	std	Y+7, r24	; 0x07
    29b8:	98 87       	std	Y+8, r25	; 0x08
    29ba:	a9 87       	std	Y+9, r26	; 0x09
    29bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29be:	6f 81       	ldd	r22, Y+7	; 0x07
    29c0:	78 85       	ldd	r23, Y+8	; 0x08
    29c2:	89 85       	ldd	r24, Y+9	; 0x09
    29c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	40 e8       	ldi	r20, 0x80	; 128
    29cc:	5f e3       	ldi	r21, 0x3F	; 63
    29ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29d2:	88 23       	and	r24, r24
    29d4:	2c f4       	brge	.+10     	; 0x29e0 <KEYPAD_Get_Pressed_Key+0x176>
		__ticks = 1;
    29d6:	81 e0       	ldi	r24, 0x01	; 1
    29d8:	90 e0       	ldi	r25, 0x00	; 0
    29da:	9e 83       	std	Y+6, r25	; 0x06
    29dc:	8d 83       	std	Y+5, r24	; 0x05
    29de:	3f c0       	rjmp	.+126    	; 0x2a5e <KEYPAD_Get_Pressed_Key+0x1f4>
	else if (__tmp > 65535)
    29e0:	6f 81       	ldd	r22, Y+7	; 0x07
    29e2:	78 85       	ldd	r23, Y+8	; 0x08
    29e4:	89 85       	ldd	r24, Y+9	; 0x09
    29e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	3f ef       	ldi	r19, 0xFF	; 255
    29ec:	4f e7       	ldi	r20, 0x7F	; 127
    29ee:	57 e4       	ldi	r21, 0x47	; 71
    29f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29f4:	18 16       	cp	r1, r24
    29f6:	4c f5       	brge	.+82     	; 0x2a4a <KEYPAD_Get_Pressed_Key+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    29f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    29fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    29fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    29fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	30 e0       	ldi	r19, 0x00	; 0
    2a04:	40 e2       	ldi	r20, 0x20	; 32
    2a06:	51 e4       	ldi	r21, 0x41	; 65
    2a08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a0c:	dc 01       	movw	r26, r24
    2a0e:	cb 01       	movw	r24, r22
    2a10:	bc 01       	movw	r22, r24
    2a12:	cd 01       	movw	r24, r26
    2a14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a18:	dc 01       	movw	r26, r24
    2a1a:	cb 01       	movw	r24, r22
    2a1c:	9e 83       	std	Y+6, r25	; 0x06
    2a1e:	8d 83       	std	Y+5, r24	; 0x05
    2a20:	0f c0       	rjmp	.+30     	; 0x2a40 <KEYPAD_Get_Pressed_Key+0x1d6>
    2a22:	80 e9       	ldi	r24, 0x90	; 144
    2a24:	91 e0       	ldi	r25, 0x01	; 1
    2a26:	9c 83       	std	Y+4, r25	; 0x04
    2a28:	8b 83       	std	Y+3, r24	; 0x03
    2a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a2c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a2e:	01 97       	sbiw	r24, 0x01	; 1
    2a30:	f1 f7       	brne	.-4      	; 0x2a2e <KEYPAD_Get_Pressed_Key+0x1c4>
    2a32:	9c 83       	std	Y+4, r25	; 0x04
    2a34:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a36:	8d 81       	ldd	r24, Y+5	; 0x05
    2a38:	9e 81       	ldd	r25, Y+6	; 0x06
    2a3a:	01 97       	sbiw	r24, 0x01	; 1
    2a3c:	9e 83       	std	Y+6, r25	; 0x06
    2a3e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a40:	8d 81       	ldd	r24, Y+5	; 0x05
    2a42:	9e 81       	ldd	r25, Y+6	; 0x06
    2a44:	00 97       	sbiw	r24, 0x00	; 0
    2a46:	69 f7       	brne	.-38     	; 0x2a22 <KEYPAD_Get_Pressed_Key+0x1b8>
    2a48:	14 c0       	rjmp	.+40     	; 0x2a72 <KEYPAD_Get_Pressed_Key+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a4a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a4c:	78 85       	ldd	r23, Y+8	; 0x08
    2a4e:	89 85       	ldd	r24, Y+9	; 0x09
    2a50:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a56:	dc 01       	movw	r26, r24
    2a58:	cb 01       	movw	r24, r22
    2a5a:	9e 83       	std	Y+6, r25	; 0x06
    2a5c:	8d 83       	std	Y+5, r24	; 0x05
    2a5e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a60:	9e 81       	ldd	r25, Y+6	; 0x06
    2a62:	9a 83       	std	Y+2, r25	; 0x02
    2a64:	89 83       	std	Y+1, r24	; 0x01
    2a66:	89 81       	ldd	r24, Y+1	; 0x01
    2a68:	9a 81       	ldd	r25, Y+2	; 0x02
    2a6a:	01 97       	sbiw	r24, 0x01	; 1
    2a6c:	f1 f7       	brne	.-4      	; 0x2a6a <KEYPAD_Get_Pressed_Key+0x200>
    2a6e:	9a 83       	std	Y+2, r25	; 0x02
    2a70:	89 83       	std	Y+1, r24	; 0x01
	uint8_t key ;

	 uint8_t flag;
	while(1)
	{
	for(i = 0; i<=4; i++)
    2a72:	8a 89       	ldd	r24, Y+18	; 0x12
    2a74:	8f 5f       	subi	r24, 0xFF	; 255
    2a76:	8a 8b       	std	Y+18, r24	; 0x12
    2a78:	8a 89       	ldd	r24, Y+18	; 0x12
    2a7a:	85 30       	cpi	r24, 0x05	; 5
    2a7c:	08 f4       	brcc	.+2      	; 0x2a80 <KEYPAD_Get_Pressed_Key+0x216>
    2a7e:	31 cf       	rjmp	.-414    	; 0x28e2 <KEYPAD_Get_Pressed_Key+0x78>
    2a80:	2e cf       	rjmp	.-420    	; 0x28de <KEYPAD_Get_Pressed_Key+0x74>

00002a82 <TURN_ON_OFF_LED>:


#include "LED_INTERFACING.h"

void TURN_ON_OFF_LED(Port_Def* GPIOx ,LED_Status_t state,Pin_ID_t pin )
{
    2a82:	df 93       	push	r29
    2a84:	cf 93       	push	r28
    2a86:	00 d0       	rcall	.+0      	; 0x2a88 <TURN_ON_OFF_LED+0x6>
    2a88:	00 d0       	rcall	.+0      	; 0x2a8a <TURN_ON_OFF_LED+0x8>
    2a8a:	00 d0       	rcall	.+0      	; 0x2a8c <TURN_ON_OFF_LED+0xa>
    2a8c:	cd b7       	in	r28, 0x3d	; 61
    2a8e:	de b7       	in	r29, 0x3e	; 62
    2a90:	9a 83       	std	Y+2, r25	; 0x02
    2a92:	89 83       	std	Y+1, r24	; 0x01
    2a94:	6b 83       	std	Y+3, r22	; 0x03
    2a96:	4c 83       	std	Y+4, r20	; 0x04
	DIO_voidSetPinDirection(GPIOx, pin, Pin_OUTPUT);
    2a98:	89 81       	ldd	r24, Y+1	; 0x01
    2a9a:	9a 81       	ldd	r25, Y+2	; 0x02
    2a9c:	6c 81       	ldd	r22, Y+4	; 0x04
    2a9e:	41 e0       	ldi	r20, 0x01	; 1
    2aa0:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>

	switch(state)
    2aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa6:	28 2f       	mov	r18, r24
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	3e 83       	std	Y+6, r19	; 0x06
    2aac:	2d 83       	std	Y+5, r18	; 0x05
    2aae:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab2:	00 97       	sbiw	r24, 0x00	; 0
    2ab4:	61 f0       	breq	.+24     	; 0x2ace <TURN_ON_OFF_LED+0x4c>
    2ab6:	2d 81       	ldd	r18, Y+5	; 0x05
    2ab8:	3e 81       	ldd	r19, Y+6	; 0x06
    2aba:	21 30       	cpi	r18, 0x01	; 1
    2abc:	31 05       	cpc	r19, r1
    2abe:	69 f4       	brne	.+26     	; 0x2ada <TURN_ON_OFF_LED+0x58>
	{
	case ACTIVE_HIGH:
		DIO_voidSetPinValue(GPIOx, pin, HIGH);
    2ac0:	89 81       	ldd	r24, Y+1	; 0x01
    2ac2:	9a 81       	ldd	r25, Y+2	; 0x02
    2ac4:	6c 81       	ldd	r22, Y+4	; 0x04
    2ac6:	41 e0       	ldi	r20, 0x01	; 1
    2ac8:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    2acc:	06 c0       	rjmp	.+12     	; 0x2ada <TURN_ON_OFF_LED+0x58>
		break;
	case ACTIVE_LOW:
		DIO_voidSetPinValue(GPIOx, pin, LOW);
    2ace:	89 81       	ldd	r24, Y+1	; 0x01
    2ad0:	9a 81       	ldd	r25, Y+2	; 0x02
    2ad2:	6c 81       	ldd	r22, Y+4	; 0x04
    2ad4:	40 e0       	ldi	r20, 0x00	; 0
    2ad6:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		break;

	}
}
    2ada:	26 96       	adiw	r28, 0x06	; 6
    2adc:	0f b6       	in	r0, 0x3f	; 63
    2ade:	f8 94       	cli
    2ae0:	de bf       	out	0x3e, r29	; 62
    2ae2:	0f be       	out	0x3f, r0	; 63
    2ae4:	cd bf       	out	0x3d, r28	; 61
    2ae6:	cf 91       	pop	r28
    2ae8:	df 91       	pop	r29
    2aea:	08 95       	ret

00002aec <LM35_read_temperature>:
 *      Author: Ahmed Yasser
 */

#include "LM35_INTERFACE.h"

uint16 LM35_read_temperature() {
    2aec:	df 93       	push	r29
    2aee:	cf 93       	push	r28
    2af0:	00 d0       	rcall	.+0      	; 0x2af2 <LM35_read_temperature+0x6>
    2af2:	00 d0       	rcall	.+0      	; 0x2af4 <LM35_read_temperature+0x8>
    2af4:	00 d0       	rcall	.+0      	; 0x2af6 <LM35_read_temperature+0xa>
    2af6:	cd b7       	in	r28, 0x3d	; 61
    2af8:	de b7       	in	r29, 0x3e	; 62

    // Read the ADC result.
	uint16 raw_adc = ADC_getDigitalValueSynchNonBlocking(ADC2);
    2afa:	82 e0       	ldi	r24, 0x02	; 2
    2afc:	0e 94 df 07 	call	0xfbe	; 0xfbe <ADC_getDigitalValueSynchNonBlocking>
    2b00:	9e 83       	std	Y+6, r25	; 0x06
    2b02:	8d 83       	std	Y+5, r24	; 0x05

    // Calculate temperature in Celsius.
    // LM35 has a sensitivity of 10 mV per degree Celsius.
    float temperature = (raw_adc * 100.0) / 10.0;
    2b04:	8d 81       	ldd	r24, Y+5	; 0x05
    2b06:	9e 81       	ldd	r25, Y+6	; 0x06
    2b08:	cc 01       	movw	r24, r24
    2b0a:	a0 e0       	ldi	r26, 0x00	; 0
    2b0c:	b0 e0       	ldi	r27, 0x00	; 0
    2b0e:	bc 01       	movw	r22, r24
    2b10:	cd 01       	movw	r24, r26
    2b12:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	bc 01       	movw	r22, r24
    2b1c:	cd 01       	movw	r24, r26
    2b1e:	20 e0       	ldi	r18, 0x00	; 0
    2b20:	30 e0       	ldi	r19, 0x00	; 0
    2b22:	48 ec       	ldi	r20, 0xC8	; 200
    2b24:	52 e4       	ldi	r21, 0x42	; 66
    2b26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b2a:	dc 01       	movw	r26, r24
    2b2c:	cb 01       	movw	r24, r22
    2b2e:	bc 01       	movw	r22, r24
    2b30:	cd 01       	movw	r24, r26
    2b32:	20 e0       	ldi	r18, 0x00	; 0
    2b34:	30 e0       	ldi	r19, 0x00	; 0
    2b36:	40 e2       	ldi	r20, 0x20	; 32
    2b38:	51 e4       	ldi	r21, 0x41	; 65
    2b3a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b3e:	dc 01       	movw	r26, r24
    2b40:	cb 01       	movw	r24, r22
    2b42:	89 83       	std	Y+1, r24	; 0x01
    2b44:	9a 83       	std	Y+2, r25	; 0x02
    2b46:	ab 83       	std	Y+3, r26	; 0x03
    2b48:	bc 83       	std	Y+4, r27	; 0x04

    return (uint16)temperature;
    2b4a:	69 81       	ldd	r22, Y+1	; 0x01
    2b4c:	7a 81       	ldd	r23, Y+2	; 0x02
    2b4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b50:	9c 81       	ldd	r25, Y+4	; 0x04
    2b52:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b56:	dc 01       	movw	r26, r24
    2b58:	cb 01       	movw	r24, r22
}
    2b5a:	26 96       	adiw	r28, 0x06	; 6
    2b5c:	0f b6       	in	r0, 0x3f	; 63
    2b5e:	f8 94       	cli
    2b60:	de bf       	out	0x3e, r29	; 62
    2b62:	0f be       	out	0x3f, r0	; 63
    2b64:	cd bf       	out	0x3d, r28	; 61
    2b66:	cf 91       	pop	r28
    2b68:	df 91       	pop	r29
    2b6a:	08 95       	ret

00002b6c <latchbyte>:
#include "LCD_Private.h"
#include "stdlib.h"


static void latchbyte(uint8_t copy_u8Byte)
{
    2b6c:	0f 93       	push	r16
    2b6e:	1f 93       	push	r17
    2b70:	df 93       	push	r29
    2b72:	cf 93       	push	r28
    2b74:	cd b7       	in	r28, 0x3d	; 61
    2b76:	de b7       	in	r29, 0x3e	; 62
    2b78:	c7 54       	subi	r28, 0x47	; 71
    2b7a:	d0 40       	sbci	r29, 0x00	; 0
    2b7c:	0f b6       	in	r0, 0x3f	; 63
    2b7e:	f8 94       	cli
    2b80:	de bf       	out	0x3e, r29	; 62
    2b82:	0f be       	out	0x3f, r0	; 63
    2b84:	cd bf       	out	0x3d, r28	; 61
    2b86:	fe 01       	movw	r30, r28
    2b88:	e9 5b       	subi	r30, 0xB9	; 185
    2b8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2b8c:	80 83       	st	Z, r24

	}
#elif(MODE == _4_BIT_MODE)
	{

		DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, LOW);
    2b8e:	89 e3       	ldi	r24, 0x39	; 57
    2b90:	90 e0       	ldi	r25, 0x00	; 0
    2b92:	62 e0       	ldi	r22, 0x02	; 2
    2b94:	40 e0       	ldi	r20, 0x00	; 0
    2b96:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    2b9a:	fe 01       	movw	r30, r28
    2b9c:	ed 5b       	subi	r30, 0xBD	; 189
    2b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2ba0:	80 e0       	ldi	r24, 0x00	; 0
    2ba2:	90 e0       	ldi	r25, 0x00	; 0
    2ba4:	a0 e2       	ldi	r26, 0x20	; 32
    2ba6:	b1 e4       	ldi	r27, 0x41	; 65
    2ba8:	80 83       	st	Z, r24
    2baa:	91 83       	std	Z+1, r25	; 0x01
    2bac:	a2 83       	std	Z+2, r26	; 0x02
    2bae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2bb0:	8e 01       	movw	r16, r28
    2bb2:	01 5c       	subi	r16, 0xC1	; 193
    2bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    2bb6:	fe 01       	movw	r30, r28
    2bb8:	ed 5b       	subi	r30, 0xBD	; 189
    2bba:	ff 4f       	sbci	r31, 0xFF	; 255
    2bbc:	60 81       	ld	r22, Z
    2bbe:	71 81       	ldd	r23, Z+1	; 0x01
    2bc0:	82 81       	ldd	r24, Z+2	; 0x02
    2bc2:	93 81       	ldd	r25, Z+3	; 0x03
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	4a e7       	ldi	r20, 0x7A	; 122
    2bca:	55 e4       	ldi	r21, 0x45	; 69
    2bcc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd0:	dc 01       	movw	r26, r24
    2bd2:	cb 01       	movw	r24, r22
    2bd4:	f8 01       	movw	r30, r16
    2bd6:	80 83       	st	Z, r24
    2bd8:	91 83       	std	Z+1, r25	; 0x01
    2bda:	a2 83       	std	Z+2, r26	; 0x02
    2bdc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2bde:	fe 01       	movw	r30, r28
    2be0:	ff 96       	adiw	r30, 0x3f	; 63
    2be2:	60 81       	ld	r22, Z
    2be4:	71 81       	ldd	r23, Z+1	; 0x01
    2be6:	82 81       	ldd	r24, Z+2	; 0x02
    2be8:	93 81       	ldd	r25, Z+3	; 0x03
    2bea:	20 e0       	ldi	r18, 0x00	; 0
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	40 e8       	ldi	r20, 0x80	; 128
    2bf0:	5f e3       	ldi	r21, 0x3F	; 63
    2bf2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2bf6:	88 23       	and	r24, r24
    2bf8:	2c f4       	brge	.+10     	; 0x2c04 <latchbyte+0x98>
		__ticks = 1;
    2bfa:	81 e0       	ldi	r24, 0x01	; 1
    2bfc:	90 e0       	ldi	r25, 0x00	; 0
    2bfe:	9e af       	std	Y+62, r25	; 0x3e
    2c00:	8d af       	std	Y+61, r24	; 0x3d
    2c02:	46 c0       	rjmp	.+140    	; 0x2c90 <latchbyte+0x124>
	else if (__tmp > 65535)
    2c04:	fe 01       	movw	r30, r28
    2c06:	ff 96       	adiw	r30, 0x3f	; 63
    2c08:	60 81       	ld	r22, Z
    2c0a:	71 81       	ldd	r23, Z+1	; 0x01
    2c0c:	82 81       	ldd	r24, Z+2	; 0x02
    2c0e:	93 81       	ldd	r25, Z+3	; 0x03
    2c10:	20 e0       	ldi	r18, 0x00	; 0
    2c12:	3f ef       	ldi	r19, 0xFF	; 255
    2c14:	4f e7       	ldi	r20, 0x7F	; 127
    2c16:	57 e4       	ldi	r21, 0x47	; 71
    2c18:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c1c:	18 16       	cp	r1, r24
    2c1e:	64 f5       	brge	.+88     	; 0x2c78 <latchbyte+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c20:	fe 01       	movw	r30, r28
    2c22:	ed 5b       	subi	r30, 0xBD	; 189
    2c24:	ff 4f       	sbci	r31, 0xFF	; 255
    2c26:	60 81       	ld	r22, Z
    2c28:	71 81       	ldd	r23, Z+1	; 0x01
    2c2a:	82 81       	ldd	r24, Z+2	; 0x02
    2c2c:	93 81       	ldd	r25, Z+3	; 0x03
    2c2e:	20 e0       	ldi	r18, 0x00	; 0
    2c30:	30 e0       	ldi	r19, 0x00	; 0
    2c32:	40 e2       	ldi	r20, 0x20	; 32
    2c34:	51 e4       	ldi	r21, 0x41	; 65
    2c36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c3a:	dc 01       	movw	r26, r24
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	bc 01       	movw	r22, r24
    2c40:	cd 01       	movw	r24, r26
    2c42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c46:	dc 01       	movw	r26, r24
    2c48:	cb 01       	movw	r24, r22
    2c4a:	9e af       	std	Y+62, r25	; 0x3e
    2c4c:	8d af       	std	Y+61, r24	; 0x3d
    2c4e:	0f c0       	rjmp	.+30     	; 0x2c6e <latchbyte+0x102>
    2c50:	80 e9       	ldi	r24, 0x90	; 144
    2c52:	91 e0       	ldi	r25, 0x01	; 1
    2c54:	9c af       	std	Y+60, r25	; 0x3c
    2c56:	8b af       	std	Y+59, r24	; 0x3b
    2c58:	8b ad       	ldd	r24, Y+59	; 0x3b
    2c5a:	9c ad       	ldd	r25, Y+60	; 0x3c
    2c5c:	01 97       	sbiw	r24, 0x01	; 1
    2c5e:	f1 f7       	brne	.-4      	; 0x2c5c <latchbyte+0xf0>
    2c60:	9c af       	std	Y+60, r25	; 0x3c
    2c62:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c64:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c66:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c68:	01 97       	sbiw	r24, 0x01	; 1
    2c6a:	9e af       	std	Y+62, r25	; 0x3e
    2c6c:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c70:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c72:	00 97       	sbiw	r24, 0x00	; 0
    2c74:	69 f7       	brne	.-38     	; 0x2c50 <latchbyte+0xe4>
    2c76:	16 c0       	rjmp	.+44     	; 0x2ca4 <latchbyte+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c78:	fe 01       	movw	r30, r28
    2c7a:	ff 96       	adiw	r30, 0x3f	; 63
    2c7c:	60 81       	ld	r22, Z
    2c7e:	71 81       	ldd	r23, Z+1	; 0x01
    2c80:	82 81       	ldd	r24, Z+2	; 0x02
    2c82:	93 81       	ldd	r25, Z+3	; 0x03
    2c84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c88:	dc 01       	movw	r26, r24
    2c8a:	cb 01       	movw	r24, r22
    2c8c:	9e af       	std	Y+62, r25	; 0x3e
    2c8e:	8d af       	std	Y+61, r24	; 0x3d
    2c90:	8d ad       	ldd	r24, Y+61	; 0x3d
    2c92:	9e ad       	ldd	r25, Y+62	; 0x3e
    2c94:	9a af       	std	Y+58, r25	; 0x3a
    2c96:	89 af       	std	Y+57, r24	; 0x39
    2c98:	89 ad       	ldd	r24, Y+57	; 0x39
    2c9a:	9a ad       	ldd	r25, Y+58	; 0x3a
    2c9c:	01 97       	sbiw	r24, 0x01	; 1
    2c9e:	f1 f7       	brne	.-4      	; 0x2c9c <latchbyte+0x130>
    2ca0:	9a af       	std	Y+58, r25	; 0x3a
    2ca2:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(10);
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(copy_u8Byte,4));
    2ca4:	fe 01       	movw	r30, r28
    2ca6:	e9 5b       	subi	r30, 0xB9	; 185
    2ca8:	ff 4f       	sbci	r31, 0xFF	; 255
    2caa:	80 81       	ld	r24, Z
    2cac:	88 2f       	mov	r24, r24
    2cae:	90 e0       	ldi	r25, 0x00	; 0
    2cb0:	80 71       	andi	r24, 0x10	; 16
    2cb2:	90 70       	andi	r25, 0x00	; 0
    2cb4:	95 95       	asr	r25
    2cb6:	87 95       	ror	r24
    2cb8:	95 95       	asr	r25
    2cba:	87 95       	ror	r24
    2cbc:	95 95       	asr	r25
    2cbe:	87 95       	ror	r24
    2cc0:	95 95       	asr	r25
    2cc2:	87 95       	ror	r24
    2cc4:	28 2f       	mov	r18, r24
    2cc6:	86 e3       	ldi	r24, 0x36	; 54
    2cc8:	90 e0       	ldi	r25, 0x00	; 0
    2cca:	60 e0       	ldi	r22, 0x00	; 0
    2ccc:	42 2f       	mov	r20, r18
    2cce:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(copy_u8Byte,5));
    2cd2:	fe 01       	movw	r30, r28
    2cd4:	e9 5b       	subi	r30, 0xB9	; 185
    2cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    2cd8:	80 81       	ld	r24, Z
    2cda:	88 2f       	mov	r24, r24
    2cdc:	90 e0       	ldi	r25, 0x00	; 0
    2cde:	80 72       	andi	r24, 0x20	; 32
    2ce0:	90 70       	andi	r25, 0x00	; 0
    2ce2:	95 95       	asr	r25
    2ce4:	87 95       	ror	r24
    2ce6:	95 95       	asr	r25
    2ce8:	87 95       	ror	r24
    2cea:	95 95       	asr	r25
    2cec:	87 95       	ror	r24
    2cee:	95 95       	asr	r25
    2cf0:	87 95       	ror	r24
    2cf2:	95 95       	asr	r25
    2cf4:	87 95       	ror	r24
    2cf6:	28 2f       	mov	r18, r24
    2cf8:	86 e3       	ldi	r24, 0x36	; 54
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	61 e0       	ldi	r22, 0x01	; 1
    2cfe:	42 2f       	mov	r20, r18
    2d00:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(copy_u8Byte,6));
    2d04:	fe 01       	movw	r30, r28
    2d06:	e9 5b       	subi	r30, 0xB9	; 185
    2d08:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0a:	80 81       	ld	r24, Z
    2d0c:	88 2f       	mov	r24, r24
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	80 74       	andi	r24, 0x40	; 64
    2d12:	90 70       	andi	r25, 0x00	; 0
    2d14:	08 2e       	mov	r0, r24
    2d16:	89 2f       	mov	r24, r25
    2d18:	00 0c       	add	r0, r0
    2d1a:	88 1f       	adc	r24, r24
    2d1c:	99 0b       	sbc	r25, r25
    2d1e:	00 0c       	add	r0, r0
    2d20:	88 1f       	adc	r24, r24
    2d22:	99 1f       	adc	r25, r25
    2d24:	28 2f       	mov	r18, r24
    2d26:	86 e3       	ldi	r24, 0x36	; 54
    2d28:	90 e0       	ldi	r25, 0x00	; 0
    2d2a:	62 e0       	ldi	r22, 0x02	; 2
    2d2c:	42 2f       	mov	r20, r18
    2d2e:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(copy_u8Byte,7));
    2d32:	fe 01       	movw	r30, r28
    2d34:	e9 5b       	subi	r30, 0xB9	; 185
    2d36:	ff 4f       	sbci	r31, 0xFF	; 255
    2d38:	80 81       	ld	r24, Z
    2d3a:	28 2f       	mov	r18, r24
    2d3c:	22 1f       	adc	r18, r18
    2d3e:	22 27       	eor	r18, r18
    2d40:	22 1f       	adc	r18, r18
    2d42:	86 e3       	ldi	r24, 0x36	; 54
    2d44:	90 e0       	ldi	r25, 0x00	; 0
    2d46:	64 e0       	ldi	r22, 0x04	; 4
    2d48:	42 2f       	mov	r20, r18
    2d4a:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, HIGH);
    2d4e:	89 e3       	ldi	r24, 0x39	; 57
    2d50:	90 e0       	ldi	r25, 0x00	; 0
    2d52:	62 e0       	ldi	r22, 0x02	; 2
    2d54:	41 e0       	ldi	r20, 0x01	; 1
    2d56:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    2d5a:	80 e0       	ldi	r24, 0x00	; 0
    2d5c:	90 e0       	ldi	r25, 0x00	; 0
    2d5e:	a0 e2       	ldi	r26, 0x20	; 32
    2d60:	b1 e4       	ldi	r27, 0x41	; 65
    2d62:	8d ab       	std	Y+53, r24	; 0x35
    2d64:	9e ab       	std	Y+54, r25	; 0x36
    2d66:	af ab       	std	Y+55, r26	; 0x37
    2d68:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d6a:	6d a9       	ldd	r22, Y+53	; 0x35
    2d6c:	7e a9       	ldd	r23, Y+54	; 0x36
    2d6e:	8f a9       	ldd	r24, Y+55	; 0x37
    2d70:	98 ad       	ldd	r25, Y+56	; 0x38
    2d72:	20 e0       	ldi	r18, 0x00	; 0
    2d74:	30 e0       	ldi	r19, 0x00	; 0
    2d76:	4a e7       	ldi	r20, 0x7A	; 122
    2d78:	55 e4       	ldi	r21, 0x45	; 69
    2d7a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d7e:	dc 01       	movw	r26, r24
    2d80:	cb 01       	movw	r24, r22
    2d82:	89 ab       	std	Y+49, r24	; 0x31
    2d84:	9a ab       	std	Y+50, r25	; 0x32
    2d86:	ab ab       	std	Y+51, r26	; 0x33
    2d88:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2d8a:	69 a9       	ldd	r22, Y+49	; 0x31
    2d8c:	7a a9       	ldd	r23, Y+50	; 0x32
    2d8e:	8b a9       	ldd	r24, Y+51	; 0x33
    2d90:	9c a9       	ldd	r25, Y+52	; 0x34
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	40 e8       	ldi	r20, 0x80	; 128
    2d98:	5f e3       	ldi	r21, 0x3F	; 63
    2d9a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d9e:	88 23       	and	r24, r24
    2da0:	2c f4       	brge	.+10     	; 0x2dac <latchbyte+0x240>
		__ticks = 1;
    2da2:	81 e0       	ldi	r24, 0x01	; 1
    2da4:	90 e0       	ldi	r25, 0x00	; 0
    2da6:	98 ab       	std	Y+48, r25	; 0x30
    2da8:	8f a7       	std	Y+47, r24	; 0x2f
    2daa:	3f c0       	rjmp	.+126    	; 0x2e2a <latchbyte+0x2be>
	else if (__tmp > 65535)
    2dac:	69 a9       	ldd	r22, Y+49	; 0x31
    2dae:	7a a9       	ldd	r23, Y+50	; 0x32
    2db0:	8b a9       	ldd	r24, Y+51	; 0x33
    2db2:	9c a9       	ldd	r25, Y+52	; 0x34
    2db4:	20 e0       	ldi	r18, 0x00	; 0
    2db6:	3f ef       	ldi	r19, 0xFF	; 255
    2db8:	4f e7       	ldi	r20, 0x7F	; 127
    2dba:	57 e4       	ldi	r21, 0x47	; 71
    2dbc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2dc0:	18 16       	cp	r1, r24
    2dc2:	4c f5       	brge	.+82     	; 0x2e16 <latchbyte+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dc4:	6d a9       	ldd	r22, Y+53	; 0x35
    2dc6:	7e a9       	ldd	r23, Y+54	; 0x36
    2dc8:	8f a9       	ldd	r24, Y+55	; 0x37
    2dca:	98 ad       	ldd	r25, Y+56	; 0x38
    2dcc:	20 e0       	ldi	r18, 0x00	; 0
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	40 e2       	ldi	r20, 0x20	; 32
    2dd2:	51 e4       	ldi	r21, 0x41	; 65
    2dd4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dd8:	dc 01       	movw	r26, r24
    2dda:	cb 01       	movw	r24, r22
    2ddc:	bc 01       	movw	r22, r24
    2dde:	cd 01       	movw	r24, r26
    2de0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de4:	dc 01       	movw	r26, r24
    2de6:	cb 01       	movw	r24, r22
    2de8:	98 ab       	std	Y+48, r25	; 0x30
    2dea:	8f a7       	std	Y+47, r24	; 0x2f
    2dec:	0f c0       	rjmp	.+30     	; 0x2e0c <latchbyte+0x2a0>
    2dee:	80 e9       	ldi	r24, 0x90	; 144
    2df0:	91 e0       	ldi	r25, 0x01	; 1
    2df2:	9e a7       	std	Y+46, r25	; 0x2e
    2df4:	8d a7       	std	Y+45, r24	; 0x2d
    2df6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2df8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2dfa:	01 97       	sbiw	r24, 0x01	; 1
    2dfc:	f1 f7       	brne	.-4      	; 0x2dfa <latchbyte+0x28e>
    2dfe:	9e a7       	std	Y+46, r25	; 0x2e
    2e00:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e02:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e04:	98 a9       	ldd	r25, Y+48	; 0x30
    2e06:	01 97       	sbiw	r24, 0x01	; 1
    2e08:	98 ab       	std	Y+48, r25	; 0x30
    2e0a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e0c:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e0e:	98 a9       	ldd	r25, Y+48	; 0x30
    2e10:	00 97       	sbiw	r24, 0x00	; 0
    2e12:	69 f7       	brne	.-38     	; 0x2dee <latchbyte+0x282>
    2e14:	14 c0       	rjmp	.+40     	; 0x2e3e <latchbyte+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e16:	69 a9       	ldd	r22, Y+49	; 0x31
    2e18:	7a a9       	ldd	r23, Y+50	; 0x32
    2e1a:	8b a9       	ldd	r24, Y+51	; 0x33
    2e1c:	9c a9       	ldd	r25, Y+52	; 0x34
    2e1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e22:	dc 01       	movw	r26, r24
    2e24:	cb 01       	movw	r24, r22
    2e26:	98 ab       	std	Y+48, r25	; 0x30
    2e28:	8f a7       	std	Y+47, r24	; 0x2f
    2e2a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2e2c:	98 a9       	ldd	r25, Y+48	; 0x30
    2e2e:	9c a7       	std	Y+44, r25	; 0x2c
    2e30:	8b a7       	std	Y+43, r24	; 0x2b
    2e32:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e34:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e36:	01 97       	sbiw	r24, 0x01	; 1
    2e38:	f1 f7       	brne	.-4      	; 0x2e36 <latchbyte+0x2ca>
    2e3a:	9c a7       	std	Y+44, r25	; 0x2c
    2e3c:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10);
		DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, LOW);
    2e3e:	89 e3       	ldi	r24, 0x39	; 57
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	62 e0       	ldi	r22, 0x02	; 2
    2e44:	40 e0       	ldi	r20, 0x00	; 0
    2e46:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    2e4a:	80 e0       	ldi	r24, 0x00	; 0
    2e4c:	90 e0       	ldi	r25, 0x00	; 0
    2e4e:	a0 e2       	ldi	r26, 0x20	; 32
    2e50:	b1 e4       	ldi	r27, 0x41	; 65
    2e52:	8f a3       	std	Y+39, r24	; 0x27
    2e54:	98 a7       	std	Y+40, r25	; 0x28
    2e56:	a9 a7       	std	Y+41, r26	; 0x29
    2e58:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e5a:	6f a1       	ldd	r22, Y+39	; 0x27
    2e5c:	78 a5       	ldd	r23, Y+40	; 0x28
    2e5e:	89 a5       	ldd	r24, Y+41	; 0x29
    2e60:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e62:	20 e0       	ldi	r18, 0x00	; 0
    2e64:	30 e0       	ldi	r19, 0x00	; 0
    2e66:	4a e7       	ldi	r20, 0x7A	; 122
    2e68:	55 e4       	ldi	r21, 0x45	; 69
    2e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e6e:	dc 01       	movw	r26, r24
    2e70:	cb 01       	movw	r24, r22
    2e72:	8b a3       	std	Y+35, r24	; 0x23
    2e74:	9c a3       	std	Y+36, r25	; 0x24
    2e76:	ad a3       	std	Y+37, r26	; 0x25
    2e78:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e7a:	6b a1       	ldd	r22, Y+35	; 0x23
    2e7c:	7c a1       	ldd	r23, Y+36	; 0x24
    2e7e:	8d a1       	ldd	r24, Y+37	; 0x25
    2e80:	9e a1       	ldd	r25, Y+38	; 0x26
    2e82:	20 e0       	ldi	r18, 0x00	; 0
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	40 e8       	ldi	r20, 0x80	; 128
    2e88:	5f e3       	ldi	r21, 0x3F	; 63
    2e8a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e8e:	88 23       	and	r24, r24
    2e90:	2c f4       	brge	.+10     	; 0x2e9c <latchbyte+0x330>
		__ticks = 1;
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	90 e0       	ldi	r25, 0x00	; 0
    2e96:	9a a3       	std	Y+34, r25	; 0x22
    2e98:	89 a3       	std	Y+33, r24	; 0x21
    2e9a:	3f c0       	rjmp	.+126    	; 0x2f1a <latchbyte+0x3ae>
	else if (__tmp > 65535)
    2e9c:	6b a1       	ldd	r22, Y+35	; 0x23
    2e9e:	7c a1       	ldd	r23, Y+36	; 0x24
    2ea0:	8d a1       	ldd	r24, Y+37	; 0x25
    2ea2:	9e a1       	ldd	r25, Y+38	; 0x26
    2ea4:	20 e0       	ldi	r18, 0x00	; 0
    2ea6:	3f ef       	ldi	r19, 0xFF	; 255
    2ea8:	4f e7       	ldi	r20, 0x7F	; 127
    2eaa:	57 e4       	ldi	r21, 0x47	; 71
    2eac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eb0:	18 16       	cp	r1, r24
    2eb2:	4c f5       	brge	.+82     	; 0x2f06 <latchbyte+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eb4:	6f a1       	ldd	r22, Y+39	; 0x27
    2eb6:	78 a5       	ldd	r23, Y+40	; 0x28
    2eb8:	89 a5       	ldd	r24, Y+41	; 0x29
    2eba:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ebc:	20 e0       	ldi	r18, 0x00	; 0
    2ebe:	30 e0       	ldi	r19, 0x00	; 0
    2ec0:	40 e2       	ldi	r20, 0x20	; 32
    2ec2:	51 e4       	ldi	r21, 0x41	; 65
    2ec4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ec8:	dc 01       	movw	r26, r24
    2eca:	cb 01       	movw	r24, r22
    2ecc:	bc 01       	movw	r22, r24
    2ece:	cd 01       	movw	r24, r26
    2ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ed4:	dc 01       	movw	r26, r24
    2ed6:	cb 01       	movw	r24, r22
    2ed8:	9a a3       	std	Y+34, r25	; 0x22
    2eda:	89 a3       	std	Y+33, r24	; 0x21
    2edc:	0f c0       	rjmp	.+30     	; 0x2efc <latchbyte+0x390>
    2ede:	80 e9       	ldi	r24, 0x90	; 144
    2ee0:	91 e0       	ldi	r25, 0x01	; 1
    2ee2:	98 a3       	std	Y+32, r25	; 0x20
    2ee4:	8f 8f       	std	Y+31, r24	; 0x1f
    2ee6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2ee8:	98 a1       	ldd	r25, Y+32	; 0x20
    2eea:	01 97       	sbiw	r24, 0x01	; 1
    2eec:	f1 f7       	brne	.-4      	; 0x2eea <latchbyte+0x37e>
    2eee:	98 a3       	std	Y+32, r25	; 0x20
    2ef0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ef2:	89 a1       	ldd	r24, Y+33	; 0x21
    2ef4:	9a a1       	ldd	r25, Y+34	; 0x22
    2ef6:	01 97       	sbiw	r24, 0x01	; 1
    2ef8:	9a a3       	std	Y+34, r25	; 0x22
    2efa:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2efc:	89 a1       	ldd	r24, Y+33	; 0x21
    2efe:	9a a1       	ldd	r25, Y+34	; 0x22
    2f00:	00 97       	sbiw	r24, 0x00	; 0
    2f02:	69 f7       	brne	.-38     	; 0x2ede <latchbyte+0x372>
    2f04:	14 c0       	rjmp	.+40     	; 0x2f2e <latchbyte+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f06:	6b a1       	ldd	r22, Y+35	; 0x23
    2f08:	7c a1       	ldd	r23, Y+36	; 0x24
    2f0a:	8d a1       	ldd	r24, Y+37	; 0x25
    2f0c:	9e a1       	ldd	r25, Y+38	; 0x26
    2f0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f12:	dc 01       	movw	r26, r24
    2f14:	cb 01       	movw	r24, r22
    2f16:	9a a3       	std	Y+34, r25	; 0x22
    2f18:	89 a3       	std	Y+33, r24	; 0x21
    2f1a:	89 a1       	ldd	r24, Y+33	; 0x21
    2f1c:	9a a1       	ldd	r25, Y+34	; 0x22
    2f1e:	9e 8f       	std	Y+30, r25	; 0x1e
    2f20:	8d 8f       	std	Y+29, r24	; 0x1d
    2f22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f24:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2f26:	01 97       	sbiw	r24, 0x01	; 1
    2f28:	f1 f7       	brne	.-4      	; 0x2f26 <latchbyte+0x3ba>
    2f2a:	9e 8f       	std	Y+30, r25	; 0x1e
    2f2c:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(copy_u8Byte,0));
    2f2e:	fe 01       	movw	r30, r28
    2f30:	e9 5b       	subi	r30, 0xB9	; 185
    2f32:	ff 4f       	sbci	r31, 0xFF	; 255
    2f34:	80 81       	ld	r24, Z
    2f36:	28 2f       	mov	r18, r24
    2f38:	21 70       	andi	r18, 0x01	; 1
    2f3a:	86 e3       	ldi	r24, 0x36	; 54
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	60 e0       	ldi	r22, 0x00	; 0
    2f40:	42 2f       	mov	r20, r18
    2f42:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(copy_u8Byte,1));
    2f46:	fe 01       	movw	r30, r28
    2f48:	e9 5b       	subi	r30, 0xB9	; 185
    2f4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f4c:	80 81       	ld	r24, Z
    2f4e:	88 2f       	mov	r24, r24
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	82 70       	andi	r24, 0x02	; 2
    2f54:	90 70       	andi	r25, 0x00	; 0
    2f56:	95 95       	asr	r25
    2f58:	87 95       	ror	r24
    2f5a:	28 2f       	mov	r18, r24
    2f5c:	86 e3       	ldi	r24, 0x36	; 54
    2f5e:	90 e0       	ldi	r25, 0x00	; 0
    2f60:	61 e0       	ldi	r22, 0x01	; 1
    2f62:	42 2f       	mov	r20, r18
    2f64:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(copy_u8Byte,2));
    2f68:	fe 01       	movw	r30, r28
    2f6a:	e9 5b       	subi	r30, 0xB9	; 185
    2f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6e:	80 81       	ld	r24, Z
    2f70:	88 2f       	mov	r24, r24
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	84 70       	andi	r24, 0x04	; 4
    2f76:	90 70       	andi	r25, 0x00	; 0
    2f78:	95 95       	asr	r25
    2f7a:	87 95       	ror	r24
    2f7c:	95 95       	asr	r25
    2f7e:	87 95       	ror	r24
    2f80:	28 2f       	mov	r18, r24
    2f82:	86 e3       	ldi	r24, 0x36	; 54
    2f84:	90 e0       	ldi	r25, 0x00	; 0
    2f86:	62 e0       	ldi	r22, 0x02	; 2
    2f88:	42 2f       	mov	r20, r18
    2f8a:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(copy_u8Byte,3));
    2f8e:	fe 01       	movw	r30, r28
    2f90:	e9 5b       	subi	r30, 0xB9	; 185
    2f92:	ff 4f       	sbci	r31, 0xFF	; 255
    2f94:	80 81       	ld	r24, Z
    2f96:	88 2f       	mov	r24, r24
    2f98:	90 e0       	ldi	r25, 0x00	; 0
    2f9a:	88 70       	andi	r24, 0x08	; 8
    2f9c:	90 70       	andi	r25, 0x00	; 0
    2f9e:	95 95       	asr	r25
    2fa0:	87 95       	ror	r24
    2fa2:	95 95       	asr	r25
    2fa4:	87 95       	ror	r24
    2fa6:	95 95       	asr	r25
    2fa8:	87 95       	ror	r24
    2faa:	28 2f       	mov	r18, r24
    2fac:	86 e3       	ldi	r24, 0x36	; 54
    2fae:	90 e0       	ldi	r25, 0x00	; 0
    2fb0:	64 e0       	ldi	r22, 0x04	; 4
    2fb2:	42 2f       	mov	r20, r18
    2fb4:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, HIGH);
    2fb8:	89 e3       	ldi	r24, 0x39	; 57
    2fba:	90 e0       	ldi	r25, 0x00	; 0
    2fbc:	62 e0       	ldi	r22, 0x02	; 2
    2fbe:	41 e0       	ldi	r20, 0x01	; 1
    2fc0:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    2fc4:	80 e0       	ldi	r24, 0x00	; 0
    2fc6:	90 e0       	ldi	r25, 0x00	; 0
    2fc8:	a0 e2       	ldi	r26, 0x20	; 32
    2fca:	b1 e4       	ldi	r27, 0x41	; 65
    2fcc:	89 8f       	std	Y+25, r24	; 0x19
    2fce:	9a 8f       	std	Y+26, r25	; 0x1a
    2fd0:	ab 8f       	std	Y+27, r26	; 0x1b
    2fd2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fd4:	69 8d       	ldd	r22, Y+25	; 0x19
    2fd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2fd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2fda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2fdc:	20 e0       	ldi	r18, 0x00	; 0
    2fde:	30 e0       	ldi	r19, 0x00	; 0
    2fe0:	4a e7       	ldi	r20, 0x7A	; 122
    2fe2:	55 e4       	ldi	r21, 0x45	; 69
    2fe4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe8:	dc 01       	movw	r26, r24
    2fea:	cb 01       	movw	r24, r22
    2fec:	8d 8b       	std	Y+21, r24	; 0x15
    2fee:	9e 8b       	std	Y+22, r25	; 0x16
    2ff0:	af 8b       	std	Y+23, r26	; 0x17
    2ff2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2ff4:	6d 89       	ldd	r22, Y+21	; 0x15
    2ff6:	7e 89       	ldd	r23, Y+22	; 0x16
    2ff8:	8f 89       	ldd	r24, Y+23	; 0x17
    2ffa:	98 8d       	ldd	r25, Y+24	; 0x18
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	40 e8       	ldi	r20, 0x80	; 128
    3002:	5f e3       	ldi	r21, 0x3F	; 63
    3004:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3008:	88 23       	and	r24, r24
    300a:	2c f4       	brge	.+10     	; 0x3016 <latchbyte+0x4aa>
		__ticks = 1;
    300c:	81 e0       	ldi	r24, 0x01	; 1
    300e:	90 e0       	ldi	r25, 0x00	; 0
    3010:	9c 8b       	std	Y+20, r25	; 0x14
    3012:	8b 8b       	std	Y+19, r24	; 0x13
    3014:	3f c0       	rjmp	.+126    	; 0x3094 <latchbyte+0x528>
	else if (__tmp > 65535)
    3016:	6d 89       	ldd	r22, Y+21	; 0x15
    3018:	7e 89       	ldd	r23, Y+22	; 0x16
    301a:	8f 89       	ldd	r24, Y+23	; 0x17
    301c:	98 8d       	ldd	r25, Y+24	; 0x18
    301e:	20 e0       	ldi	r18, 0x00	; 0
    3020:	3f ef       	ldi	r19, 0xFF	; 255
    3022:	4f e7       	ldi	r20, 0x7F	; 127
    3024:	57 e4       	ldi	r21, 0x47	; 71
    3026:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    302a:	18 16       	cp	r1, r24
    302c:	4c f5       	brge	.+82     	; 0x3080 <latchbyte+0x514>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    302e:	69 8d       	ldd	r22, Y+25	; 0x19
    3030:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3032:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3034:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3036:	20 e0       	ldi	r18, 0x00	; 0
    3038:	30 e0       	ldi	r19, 0x00	; 0
    303a:	40 e2       	ldi	r20, 0x20	; 32
    303c:	51 e4       	ldi	r21, 0x41	; 65
    303e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3042:	dc 01       	movw	r26, r24
    3044:	cb 01       	movw	r24, r22
    3046:	bc 01       	movw	r22, r24
    3048:	cd 01       	movw	r24, r26
    304a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    304e:	dc 01       	movw	r26, r24
    3050:	cb 01       	movw	r24, r22
    3052:	9c 8b       	std	Y+20, r25	; 0x14
    3054:	8b 8b       	std	Y+19, r24	; 0x13
    3056:	0f c0       	rjmp	.+30     	; 0x3076 <latchbyte+0x50a>
    3058:	80 e9       	ldi	r24, 0x90	; 144
    305a:	91 e0       	ldi	r25, 0x01	; 1
    305c:	9a 8b       	std	Y+18, r25	; 0x12
    305e:	89 8b       	std	Y+17, r24	; 0x11
    3060:	89 89       	ldd	r24, Y+17	; 0x11
    3062:	9a 89       	ldd	r25, Y+18	; 0x12
    3064:	01 97       	sbiw	r24, 0x01	; 1
    3066:	f1 f7       	brne	.-4      	; 0x3064 <latchbyte+0x4f8>
    3068:	9a 8b       	std	Y+18, r25	; 0x12
    306a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    306c:	8b 89       	ldd	r24, Y+19	; 0x13
    306e:	9c 89       	ldd	r25, Y+20	; 0x14
    3070:	01 97       	sbiw	r24, 0x01	; 1
    3072:	9c 8b       	std	Y+20, r25	; 0x14
    3074:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3076:	8b 89       	ldd	r24, Y+19	; 0x13
    3078:	9c 89       	ldd	r25, Y+20	; 0x14
    307a:	00 97       	sbiw	r24, 0x00	; 0
    307c:	69 f7       	brne	.-38     	; 0x3058 <latchbyte+0x4ec>
    307e:	14 c0       	rjmp	.+40     	; 0x30a8 <latchbyte+0x53c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3080:	6d 89       	ldd	r22, Y+21	; 0x15
    3082:	7e 89       	ldd	r23, Y+22	; 0x16
    3084:	8f 89       	ldd	r24, Y+23	; 0x17
    3086:	98 8d       	ldd	r25, Y+24	; 0x18
    3088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	9c 8b       	std	Y+20, r25	; 0x14
    3092:	8b 8b       	std	Y+19, r24	; 0x13
    3094:	8b 89       	ldd	r24, Y+19	; 0x13
    3096:	9c 89       	ldd	r25, Y+20	; 0x14
    3098:	98 8b       	std	Y+16, r25	; 0x10
    309a:	8f 87       	std	Y+15, r24	; 0x0f
    309c:	8f 85       	ldd	r24, Y+15	; 0x0f
    309e:	98 89       	ldd	r25, Y+16	; 0x10
    30a0:	01 97       	sbiw	r24, 0x01	; 1
    30a2:	f1 f7       	brne	.-4      	; 0x30a0 <latchbyte+0x534>
    30a4:	98 8b       	std	Y+16, r25	; 0x10
    30a6:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, LOW);
    30a8:	89 e3       	ldi	r24, 0x39	; 57
    30aa:	90 e0       	ldi	r25, 0x00	; 0
    30ac:	62 e0       	ldi	r22, 0x02	; 2
    30ae:	40 e0       	ldi	r20, 0x00	; 0
    30b0:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    30b4:	80 e0       	ldi	r24, 0x00	; 0
    30b6:	90 e0       	ldi	r25, 0x00	; 0
    30b8:	a8 e4       	ldi	r26, 0x48	; 72
    30ba:	b2 e4       	ldi	r27, 0x42	; 66
    30bc:	8b 87       	std	Y+11, r24	; 0x0b
    30be:	9c 87       	std	Y+12, r25	; 0x0c
    30c0:	ad 87       	std	Y+13, r26	; 0x0d
    30c2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30c4:	6b 85       	ldd	r22, Y+11	; 0x0b
    30c6:	7c 85       	ldd	r23, Y+12	; 0x0c
    30c8:	8d 85       	ldd	r24, Y+13	; 0x0d
    30ca:	9e 85       	ldd	r25, Y+14	; 0x0e
    30cc:	20 e0       	ldi	r18, 0x00	; 0
    30ce:	30 e0       	ldi	r19, 0x00	; 0
    30d0:	4a e7       	ldi	r20, 0x7A	; 122
    30d2:	55 e4       	ldi	r21, 0x45	; 69
    30d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30d8:	dc 01       	movw	r26, r24
    30da:	cb 01       	movw	r24, r22
    30dc:	8f 83       	std	Y+7, r24	; 0x07
    30de:	98 87       	std	Y+8, r25	; 0x08
    30e0:	a9 87       	std	Y+9, r26	; 0x09
    30e2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    30e4:	6f 81       	ldd	r22, Y+7	; 0x07
    30e6:	78 85       	ldd	r23, Y+8	; 0x08
    30e8:	89 85       	ldd	r24, Y+9	; 0x09
    30ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    30ec:	20 e0       	ldi	r18, 0x00	; 0
    30ee:	30 e0       	ldi	r19, 0x00	; 0
    30f0:	40 e8       	ldi	r20, 0x80	; 128
    30f2:	5f e3       	ldi	r21, 0x3F	; 63
    30f4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    30f8:	88 23       	and	r24, r24
    30fa:	2c f4       	brge	.+10     	; 0x3106 <latchbyte+0x59a>
		__ticks = 1;
    30fc:	81 e0       	ldi	r24, 0x01	; 1
    30fe:	90 e0       	ldi	r25, 0x00	; 0
    3100:	9e 83       	std	Y+6, r25	; 0x06
    3102:	8d 83       	std	Y+5, r24	; 0x05
    3104:	3f c0       	rjmp	.+126    	; 0x3184 <latchbyte+0x618>
	else if (__tmp > 65535)
    3106:	6f 81       	ldd	r22, Y+7	; 0x07
    3108:	78 85       	ldd	r23, Y+8	; 0x08
    310a:	89 85       	ldd	r24, Y+9	; 0x09
    310c:	9a 85       	ldd	r25, Y+10	; 0x0a
    310e:	20 e0       	ldi	r18, 0x00	; 0
    3110:	3f ef       	ldi	r19, 0xFF	; 255
    3112:	4f e7       	ldi	r20, 0x7F	; 127
    3114:	57 e4       	ldi	r21, 0x47	; 71
    3116:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    311a:	18 16       	cp	r1, r24
    311c:	4c f5       	brge	.+82     	; 0x3170 <latchbyte+0x604>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    311e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3120:	7c 85       	ldd	r23, Y+12	; 0x0c
    3122:	8d 85       	ldd	r24, Y+13	; 0x0d
    3124:	9e 85       	ldd	r25, Y+14	; 0x0e
    3126:	20 e0       	ldi	r18, 0x00	; 0
    3128:	30 e0       	ldi	r19, 0x00	; 0
    312a:	40 e2       	ldi	r20, 0x20	; 32
    312c:	51 e4       	ldi	r21, 0x41	; 65
    312e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3132:	dc 01       	movw	r26, r24
    3134:	cb 01       	movw	r24, r22
    3136:	bc 01       	movw	r22, r24
    3138:	cd 01       	movw	r24, r26
    313a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    313e:	dc 01       	movw	r26, r24
    3140:	cb 01       	movw	r24, r22
    3142:	9e 83       	std	Y+6, r25	; 0x06
    3144:	8d 83       	std	Y+5, r24	; 0x05
    3146:	0f c0       	rjmp	.+30     	; 0x3166 <latchbyte+0x5fa>
    3148:	80 e9       	ldi	r24, 0x90	; 144
    314a:	91 e0       	ldi	r25, 0x01	; 1
    314c:	9c 83       	std	Y+4, r25	; 0x04
    314e:	8b 83       	std	Y+3, r24	; 0x03
    3150:	8b 81       	ldd	r24, Y+3	; 0x03
    3152:	9c 81       	ldd	r25, Y+4	; 0x04
    3154:	01 97       	sbiw	r24, 0x01	; 1
    3156:	f1 f7       	brne	.-4      	; 0x3154 <latchbyte+0x5e8>
    3158:	9c 83       	std	Y+4, r25	; 0x04
    315a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    315c:	8d 81       	ldd	r24, Y+5	; 0x05
    315e:	9e 81       	ldd	r25, Y+6	; 0x06
    3160:	01 97       	sbiw	r24, 0x01	; 1
    3162:	9e 83       	std	Y+6, r25	; 0x06
    3164:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3166:	8d 81       	ldd	r24, Y+5	; 0x05
    3168:	9e 81       	ldd	r25, Y+6	; 0x06
    316a:	00 97       	sbiw	r24, 0x00	; 0
    316c:	69 f7       	brne	.-38     	; 0x3148 <latchbyte+0x5dc>
    316e:	14 c0       	rjmp	.+40     	; 0x3198 <latchbyte+0x62c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3170:	6f 81       	ldd	r22, Y+7	; 0x07
    3172:	78 85       	ldd	r23, Y+8	; 0x08
    3174:	89 85       	ldd	r24, Y+9	; 0x09
    3176:	9a 85       	ldd	r25, Y+10	; 0x0a
    3178:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    317c:	dc 01       	movw	r26, r24
    317e:	cb 01       	movw	r24, r22
    3180:	9e 83       	std	Y+6, r25	; 0x06
    3182:	8d 83       	std	Y+5, r24	; 0x05
    3184:	8d 81       	ldd	r24, Y+5	; 0x05
    3186:	9e 81       	ldd	r25, Y+6	; 0x06
    3188:	9a 83       	std	Y+2, r25	; 0x02
    318a:	89 83       	std	Y+1, r24	; 0x01
    318c:	89 81       	ldd	r24, Y+1	; 0x01
    318e:	9a 81       	ldd	r25, Y+2	; 0x02
    3190:	01 97       	sbiw	r24, 0x01	; 1
    3192:	f1 f7       	brne	.-4      	; 0x3190 <latchbyte+0x624>
    3194:	9a 83       	std	Y+2, r25	; 0x02
    3196:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);

	}
#endif
}
    3198:	c9 5b       	subi	r28, 0xB9	; 185
    319a:	df 4f       	sbci	r29, 0xFF	; 255
    319c:	0f b6       	in	r0, 0x3f	; 63
    319e:	f8 94       	cli
    31a0:	de bf       	out	0x3e, r29	; 62
    31a2:	0f be       	out	0x3f, r0	; 63
    31a4:	cd bf       	out	0x3d, r28	; 61
    31a6:	cf 91       	pop	r28
    31a8:	df 91       	pop	r29
    31aa:	1f 91       	pop	r17
    31ac:	0f 91       	pop	r16
    31ae:	08 95       	ret

000031b0 <H_LCD_void_IniT>:



/*Initialization of LCD with the required mode and configuration*/
void H_LCD_void_IniT (void)
{
    31b0:	df 93       	push	r29
    31b2:	cf 93       	push	r28
    31b4:	cd b7       	in	r28, 0x3d	; 61
    31b6:	de b7       	in	r29, 0x3e	; 62
    31b8:	6c 97       	sbiw	r28, 0x1c	; 28
    31ba:	0f b6       	in	r0, 0x3f	; 63
    31bc:	f8 94       	cli
    31be:	de bf       	out	0x3e, r29	; 62
    31c0:	0f be       	out	0x3f, r0	; 63
    31c2:	cd bf       	out	0x3d, r28	; 61
    31c4:	80 e0       	ldi	r24, 0x00	; 0
    31c6:	90 e0       	ldi	r25, 0x00	; 0
    31c8:	a0 ef       	ldi	r26, 0xF0	; 240
    31ca:	b1 e4       	ldi	r27, 0x41	; 65
    31cc:	89 8f       	std	Y+25, r24	; 0x19
    31ce:	9a 8f       	std	Y+26, r25	; 0x1a
    31d0:	ab 8f       	std	Y+27, r26	; 0x1b
    31d2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31d4:	69 8d       	ldd	r22, Y+25	; 0x19
    31d6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31d8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31da:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	30 e0       	ldi	r19, 0x00	; 0
    31e0:	4a e7       	ldi	r20, 0x7A	; 122
    31e2:	55 e4       	ldi	r21, 0x45	; 69
    31e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31e8:	dc 01       	movw	r26, r24
    31ea:	cb 01       	movw	r24, r22
    31ec:	8d 8b       	std	Y+21, r24	; 0x15
    31ee:	9e 8b       	std	Y+22, r25	; 0x16
    31f0:	af 8b       	std	Y+23, r26	; 0x17
    31f2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31f4:	6d 89       	ldd	r22, Y+21	; 0x15
    31f6:	7e 89       	ldd	r23, Y+22	; 0x16
    31f8:	8f 89       	ldd	r24, Y+23	; 0x17
    31fa:	98 8d       	ldd	r25, Y+24	; 0x18
    31fc:	20 e0       	ldi	r18, 0x00	; 0
    31fe:	30 e0       	ldi	r19, 0x00	; 0
    3200:	40 e8       	ldi	r20, 0x80	; 128
    3202:	5f e3       	ldi	r21, 0x3F	; 63
    3204:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3208:	88 23       	and	r24, r24
    320a:	2c f4       	brge	.+10     	; 0x3216 <H_LCD_void_IniT+0x66>
		__ticks = 1;
    320c:	81 e0       	ldi	r24, 0x01	; 1
    320e:	90 e0       	ldi	r25, 0x00	; 0
    3210:	9c 8b       	std	Y+20, r25	; 0x14
    3212:	8b 8b       	std	Y+19, r24	; 0x13
    3214:	3f c0       	rjmp	.+126    	; 0x3294 <H_LCD_void_IniT+0xe4>
	else if (__tmp > 65535)
    3216:	6d 89       	ldd	r22, Y+21	; 0x15
    3218:	7e 89       	ldd	r23, Y+22	; 0x16
    321a:	8f 89       	ldd	r24, Y+23	; 0x17
    321c:	98 8d       	ldd	r25, Y+24	; 0x18
    321e:	20 e0       	ldi	r18, 0x00	; 0
    3220:	3f ef       	ldi	r19, 0xFF	; 255
    3222:	4f e7       	ldi	r20, 0x7F	; 127
    3224:	57 e4       	ldi	r21, 0x47	; 71
    3226:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    322a:	18 16       	cp	r1, r24
    322c:	4c f5       	brge	.+82     	; 0x3280 <H_LCD_void_IniT+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    322e:	69 8d       	ldd	r22, Y+25	; 0x19
    3230:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3232:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3234:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3236:	20 e0       	ldi	r18, 0x00	; 0
    3238:	30 e0       	ldi	r19, 0x00	; 0
    323a:	40 e2       	ldi	r20, 0x20	; 32
    323c:	51 e4       	ldi	r21, 0x41	; 65
    323e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3242:	dc 01       	movw	r26, r24
    3244:	cb 01       	movw	r24, r22
    3246:	bc 01       	movw	r22, r24
    3248:	cd 01       	movw	r24, r26
    324a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    324e:	dc 01       	movw	r26, r24
    3250:	cb 01       	movw	r24, r22
    3252:	9c 8b       	std	Y+20, r25	; 0x14
    3254:	8b 8b       	std	Y+19, r24	; 0x13
    3256:	0f c0       	rjmp	.+30     	; 0x3276 <H_LCD_void_IniT+0xc6>
    3258:	80 e9       	ldi	r24, 0x90	; 144
    325a:	91 e0       	ldi	r25, 0x01	; 1
    325c:	9a 8b       	std	Y+18, r25	; 0x12
    325e:	89 8b       	std	Y+17, r24	; 0x11
    3260:	89 89       	ldd	r24, Y+17	; 0x11
    3262:	9a 89       	ldd	r25, Y+18	; 0x12
    3264:	01 97       	sbiw	r24, 0x01	; 1
    3266:	f1 f7       	brne	.-4      	; 0x3264 <H_LCD_void_IniT+0xb4>
    3268:	9a 8b       	std	Y+18, r25	; 0x12
    326a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    326c:	8b 89       	ldd	r24, Y+19	; 0x13
    326e:	9c 89       	ldd	r25, Y+20	; 0x14
    3270:	01 97       	sbiw	r24, 0x01	; 1
    3272:	9c 8b       	std	Y+20, r25	; 0x14
    3274:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3276:	8b 89       	ldd	r24, Y+19	; 0x13
    3278:	9c 89       	ldd	r25, Y+20	; 0x14
    327a:	00 97       	sbiw	r24, 0x00	; 0
    327c:	69 f7       	brne	.-38     	; 0x3258 <H_LCD_void_IniT+0xa8>
    327e:	14 c0       	rjmp	.+40     	; 0x32a8 <H_LCD_void_IniT+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3280:	6d 89       	ldd	r22, Y+21	; 0x15
    3282:	7e 89       	ldd	r23, Y+22	; 0x16
    3284:	8f 89       	ldd	r24, Y+23	; 0x17
    3286:	98 8d       	ldd	r25, Y+24	; 0x18
    3288:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    328c:	dc 01       	movw	r26, r24
    328e:	cb 01       	movw	r24, r22
    3290:	9c 8b       	std	Y+20, r25	; 0x14
    3292:	8b 8b       	std	Y+19, r24	; 0x13
    3294:	8b 89       	ldd	r24, Y+19	; 0x13
    3296:	9c 89       	ldd	r25, Y+20	; 0x14
    3298:	98 8b       	std	Y+16, r25	; 0x10
    329a:	8f 87       	std	Y+15, r24	; 0x0f
    329c:	8f 85       	ldd	r24, Y+15	; 0x0f
    329e:	98 89       	ldd	r25, Y+16	; 0x10
    32a0:	01 97       	sbiw	r24, 0x01	; 1
    32a2:	f1 f7       	brne	.-4      	; 0x32a0 <H_LCD_void_IniT+0xf0>
    32a4:	98 8b       	std	Y+16, r25	; 0x10
    32a6:	8f 87       	std	Y+15, r24	; 0x0f
	/*Configure the direction of RS and E pins as o/p pins*/
	_delay_ms(30);
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, LCD_RS_PIN, Pin_OUTPUT);
    32a8:	89 e3       	ldi	r24, 0x39	; 57
    32aa:	90 e0       	ldi	r25, 0x00	; 0
    32ac:	63 e0       	ldi	r22, 0x03	; 3
    32ae:	41 e0       	ldi	r20, 0x01	; 1
    32b0:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, LCD_EN_PIN, Pin_OUTPUT);
    32b4:	89 e3       	ldi	r24, 0x39	; 57
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	62 e0       	ldi	r22, 0x02	; 2
    32ba:	41 e0       	ldi	r20, 0x01	; 1
    32bc:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
    32c0:	80 e0       	ldi	r24, 0x00	; 0
    32c2:	90 e0       	ldi	r25, 0x00	; 0
    32c4:	a0 ea       	ldi	r26, 0xA0	; 160
    32c6:	b1 e4       	ldi	r27, 0x41	; 65
    32c8:	8b 87       	std	Y+11, r24	; 0x0b
    32ca:	9c 87       	std	Y+12, r25	; 0x0c
    32cc:	ad 87       	std	Y+13, r26	; 0x0d
    32ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    32d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    32d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    32d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	4a e7       	ldi	r20, 0x7A	; 122
    32de:	55 e4       	ldi	r21, 0x45	; 69
    32e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32e4:	dc 01       	movw	r26, r24
    32e6:	cb 01       	movw	r24, r22
    32e8:	8f 83       	std	Y+7, r24	; 0x07
    32ea:	98 87       	std	Y+8, r25	; 0x08
    32ec:	a9 87       	std	Y+9, r26	; 0x09
    32ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32f0:	6f 81       	ldd	r22, Y+7	; 0x07
    32f2:	78 85       	ldd	r23, Y+8	; 0x08
    32f4:	89 85       	ldd	r24, Y+9	; 0x09
    32f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    32f8:	20 e0       	ldi	r18, 0x00	; 0
    32fa:	30 e0       	ldi	r19, 0x00	; 0
    32fc:	40 e8       	ldi	r20, 0x80	; 128
    32fe:	5f e3       	ldi	r21, 0x3F	; 63
    3300:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3304:	88 23       	and	r24, r24
    3306:	2c f4       	brge	.+10     	; 0x3312 <H_LCD_void_IniT+0x162>
		__ticks = 1;
    3308:	81 e0       	ldi	r24, 0x01	; 1
    330a:	90 e0       	ldi	r25, 0x00	; 0
    330c:	9e 83       	std	Y+6, r25	; 0x06
    330e:	8d 83       	std	Y+5, r24	; 0x05
    3310:	3f c0       	rjmp	.+126    	; 0x3390 <H_LCD_void_IniT+0x1e0>
	else if (__tmp > 65535)
    3312:	6f 81       	ldd	r22, Y+7	; 0x07
    3314:	78 85       	ldd	r23, Y+8	; 0x08
    3316:	89 85       	ldd	r24, Y+9	; 0x09
    3318:	9a 85       	ldd	r25, Y+10	; 0x0a
    331a:	20 e0       	ldi	r18, 0x00	; 0
    331c:	3f ef       	ldi	r19, 0xFF	; 255
    331e:	4f e7       	ldi	r20, 0x7F	; 127
    3320:	57 e4       	ldi	r21, 0x47	; 71
    3322:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3326:	18 16       	cp	r1, r24
    3328:	4c f5       	brge	.+82     	; 0x337c <H_LCD_void_IniT+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    332a:	6b 85       	ldd	r22, Y+11	; 0x0b
    332c:	7c 85       	ldd	r23, Y+12	; 0x0c
    332e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3330:	9e 85       	ldd	r25, Y+14	; 0x0e
    3332:	20 e0       	ldi	r18, 0x00	; 0
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	40 e2       	ldi	r20, 0x20	; 32
    3338:	51 e4       	ldi	r21, 0x41	; 65
    333a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    333e:	dc 01       	movw	r26, r24
    3340:	cb 01       	movw	r24, r22
    3342:	bc 01       	movw	r22, r24
    3344:	cd 01       	movw	r24, r26
    3346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    334a:	dc 01       	movw	r26, r24
    334c:	cb 01       	movw	r24, r22
    334e:	9e 83       	std	Y+6, r25	; 0x06
    3350:	8d 83       	std	Y+5, r24	; 0x05
    3352:	0f c0       	rjmp	.+30     	; 0x3372 <H_LCD_void_IniT+0x1c2>
    3354:	80 e9       	ldi	r24, 0x90	; 144
    3356:	91 e0       	ldi	r25, 0x01	; 1
    3358:	9c 83       	std	Y+4, r25	; 0x04
    335a:	8b 83       	std	Y+3, r24	; 0x03
    335c:	8b 81       	ldd	r24, Y+3	; 0x03
    335e:	9c 81       	ldd	r25, Y+4	; 0x04
    3360:	01 97       	sbiw	r24, 0x01	; 1
    3362:	f1 f7       	brne	.-4      	; 0x3360 <H_LCD_void_IniT+0x1b0>
    3364:	9c 83       	std	Y+4, r25	; 0x04
    3366:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3368:	8d 81       	ldd	r24, Y+5	; 0x05
    336a:	9e 81       	ldd	r25, Y+6	; 0x06
    336c:	01 97       	sbiw	r24, 0x01	; 1
    336e:	9e 83       	std	Y+6, r25	; 0x06
    3370:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3372:	8d 81       	ldd	r24, Y+5	; 0x05
    3374:	9e 81       	ldd	r25, Y+6	; 0x06
    3376:	00 97       	sbiw	r24, 0x00	; 0
    3378:	69 f7       	brne	.-38     	; 0x3354 <H_LCD_void_IniT+0x1a4>
    337a:	14 c0       	rjmp	.+40     	; 0x33a4 <H_LCD_void_IniT+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    337c:	6f 81       	ldd	r22, Y+7	; 0x07
    337e:	78 85       	ldd	r23, Y+8	; 0x08
    3380:	89 85       	ldd	r24, Y+9	; 0x09
    3382:	9a 85       	ldd	r25, Y+10	; 0x0a
    3384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3388:	dc 01       	movw	r26, r24
    338a:	cb 01       	movw	r24, r22
    338c:	9e 83       	std	Y+6, r25	; 0x06
    338e:	8d 83       	std	Y+5, r24	; 0x05
    3390:	8d 81       	ldd	r24, Y+5	; 0x05
    3392:	9e 81       	ldd	r25, Y+6	; 0x06
    3394:	9a 83       	std	Y+2, r25	; 0x02
    3396:	89 83       	std	Y+1, r24	; 0x01
    3398:	89 81       	ldd	r24, Y+1	; 0x01
    339a:	9a 81       	ldd	r25, Y+2	; 0x02
    339c:	01 97       	sbiw	r24, 0x01	; 1
    339e:	f1 f7       	brne	.-4      	; 0x339c <H_LCD_void_IniT+0x1ec>
    33a0:	9a 83       	std	Y+2, r25	; 0x02
    33a2:	89 83       	std	Y+1, r24	; 0x01

	/*LCD power ON delay is always 15 ms*/
	_delay_ms(20);
#if(MODE == _4_BIT_MODE)
	{
		DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D4_PIN, Pin_OUTPUT);
    33a4:	86 e3       	ldi	r24, 0x36	; 54
    33a6:	90 e0       	ldi	r25, 0x00	; 0
    33a8:	60 e0       	ldi	r22, 0x00	; 0
    33aa:	41 e0       	ldi	r20, 0x01	; 1
    33ac:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D5_PIN, Pin_OUTPUT);
    33b0:	86 e3       	ldi	r24, 0x36	; 54
    33b2:	90 e0       	ldi	r25, 0x00	; 0
    33b4:	61 e0       	ldi	r22, 0x01	; 1
    33b6:	41 e0       	ldi	r20, 0x01	; 1
    33b8:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D6_PIN, Pin_OUTPUT);
    33bc:	86 e3       	ldi	r24, 0x36	; 54
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	62 e0       	ldi	r22, 0x02	; 2
    33c2:	41 e0       	ldi	r20, 0x01	; 1
    33c4:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D7_PIN, Pin_OUTPUT);
    33c8:	86 e3       	ldi	r24, 0x36	; 54
    33ca:	90 e0       	ldi	r25, 0x00	; 0
    33cc:	64 e0       	ldi	r22, 0x04	; 4
    33ce:	41 e0       	ldi	r20, 0x01	; 1
    33d0:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
		/*Send initialization commands for 4 bit mode*/
		H_LCD_void_sendCommand(LCD_MODE_2LINES_4BITS_INIT1);
    33d4:	83 e3       	ldi	r24, 0x33	; 51
    33d6:	0e 94 02 1a 	call	0x3404	; 0x3404 <H_LCD_void_sendCommand>
		H_LCD_void_sendCommand(LCD_MODE_2LINES_4BITS_INIT2);
    33da:	82 e3       	ldi	r24, 0x32	; 50
    33dc:	0e 94 02 1a 	call	0x3404	; 0x3404 <H_LCD_void_sendCommand>

		/*choose the mode of operation of LCD*/
		H_LCD_void_sendCommand(LCD_MODE_2LINES_4BITS);
    33e0:	88 e2       	ldi	r24, 0x28	; 40
    33e2:	0e 94 02 1a 	call	0x3404	; 0x3404 <H_LCD_void_sendCommand>
		H_LCD_void_sendCommand(LCD_MODE_2LINES_8BITS);
	}
#endif

		/*Send initialization display commands*/
	H_LCD_void_sendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    33e6:	8c e0       	ldi	r24, 0x0C	; 12
    33e8:	0e 94 02 1a 	call	0x3404	; 0x3404 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_CLEAR_DISPLAY_SCREEN);
    33ec:	81 e0       	ldi	r24, 0x01	; 1
    33ee:	0e 94 02 1a 	call	0x3404	; 0x3404 <H_LCD_void_sendCommand>
	}
    33f2:	6c 96       	adiw	r28, 0x1c	; 28
    33f4:	0f b6       	in	r0, 0x3f	; 63
    33f6:	f8 94       	cli
    33f8:	de bf       	out	0x3e, r29	; 62
    33fa:	0f be       	out	0x3f, r0	; 63
    33fc:	cd bf       	out	0x3d, r28	; 61
    33fe:	cf 91       	pop	r28
    3400:	df 91       	pop	r29
    3402:	08 95       	ret

00003404 <H_LCD_void_sendCommand>:



/*Send the required command to the LCD*/
void H_LCD_void_sendCommand (uint8_t copy_u8command)
{
    3404:	df 93       	push	r29
    3406:	cf 93       	push	r28
    3408:	cd b7       	in	r28, 0x3d	; 61
    340a:	de b7       	in	r29, 0x3e	; 62
    340c:	2f 97       	sbiw	r28, 0x0f	; 15
    340e:	0f b6       	in	r0, 0x3f	; 63
    3410:	f8 94       	cli
    3412:	de bf       	out	0x3e, r29	; 62
    3414:	0f be       	out	0x3f, r0	; 63
    3416:	cd bf       	out	0x3d, r28	; 61
    3418:	8f 87       	std	Y+15, r24	; 0x0f
	/*RS = 0 for sending command*/
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, LOW);
    341a:	89 e3       	ldi	r24, 0x39	; 57
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	63 e0       	ldi	r22, 0x03	; 3
    3420:	40 e0       	ldi	r20, 0x00	; 0
    3422:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    3426:	80 e0       	ldi	r24, 0x00	; 0
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	a0 e8       	ldi	r26, 0x80	; 128
    342c:	bf e3       	ldi	r27, 0x3F	; 63
    342e:	8b 87       	std	Y+11, r24	; 0x0b
    3430:	9c 87       	std	Y+12, r25	; 0x0c
    3432:	ad 87       	std	Y+13, r26	; 0x0d
    3434:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3436:	6b 85       	ldd	r22, Y+11	; 0x0b
    3438:	7c 85       	ldd	r23, Y+12	; 0x0c
    343a:	8d 85       	ldd	r24, Y+13	; 0x0d
    343c:	9e 85       	ldd	r25, Y+14	; 0x0e
    343e:	20 e0       	ldi	r18, 0x00	; 0
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	4a e7       	ldi	r20, 0x7A	; 122
    3444:	55 e4       	ldi	r21, 0x45	; 69
    3446:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    344a:	dc 01       	movw	r26, r24
    344c:	cb 01       	movw	r24, r22
    344e:	8f 83       	std	Y+7, r24	; 0x07
    3450:	98 87       	std	Y+8, r25	; 0x08
    3452:	a9 87       	std	Y+9, r26	; 0x09
    3454:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3456:	6f 81       	ldd	r22, Y+7	; 0x07
    3458:	78 85       	ldd	r23, Y+8	; 0x08
    345a:	89 85       	ldd	r24, Y+9	; 0x09
    345c:	9a 85       	ldd	r25, Y+10	; 0x0a
    345e:	20 e0       	ldi	r18, 0x00	; 0
    3460:	30 e0       	ldi	r19, 0x00	; 0
    3462:	40 e8       	ldi	r20, 0x80	; 128
    3464:	5f e3       	ldi	r21, 0x3F	; 63
    3466:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    346a:	88 23       	and	r24, r24
    346c:	2c f4       	brge	.+10     	; 0x3478 <H_LCD_void_sendCommand+0x74>
		__ticks = 1;
    346e:	81 e0       	ldi	r24, 0x01	; 1
    3470:	90 e0       	ldi	r25, 0x00	; 0
    3472:	9e 83       	std	Y+6, r25	; 0x06
    3474:	8d 83       	std	Y+5, r24	; 0x05
    3476:	3f c0       	rjmp	.+126    	; 0x34f6 <H_LCD_void_sendCommand+0xf2>
	else if (__tmp > 65535)
    3478:	6f 81       	ldd	r22, Y+7	; 0x07
    347a:	78 85       	ldd	r23, Y+8	; 0x08
    347c:	89 85       	ldd	r24, Y+9	; 0x09
    347e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3480:	20 e0       	ldi	r18, 0x00	; 0
    3482:	3f ef       	ldi	r19, 0xFF	; 255
    3484:	4f e7       	ldi	r20, 0x7F	; 127
    3486:	57 e4       	ldi	r21, 0x47	; 71
    3488:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    348c:	18 16       	cp	r1, r24
    348e:	4c f5       	brge	.+82     	; 0x34e2 <H_LCD_void_sendCommand+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3490:	6b 85       	ldd	r22, Y+11	; 0x0b
    3492:	7c 85       	ldd	r23, Y+12	; 0x0c
    3494:	8d 85       	ldd	r24, Y+13	; 0x0d
    3496:	9e 85       	ldd	r25, Y+14	; 0x0e
    3498:	20 e0       	ldi	r18, 0x00	; 0
    349a:	30 e0       	ldi	r19, 0x00	; 0
    349c:	40 e2       	ldi	r20, 0x20	; 32
    349e:	51 e4       	ldi	r21, 0x41	; 65
    34a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34a4:	dc 01       	movw	r26, r24
    34a6:	cb 01       	movw	r24, r22
    34a8:	bc 01       	movw	r22, r24
    34aa:	cd 01       	movw	r24, r26
    34ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34b0:	dc 01       	movw	r26, r24
    34b2:	cb 01       	movw	r24, r22
    34b4:	9e 83       	std	Y+6, r25	; 0x06
    34b6:	8d 83       	std	Y+5, r24	; 0x05
    34b8:	0f c0       	rjmp	.+30     	; 0x34d8 <H_LCD_void_sendCommand+0xd4>
    34ba:	80 e9       	ldi	r24, 0x90	; 144
    34bc:	91 e0       	ldi	r25, 0x01	; 1
    34be:	9c 83       	std	Y+4, r25	; 0x04
    34c0:	8b 83       	std	Y+3, r24	; 0x03
    34c2:	8b 81       	ldd	r24, Y+3	; 0x03
    34c4:	9c 81       	ldd	r25, Y+4	; 0x04
    34c6:	01 97       	sbiw	r24, 0x01	; 1
    34c8:	f1 f7       	brne	.-4      	; 0x34c6 <H_LCD_void_sendCommand+0xc2>
    34ca:	9c 83       	std	Y+4, r25	; 0x04
    34cc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34ce:	8d 81       	ldd	r24, Y+5	; 0x05
    34d0:	9e 81       	ldd	r25, Y+6	; 0x06
    34d2:	01 97       	sbiw	r24, 0x01	; 1
    34d4:	9e 83       	std	Y+6, r25	; 0x06
    34d6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34d8:	8d 81       	ldd	r24, Y+5	; 0x05
    34da:	9e 81       	ldd	r25, Y+6	; 0x06
    34dc:	00 97       	sbiw	r24, 0x00	; 0
    34de:	69 f7       	brne	.-38     	; 0x34ba <H_LCD_void_sendCommand+0xb6>
    34e0:	14 c0       	rjmp	.+40     	; 0x350a <H_LCD_void_sendCommand+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34e2:	6f 81       	ldd	r22, Y+7	; 0x07
    34e4:	78 85       	ldd	r23, Y+8	; 0x08
    34e6:	89 85       	ldd	r24, Y+9	; 0x09
    34e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    34ea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34ee:	dc 01       	movw	r26, r24
    34f0:	cb 01       	movw	r24, r22
    34f2:	9e 83       	std	Y+6, r25	; 0x06
    34f4:	8d 83       	std	Y+5, r24	; 0x05
    34f6:	8d 81       	ldd	r24, Y+5	; 0x05
    34f8:	9e 81       	ldd	r25, Y+6	; 0x06
    34fa:	9a 83       	std	Y+2, r25	; 0x02
    34fc:	89 83       	std	Y+1, r24	; 0x01
    34fe:	89 81       	ldd	r24, Y+1	; 0x01
    3500:	9a 81       	ldd	r25, Y+2	; 0x02
    3502:	01 97       	sbiw	r24, 0x01	; 1
    3504:	f1 f7       	brne	.-4      	; 0x3502 <H_LCD_void_sendCommand+0xfe>
    3506:	9a 83       	std	Y+2, r25	; 0x02
    3508:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	latchbyte(copy_u8command);
    350a:	8f 85       	ldd	r24, Y+15	; 0x0f
    350c:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <latchbyte>
}
    3510:	2f 96       	adiw	r28, 0x0f	; 15
    3512:	0f b6       	in	r0, 0x3f	; 63
    3514:	f8 94       	cli
    3516:	de bf       	out	0x3e, r29	; 62
    3518:	0f be       	out	0x3f, r0	; 63
    351a:	cd bf       	out	0x3d, r28	; 61
    351c:	cf 91       	pop	r28
    351e:	df 91       	pop	r29
    3520:	08 95       	ret

00003522 <H_LCD_void_sendData>:


/*Display the required character on the LCD*/
void H_LCD_void_sendData(uint8_t copy_u8data)
{
    3522:	df 93       	push	r29
    3524:	cf 93       	push	r28
    3526:	0f 92       	push	r0
    3528:	cd b7       	in	r28, 0x3d	; 61
    352a:	de b7       	in	r29, 0x3e	; 62
    352c:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, HIGH);
    352e:	89 e3       	ldi	r24, 0x39	; 57
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	63 e0       	ldi	r22, 0x03	; 3
    3534:	41 e0       	ldi	r20, 0x01	; 1
    3536:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
	latchbyte(copy_u8data);
    353a:	89 81       	ldd	r24, Y+1	; 0x01
    353c:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <latchbyte>

}
    3540:	0f 90       	pop	r0
    3542:	cf 91       	pop	r28
    3544:	df 91       	pop	r29
    3546:	08 95       	ret

00003548 <H_LCD_void_sendString>:

/*Display the required string on the lCD*/
void H_LCD_void_sendString(const uint8_t *pstr)
{
    3548:	df 93       	push	r29
    354a:	cf 93       	push	r28
    354c:	00 d0       	rcall	.+0      	; 0x354e <H_LCD_void_sendString+0x6>
    354e:	cd b7       	in	r28, 0x3d	; 61
    3550:	de b7       	in	r29, 0x3e	; 62
    3552:	9a 83       	std	Y+2, r25	; 0x02
    3554:	89 83       	std	Y+1, r24	; 0x01
    3556:	0a c0       	rjmp	.+20     	; 0x356c <H_LCD_void_sendString+0x24>
	while (*(pstr)!= NULL)
	{
		H_LCD_void_sendData(*pstr);
    3558:	e9 81       	ldd	r30, Y+1	; 0x01
    355a:	fa 81       	ldd	r31, Y+2	; 0x02
    355c:	80 81       	ld	r24, Z
    355e:	0e 94 91 1a 	call	0x3522	; 0x3522 <H_LCD_void_sendData>
		pstr++;
    3562:	89 81       	ldd	r24, Y+1	; 0x01
    3564:	9a 81       	ldd	r25, Y+2	; 0x02
    3566:	01 96       	adiw	r24, 0x01	; 1
    3568:	9a 83       	std	Y+2, r25	; 0x02
    356a:	89 83       	std	Y+1, r24	; 0x01
}

/*Display the required string on the lCD*/
void H_LCD_void_sendString(const uint8_t *pstr)
{
	while (*(pstr)!= NULL)
    356c:	e9 81       	ldd	r30, Y+1	; 0x01
    356e:	fa 81       	ldd	r31, Y+2	; 0x02
    3570:	80 81       	ld	r24, Z
    3572:	88 2f       	mov	r24, r24
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	00 97       	sbiw	r24, 0x00	; 0
    3578:	79 f7       	brne	.-34     	; 0x3558 <H_LCD_void_sendString+0x10>
	{
		H_LCD_void_sendData(*pstr);
		pstr++;
	}
}
    357a:	0f 90       	pop	r0
    357c:	0f 90       	pop	r0
    357e:	cf 91       	pop	r28
    3580:	df 91       	pop	r29
    3582:	08 95       	ret

00003584 <H_LCD_int_to_string>:


void H_LCD_int_to_string(int data)
{
    3584:	df 93       	push	r29
    3586:	cf 93       	push	r28
    3588:	cd b7       	in	r28, 0x3d	; 61
    358a:	de b7       	in	r29, 0x3e	; 62
    358c:	62 97       	sbiw	r28, 0x12	; 18
    358e:	0f b6       	in	r0, 0x3f	; 63
    3590:	f8 94       	cli
    3592:	de bf       	out	0x3e, r29	; 62
    3594:	0f be       	out	0x3f, r0	; 63
    3596:	cd bf       	out	0x3d, r28	; 61
    3598:	9a 8b       	std	Y+18, r25	; 0x12
    359a:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /*array to hold the ASCII result of each number*/
		itoa(data,buff,10); /*itoa c function to convert the integer data to corresponding ASCII vale, 10 --> base 10 for decimal*/
    359c:	89 89       	ldd	r24, Y+17	; 0x11
    359e:	9a 89       	ldd	r25, Y+18	; 0x12
    35a0:	9e 01       	movw	r18, r28
    35a2:	2f 5f       	subi	r18, 0xFF	; 255
    35a4:	3f 4f       	sbci	r19, 0xFF	; 255
    35a6:	b9 01       	movw	r22, r18
    35a8:	4a e0       	ldi	r20, 0x0A	; 10
    35aa:	50 e0       	ldi	r21, 0x00	; 0
    35ac:	0e 94 95 2c 	call	0x592a	; 0x592a <itoa>
		H_LCD_void_sendString(buff);
    35b0:	ce 01       	movw	r24, r28
    35b2:	01 96       	adiw	r24, 0x01	; 1
    35b4:	0e 94 a4 1a 	call	0x3548	; 0x3548 <H_LCD_void_sendString>
}
    35b8:	62 96       	adiw	r28, 0x12	; 18
    35ba:	0f b6       	in	r0, 0x3f	; 63
    35bc:	f8 94       	cli
    35be:	de bf       	out	0x3e, r29	; 62
    35c0:	0f be       	out	0x3f, r0	; 63
    35c2:	cd bf       	out	0x3d, r28	; 61
    35c4:	cf 91       	pop	r28
    35c6:	df 91       	pop	r29
    35c8:	08 95       	ret

000035ca <H_LCD_void_gotoXY>:

void H_LCD_void_gotoXY(uint8_t copy_u8Row, uint8_t copy_u8Col)
{
    35ca:	df 93       	push	r29
    35cc:	cf 93       	push	r28
    35ce:	00 d0       	rcall	.+0      	; 0x35d0 <H_LCD_void_gotoXY+0x6>
    35d0:	00 d0       	rcall	.+0      	; 0x35d2 <H_LCD_void_gotoXY+0x8>
    35d2:	00 d0       	rcall	.+0      	; 0x35d4 <H_LCD_void_gotoXY+0xa>
    35d4:	cd b7       	in	r28, 0x3d	; 61
    35d6:	de b7       	in	r29, 0x3e	; 62
    35d8:	8d 83       	std	Y+5, r24	; 0x05
    35da:	6e 83       	std	Y+6, r22	; 0x06
	uint8_t Local_U8_Arr [4] = {LCD_R0_COMMAND , LCD_R1_COMMAND , LCD_R2_COMMAND , LCD_R3_COMMAND};
    35dc:	80 e8       	ldi	r24, 0x80	; 128
    35de:	89 83       	std	Y+1, r24	; 0x01
    35e0:	80 ec       	ldi	r24, 0xC0	; 192
    35e2:	8a 83       	std	Y+2, r24	; 0x02
    35e4:	84 e9       	ldi	r24, 0x94	; 148
    35e6:	8b 83       	std	Y+3, r24	; 0x03
    35e8:	84 ed       	ldi	r24, 0xD4	; 212
    35ea:	8c 83       	std	Y+4, r24	; 0x04
	H_LCD_void_sendCommand(Local_U8_Arr[copy_u8Row] + copy_u8Col);
    35ec:	8d 81       	ldd	r24, Y+5	; 0x05
    35ee:	28 2f       	mov	r18, r24
    35f0:	30 e0       	ldi	r19, 0x00	; 0
    35f2:	ce 01       	movw	r24, r28
    35f4:	01 96       	adiw	r24, 0x01	; 1
    35f6:	fc 01       	movw	r30, r24
    35f8:	e2 0f       	add	r30, r18
    35fa:	f3 1f       	adc	r31, r19
    35fc:	90 81       	ld	r25, Z
    35fe:	8e 81       	ldd	r24, Y+6	; 0x06
    3600:	89 0f       	add	r24, r25
    3602:	0e 94 02 1a 	call	0x3404	; 0x3404 <H_LCD_void_sendCommand>
}
    3606:	26 96       	adiw	r28, 0x06	; 6
    3608:	0f b6       	in	r0, 0x3f	; 63
    360a:	f8 94       	cli
    360c:	de bf       	out	0x3e, r29	; 62
    360e:	0f be       	out	0x3f, r0	; 63
    3610:	cd bf       	out	0x3d, r28	; 61
    3612:	cf 91       	pop	r28
    3614:	df 91       	pop	r29
    3616:	08 95       	ret

00003618 <H_Lcd_Void_Clear>:


void H_Lcd_Void_Clear()
{
    3618:	df 93       	push	r29
    361a:	cf 93       	push	r28
    361c:	cd b7       	in	r28, 0x3d	; 61
    361e:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_sendCommand(LCD_CLEAR_DISPLAY_SCREEN);
    3620:	81 e0       	ldi	r24, 0x01	; 1
    3622:	0e 94 02 1a 	call	0x3404	; 0x3404 <H_LCD_void_sendCommand>
}
    3626:	cf 91       	pop	r28
    3628:	df 91       	pop	r29
    362a:	08 95       	ret

0000362c <Segment_init>:
 * The Channel Numbers refers to how many segment do you want to enable
 *
 * you can choose it from  @ref Seven_Segment Number
 */
void Segment_init(channel_numbers ch_num)
{
    362c:	0f 93       	push	r16
    362e:	1f 93       	push	r17
    3630:	df 93       	push	r29
    3632:	cf 93       	push	r28
    3634:	cd b7       	in	r28, 0x3d	; 61
    3636:	de b7       	in	r29, 0x3e	; 62
    3638:	c9 52       	subi	r28, 0x29	; 41
    363a:	d1 40       	sbci	r29, 0x01	; 1
    363c:	0f b6       	in	r0, 0x3f	; 63
    363e:	f8 94       	cli
    3640:	de bf       	out	0x3e, r29	; 62
    3642:	0f be       	out	0x3f, r0	; 63
    3644:	cd bf       	out	0x3d, r28	; 61
    3646:	fe 01       	movw	r30, r28
    3648:	e9 5d       	subi	r30, 0xD9	; 217
    364a:	fe 4f       	sbci	r31, 0xFE	; 254
    364c:	80 83       	st	Z, r24
	DIO_voidSetPinDirection(GPIOB_BASE,PIN0_ID,Pin_OUTPUT);
    364e:	86 e3       	ldi	r24, 0x36	; 54
    3650:	90 e0       	ldi	r25, 0x00	; 0
    3652:	60 e0       	ldi	r22, 0x00	; 0
    3654:	41 e0       	ldi	r20, 0x01	; 1
    3656:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GPIOB_BASE,PIN1_ID,Pin_OUTPUT);
    365a:	86 e3       	ldi	r24, 0x36	; 54
    365c:	90 e0       	ldi	r25, 0x00	; 0
    365e:	61 e0       	ldi	r22, 0x01	; 1
    3660:	41 e0       	ldi	r20, 0x01	; 1
    3662:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GPIOB_BASE,PIN2_ID,Pin_OUTPUT);
    3666:	86 e3       	ldi	r24, 0x36	; 54
    3668:	90 e0       	ldi	r25, 0x00	; 0
    366a:	62 e0       	ldi	r22, 0x02	; 2
    366c:	41 e0       	ldi	r20, 0x01	; 1
    366e:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GPIOB_BASE,PIN4_ID,Pin_OUTPUT);
    3672:	86 e3       	ldi	r24, 0x36	; 54
    3674:	90 e0       	ldi	r25, 0x00	; 0
    3676:	64 e0       	ldi	r22, 0x04	; 4
    3678:	41 e0       	ldi	r20, 0x01	; 1
    367a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>


	DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,LOW);
    367e:	86 e3       	ldi	r24, 0x36	; 54
    3680:	90 e0       	ldi	r25, 0x00	; 0
    3682:	60 e0       	ldi	r22, 0x00	; 0
    3684:	40 e0       	ldi	r20, 0x00	; 0
    3686:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,LOW);
    368a:	86 e3       	ldi	r24, 0x36	; 54
    368c:	90 e0       	ldi	r25, 0x00	; 0
    368e:	61 e0       	ldi	r22, 0x01	; 1
    3690:	40 e0       	ldi	r20, 0x00	; 0
    3692:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,LOW);
    3696:	86 e3       	ldi	r24, 0x36	; 54
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	62 e0       	ldi	r22, 0x02	; 2
    369c:	40 e0       	ldi	r20, 0x00	; 0
    369e:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,LOW);
    36a2:	86 e3       	ldi	r24, 0x36	; 54
    36a4:	90 e0       	ldi	r25, 0x00	; 0
    36a6:	64 e0       	ldi	r22, 0x04	; 4
    36a8:	40 e0       	ldi	r20, 0x00	; 0
    36aa:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>

	DIO_voidSetPinDirection(GPIOA_BASE,PIN3_ID,Pin_OUTPUT);
    36ae:	89 e3       	ldi	r24, 0x39	; 57
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	63 e0       	ldi	r22, 0x03	; 3
    36b4:	41 e0       	ldi	r20, 0x01	; 1
    36b6:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GPIOA_BASE,PIN2_ID,Pin_OUTPUT);
    36ba:	89 e3       	ldi	r24, 0x39	; 57
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	62 e0       	ldi	r22, 0x02	; 2
    36c0:	41 e0       	ldi	r20, 0x01	; 1
    36c2:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GPIOB_BASE,PIN5_ID,Pin_OUTPUT);
    36c6:	86 e3       	ldi	r24, 0x36	; 54
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	65 e0       	ldi	r22, 0x05	; 5
    36cc:	41 e0       	ldi	r20, 0x01	; 1
    36ce:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GPIOB_BASE,PIN6_ID,Pin_OUTPUT);
    36d2:	86 e3       	ldi	r24, 0x36	; 54
    36d4:	90 e0       	ldi	r25, 0x00	; 0
    36d6:	66 e0       	ldi	r22, 0x06	; 6
    36d8:	41 e0       	ldi	r20, 0x01	; 1
    36da:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
	switch(ch_num)
    36de:	fe 01       	movw	r30, r28
    36e0:	e9 5d       	subi	r30, 0xD9	; 217
    36e2:	fe 4f       	sbci	r31, 0xFE	; 254
    36e4:	80 81       	ld	r24, Z
    36e6:	28 2f       	mov	r18, r24
    36e8:	30 e0       	ldi	r19, 0x00	; 0
    36ea:	c8 5d       	subi	r28, 0xD8	; 216
    36ec:	de 4f       	sbci	r29, 0xFE	; 254
    36ee:	39 83       	std	Y+1, r19	; 0x01
    36f0:	28 83       	st	Y, r18
    36f2:	c8 52       	subi	r28, 0x28	; 40
    36f4:	d1 40       	sbci	r29, 0x01	; 1
    36f6:	c8 5d       	subi	r28, 0xD8	; 216
    36f8:	de 4f       	sbci	r29, 0xFE	; 254
    36fa:	88 81       	ld	r24, Y
    36fc:	99 81       	ldd	r25, Y+1	; 0x01
    36fe:	c8 52       	subi	r28, 0x28	; 40
    3700:	d1 40       	sbci	r29, 0x01	; 1
    3702:	83 30       	cpi	r24, 0x03	; 3
    3704:	91 05       	cpc	r25, r1
    3706:	09 f4       	brne	.+2      	; 0x370a <Segment_init+0xde>
    3708:	e3 c6       	rjmp	.+3526   	; 0x44d0 <Segment_init+0xea4>
    370a:	c8 5d       	subi	r28, 0xD8	; 216
    370c:	de 4f       	sbci	r29, 0xFE	; 254
    370e:	e8 81       	ld	r30, Y
    3710:	f9 81       	ldd	r31, Y+1	; 0x01
    3712:	c8 52       	subi	r28, 0x28	; 40
    3714:	d1 40       	sbci	r29, 0x01	; 1
    3716:	e4 30       	cpi	r30, 0x04	; 4
    3718:	f1 05       	cpc	r31, r1
    371a:	f4 f4       	brge	.+60     	; 0x3758 <Segment_init+0x12c>
    371c:	c8 5d       	subi	r28, 0xD8	; 216
    371e:	de 4f       	sbci	r29, 0xFE	; 254
    3720:	28 81       	ld	r18, Y
    3722:	39 81       	ldd	r19, Y+1	; 0x01
    3724:	c8 52       	subi	r28, 0x28	; 40
    3726:	d1 40       	sbci	r29, 0x01	; 1
    3728:	21 30       	cpi	r18, 0x01	; 1
    372a:	31 05       	cpc	r19, r1
    372c:	09 f4       	brne	.+2      	; 0x3730 <Segment_init+0x104>
    372e:	6a c2       	rjmp	.+1236   	; 0x3c04 <Segment_init+0x5d8>
    3730:	c8 5d       	subi	r28, 0xD8	; 216
    3732:	de 4f       	sbci	r29, 0xFE	; 254
    3734:	88 81       	ld	r24, Y
    3736:	99 81       	ldd	r25, Y+1	; 0x01
    3738:	c8 52       	subi	r28, 0x28	; 40
    373a:	d1 40       	sbci	r29, 0x01	; 1
    373c:	82 30       	cpi	r24, 0x02	; 2
    373e:	91 05       	cpc	r25, r1
    3740:	0c f0       	brlt	.+2      	; 0x3744 <Segment_init+0x118>
    3742:	93 c4       	rjmp	.+2342   	; 0x406a <Segment_init+0xa3e>
    3744:	c8 5d       	subi	r28, 0xD8	; 216
    3746:	de 4f       	sbci	r29, 0xFE	; 254
    3748:	e8 81       	ld	r30, Y
    374a:	f9 81       	ldd	r31, Y+1	; 0x01
    374c:	c8 52       	subi	r28, 0x28	; 40
    374e:	d1 40       	sbci	r29, 0x01	; 1
    3750:	30 97       	sbiw	r30, 0x00	; 0
    3752:	29 f1       	breq	.+74     	; 0x379e <Segment_init+0x172>
    3754:	0c 94 fd 29 	jmp	0x53fa	; 0x53fa <Segment_init+0x1dce>
    3758:	c8 5d       	subi	r28, 0xD8	; 216
    375a:	de 4f       	sbci	r29, 0xFE	; 254
    375c:	28 81       	ld	r18, Y
    375e:	39 81       	ldd	r19, Y+1	; 0x01
    3760:	c8 52       	subi	r28, 0x28	; 40
    3762:	d1 40       	sbci	r29, 0x01	; 1
    3764:	25 30       	cpi	r18, 0x05	; 5
    3766:	31 05       	cpc	r19, r1
    3768:	11 f4       	brne	.+4      	; 0x376e <Segment_init+0x142>
    376a:	0c 94 cc 26 	jmp	0x4d98	; 0x4d98 <Segment_init+0x176c>
    376e:	c8 5d       	subi	r28, 0xD8	; 216
    3770:	de 4f       	sbci	r29, 0xFE	; 254
    3772:	88 81       	ld	r24, Y
    3774:	99 81       	ldd	r25, Y+1	; 0x01
    3776:	c8 52       	subi	r28, 0x28	; 40
    3778:	d1 40       	sbci	r29, 0x01	; 1
    377a:	85 30       	cpi	r24, 0x05	; 5
    377c:	91 05       	cpc	r25, r1
    377e:	14 f4       	brge	.+4      	; 0x3784 <Segment_init+0x158>
    3780:	0c 94 9a 24 	jmp	0x4934	; 0x4934 <Segment_init+0x1308>
    3784:	c8 5d       	subi	r28, 0xD8	; 216
    3786:	de 4f       	sbci	r29, 0xFE	; 254
    3788:	e8 81       	ld	r30, Y
    378a:	f9 81       	ldd	r31, Y+1	; 0x01
    378c:	c8 52       	subi	r28, 0x28	; 40
    378e:	d1 40       	sbci	r29, 0x01	; 1
    3790:	e6 30       	cpi	r30, 0x06	; 6
    3792:	f1 05       	cpc	r31, r1
    3794:	11 f4       	brne	.+4      	; 0x379a <Segment_init+0x16e>
    3796:	0c 94 8f 28 	jmp	0x511e	; 0x511e <Segment_init+0x1af2>
    379a:	0c 94 fd 29 	jmp	0x53fa	; 0x53fa <Segment_init+0x1dce>
	{
	case FIRST_SEG:
		DIO_voidSetPinValue(GPIOA_BASE,PIN3_ID,LOW);
    379e:	89 e3       	ldi	r24, 0x39	; 57
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	63 e0       	ldi	r22, 0x03	; 3
    37a4:	40 e0       	ldi	r20, 0x00	; 0
    37a6:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    37aa:	fe 01       	movw	r30, r28
    37ac:	ed 5d       	subi	r30, 0xDD	; 221
    37ae:	fe 4f       	sbci	r31, 0xFE	; 254
    37b0:	80 e0       	ldi	r24, 0x00	; 0
    37b2:	90 e0       	ldi	r25, 0x00	; 0
    37b4:	a0 e0       	ldi	r26, 0x00	; 0
    37b6:	b0 e4       	ldi	r27, 0x40	; 64
    37b8:	80 83       	st	Z, r24
    37ba:	91 83       	std	Z+1, r25	; 0x01
    37bc:	a2 83       	std	Z+2, r26	; 0x02
    37be:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    37c0:	8e 01       	movw	r16, r28
    37c2:	01 5e       	subi	r16, 0xE1	; 225
    37c4:	1e 4f       	sbci	r17, 0xFE	; 254
    37c6:	fe 01       	movw	r30, r28
    37c8:	ed 5d       	subi	r30, 0xDD	; 221
    37ca:	fe 4f       	sbci	r31, 0xFE	; 254
    37cc:	60 81       	ld	r22, Z
    37ce:	71 81       	ldd	r23, Z+1	; 0x01
    37d0:	82 81       	ldd	r24, Z+2	; 0x02
    37d2:	93 81       	ldd	r25, Z+3	; 0x03
    37d4:	20 e0       	ldi	r18, 0x00	; 0
    37d6:	30 e0       	ldi	r19, 0x00	; 0
    37d8:	4a e7       	ldi	r20, 0x7A	; 122
    37da:	55 e4       	ldi	r21, 0x45	; 69
    37dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37e0:	dc 01       	movw	r26, r24
    37e2:	cb 01       	movw	r24, r22
    37e4:	f8 01       	movw	r30, r16
    37e6:	80 83       	st	Z, r24
    37e8:	91 83       	std	Z+1, r25	; 0x01
    37ea:	a2 83       	std	Z+2, r26	; 0x02
    37ec:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    37ee:	fe 01       	movw	r30, r28
    37f0:	e1 5e       	subi	r30, 0xE1	; 225
    37f2:	fe 4f       	sbci	r31, 0xFE	; 254
    37f4:	60 81       	ld	r22, Z
    37f6:	71 81       	ldd	r23, Z+1	; 0x01
    37f8:	82 81       	ldd	r24, Z+2	; 0x02
    37fa:	93 81       	ldd	r25, Z+3	; 0x03
    37fc:	20 e0       	ldi	r18, 0x00	; 0
    37fe:	30 e0       	ldi	r19, 0x00	; 0
    3800:	40 e8       	ldi	r20, 0x80	; 128
    3802:	5f e3       	ldi	r21, 0x3F	; 63
    3804:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3808:	88 23       	and	r24, r24
    380a:	44 f4       	brge	.+16     	; 0x381c <Segment_init+0x1f0>
		__ticks = 1;
    380c:	fe 01       	movw	r30, r28
    380e:	e3 5e       	subi	r30, 0xE3	; 227
    3810:	fe 4f       	sbci	r31, 0xFE	; 254
    3812:	81 e0       	ldi	r24, 0x01	; 1
    3814:	90 e0       	ldi	r25, 0x00	; 0
    3816:	91 83       	std	Z+1, r25	; 0x01
    3818:	80 83       	st	Z, r24
    381a:	64 c0       	rjmp	.+200    	; 0x38e4 <Segment_init+0x2b8>
	else if (__tmp > 65535)
    381c:	fe 01       	movw	r30, r28
    381e:	e1 5e       	subi	r30, 0xE1	; 225
    3820:	fe 4f       	sbci	r31, 0xFE	; 254
    3822:	60 81       	ld	r22, Z
    3824:	71 81       	ldd	r23, Z+1	; 0x01
    3826:	82 81       	ldd	r24, Z+2	; 0x02
    3828:	93 81       	ldd	r25, Z+3	; 0x03
    382a:	20 e0       	ldi	r18, 0x00	; 0
    382c:	3f ef       	ldi	r19, 0xFF	; 255
    382e:	4f e7       	ldi	r20, 0x7F	; 127
    3830:	57 e4       	ldi	r21, 0x47	; 71
    3832:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3836:	18 16       	cp	r1, r24
    3838:	0c f0       	brlt	.+2      	; 0x383c <Segment_init+0x210>
    383a:	43 c0       	rjmp	.+134    	; 0x38c2 <Segment_init+0x296>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    383c:	fe 01       	movw	r30, r28
    383e:	ed 5d       	subi	r30, 0xDD	; 221
    3840:	fe 4f       	sbci	r31, 0xFE	; 254
    3842:	60 81       	ld	r22, Z
    3844:	71 81       	ldd	r23, Z+1	; 0x01
    3846:	82 81       	ldd	r24, Z+2	; 0x02
    3848:	93 81       	ldd	r25, Z+3	; 0x03
    384a:	20 e0       	ldi	r18, 0x00	; 0
    384c:	30 e0       	ldi	r19, 0x00	; 0
    384e:	40 e2       	ldi	r20, 0x20	; 32
    3850:	51 e4       	ldi	r21, 0x41	; 65
    3852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3856:	dc 01       	movw	r26, r24
    3858:	cb 01       	movw	r24, r22
    385a:	8e 01       	movw	r16, r28
    385c:	03 5e       	subi	r16, 0xE3	; 227
    385e:	1e 4f       	sbci	r17, 0xFE	; 254
    3860:	bc 01       	movw	r22, r24
    3862:	cd 01       	movw	r24, r26
    3864:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3868:	dc 01       	movw	r26, r24
    386a:	cb 01       	movw	r24, r22
    386c:	f8 01       	movw	r30, r16
    386e:	91 83       	std	Z+1, r25	; 0x01
    3870:	80 83       	st	Z, r24
    3872:	1f c0       	rjmp	.+62     	; 0x38b2 <Segment_init+0x286>
    3874:	fe 01       	movw	r30, r28
    3876:	e5 5e       	subi	r30, 0xE5	; 229
    3878:	fe 4f       	sbci	r31, 0xFE	; 254
    387a:	80 e9       	ldi	r24, 0x90	; 144
    387c:	91 e0       	ldi	r25, 0x01	; 1
    387e:	91 83       	std	Z+1, r25	; 0x01
    3880:	80 83       	st	Z, r24
    3882:	fe 01       	movw	r30, r28
    3884:	e5 5e       	subi	r30, 0xE5	; 229
    3886:	fe 4f       	sbci	r31, 0xFE	; 254
    3888:	80 81       	ld	r24, Z
    388a:	91 81       	ldd	r25, Z+1	; 0x01
    388c:	01 97       	sbiw	r24, 0x01	; 1
    388e:	f1 f7       	brne	.-4      	; 0x388c <Segment_init+0x260>
    3890:	fe 01       	movw	r30, r28
    3892:	e5 5e       	subi	r30, 0xE5	; 229
    3894:	fe 4f       	sbci	r31, 0xFE	; 254
    3896:	91 83       	std	Z+1, r25	; 0x01
    3898:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    389a:	de 01       	movw	r26, r28
    389c:	a3 5e       	subi	r26, 0xE3	; 227
    389e:	be 4f       	sbci	r27, 0xFE	; 254
    38a0:	fe 01       	movw	r30, r28
    38a2:	e3 5e       	subi	r30, 0xE3	; 227
    38a4:	fe 4f       	sbci	r31, 0xFE	; 254
    38a6:	80 81       	ld	r24, Z
    38a8:	91 81       	ldd	r25, Z+1	; 0x01
    38aa:	01 97       	sbiw	r24, 0x01	; 1
    38ac:	11 96       	adiw	r26, 0x01	; 1
    38ae:	9c 93       	st	X, r25
    38b0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38b2:	fe 01       	movw	r30, r28
    38b4:	e3 5e       	subi	r30, 0xE3	; 227
    38b6:	fe 4f       	sbci	r31, 0xFE	; 254
    38b8:	80 81       	ld	r24, Z
    38ba:	91 81       	ldd	r25, Z+1	; 0x01
    38bc:	00 97       	sbiw	r24, 0x00	; 0
    38be:	d1 f6       	brne	.-76     	; 0x3874 <Segment_init+0x248>
    38c0:	27 c0       	rjmp	.+78     	; 0x3910 <Segment_init+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38c2:	8e 01       	movw	r16, r28
    38c4:	03 5e       	subi	r16, 0xE3	; 227
    38c6:	1e 4f       	sbci	r17, 0xFE	; 254
    38c8:	fe 01       	movw	r30, r28
    38ca:	e1 5e       	subi	r30, 0xE1	; 225
    38cc:	fe 4f       	sbci	r31, 0xFE	; 254
    38ce:	60 81       	ld	r22, Z
    38d0:	71 81       	ldd	r23, Z+1	; 0x01
    38d2:	82 81       	ldd	r24, Z+2	; 0x02
    38d4:	93 81       	ldd	r25, Z+3	; 0x03
    38d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38da:	dc 01       	movw	r26, r24
    38dc:	cb 01       	movw	r24, r22
    38de:	f8 01       	movw	r30, r16
    38e0:	91 83       	std	Z+1, r25	; 0x01
    38e2:	80 83       	st	Z, r24
    38e4:	de 01       	movw	r26, r28
    38e6:	a7 5e       	subi	r26, 0xE7	; 231
    38e8:	be 4f       	sbci	r27, 0xFE	; 254
    38ea:	fe 01       	movw	r30, r28
    38ec:	e3 5e       	subi	r30, 0xE3	; 227
    38ee:	fe 4f       	sbci	r31, 0xFE	; 254
    38f0:	80 81       	ld	r24, Z
    38f2:	91 81       	ldd	r25, Z+1	; 0x01
    38f4:	8d 93       	st	X+, r24
    38f6:	9c 93       	st	X, r25
    38f8:	fe 01       	movw	r30, r28
    38fa:	e7 5e       	subi	r30, 0xE7	; 231
    38fc:	fe 4f       	sbci	r31, 0xFE	; 254
    38fe:	80 81       	ld	r24, Z
    3900:	91 81       	ldd	r25, Z+1	; 0x01
    3902:	01 97       	sbiw	r24, 0x01	; 1
    3904:	f1 f7       	brne	.-4      	; 0x3902 <Segment_init+0x2d6>
    3906:	fe 01       	movw	r30, r28
    3908:	e7 5e       	subi	r30, 0xE7	; 231
    390a:	fe 4f       	sbci	r31, 0xFE	; 254
    390c:	91 83       	std	Z+1, r25	; 0x01
    390e:	80 83       	st	Z, r24
		_delay_ms(2);
		DIO_voidSetPinValue(GPIOA_BASE,PIN2_ID,HIGH);
    3910:	89 e3       	ldi	r24, 0x39	; 57
    3912:	90 e0       	ldi	r25, 0x00	; 0
    3914:	62 e0       	ldi	r22, 0x02	; 2
    3916:	41 e0       	ldi	r20, 0x01	; 1
    3918:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    391c:	fe 01       	movw	r30, r28
    391e:	eb 5e       	subi	r30, 0xEB	; 235
    3920:	fe 4f       	sbci	r31, 0xFE	; 254
    3922:	80 e0       	ldi	r24, 0x00	; 0
    3924:	90 e0       	ldi	r25, 0x00	; 0
    3926:	a0 e0       	ldi	r26, 0x00	; 0
    3928:	b0 e4       	ldi	r27, 0x40	; 64
    392a:	80 83       	st	Z, r24
    392c:	91 83       	std	Z+1, r25	; 0x01
    392e:	a2 83       	std	Z+2, r26	; 0x02
    3930:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3932:	8e 01       	movw	r16, r28
    3934:	0f 5e       	subi	r16, 0xEF	; 239
    3936:	1e 4f       	sbci	r17, 0xFE	; 254
    3938:	fe 01       	movw	r30, r28
    393a:	eb 5e       	subi	r30, 0xEB	; 235
    393c:	fe 4f       	sbci	r31, 0xFE	; 254
    393e:	60 81       	ld	r22, Z
    3940:	71 81       	ldd	r23, Z+1	; 0x01
    3942:	82 81       	ldd	r24, Z+2	; 0x02
    3944:	93 81       	ldd	r25, Z+3	; 0x03
    3946:	20 e0       	ldi	r18, 0x00	; 0
    3948:	30 e0       	ldi	r19, 0x00	; 0
    394a:	4a e7       	ldi	r20, 0x7A	; 122
    394c:	55 e4       	ldi	r21, 0x45	; 69
    394e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3952:	dc 01       	movw	r26, r24
    3954:	cb 01       	movw	r24, r22
    3956:	f8 01       	movw	r30, r16
    3958:	80 83       	st	Z, r24
    395a:	91 83       	std	Z+1, r25	; 0x01
    395c:	a2 83       	std	Z+2, r26	; 0x02
    395e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3960:	fe 01       	movw	r30, r28
    3962:	ef 5e       	subi	r30, 0xEF	; 239
    3964:	fe 4f       	sbci	r31, 0xFE	; 254
    3966:	60 81       	ld	r22, Z
    3968:	71 81       	ldd	r23, Z+1	; 0x01
    396a:	82 81       	ldd	r24, Z+2	; 0x02
    396c:	93 81       	ldd	r25, Z+3	; 0x03
    396e:	20 e0       	ldi	r18, 0x00	; 0
    3970:	30 e0       	ldi	r19, 0x00	; 0
    3972:	40 e8       	ldi	r20, 0x80	; 128
    3974:	5f e3       	ldi	r21, 0x3F	; 63
    3976:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    397a:	88 23       	and	r24, r24
    397c:	44 f4       	brge	.+16     	; 0x398e <Segment_init+0x362>
		__ticks = 1;
    397e:	fe 01       	movw	r30, r28
    3980:	e1 5f       	subi	r30, 0xF1	; 241
    3982:	fe 4f       	sbci	r31, 0xFE	; 254
    3984:	81 e0       	ldi	r24, 0x01	; 1
    3986:	90 e0       	ldi	r25, 0x00	; 0
    3988:	91 83       	std	Z+1, r25	; 0x01
    398a:	80 83       	st	Z, r24
    398c:	64 c0       	rjmp	.+200    	; 0x3a56 <Segment_init+0x42a>
	else if (__tmp > 65535)
    398e:	fe 01       	movw	r30, r28
    3990:	ef 5e       	subi	r30, 0xEF	; 239
    3992:	fe 4f       	sbci	r31, 0xFE	; 254
    3994:	60 81       	ld	r22, Z
    3996:	71 81       	ldd	r23, Z+1	; 0x01
    3998:	82 81       	ldd	r24, Z+2	; 0x02
    399a:	93 81       	ldd	r25, Z+3	; 0x03
    399c:	20 e0       	ldi	r18, 0x00	; 0
    399e:	3f ef       	ldi	r19, 0xFF	; 255
    39a0:	4f e7       	ldi	r20, 0x7F	; 127
    39a2:	57 e4       	ldi	r21, 0x47	; 71
    39a4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    39a8:	18 16       	cp	r1, r24
    39aa:	0c f0       	brlt	.+2      	; 0x39ae <Segment_init+0x382>
    39ac:	43 c0       	rjmp	.+134    	; 0x3a34 <Segment_init+0x408>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39ae:	fe 01       	movw	r30, r28
    39b0:	eb 5e       	subi	r30, 0xEB	; 235
    39b2:	fe 4f       	sbci	r31, 0xFE	; 254
    39b4:	60 81       	ld	r22, Z
    39b6:	71 81       	ldd	r23, Z+1	; 0x01
    39b8:	82 81       	ldd	r24, Z+2	; 0x02
    39ba:	93 81       	ldd	r25, Z+3	; 0x03
    39bc:	20 e0       	ldi	r18, 0x00	; 0
    39be:	30 e0       	ldi	r19, 0x00	; 0
    39c0:	40 e2       	ldi	r20, 0x20	; 32
    39c2:	51 e4       	ldi	r21, 0x41	; 65
    39c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39c8:	dc 01       	movw	r26, r24
    39ca:	cb 01       	movw	r24, r22
    39cc:	8e 01       	movw	r16, r28
    39ce:	01 5f       	subi	r16, 0xF1	; 241
    39d0:	1e 4f       	sbci	r17, 0xFE	; 254
    39d2:	bc 01       	movw	r22, r24
    39d4:	cd 01       	movw	r24, r26
    39d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39da:	dc 01       	movw	r26, r24
    39dc:	cb 01       	movw	r24, r22
    39de:	f8 01       	movw	r30, r16
    39e0:	91 83       	std	Z+1, r25	; 0x01
    39e2:	80 83       	st	Z, r24
    39e4:	1f c0       	rjmp	.+62     	; 0x3a24 <Segment_init+0x3f8>
    39e6:	fe 01       	movw	r30, r28
    39e8:	e3 5f       	subi	r30, 0xF3	; 243
    39ea:	fe 4f       	sbci	r31, 0xFE	; 254
    39ec:	80 e9       	ldi	r24, 0x90	; 144
    39ee:	91 e0       	ldi	r25, 0x01	; 1
    39f0:	91 83       	std	Z+1, r25	; 0x01
    39f2:	80 83       	st	Z, r24
    39f4:	fe 01       	movw	r30, r28
    39f6:	e3 5f       	subi	r30, 0xF3	; 243
    39f8:	fe 4f       	sbci	r31, 0xFE	; 254
    39fa:	80 81       	ld	r24, Z
    39fc:	91 81       	ldd	r25, Z+1	; 0x01
    39fe:	01 97       	sbiw	r24, 0x01	; 1
    3a00:	f1 f7       	brne	.-4      	; 0x39fe <Segment_init+0x3d2>
    3a02:	fe 01       	movw	r30, r28
    3a04:	e3 5f       	subi	r30, 0xF3	; 243
    3a06:	fe 4f       	sbci	r31, 0xFE	; 254
    3a08:	91 83       	std	Z+1, r25	; 0x01
    3a0a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a0c:	de 01       	movw	r26, r28
    3a0e:	a1 5f       	subi	r26, 0xF1	; 241
    3a10:	be 4f       	sbci	r27, 0xFE	; 254
    3a12:	fe 01       	movw	r30, r28
    3a14:	e1 5f       	subi	r30, 0xF1	; 241
    3a16:	fe 4f       	sbci	r31, 0xFE	; 254
    3a18:	80 81       	ld	r24, Z
    3a1a:	91 81       	ldd	r25, Z+1	; 0x01
    3a1c:	01 97       	sbiw	r24, 0x01	; 1
    3a1e:	11 96       	adiw	r26, 0x01	; 1
    3a20:	9c 93       	st	X, r25
    3a22:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a24:	fe 01       	movw	r30, r28
    3a26:	e1 5f       	subi	r30, 0xF1	; 241
    3a28:	fe 4f       	sbci	r31, 0xFE	; 254
    3a2a:	80 81       	ld	r24, Z
    3a2c:	91 81       	ldd	r25, Z+1	; 0x01
    3a2e:	00 97       	sbiw	r24, 0x00	; 0
    3a30:	d1 f6       	brne	.-76     	; 0x39e6 <Segment_init+0x3ba>
    3a32:	27 c0       	rjmp	.+78     	; 0x3a82 <Segment_init+0x456>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a34:	8e 01       	movw	r16, r28
    3a36:	01 5f       	subi	r16, 0xF1	; 241
    3a38:	1e 4f       	sbci	r17, 0xFE	; 254
    3a3a:	fe 01       	movw	r30, r28
    3a3c:	ef 5e       	subi	r30, 0xEF	; 239
    3a3e:	fe 4f       	sbci	r31, 0xFE	; 254
    3a40:	60 81       	ld	r22, Z
    3a42:	71 81       	ldd	r23, Z+1	; 0x01
    3a44:	82 81       	ldd	r24, Z+2	; 0x02
    3a46:	93 81       	ldd	r25, Z+3	; 0x03
    3a48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	cb 01       	movw	r24, r22
    3a50:	f8 01       	movw	r30, r16
    3a52:	91 83       	std	Z+1, r25	; 0x01
    3a54:	80 83       	st	Z, r24
    3a56:	de 01       	movw	r26, r28
    3a58:	a5 5f       	subi	r26, 0xF5	; 245
    3a5a:	be 4f       	sbci	r27, 0xFE	; 254
    3a5c:	fe 01       	movw	r30, r28
    3a5e:	e1 5f       	subi	r30, 0xF1	; 241
    3a60:	fe 4f       	sbci	r31, 0xFE	; 254
    3a62:	80 81       	ld	r24, Z
    3a64:	91 81       	ldd	r25, Z+1	; 0x01
    3a66:	8d 93       	st	X+, r24
    3a68:	9c 93       	st	X, r25
    3a6a:	fe 01       	movw	r30, r28
    3a6c:	e5 5f       	subi	r30, 0xF5	; 245
    3a6e:	fe 4f       	sbci	r31, 0xFE	; 254
    3a70:	80 81       	ld	r24, Z
    3a72:	91 81       	ldd	r25, Z+1	; 0x01
    3a74:	01 97       	sbiw	r24, 0x01	; 1
    3a76:	f1 f7       	brne	.-4      	; 0x3a74 <Segment_init+0x448>
    3a78:	fe 01       	movw	r30, r28
    3a7a:	e5 5f       	subi	r30, 0xF5	; 245
    3a7c:	fe 4f       	sbci	r31, 0xFE	; 254
    3a7e:	91 83       	std	Z+1, r25	; 0x01
    3a80:	80 83       	st	Z, r24
		_delay_ms(2);
		DIO_voidSetPinValue(GPIOB_BASE,PIN5_ID,HIGH);
    3a82:	86 e3       	ldi	r24, 0x36	; 54
    3a84:	90 e0       	ldi	r25, 0x00	; 0
    3a86:	65 e0       	ldi	r22, 0x05	; 5
    3a88:	41 e0       	ldi	r20, 0x01	; 1
    3a8a:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    3a8e:	fe 01       	movw	r30, r28
    3a90:	e9 5f       	subi	r30, 0xF9	; 249
    3a92:	fe 4f       	sbci	r31, 0xFE	; 254
    3a94:	80 e0       	ldi	r24, 0x00	; 0
    3a96:	90 e0       	ldi	r25, 0x00	; 0
    3a98:	a0 e0       	ldi	r26, 0x00	; 0
    3a9a:	b0 e4       	ldi	r27, 0x40	; 64
    3a9c:	80 83       	st	Z, r24
    3a9e:	91 83       	std	Z+1, r25	; 0x01
    3aa0:	a2 83       	std	Z+2, r26	; 0x02
    3aa2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3aa4:	8e 01       	movw	r16, r28
    3aa6:	0d 5f       	subi	r16, 0xFD	; 253
    3aa8:	1e 4f       	sbci	r17, 0xFE	; 254
    3aaa:	fe 01       	movw	r30, r28
    3aac:	e9 5f       	subi	r30, 0xF9	; 249
    3aae:	fe 4f       	sbci	r31, 0xFE	; 254
    3ab0:	60 81       	ld	r22, Z
    3ab2:	71 81       	ldd	r23, Z+1	; 0x01
    3ab4:	82 81       	ldd	r24, Z+2	; 0x02
    3ab6:	93 81       	ldd	r25, Z+3	; 0x03
    3ab8:	20 e0       	ldi	r18, 0x00	; 0
    3aba:	30 e0       	ldi	r19, 0x00	; 0
    3abc:	4a e7       	ldi	r20, 0x7A	; 122
    3abe:	55 e4       	ldi	r21, 0x45	; 69
    3ac0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ac4:	dc 01       	movw	r26, r24
    3ac6:	cb 01       	movw	r24, r22
    3ac8:	f8 01       	movw	r30, r16
    3aca:	80 83       	st	Z, r24
    3acc:	91 83       	std	Z+1, r25	; 0x01
    3ace:	a2 83       	std	Z+2, r26	; 0x02
    3ad0:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ad2:	fe 01       	movw	r30, r28
    3ad4:	ed 5f       	subi	r30, 0xFD	; 253
    3ad6:	fe 4f       	sbci	r31, 0xFE	; 254
    3ad8:	60 81       	ld	r22, Z
    3ada:	71 81       	ldd	r23, Z+1	; 0x01
    3adc:	82 81       	ldd	r24, Z+2	; 0x02
    3ade:	93 81       	ldd	r25, Z+3	; 0x03
    3ae0:	20 e0       	ldi	r18, 0x00	; 0
    3ae2:	30 e0       	ldi	r19, 0x00	; 0
    3ae4:	40 e8       	ldi	r20, 0x80	; 128
    3ae6:	5f e3       	ldi	r21, 0x3F	; 63
    3ae8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3aec:	88 23       	and	r24, r24
    3aee:	44 f4       	brge	.+16     	; 0x3b00 <Segment_init+0x4d4>
		__ticks = 1;
    3af0:	fe 01       	movw	r30, r28
    3af2:	ef 5f       	subi	r30, 0xFF	; 255
    3af4:	fe 4f       	sbci	r31, 0xFE	; 254
    3af6:	81 e0       	ldi	r24, 0x01	; 1
    3af8:	90 e0       	ldi	r25, 0x00	; 0
    3afa:	91 83       	std	Z+1, r25	; 0x01
    3afc:	80 83       	st	Z, r24
    3afe:	64 c0       	rjmp	.+200    	; 0x3bc8 <Segment_init+0x59c>
	else if (__tmp > 65535)
    3b00:	fe 01       	movw	r30, r28
    3b02:	ed 5f       	subi	r30, 0xFD	; 253
    3b04:	fe 4f       	sbci	r31, 0xFE	; 254
    3b06:	60 81       	ld	r22, Z
    3b08:	71 81       	ldd	r23, Z+1	; 0x01
    3b0a:	82 81       	ldd	r24, Z+2	; 0x02
    3b0c:	93 81       	ldd	r25, Z+3	; 0x03
    3b0e:	20 e0       	ldi	r18, 0x00	; 0
    3b10:	3f ef       	ldi	r19, 0xFF	; 255
    3b12:	4f e7       	ldi	r20, 0x7F	; 127
    3b14:	57 e4       	ldi	r21, 0x47	; 71
    3b16:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b1a:	18 16       	cp	r1, r24
    3b1c:	0c f0       	brlt	.+2      	; 0x3b20 <Segment_init+0x4f4>
    3b1e:	43 c0       	rjmp	.+134    	; 0x3ba6 <Segment_init+0x57a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b20:	fe 01       	movw	r30, r28
    3b22:	e9 5f       	subi	r30, 0xF9	; 249
    3b24:	fe 4f       	sbci	r31, 0xFE	; 254
    3b26:	60 81       	ld	r22, Z
    3b28:	71 81       	ldd	r23, Z+1	; 0x01
    3b2a:	82 81       	ldd	r24, Z+2	; 0x02
    3b2c:	93 81       	ldd	r25, Z+3	; 0x03
    3b2e:	20 e0       	ldi	r18, 0x00	; 0
    3b30:	30 e0       	ldi	r19, 0x00	; 0
    3b32:	40 e2       	ldi	r20, 0x20	; 32
    3b34:	51 e4       	ldi	r21, 0x41	; 65
    3b36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b3a:	dc 01       	movw	r26, r24
    3b3c:	cb 01       	movw	r24, r22
    3b3e:	8e 01       	movw	r16, r28
    3b40:	0f 5f       	subi	r16, 0xFF	; 255
    3b42:	1e 4f       	sbci	r17, 0xFE	; 254
    3b44:	bc 01       	movw	r22, r24
    3b46:	cd 01       	movw	r24, r26
    3b48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3b4c:	dc 01       	movw	r26, r24
    3b4e:	cb 01       	movw	r24, r22
    3b50:	f8 01       	movw	r30, r16
    3b52:	91 83       	std	Z+1, r25	; 0x01
    3b54:	80 83       	st	Z, r24
    3b56:	1f c0       	rjmp	.+62     	; 0x3b96 <Segment_init+0x56a>
    3b58:	fe 01       	movw	r30, r28
    3b5a:	e1 50       	subi	r30, 0x01	; 1
    3b5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3b5e:	80 e9       	ldi	r24, 0x90	; 144
    3b60:	91 e0       	ldi	r25, 0x01	; 1
    3b62:	91 83       	std	Z+1, r25	; 0x01
    3b64:	80 83       	st	Z, r24
    3b66:	fe 01       	movw	r30, r28
    3b68:	e1 50       	subi	r30, 0x01	; 1
    3b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3b6c:	80 81       	ld	r24, Z
    3b6e:	91 81       	ldd	r25, Z+1	; 0x01
    3b70:	01 97       	sbiw	r24, 0x01	; 1
    3b72:	f1 f7       	brne	.-4      	; 0x3b70 <Segment_init+0x544>
    3b74:	fe 01       	movw	r30, r28
    3b76:	e1 50       	subi	r30, 0x01	; 1
    3b78:	ff 4f       	sbci	r31, 0xFF	; 255
    3b7a:	91 83       	std	Z+1, r25	; 0x01
    3b7c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b7e:	de 01       	movw	r26, r28
    3b80:	af 5f       	subi	r26, 0xFF	; 255
    3b82:	be 4f       	sbci	r27, 0xFE	; 254
    3b84:	fe 01       	movw	r30, r28
    3b86:	ef 5f       	subi	r30, 0xFF	; 255
    3b88:	fe 4f       	sbci	r31, 0xFE	; 254
    3b8a:	80 81       	ld	r24, Z
    3b8c:	91 81       	ldd	r25, Z+1	; 0x01
    3b8e:	01 97       	sbiw	r24, 0x01	; 1
    3b90:	11 96       	adiw	r26, 0x01	; 1
    3b92:	9c 93       	st	X, r25
    3b94:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b96:	fe 01       	movw	r30, r28
    3b98:	ef 5f       	subi	r30, 0xFF	; 255
    3b9a:	fe 4f       	sbci	r31, 0xFE	; 254
    3b9c:	80 81       	ld	r24, Z
    3b9e:	91 81       	ldd	r25, Z+1	; 0x01
    3ba0:	00 97       	sbiw	r24, 0x00	; 0
    3ba2:	d1 f6       	brne	.-76     	; 0x3b58 <Segment_init+0x52c>
    3ba4:	27 c0       	rjmp	.+78     	; 0x3bf4 <Segment_init+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ba6:	8e 01       	movw	r16, r28
    3ba8:	0f 5f       	subi	r16, 0xFF	; 255
    3baa:	1e 4f       	sbci	r17, 0xFE	; 254
    3bac:	fe 01       	movw	r30, r28
    3bae:	ed 5f       	subi	r30, 0xFD	; 253
    3bb0:	fe 4f       	sbci	r31, 0xFE	; 254
    3bb2:	60 81       	ld	r22, Z
    3bb4:	71 81       	ldd	r23, Z+1	; 0x01
    3bb6:	82 81       	ldd	r24, Z+2	; 0x02
    3bb8:	93 81       	ldd	r25, Z+3	; 0x03
    3bba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bbe:	dc 01       	movw	r26, r24
    3bc0:	cb 01       	movw	r24, r22
    3bc2:	f8 01       	movw	r30, r16
    3bc4:	91 83       	std	Z+1, r25	; 0x01
    3bc6:	80 83       	st	Z, r24
    3bc8:	de 01       	movw	r26, r28
    3bca:	a3 50       	subi	r26, 0x03	; 3
    3bcc:	bf 4f       	sbci	r27, 0xFF	; 255
    3bce:	fe 01       	movw	r30, r28
    3bd0:	ef 5f       	subi	r30, 0xFF	; 255
    3bd2:	fe 4f       	sbci	r31, 0xFE	; 254
    3bd4:	80 81       	ld	r24, Z
    3bd6:	91 81       	ldd	r25, Z+1	; 0x01
    3bd8:	8d 93       	st	X+, r24
    3bda:	9c 93       	st	X, r25
    3bdc:	fe 01       	movw	r30, r28
    3bde:	e3 50       	subi	r30, 0x03	; 3
    3be0:	ff 4f       	sbci	r31, 0xFF	; 255
    3be2:	80 81       	ld	r24, Z
    3be4:	91 81       	ldd	r25, Z+1	; 0x01
    3be6:	01 97       	sbiw	r24, 0x01	; 1
    3be8:	f1 f7       	brne	.-4      	; 0x3be6 <Segment_init+0x5ba>
    3bea:	fe 01       	movw	r30, r28
    3bec:	e3 50       	subi	r30, 0x03	; 3
    3bee:	ff 4f       	sbci	r31, 0xFF	; 255
    3bf0:	91 83       	std	Z+1, r25	; 0x01
    3bf2:	80 83       	st	Z, r24
		_delay_ms(2);
		DIO_voidSetPinValue(GPIOB_BASE,PIN6_ID,HIGH);
    3bf4:	86 e3       	ldi	r24, 0x36	; 54
    3bf6:	90 e0       	ldi	r25, 0x00	; 0
    3bf8:	66 e0       	ldi	r22, 0x06	; 6
    3bfa:	41 e0       	ldi	r20, 0x01	; 1
    3bfc:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    3c00:	0c 94 fd 29 	jmp	0x53fa	; 0x53fa <Segment_init+0x1dce>
		break;
	case TWO_SEGs:
			DIO_voidSetPinValue(GPIOA_BASE,PIN3_ID,LOW);
    3c04:	89 e3       	ldi	r24, 0x39	; 57
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	63 e0       	ldi	r22, 0x03	; 3
    3c0a:	40 e0       	ldi	r20, 0x00	; 0
    3c0c:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    3c10:	fe 01       	movw	r30, r28
    3c12:	e7 50       	subi	r30, 0x07	; 7
    3c14:	ff 4f       	sbci	r31, 0xFF	; 255
    3c16:	80 e0       	ldi	r24, 0x00	; 0
    3c18:	90 e0       	ldi	r25, 0x00	; 0
    3c1a:	a0 e0       	ldi	r26, 0x00	; 0
    3c1c:	b0 e4       	ldi	r27, 0x40	; 64
    3c1e:	80 83       	st	Z, r24
    3c20:	91 83       	std	Z+1, r25	; 0x01
    3c22:	a2 83       	std	Z+2, r26	; 0x02
    3c24:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c26:	8e 01       	movw	r16, r28
    3c28:	0b 50       	subi	r16, 0x0B	; 11
    3c2a:	1f 4f       	sbci	r17, 0xFF	; 255
    3c2c:	fe 01       	movw	r30, r28
    3c2e:	e7 50       	subi	r30, 0x07	; 7
    3c30:	ff 4f       	sbci	r31, 0xFF	; 255
    3c32:	60 81       	ld	r22, Z
    3c34:	71 81       	ldd	r23, Z+1	; 0x01
    3c36:	82 81       	ldd	r24, Z+2	; 0x02
    3c38:	93 81       	ldd	r25, Z+3	; 0x03
    3c3a:	20 e0       	ldi	r18, 0x00	; 0
    3c3c:	30 e0       	ldi	r19, 0x00	; 0
    3c3e:	4a e7       	ldi	r20, 0x7A	; 122
    3c40:	55 e4       	ldi	r21, 0x45	; 69
    3c42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c46:	dc 01       	movw	r26, r24
    3c48:	cb 01       	movw	r24, r22
    3c4a:	f8 01       	movw	r30, r16
    3c4c:	80 83       	st	Z, r24
    3c4e:	91 83       	std	Z+1, r25	; 0x01
    3c50:	a2 83       	std	Z+2, r26	; 0x02
    3c52:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c54:	fe 01       	movw	r30, r28
    3c56:	eb 50       	subi	r30, 0x0B	; 11
    3c58:	ff 4f       	sbci	r31, 0xFF	; 255
    3c5a:	60 81       	ld	r22, Z
    3c5c:	71 81       	ldd	r23, Z+1	; 0x01
    3c5e:	82 81       	ldd	r24, Z+2	; 0x02
    3c60:	93 81       	ldd	r25, Z+3	; 0x03
    3c62:	20 e0       	ldi	r18, 0x00	; 0
    3c64:	30 e0       	ldi	r19, 0x00	; 0
    3c66:	40 e8       	ldi	r20, 0x80	; 128
    3c68:	5f e3       	ldi	r21, 0x3F	; 63
    3c6a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3c6e:	88 23       	and	r24, r24
    3c70:	44 f4       	brge	.+16     	; 0x3c82 <Segment_init+0x656>
		__ticks = 1;
    3c72:	fe 01       	movw	r30, r28
    3c74:	ed 50       	subi	r30, 0x0D	; 13
    3c76:	ff 4f       	sbci	r31, 0xFF	; 255
    3c78:	81 e0       	ldi	r24, 0x01	; 1
    3c7a:	90 e0       	ldi	r25, 0x00	; 0
    3c7c:	91 83       	std	Z+1, r25	; 0x01
    3c7e:	80 83       	st	Z, r24
    3c80:	64 c0       	rjmp	.+200    	; 0x3d4a <Segment_init+0x71e>
	else if (__tmp > 65535)
    3c82:	fe 01       	movw	r30, r28
    3c84:	eb 50       	subi	r30, 0x0B	; 11
    3c86:	ff 4f       	sbci	r31, 0xFF	; 255
    3c88:	60 81       	ld	r22, Z
    3c8a:	71 81       	ldd	r23, Z+1	; 0x01
    3c8c:	82 81       	ldd	r24, Z+2	; 0x02
    3c8e:	93 81       	ldd	r25, Z+3	; 0x03
    3c90:	20 e0       	ldi	r18, 0x00	; 0
    3c92:	3f ef       	ldi	r19, 0xFF	; 255
    3c94:	4f e7       	ldi	r20, 0x7F	; 127
    3c96:	57 e4       	ldi	r21, 0x47	; 71
    3c98:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3c9c:	18 16       	cp	r1, r24
    3c9e:	0c f0       	brlt	.+2      	; 0x3ca2 <Segment_init+0x676>
    3ca0:	43 c0       	rjmp	.+134    	; 0x3d28 <Segment_init+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ca2:	fe 01       	movw	r30, r28
    3ca4:	e7 50       	subi	r30, 0x07	; 7
    3ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ca8:	60 81       	ld	r22, Z
    3caa:	71 81       	ldd	r23, Z+1	; 0x01
    3cac:	82 81       	ldd	r24, Z+2	; 0x02
    3cae:	93 81       	ldd	r25, Z+3	; 0x03
    3cb0:	20 e0       	ldi	r18, 0x00	; 0
    3cb2:	30 e0       	ldi	r19, 0x00	; 0
    3cb4:	40 e2       	ldi	r20, 0x20	; 32
    3cb6:	51 e4       	ldi	r21, 0x41	; 65
    3cb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cbc:	dc 01       	movw	r26, r24
    3cbe:	cb 01       	movw	r24, r22
    3cc0:	8e 01       	movw	r16, r28
    3cc2:	0d 50       	subi	r16, 0x0D	; 13
    3cc4:	1f 4f       	sbci	r17, 0xFF	; 255
    3cc6:	bc 01       	movw	r22, r24
    3cc8:	cd 01       	movw	r24, r26
    3cca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cce:	dc 01       	movw	r26, r24
    3cd0:	cb 01       	movw	r24, r22
    3cd2:	f8 01       	movw	r30, r16
    3cd4:	91 83       	std	Z+1, r25	; 0x01
    3cd6:	80 83       	st	Z, r24
    3cd8:	1f c0       	rjmp	.+62     	; 0x3d18 <Segment_init+0x6ec>
    3cda:	fe 01       	movw	r30, r28
    3cdc:	ef 50       	subi	r30, 0x0F	; 15
    3cde:	ff 4f       	sbci	r31, 0xFF	; 255
    3ce0:	80 e9       	ldi	r24, 0x90	; 144
    3ce2:	91 e0       	ldi	r25, 0x01	; 1
    3ce4:	91 83       	std	Z+1, r25	; 0x01
    3ce6:	80 83       	st	Z, r24
    3ce8:	fe 01       	movw	r30, r28
    3cea:	ef 50       	subi	r30, 0x0F	; 15
    3cec:	ff 4f       	sbci	r31, 0xFF	; 255
    3cee:	80 81       	ld	r24, Z
    3cf0:	91 81       	ldd	r25, Z+1	; 0x01
    3cf2:	01 97       	sbiw	r24, 0x01	; 1
    3cf4:	f1 f7       	brne	.-4      	; 0x3cf2 <Segment_init+0x6c6>
    3cf6:	fe 01       	movw	r30, r28
    3cf8:	ef 50       	subi	r30, 0x0F	; 15
    3cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    3cfc:	91 83       	std	Z+1, r25	; 0x01
    3cfe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d00:	de 01       	movw	r26, r28
    3d02:	ad 50       	subi	r26, 0x0D	; 13
    3d04:	bf 4f       	sbci	r27, 0xFF	; 255
    3d06:	fe 01       	movw	r30, r28
    3d08:	ed 50       	subi	r30, 0x0D	; 13
    3d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    3d0c:	80 81       	ld	r24, Z
    3d0e:	91 81       	ldd	r25, Z+1	; 0x01
    3d10:	01 97       	sbiw	r24, 0x01	; 1
    3d12:	11 96       	adiw	r26, 0x01	; 1
    3d14:	9c 93       	st	X, r25
    3d16:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d18:	fe 01       	movw	r30, r28
    3d1a:	ed 50       	subi	r30, 0x0D	; 13
    3d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    3d1e:	80 81       	ld	r24, Z
    3d20:	91 81       	ldd	r25, Z+1	; 0x01
    3d22:	00 97       	sbiw	r24, 0x00	; 0
    3d24:	d1 f6       	brne	.-76     	; 0x3cda <Segment_init+0x6ae>
    3d26:	27 c0       	rjmp	.+78     	; 0x3d76 <Segment_init+0x74a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d28:	8e 01       	movw	r16, r28
    3d2a:	0d 50       	subi	r16, 0x0D	; 13
    3d2c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d2e:	fe 01       	movw	r30, r28
    3d30:	eb 50       	subi	r30, 0x0B	; 11
    3d32:	ff 4f       	sbci	r31, 0xFF	; 255
    3d34:	60 81       	ld	r22, Z
    3d36:	71 81       	ldd	r23, Z+1	; 0x01
    3d38:	82 81       	ldd	r24, Z+2	; 0x02
    3d3a:	93 81       	ldd	r25, Z+3	; 0x03
    3d3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d40:	dc 01       	movw	r26, r24
    3d42:	cb 01       	movw	r24, r22
    3d44:	f8 01       	movw	r30, r16
    3d46:	91 83       	std	Z+1, r25	; 0x01
    3d48:	80 83       	st	Z, r24
    3d4a:	de 01       	movw	r26, r28
    3d4c:	a1 51       	subi	r26, 0x11	; 17
    3d4e:	bf 4f       	sbci	r27, 0xFF	; 255
    3d50:	fe 01       	movw	r30, r28
    3d52:	ed 50       	subi	r30, 0x0D	; 13
    3d54:	ff 4f       	sbci	r31, 0xFF	; 255
    3d56:	80 81       	ld	r24, Z
    3d58:	91 81       	ldd	r25, Z+1	; 0x01
    3d5a:	8d 93       	st	X+, r24
    3d5c:	9c 93       	st	X, r25
    3d5e:	fe 01       	movw	r30, r28
    3d60:	e1 51       	subi	r30, 0x11	; 17
    3d62:	ff 4f       	sbci	r31, 0xFF	; 255
    3d64:	80 81       	ld	r24, Z
    3d66:	91 81       	ldd	r25, Z+1	; 0x01
    3d68:	01 97       	sbiw	r24, 0x01	; 1
    3d6a:	f1 f7       	brne	.-4      	; 0x3d68 <Segment_init+0x73c>
    3d6c:	fe 01       	movw	r30, r28
    3d6e:	e1 51       	subi	r30, 0x11	; 17
    3d70:	ff 4f       	sbci	r31, 0xFF	; 255
    3d72:	91 83       	std	Z+1, r25	; 0x01
    3d74:	80 83       	st	Z, r24
			_delay_ms(2);
			DIO_voidSetPinValue(GPIOA_BASE,PIN2_ID,LOW);
    3d76:	89 e3       	ldi	r24, 0x39	; 57
    3d78:	90 e0       	ldi	r25, 0x00	; 0
    3d7a:	62 e0       	ldi	r22, 0x02	; 2
    3d7c:	40 e0       	ldi	r20, 0x00	; 0
    3d7e:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    3d82:	fe 01       	movw	r30, r28
    3d84:	e5 51       	subi	r30, 0x15	; 21
    3d86:	ff 4f       	sbci	r31, 0xFF	; 255
    3d88:	80 e0       	ldi	r24, 0x00	; 0
    3d8a:	90 e0       	ldi	r25, 0x00	; 0
    3d8c:	a0 e0       	ldi	r26, 0x00	; 0
    3d8e:	b0 e4       	ldi	r27, 0x40	; 64
    3d90:	80 83       	st	Z, r24
    3d92:	91 83       	std	Z+1, r25	; 0x01
    3d94:	a2 83       	std	Z+2, r26	; 0x02
    3d96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d98:	8e 01       	movw	r16, r28
    3d9a:	09 51       	subi	r16, 0x19	; 25
    3d9c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d9e:	fe 01       	movw	r30, r28
    3da0:	e5 51       	subi	r30, 0x15	; 21
    3da2:	ff 4f       	sbci	r31, 0xFF	; 255
    3da4:	60 81       	ld	r22, Z
    3da6:	71 81       	ldd	r23, Z+1	; 0x01
    3da8:	82 81       	ldd	r24, Z+2	; 0x02
    3daa:	93 81       	ldd	r25, Z+3	; 0x03
    3dac:	20 e0       	ldi	r18, 0x00	; 0
    3dae:	30 e0       	ldi	r19, 0x00	; 0
    3db0:	4a e7       	ldi	r20, 0x7A	; 122
    3db2:	55 e4       	ldi	r21, 0x45	; 69
    3db4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3db8:	dc 01       	movw	r26, r24
    3dba:	cb 01       	movw	r24, r22
    3dbc:	f8 01       	movw	r30, r16
    3dbe:	80 83       	st	Z, r24
    3dc0:	91 83       	std	Z+1, r25	; 0x01
    3dc2:	a2 83       	std	Z+2, r26	; 0x02
    3dc4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3dc6:	fe 01       	movw	r30, r28
    3dc8:	e9 51       	subi	r30, 0x19	; 25
    3dca:	ff 4f       	sbci	r31, 0xFF	; 255
    3dcc:	60 81       	ld	r22, Z
    3dce:	71 81       	ldd	r23, Z+1	; 0x01
    3dd0:	82 81       	ldd	r24, Z+2	; 0x02
    3dd2:	93 81       	ldd	r25, Z+3	; 0x03
    3dd4:	20 e0       	ldi	r18, 0x00	; 0
    3dd6:	30 e0       	ldi	r19, 0x00	; 0
    3dd8:	40 e8       	ldi	r20, 0x80	; 128
    3dda:	5f e3       	ldi	r21, 0x3F	; 63
    3ddc:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3de0:	88 23       	and	r24, r24
    3de2:	44 f4       	brge	.+16     	; 0x3df4 <Segment_init+0x7c8>
		__ticks = 1;
    3de4:	fe 01       	movw	r30, r28
    3de6:	eb 51       	subi	r30, 0x1B	; 27
    3de8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dea:	81 e0       	ldi	r24, 0x01	; 1
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	91 83       	std	Z+1, r25	; 0x01
    3df0:	80 83       	st	Z, r24
    3df2:	64 c0       	rjmp	.+200    	; 0x3ebc <Segment_init+0x890>
	else if (__tmp > 65535)
    3df4:	fe 01       	movw	r30, r28
    3df6:	e9 51       	subi	r30, 0x19	; 25
    3df8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dfa:	60 81       	ld	r22, Z
    3dfc:	71 81       	ldd	r23, Z+1	; 0x01
    3dfe:	82 81       	ldd	r24, Z+2	; 0x02
    3e00:	93 81       	ldd	r25, Z+3	; 0x03
    3e02:	20 e0       	ldi	r18, 0x00	; 0
    3e04:	3f ef       	ldi	r19, 0xFF	; 255
    3e06:	4f e7       	ldi	r20, 0x7F	; 127
    3e08:	57 e4       	ldi	r21, 0x47	; 71
    3e0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3e0e:	18 16       	cp	r1, r24
    3e10:	0c f0       	brlt	.+2      	; 0x3e14 <Segment_init+0x7e8>
    3e12:	43 c0       	rjmp	.+134    	; 0x3e9a <Segment_init+0x86e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3e14:	fe 01       	movw	r30, r28
    3e16:	e5 51       	subi	r30, 0x15	; 21
    3e18:	ff 4f       	sbci	r31, 0xFF	; 255
    3e1a:	60 81       	ld	r22, Z
    3e1c:	71 81       	ldd	r23, Z+1	; 0x01
    3e1e:	82 81       	ldd	r24, Z+2	; 0x02
    3e20:	93 81       	ldd	r25, Z+3	; 0x03
    3e22:	20 e0       	ldi	r18, 0x00	; 0
    3e24:	30 e0       	ldi	r19, 0x00	; 0
    3e26:	40 e2       	ldi	r20, 0x20	; 32
    3e28:	51 e4       	ldi	r21, 0x41	; 65
    3e2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e2e:	dc 01       	movw	r26, r24
    3e30:	cb 01       	movw	r24, r22
    3e32:	8e 01       	movw	r16, r28
    3e34:	0b 51       	subi	r16, 0x1B	; 27
    3e36:	1f 4f       	sbci	r17, 0xFF	; 255
    3e38:	bc 01       	movw	r22, r24
    3e3a:	cd 01       	movw	r24, r26
    3e3c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e40:	dc 01       	movw	r26, r24
    3e42:	cb 01       	movw	r24, r22
    3e44:	f8 01       	movw	r30, r16
    3e46:	91 83       	std	Z+1, r25	; 0x01
    3e48:	80 83       	st	Z, r24
    3e4a:	1f c0       	rjmp	.+62     	; 0x3e8a <Segment_init+0x85e>
    3e4c:	fe 01       	movw	r30, r28
    3e4e:	ed 51       	subi	r30, 0x1D	; 29
    3e50:	ff 4f       	sbci	r31, 0xFF	; 255
    3e52:	80 e9       	ldi	r24, 0x90	; 144
    3e54:	91 e0       	ldi	r25, 0x01	; 1
    3e56:	91 83       	std	Z+1, r25	; 0x01
    3e58:	80 83       	st	Z, r24
    3e5a:	fe 01       	movw	r30, r28
    3e5c:	ed 51       	subi	r30, 0x1D	; 29
    3e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e60:	80 81       	ld	r24, Z
    3e62:	91 81       	ldd	r25, Z+1	; 0x01
    3e64:	01 97       	sbiw	r24, 0x01	; 1
    3e66:	f1 f7       	brne	.-4      	; 0x3e64 <Segment_init+0x838>
    3e68:	fe 01       	movw	r30, r28
    3e6a:	ed 51       	subi	r30, 0x1D	; 29
    3e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6e:	91 83       	std	Z+1, r25	; 0x01
    3e70:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e72:	de 01       	movw	r26, r28
    3e74:	ab 51       	subi	r26, 0x1B	; 27
    3e76:	bf 4f       	sbci	r27, 0xFF	; 255
    3e78:	fe 01       	movw	r30, r28
    3e7a:	eb 51       	subi	r30, 0x1B	; 27
    3e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7e:	80 81       	ld	r24, Z
    3e80:	91 81       	ldd	r25, Z+1	; 0x01
    3e82:	01 97       	sbiw	r24, 0x01	; 1
    3e84:	11 96       	adiw	r26, 0x01	; 1
    3e86:	9c 93       	st	X, r25
    3e88:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e8a:	fe 01       	movw	r30, r28
    3e8c:	eb 51       	subi	r30, 0x1B	; 27
    3e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e90:	80 81       	ld	r24, Z
    3e92:	91 81       	ldd	r25, Z+1	; 0x01
    3e94:	00 97       	sbiw	r24, 0x00	; 0
    3e96:	d1 f6       	brne	.-76     	; 0x3e4c <Segment_init+0x820>
    3e98:	27 c0       	rjmp	.+78     	; 0x3ee8 <Segment_init+0x8bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e9a:	8e 01       	movw	r16, r28
    3e9c:	0b 51       	subi	r16, 0x1B	; 27
    3e9e:	1f 4f       	sbci	r17, 0xFF	; 255
    3ea0:	fe 01       	movw	r30, r28
    3ea2:	e9 51       	subi	r30, 0x19	; 25
    3ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea6:	60 81       	ld	r22, Z
    3ea8:	71 81       	ldd	r23, Z+1	; 0x01
    3eaa:	82 81       	ldd	r24, Z+2	; 0x02
    3eac:	93 81       	ldd	r25, Z+3	; 0x03
    3eae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3eb2:	dc 01       	movw	r26, r24
    3eb4:	cb 01       	movw	r24, r22
    3eb6:	f8 01       	movw	r30, r16
    3eb8:	91 83       	std	Z+1, r25	; 0x01
    3eba:	80 83       	st	Z, r24
    3ebc:	de 01       	movw	r26, r28
    3ebe:	af 51       	subi	r26, 0x1F	; 31
    3ec0:	bf 4f       	sbci	r27, 0xFF	; 255
    3ec2:	fe 01       	movw	r30, r28
    3ec4:	eb 51       	subi	r30, 0x1B	; 27
    3ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    3ec8:	80 81       	ld	r24, Z
    3eca:	91 81       	ldd	r25, Z+1	; 0x01
    3ecc:	8d 93       	st	X+, r24
    3ece:	9c 93       	st	X, r25
    3ed0:	fe 01       	movw	r30, r28
    3ed2:	ef 51       	subi	r30, 0x1F	; 31
    3ed4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed6:	80 81       	ld	r24, Z
    3ed8:	91 81       	ldd	r25, Z+1	; 0x01
    3eda:	01 97       	sbiw	r24, 0x01	; 1
    3edc:	f1 f7       	brne	.-4      	; 0x3eda <Segment_init+0x8ae>
    3ede:	fe 01       	movw	r30, r28
    3ee0:	ef 51       	subi	r30, 0x1F	; 31
    3ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    3ee4:	91 83       	std	Z+1, r25	; 0x01
    3ee6:	80 83       	st	Z, r24
			_delay_ms(2);
			DIO_voidSetPinValue(GPIOB_BASE,PIN5_ID,HIGH);
    3ee8:	86 e3       	ldi	r24, 0x36	; 54
    3eea:	90 e0       	ldi	r25, 0x00	; 0
    3eec:	65 e0       	ldi	r22, 0x05	; 5
    3eee:	41 e0       	ldi	r20, 0x01	; 1
    3ef0:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    3ef4:	fe 01       	movw	r30, r28
    3ef6:	e3 52       	subi	r30, 0x23	; 35
    3ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    3efa:	80 e0       	ldi	r24, 0x00	; 0
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	a0 e0       	ldi	r26, 0x00	; 0
    3f00:	b0 e4       	ldi	r27, 0x40	; 64
    3f02:	80 83       	st	Z, r24
    3f04:	91 83       	std	Z+1, r25	; 0x01
    3f06:	a2 83       	std	Z+2, r26	; 0x02
    3f08:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f0a:	8e 01       	movw	r16, r28
    3f0c:	07 52       	subi	r16, 0x27	; 39
    3f0e:	1f 4f       	sbci	r17, 0xFF	; 255
    3f10:	fe 01       	movw	r30, r28
    3f12:	e3 52       	subi	r30, 0x23	; 35
    3f14:	ff 4f       	sbci	r31, 0xFF	; 255
    3f16:	60 81       	ld	r22, Z
    3f18:	71 81       	ldd	r23, Z+1	; 0x01
    3f1a:	82 81       	ldd	r24, Z+2	; 0x02
    3f1c:	93 81       	ldd	r25, Z+3	; 0x03
    3f1e:	20 e0       	ldi	r18, 0x00	; 0
    3f20:	30 e0       	ldi	r19, 0x00	; 0
    3f22:	4a e7       	ldi	r20, 0x7A	; 122
    3f24:	55 e4       	ldi	r21, 0x45	; 69
    3f26:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f2a:	dc 01       	movw	r26, r24
    3f2c:	cb 01       	movw	r24, r22
    3f2e:	f8 01       	movw	r30, r16
    3f30:	80 83       	st	Z, r24
    3f32:	91 83       	std	Z+1, r25	; 0x01
    3f34:	a2 83       	std	Z+2, r26	; 0x02
    3f36:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3f38:	fe 01       	movw	r30, r28
    3f3a:	e7 52       	subi	r30, 0x27	; 39
    3f3c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f3e:	60 81       	ld	r22, Z
    3f40:	71 81       	ldd	r23, Z+1	; 0x01
    3f42:	82 81       	ldd	r24, Z+2	; 0x02
    3f44:	93 81       	ldd	r25, Z+3	; 0x03
    3f46:	20 e0       	ldi	r18, 0x00	; 0
    3f48:	30 e0       	ldi	r19, 0x00	; 0
    3f4a:	40 e8       	ldi	r20, 0x80	; 128
    3f4c:	5f e3       	ldi	r21, 0x3F	; 63
    3f4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3f52:	88 23       	and	r24, r24
    3f54:	44 f4       	brge	.+16     	; 0x3f66 <Segment_init+0x93a>
		__ticks = 1;
    3f56:	fe 01       	movw	r30, r28
    3f58:	e9 52       	subi	r30, 0x29	; 41
    3f5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5c:	81 e0       	ldi	r24, 0x01	; 1
    3f5e:	90 e0       	ldi	r25, 0x00	; 0
    3f60:	91 83       	std	Z+1, r25	; 0x01
    3f62:	80 83       	st	Z, r24
    3f64:	64 c0       	rjmp	.+200    	; 0x402e <Segment_init+0xa02>
	else if (__tmp > 65535)
    3f66:	fe 01       	movw	r30, r28
    3f68:	e7 52       	subi	r30, 0x27	; 39
    3f6a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f6c:	60 81       	ld	r22, Z
    3f6e:	71 81       	ldd	r23, Z+1	; 0x01
    3f70:	82 81       	ldd	r24, Z+2	; 0x02
    3f72:	93 81       	ldd	r25, Z+3	; 0x03
    3f74:	20 e0       	ldi	r18, 0x00	; 0
    3f76:	3f ef       	ldi	r19, 0xFF	; 255
    3f78:	4f e7       	ldi	r20, 0x7F	; 127
    3f7a:	57 e4       	ldi	r21, 0x47	; 71
    3f7c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3f80:	18 16       	cp	r1, r24
    3f82:	0c f0       	brlt	.+2      	; 0x3f86 <Segment_init+0x95a>
    3f84:	43 c0       	rjmp	.+134    	; 0x400c <Segment_init+0x9e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f86:	fe 01       	movw	r30, r28
    3f88:	e3 52       	subi	r30, 0x23	; 35
    3f8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8c:	60 81       	ld	r22, Z
    3f8e:	71 81       	ldd	r23, Z+1	; 0x01
    3f90:	82 81       	ldd	r24, Z+2	; 0x02
    3f92:	93 81       	ldd	r25, Z+3	; 0x03
    3f94:	20 e0       	ldi	r18, 0x00	; 0
    3f96:	30 e0       	ldi	r19, 0x00	; 0
    3f98:	40 e2       	ldi	r20, 0x20	; 32
    3f9a:	51 e4       	ldi	r21, 0x41	; 65
    3f9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fa0:	dc 01       	movw	r26, r24
    3fa2:	cb 01       	movw	r24, r22
    3fa4:	8e 01       	movw	r16, r28
    3fa6:	09 52       	subi	r16, 0x29	; 41
    3fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    3faa:	bc 01       	movw	r22, r24
    3fac:	cd 01       	movw	r24, r26
    3fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fb2:	dc 01       	movw	r26, r24
    3fb4:	cb 01       	movw	r24, r22
    3fb6:	f8 01       	movw	r30, r16
    3fb8:	91 83       	std	Z+1, r25	; 0x01
    3fba:	80 83       	st	Z, r24
    3fbc:	1f c0       	rjmp	.+62     	; 0x3ffc <Segment_init+0x9d0>
    3fbe:	fe 01       	movw	r30, r28
    3fc0:	eb 52       	subi	r30, 0x2B	; 43
    3fc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3fc4:	80 e9       	ldi	r24, 0x90	; 144
    3fc6:	91 e0       	ldi	r25, 0x01	; 1
    3fc8:	91 83       	std	Z+1, r25	; 0x01
    3fca:	80 83       	st	Z, r24
    3fcc:	fe 01       	movw	r30, r28
    3fce:	eb 52       	subi	r30, 0x2B	; 43
    3fd0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fd2:	80 81       	ld	r24, Z
    3fd4:	91 81       	ldd	r25, Z+1	; 0x01
    3fd6:	01 97       	sbiw	r24, 0x01	; 1
    3fd8:	f1 f7       	brne	.-4      	; 0x3fd6 <Segment_init+0x9aa>
    3fda:	fe 01       	movw	r30, r28
    3fdc:	eb 52       	subi	r30, 0x2B	; 43
    3fde:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe0:	91 83       	std	Z+1, r25	; 0x01
    3fe2:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fe4:	de 01       	movw	r26, r28
    3fe6:	a9 52       	subi	r26, 0x29	; 41
    3fe8:	bf 4f       	sbci	r27, 0xFF	; 255
    3fea:	fe 01       	movw	r30, r28
    3fec:	e9 52       	subi	r30, 0x29	; 41
    3fee:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff0:	80 81       	ld	r24, Z
    3ff2:	91 81       	ldd	r25, Z+1	; 0x01
    3ff4:	01 97       	sbiw	r24, 0x01	; 1
    3ff6:	11 96       	adiw	r26, 0x01	; 1
    3ff8:	9c 93       	st	X, r25
    3ffa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ffc:	fe 01       	movw	r30, r28
    3ffe:	e9 52       	subi	r30, 0x29	; 41
    4000:	ff 4f       	sbci	r31, 0xFF	; 255
    4002:	80 81       	ld	r24, Z
    4004:	91 81       	ldd	r25, Z+1	; 0x01
    4006:	00 97       	sbiw	r24, 0x00	; 0
    4008:	d1 f6       	brne	.-76     	; 0x3fbe <Segment_init+0x992>
    400a:	27 c0       	rjmp	.+78     	; 0x405a <Segment_init+0xa2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    400c:	8e 01       	movw	r16, r28
    400e:	09 52       	subi	r16, 0x29	; 41
    4010:	1f 4f       	sbci	r17, 0xFF	; 255
    4012:	fe 01       	movw	r30, r28
    4014:	e7 52       	subi	r30, 0x27	; 39
    4016:	ff 4f       	sbci	r31, 0xFF	; 255
    4018:	60 81       	ld	r22, Z
    401a:	71 81       	ldd	r23, Z+1	; 0x01
    401c:	82 81       	ldd	r24, Z+2	; 0x02
    401e:	93 81       	ldd	r25, Z+3	; 0x03
    4020:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4024:	dc 01       	movw	r26, r24
    4026:	cb 01       	movw	r24, r22
    4028:	f8 01       	movw	r30, r16
    402a:	91 83       	std	Z+1, r25	; 0x01
    402c:	80 83       	st	Z, r24
    402e:	de 01       	movw	r26, r28
    4030:	ad 52       	subi	r26, 0x2D	; 45
    4032:	bf 4f       	sbci	r27, 0xFF	; 255
    4034:	fe 01       	movw	r30, r28
    4036:	e9 52       	subi	r30, 0x29	; 41
    4038:	ff 4f       	sbci	r31, 0xFF	; 255
    403a:	80 81       	ld	r24, Z
    403c:	91 81       	ldd	r25, Z+1	; 0x01
    403e:	8d 93       	st	X+, r24
    4040:	9c 93       	st	X, r25
    4042:	fe 01       	movw	r30, r28
    4044:	ed 52       	subi	r30, 0x2D	; 45
    4046:	ff 4f       	sbci	r31, 0xFF	; 255
    4048:	80 81       	ld	r24, Z
    404a:	91 81       	ldd	r25, Z+1	; 0x01
    404c:	01 97       	sbiw	r24, 0x01	; 1
    404e:	f1 f7       	brne	.-4      	; 0x404c <Segment_init+0xa20>
    4050:	fe 01       	movw	r30, r28
    4052:	ed 52       	subi	r30, 0x2D	; 45
    4054:	ff 4f       	sbci	r31, 0xFF	; 255
    4056:	91 83       	std	Z+1, r25	; 0x01
    4058:	80 83       	st	Z, r24
			_delay_ms(2);
			DIO_voidSetPinValue(GPIOB_BASE,PIN6_ID,HIGH);
    405a:	86 e3       	ldi	r24, 0x36	; 54
    405c:	90 e0       	ldi	r25, 0x00	; 0
    405e:	66 e0       	ldi	r22, 0x06	; 6
    4060:	41 e0       	ldi	r20, 0x01	; 1
    4062:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    4066:	0c 94 fd 29 	jmp	0x53fa	; 0x53fa <Segment_init+0x1dce>
			break;
	case THREE_SEGs:
			DIO_voidSetPinValue(GPIOA_BASE,PIN3_ID,LOW);
    406a:	89 e3       	ldi	r24, 0x39	; 57
    406c:	90 e0       	ldi	r25, 0x00	; 0
    406e:	63 e0       	ldi	r22, 0x03	; 3
    4070:	40 e0       	ldi	r20, 0x00	; 0
    4072:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    4076:	fe 01       	movw	r30, r28
    4078:	e1 53       	subi	r30, 0x31	; 49
    407a:	ff 4f       	sbci	r31, 0xFF	; 255
    407c:	80 e0       	ldi	r24, 0x00	; 0
    407e:	90 e0       	ldi	r25, 0x00	; 0
    4080:	a0 e0       	ldi	r26, 0x00	; 0
    4082:	b0 e4       	ldi	r27, 0x40	; 64
    4084:	80 83       	st	Z, r24
    4086:	91 83       	std	Z+1, r25	; 0x01
    4088:	a2 83       	std	Z+2, r26	; 0x02
    408a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    408c:	8e 01       	movw	r16, r28
    408e:	05 53       	subi	r16, 0x35	; 53
    4090:	1f 4f       	sbci	r17, 0xFF	; 255
    4092:	fe 01       	movw	r30, r28
    4094:	e1 53       	subi	r30, 0x31	; 49
    4096:	ff 4f       	sbci	r31, 0xFF	; 255
    4098:	60 81       	ld	r22, Z
    409a:	71 81       	ldd	r23, Z+1	; 0x01
    409c:	82 81       	ldd	r24, Z+2	; 0x02
    409e:	93 81       	ldd	r25, Z+3	; 0x03
    40a0:	20 e0       	ldi	r18, 0x00	; 0
    40a2:	30 e0       	ldi	r19, 0x00	; 0
    40a4:	4a e7       	ldi	r20, 0x7A	; 122
    40a6:	55 e4       	ldi	r21, 0x45	; 69
    40a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40ac:	dc 01       	movw	r26, r24
    40ae:	cb 01       	movw	r24, r22
    40b0:	f8 01       	movw	r30, r16
    40b2:	80 83       	st	Z, r24
    40b4:	91 83       	std	Z+1, r25	; 0x01
    40b6:	a2 83       	std	Z+2, r26	; 0x02
    40b8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    40ba:	fe 01       	movw	r30, r28
    40bc:	e5 53       	subi	r30, 0x35	; 53
    40be:	ff 4f       	sbci	r31, 0xFF	; 255
    40c0:	60 81       	ld	r22, Z
    40c2:	71 81       	ldd	r23, Z+1	; 0x01
    40c4:	82 81       	ldd	r24, Z+2	; 0x02
    40c6:	93 81       	ldd	r25, Z+3	; 0x03
    40c8:	20 e0       	ldi	r18, 0x00	; 0
    40ca:	30 e0       	ldi	r19, 0x00	; 0
    40cc:	40 e8       	ldi	r20, 0x80	; 128
    40ce:	5f e3       	ldi	r21, 0x3F	; 63
    40d0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    40d4:	88 23       	and	r24, r24
    40d6:	44 f4       	brge	.+16     	; 0x40e8 <Segment_init+0xabc>
		__ticks = 1;
    40d8:	fe 01       	movw	r30, r28
    40da:	e7 53       	subi	r30, 0x37	; 55
    40dc:	ff 4f       	sbci	r31, 0xFF	; 255
    40de:	81 e0       	ldi	r24, 0x01	; 1
    40e0:	90 e0       	ldi	r25, 0x00	; 0
    40e2:	91 83       	std	Z+1, r25	; 0x01
    40e4:	80 83       	st	Z, r24
    40e6:	64 c0       	rjmp	.+200    	; 0x41b0 <Segment_init+0xb84>
	else if (__tmp > 65535)
    40e8:	fe 01       	movw	r30, r28
    40ea:	e5 53       	subi	r30, 0x35	; 53
    40ec:	ff 4f       	sbci	r31, 0xFF	; 255
    40ee:	60 81       	ld	r22, Z
    40f0:	71 81       	ldd	r23, Z+1	; 0x01
    40f2:	82 81       	ldd	r24, Z+2	; 0x02
    40f4:	93 81       	ldd	r25, Z+3	; 0x03
    40f6:	20 e0       	ldi	r18, 0x00	; 0
    40f8:	3f ef       	ldi	r19, 0xFF	; 255
    40fa:	4f e7       	ldi	r20, 0x7F	; 127
    40fc:	57 e4       	ldi	r21, 0x47	; 71
    40fe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4102:	18 16       	cp	r1, r24
    4104:	0c f0       	brlt	.+2      	; 0x4108 <Segment_init+0xadc>
    4106:	43 c0       	rjmp	.+134    	; 0x418e <Segment_init+0xb62>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4108:	fe 01       	movw	r30, r28
    410a:	e1 53       	subi	r30, 0x31	; 49
    410c:	ff 4f       	sbci	r31, 0xFF	; 255
    410e:	60 81       	ld	r22, Z
    4110:	71 81       	ldd	r23, Z+1	; 0x01
    4112:	82 81       	ldd	r24, Z+2	; 0x02
    4114:	93 81       	ldd	r25, Z+3	; 0x03
    4116:	20 e0       	ldi	r18, 0x00	; 0
    4118:	30 e0       	ldi	r19, 0x00	; 0
    411a:	40 e2       	ldi	r20, 0x20	; 32
    411c:	51 e4       	ldi	r21, 0x41	; 65
    411e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4122:	dc 01       	movw	r26, r24
    4124:	cb 01       	movw	r24, r22
    4126:	8e 01       	movw	r16, r28
    4128:	07 53       	subi	r16, 0x37	; 55
    412a:	1f 4f       	sbci	r17, 0xFF	; 255
    412c:	bc 01       	movw	r22, r24
    412e:	cd 01       	movw	r24, r26
    4130:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4134:	dc 01       	movw	r26, r24
    4136:	cb 01       	movw	r24, r22
    4138:	f8 01       	movw	r30, r16
    413a:	91 83       	std	Z+1, r25	; 0x01
    413c:	80 83       	st	Z, r24
    413e:	1f c0       	rjmp	.+62     	; 0x417e <Segment_init+0xb52>
    4140:	fe 01       	movw	r30, r28
    4142:	e9 53       	subi	r30, 0x39	; 57
    4144:	ff 4f       	sbci	r31, 0xFF	; 255
    4146:	80 e9       	ldi	r24, 0x90	; 144
    4148:	91 e0       	ldi	r25, 0x01	; 1
    414a:	91 83       	std	Z+1, r25	; 0x01
    414c:	80 83       	st	Z, r24
    414e:	fe 01       	movw	r30, r28
    4150:	e9 53       	subi	r30, 0x39	; 57
    4152:	ff 4f       	sbci	r31, 0xFF	; 255
    4154:	80 81       	ld	r24, Z
    4156:	91 81       	ldd	r25, Z+1	; 0x01
    4158:	01 97       	sbiw	r24, 0x01	; 1
    415a:	f1 f7       	brne	.-4      	; 0x4158 <Segment_init+0xb2c>
    415c:	fe 01       	movw	r30, r28
    415e:	e9 53       	subi	r30, 0x39	; 57
    4160:	ff 4f       	sbci	r31, 0xFF	; 255
    4162:	91 83       	std	Z+1, r25	; 0x01
    4164:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4166:	de 01       	movw	r26, r28
    4168:	a7 53       	subi	r26, 0x37	; 55
    416a:	bf 4f       	sbci	r27, 0xFF	; 255
    416c:	fe 01       	movw	r30, r28
    416e:	e7 53       	subi	r30, 0x37	; 55
    4170:	ff 4f       	sbci	r31, 0xFF	; 255
    4172:	80 81       	ld	r24, Z
    4174:	91 81       	ldd	r25, Z+1	; 0x01
    4176:	01 97       	sbiw	r24, 0x01	; 1
    4178:	11 96       	adiw	r26, 0x01	; 1
    417a:	9c 93       	st	X, r25
    417c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    417e:	fe 01       	movw	r30, r28
    4180:	e7 53       	subi	r30, 0x37	; 55
    4182:	ff 4f       	sbci	r31, 0xFF	; 255
    4184:	80 81       	ld	r24, Z
    4186:	91 81       	ldd	r25, Z+1	; 0x01
    4188:	00 97       	sbiw	r24, 0x00	; 0
    418a:	d1 f6       	brne	.-76     	; 0x4140 <Segment_init+0xb14>
    418c:	27 c0       	rjmp	.+78     	; 0x41dc <Segment_init+0xbb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    418e:	8e 01       	movw	r16, r28
    4190:	07 53       	subi	r16, 0x37	; 55
    4192:	1f 4f       	sbci	r17, 0xFF	; 255
    4194:	fe 01       	movw	r30, r28
    4196:	e5 53       	subi	r30, 0x35	; 53
    4198:	ff 4f       	sbci	r31, 0xFF	; 255
    419a:	60 81       	ld	r22, Z
    419c:	71 81       	ldd	r23, Z+1	; 0x01
    419e:	82 81       	ldd	r24, Z+2	; 0x02
    41a0:	93 81       	ldd	r25, Z+3	; 0x03
    41a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41a6:	dc 01       	movw	r26, r24
    41a8:	cb 01       	movw	r24, r22
    41aa:	f8 01       	movw	r30, r16
    41ac:	91 83       	std	Z+1, r25	; 0x01
    41ae:	80 83       	st	Z, r24
    41b0:	de 01       	movw	r26, r28
    41b2:	ab 53       	subi	r26, 0x3B	; 59
    41b4:	bf 4f       	sbci	r27, 0xFF	; 255
    41b6:	fe 01       	movw	r30, r28
    41b8:	e7 53       	subi	r30, 0x37	; 55
    41ba:	ff 4f       	sbci	r31, 0xFF	; 255
    41bc:	80 81       	ld	r24, Z
    41be:	91 81       	ldd	r25, Z+1	; 0x01
    41c0:	8d 93       	st	X+, r24
    41c2:	9c 93       	st	X, r25
    41c4:	fe 01       	movw	r30, r28
    41c6:	eb 53       	subi	r30, 0x3B	; 59
    41c8:	ff 4f       	sbci	r31, 0xFF	; 255
    41ca:	80 81       	ld	r24, Z
    41cc:	91 81       	ldd	r25, Z+1	; 0x01
    41ce:	01 97       	sbiw	r24, 0x01	; 1
    41d0:	f1 f7       	brne	.-4      	; 0x41ce <Segment_init+0xba2>
    41d2:	fe 01       	movw	r30, r28
    41d4:	eb 53       	subi	r30, 0x3B	; 59
    41d6:	ff 4f       	sbci	r31, 0xFF	; 255
    41d8:	91 83       	std	Z+1, r25	; 0x01
    41da:	80 83       	st	Z, r24
			_delay_ms(2);
			DIO_voidSetPinValue(GPIOA_BASE,PIN2_ID,LOW);
    41dc:	89 e3       	ldi	r24, 0x39	; 57
    41de:	90 e0       	ldi	r25, 0x00	; 0
    41e0:	62 e0       	ldi	r22, 0x02	; 2
    41e2:	40 e0       	ldi	r20, 0x00	; 0
    41e4:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    41e8:	fe 01       	movw	r30, r28
    41ea:	ef 53       	subi	r30, 0x3F	; 63
    41ec:	ff 4f       	sbci	r31, 0xFF	; 255
    41ee:	80 e0       	ldi	r24, 0x00	; 0
    41f0:	90 e0       	ldi	r25, 0x00	; 0
    41f2:	a0 e0       	ldi	r26, 0x00	; 0
    41f4:	b0 e4       	ldi	r27, 0x40	; 64
    41f6:	80 83       	st	Z, r24
    41f8:	91 83       	std	Z+1, r25	; 0x01
    41fa:	a2 83       	std	Z+2, r26	; 0x02
    41fc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41fe:	8e 01       	movw	r16, r28
    4200:	03 54       	subi	r16, 0x43	; 67
    4202:	1f 4f       	sbci	r17, 0xFF	; 255
    4204:	fe 01       	movw	r30, r28
    4206:	ef 53       	subi	r30, 0x3F	; 63
    4208:	ff 4f       	sbci	r31, 0xFF	; 255
    420a:	60 81       	ld	r22, Z
    420c:	71 81       	ldd	r23, Z+1	; 0x01
    420e:	82 81       	ldd	r24, Z+2	; 0x02
    4210:	93 81       	ldd	r25, Z+3	; 0x03
    4212:	20 e0       	ldi	r18, 0x00	; 0
    4214:	30 e0       	ldi	r19, 0x00	; 0
    4216:	4a e7       	ldi	r20, 0x7A	; 122
    4218:	55 e4       	ldi	r21, 0x45	; 69
    421a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    421e:	dc 01       	movw	r26, r24
    4220:	cb 01       	movw	r24, r22
    4222:	f8 01       	movw	r30, r16
    4224:	80 83       	st	Z, r24
    4226:	91 83       	std	Z+1, r25	; 0x01
    4228:	a2 83       	std	Z+2, r26	; 0x02
    422a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    422c:	fe 01       	movw	r30, r28
    422e:	e3 54       	subi	r30, 0x43	; 67
    4230:	ff 4f       	sbci	r31, 0xFF	; 255
    4232:	60 81       	ld	r22, Z
    4234:	71 81       	ldd	r23, Z+1	; 0x01
    4236:	82 81       	ldd	r24, Z+2	; 0x02
    4238:	93 81       	ldd	r25, Z+3	; 0x03
    423a:	20 e0       	ldi	r18, 0x00	; 0
    423c:	30 e0       	ldi	r19, 0x00	; 0
    423e:	40 e8       	ldi	r20, 0x80	; 128
    4240:	5f e3       	ldi	r21, 0x3F	; 63
    4242:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4246:	88 23       	and	r24, r24
    4248:	44 f4       	brge	.+16     	; 0x425a <Segment_init+0xc2e>
		__ticks = 1;
    424a:	fe 01       	movw	r30, r28
    424c:	e5 54       	subi	r30, 0x45	; 69
    424e:	ff 4f       	sbci	r31, 0xFF	; 255
    4250:	81 e0       	ldi	r24, 0x01	; 1
    4252:	90 e0       	ldi	r25, 0x00	; 0
    4254:	91 83       	std	Z+1, r25	; 0x01
    4256:	80 83       	st	Z, r24
    4258:	64 c0       	rjmp	.+200    	; 0x4322 <Segment_init+0xcf6>
	else if (__tmp > 65535)
    425a:	fe 01       	movw	r30, r28
    425c:	e3 54       	subi	r30, 0x43	; 67
    425e:	ff 4f       	sbci	r31, 0xFF	; 255
    4260:	60 81       	ld	r22, Z
    4262:	71 81       	ldd	r23, Z+1	; 0x01
    4264:	82 81       	ldd	r24, Z+2	; 0x02
    4266:	93 81       	ldd	r25, Z+3	; 0x03
    4268:	20 e0       	ldi	r18, 0x00	; 0
    426a:	3f ef       	ldi	r19, 0xFF	; 255
    426c:	4f e7       	ldi	r20, 0x7F	; 127
    426e:	57 e4       	ldi	r21, 0x47	; 71
    4270:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4274:	18 16       	cp	r1, r24
    4276:	0c f0       	brlt	.+2      	; 0x427a <Segment_init+0xc4e>
    4278:	43 c0       	rjmp	.+134    	; 0x4300 <Segment_init+0xcd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    427a:	fe 01       	movw	r30, r28
    427c:	ef 53       	subi	r30, 0x3F	; 63
    427e:	ff 4f       	sbci	r31, 0xFF	; 255
    4280:	60 81       	ld	r22, Z
    4282:	71 81       	ldd	r23, Z+1	; 0x01
    4284:	82 81       	ldd	r24, Z+2	; 0x02
    4286:	93 81       	ldd	r25, Z+3	; 0x03
    4288:	20 e0       	ldi	r18, 0x00	; 0
    428a:	30 e0       	ldi	r19, 0x00	; 0
    428c:	40 e2       	ldi	r20, 0x20	; 32
    428e:	51 e4       	ldi	r21, 0x41	; 65
    4290:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4294:	dc 01       	movw	r26, r24
    4296:	cb 01       	movw	r24, r22
    4298:	8e 01       	movw	r16, r28
    429a:	05 54       	subi	r16, 0x45	; 69
    429c:	1f 4f       	sbci	r17, 0xFF	; 255
    429e:	bc 01       	movw	r22, r24
    42a0:	cd 01       	movw	r24, r26
    42a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42a6:	dc 01       	movw	r26, r24
    42a8:	cb 01       	movw	r24, r22
    42aa:	f8 01       	movw	r30, r16
    42ac:	91 83       	std	Z+1, r25	; 0x01
    42ae:	80 83       	st	Z, r24
    42b0:	1f c0       	rjmp	.+62     	; 0x42f0 <Segment_init+0xcc4>
    42b2:	fe 01       	movw	r30, r28
    42b4:	e7 54       	subi	r30, 0x47	; 71
    42b6:	ff 4f       	sbci	r31, 0xFF	; 255
    42b8:	80 e9       	ldi	r24, 0x90	; 144
    42ba:	91 e0       	ldi	r25, 0x01	; 1
    42bc:	91 83       	std	Z+1, r25	; 0x01
    42be:	80 83       	st	Z, r24
    42c0:	fe 01       	movw	r30, r28
    42c2:	e7 54       	subi	r30, 0x47	; 71
    42c4:	ff 4f       	sbci	r31, 0xFF	; 255
    42c6:	80 81       	ld	r24, Z
    42c8:	91 81       	ldd	r25, Z+1	; 0x01
    42ca:	01 97       	sbiw	r24, 0x01	; 1
    42cc:	f1 f7       	brne	.-4      	; 0x42ca <Segment_init+0xc9e>
    42ce:	fe 01       	movw	r30, r28
    42d0:	e7 54       	subi	r30, 0x47	; 71
    42d2:	ff 4f       	sbci	r31, 0xFF	; 255
    42d4:	91 83       	std	Z+1, r25	; 0x01
    42d6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42d8:	de 01       	movw	r26, r28
    42da:	a5 54       	subi	r26, 0x45	; 69
    42dc:	bf 4f       	sbci	r27, 0xFF	; 255
    42de:	fe 01       	movw	r30, r28
    42e0:	e5 54       	subi	r30, 0x45	; 69
    42e2:	ff 4f       	sbci	r31, 0xFF	; 255
    42e4:	80 81       	ld	r24, Z
    42e6:	91 81       	ldd	r25, Z+1	; 0x01
    42e8:	01 97       	sbiw	r24, 0x01	; 1
    42ea:	11 96       	adiw	r26, 0x01	; 1
    42ec:	9c 93       	st	X, r25
    42ee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42f0:	fe 01       	movw	r30, r28
    42f2:	e5 54       	subi	r30, 0x45	; 69
    42f4:	ff 4f       	sbci	r31, 0xFF	; 255
    42f6:	80 81       	ld	r24, Z
    42f8:	91 81       	ldd	r25, Z+1	; 0x01
    42fa:	00 97       	sbiw	r24, 0x00	; 0
    42fc:	d1 f6       	brne	.-76     	; 0x42b2 <Segment_init+0xc86>
    42fe:	27 c0       	rjmp	.+78     	; 0x434e <Segment_init+0xd22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4300:	8e 01       	movw	r16, r28
    4302:	05 54       	subi	r16, 0x45	; 69
    4304:	1f 4f       	sbci	r17, 0xFF	; 255
    4306:	fe 01       	movw	r30, r28
    4308:	e3 54       	subi	r30, 0x43	; 67
    430a:	ff 4f       	sbci	r31, 0xFF	; 255
    430c:	60 81       	ld	r22, Z
    430e:	71 81       	ldd	r23, Z+1	; 0x01
    4310:	82 81       	ldd	r24, Z+2	; 0x02
    4312:	93 81       	ldd	r25, Z+3	; 0x03
    4314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4318:	dc 01       	movw	r26, r24
    431a:	cb 01       	movw	r24, r22
    431c:	f8 01       	movw	r30, r16
    431e:	91 83       	std	Z+1, r25	; 0x01
    4320:	80 83       	st	Z, r24
    4322:	de 01       	movw	r26, r28
    4324:	a9 54       	subi	r26, 0x49	; 73
    4326:	bf 4f       	sbci	r27, 0xFF	; 255
    4328:	fe 01       	movw	r30, r28
    432a:	e5 54       	subi	r30, 0x45	; 69
    432c:	ff 4f       	sbci	r31, 0xFF	; 255
    432e:	80 81       	ld	r24, Z
    4330:	91 81       	ldd	r25, Z+1	; 0x01
    4332:	8d 93       	st	X+, r24
    4334:	9c 93       	st	X, r25
    4336:	fe 01       	movw	r30, r28
    4338:	e9 54       	subi	r30, 0x49	; 73
    433a:	ff 4f       	sbci	r31, 0xFF	; 255
    433c:	80 81       	ld	r24, Z
    433e:	91 81       	ldd	r25, Z+1	; 0x01
    4340:	01 97       	sbiw	r24, 0x01	; 1
    4342:	f1 f7       	brne	.-4      	; 0x4340 <Segment_init+0xd14>
    4344:	fe 01       	movw	r30, r28
    4346:	e9 54       	subi	r30, 0x49	; 73
    4348:	ff 4f       	sbci	r31, 0xFF	; 255
    434a:	91 83       	std	Z+1, r25	; 0x01
    434c:	80 83       	st	Z, r24
			_delay_ms(2);
			DIO_voidSetPinValue(GPIOB_BASE,PIN5_ID,LOW);
    434e:	86 e3       	ldi	r24, 0x36	; 54
    4350:	90 e0       	ldi	r25, 0x00	; 0
    4352:	65 e0       	ldi	r22, 0x05	; 5
    4354:	40 e0       	ldi	r20, 0x00	; 0
    4356:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    435a:	fe 01       	movw	r30, r28
    435c:	ed 54       	subi	r30, 0x4D	; 77
    435e:	ff 4f       	sbci	r31, 0xFF	; 255
    4360:	80 e0       	ldi	r24, 0x00	; 0
    4362:	90 e0       	ldi	r25, 0x00	; 0
    4364:	a0 e0       	ldi	r26, 0x00	; 0
    4366:	b0 e4       	ldi	r27, 0x40	; 64
    4368:	80 83       	st	Z, r24
    436a:	91 83       	std	Z+1, r25	; 0x01
    436c:	a2 83       	std	Z+2, r26	; 0x02
    436e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4370:	8e 01       	movw	r16, r28
    4372:	01 55       	subi	r16, 0x51	; 81
    4374:	1f 4f       	sbci	r17, 0xFF	; 255
    4376:	fe 01       	movw	r30, r28
    4378:	ed 54       	subi	r30, 0x4D	; 77
    437a:	ff 4f       	sbci	r31, 0xFF	; 255
    437c:	60 81       	ld	r22, Z
    437e:	71 81       	ldd	r23, Z+1	; 0x01
    4380:	82 81       	ldd	r24, Z+2	; 0x02
    4382:	93 81       	ldd	r25, Z+3	; 0x03
    4384:	20 e0       	ldi	r18, 0x00	; 0
    4386:	30 e0       	ldi	r19, 0x00	; 0
    4388:	4a e7       	ldi	r20, 0x7A	; 122
    438a:	55 e4       	ldi	r21, 0x45	; 69
    438c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4390:	dc 01       	movw	r26, r24
    4392:	cb 01       	movw	r24, r22
    4394:	f8 01       	movw	r30, r16
    4396:	80 83       	st	Z, r24
    4398:	91 83       	std	Z+1, r25	; 0x01
    439a:	a2 83       	std	Z+2, r26	; 0x02
    439c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    439e:	fe 01       	movw	r30, r28
    43a0:	e1 55       	subi	r30, 0x51	; 81
    43a2:	ff 4f       	sbci	r31, 0xFF	; 255
    43a4:	60 81       	ld	r22, Z
    43a6:	71 81       	ldd	r23, Z+1	; 0x01
    43a8:	82 81       	ldd	r24, Z+2	; 0x02
    43aa:	93 81       	ldd	r25, Z+3	; 0x03
    43ac:	20 e0       	ldi	r18, 0x00	; 0
    43ae:	30 e0       	ldi	r19, 0x00	; 0
    43b0:	40 e8       	ldi	r20, 0x80	; 128
    43b2:	5f e3       	ldi	r21, 0x3F	; 63
    43b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43b8:	88 23       	and	r24, r24
    43ba:	44 f4       	brge	.+16     	; 0x43cc <Segment_init+0xda0>
		__ticks = 1;
    43bc:	fe 01       	movw	r30, r28
    43be:	e3 55       	subi	r30, 0x53	; 83
    43c0:	ff 4f       	sbci	r31, 0xFF	; 255
    43c2:	81 e0       	ldi	r24, 0x01	; 1
    43c4:	90 e0       	ldi	r25, 0x00	; 0
    43c6:	91 83       	std	Z+1, r25	; 0x01
    43c8:	80 83       	st	Z, r24
    43ca:	64 c0       	rjmp	.+200    	; 0x4494 <Segment_init+0xe68>
	else if (__tmp > 65535)
    43cc:	fe 01       	movw	r30, r28
    43ce:	e1 55       	subi	r30, 0x51	; 81
    43d0:	ff 4f       	sbci	r31, 0xFF	; 255
    43d2:	60 81       	ld	r22, Z
    43d4:	71 81       	ldd	r23, Z+1	; 0x01
    43d6:	82 81       	ldd	r24, Z+2	; 0x02
    43d8:	93 81       	ldd	r25, Z+3	; 0x03
    43da:	20 e0       	ldi	r18, 0x00	; 0
    43dc:	3f ef       	ldi	r19, 0xFF	; 255
    43de:	4f e7       	ldi	r20, 0x7F	; 127
    43e0:	57 e4       	ldi	r21, 0x47	; 71
    43e2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43e6:	18 16       	cp	r1, r24
    43e8:	0c f0       	brlt	.+2      	; 0x43ec <Segment_init+0xdc0>
    43ea:	43 c0       	rjmp	.+134    	; 0x4472 <Segment_init+0xe46>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43ec:	fe 01       	movw	r30, r28
    43ee:	ed 54       	subi	r30, 0x4D	; 77
    43f0:	ff 4f       	sbci	r31, 0xFF	; 255
    43f2:	60 81       	ld	r22, Z
    43f4:	71 81       	ldd	r23, Z+1	; 0x01
    43f6:	82 81       	ldd	r24, Z+2	; 0x02
    43f8:	93 81       	ldd	r25, Z+3	; 0x03
    43fa:	20 e0       	ldi	r18, 0x00	; 0
    43fc:	30 e0       	ldi	r19, 0x00	; 0
    43fe:	40 e2       	ldi	r20, 0x20	; 32
    4400:	51 e4       	ldi	r21, 0x41	; 65
    4402:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4406:	dc 01       	movw	r26, r24
    4408:	cb 01       	movw	r24, r22
    440a:	8e 01       	movw	r16, r28
    440c:	03 55       	subi	r16, 0x53	; 83
    440e:	1f 4f       	sbci	r17, 0xFF	; 255
    4410:	bc 01       	movw	r22, r24
    4412:	cd 01       	movw	r24, r26
    4414:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4418:	dc 01       	movw	r26, r24
    441a:	cb 01       	movw	r24, r22
    441c:	f8 01       	movw	r30, r16
    441e:	91 83       	std	Z+1, r25	; 0x01
    4420:	80 83       	st	Z, r24
    4422:	1f c0       	rjmp	.+62     	; 0x4462 <Segment_init+0xe36>
    4424:	fe 01       	movw	r30, r28
    4426:	e5 55       	subi	r30, 0x55	; 85
    4428:	ff 4f       	sbci	r31, 0xFF	; 255
    442a:	80 e9       	ldi	r24, 0x90	; 144
    442c:	91 e0       	ldi	r25, 0x01	; 1
    442e:	91 83       	std	Z+1, r25	; 0x01
    4430:	80 83       	st	Z, r24
    4432:	fe 01       	movw	r30, r28
    4434:	e5 55       	subi	r30, 0x55	; 85
    4436:	ff 4f       	sbci	r31, 0xFF	; 255
    4438:	80 81       	ld	r24, Z
    443a:	91 81       	ldd	r25, Z+1	; 0x01
    443c:	01 97       	sbiw	r24, 0x01	; 1
    443e:	f1 f7       	brne	.-4      	; 0x443c <Segment_init+0xe10>
    4440:	fe 01       	movw	r30, r28
    4442:	e5 55       	subi	r30, 0x55	; 85
    4444:	ff 4f       	sbci	r31, 0xFF	; 255
    4446:	91 83       	std	Z+1, r25	; 0x01
    4448:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    444a:	de 01       	movw	r26, r28
    444c:	a3 55       	subi	r26, 0x53	; 83
    444e:	bf 4f       	sbci	r27, 0xFF	; 255
    4450:	fe 01       	movw	r30, r28
    4452:	e3 55       	subi	r30, 0x53	; 83
    4454:	ff 4f       	sbci	r31, 0xFF	; 255
    4456:	80 81       	ld	r24, Z
    4458:	91 81       	ldd	r25, Z+1	; 0x01
    445a:	01 97       	sbiw	r24, 0x01	; 1
    445c:	11 96       	adiw	r26, 0x01	; 1
    445e:	9c 93       	st	X, r25
    4460:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4462:	fe 01       	movw	r30, r28
    4464:	e3 55       	subi	r30, 0x53	; 83
    4466:	ff 4f       	sbci	r31, 0xFF	; 255
    4468:	80 81       	ld	r24, Z
    446a:	91 81       	ldd	r25, Z+1	; 0x01
    446c:	00 97       	sbiw	r24, 0x00	; 0
    446e:	d1 f6       	brne	.-76     	; 0x4424 <Segment_init+0xdf8>
    4470:	27 c0       	rjmp	.+78     	; 0x44c0 <Segment_init+0xe94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4472:	8e 01       	movw	r16, r28
    4474:	03 55       	subi	r16, 0x53	; 83
    4476:	1f 4f       	sbci	r17, 0xFF	; 255
    4478:	fe 01       	movw	r30, r28
    447a:	e1 55       	subi	r30, 0x51	; 81
    447c:	ff 4f       	sbci	r31, 0xFF	; 255
    447e:	60 81       	ld	r22, Z
    4480:	71 81       	ldd	r23, Z+1	; 0x01
    4482:	82 81       	ldd	r24, Z+2	; 0x02
    4484:	93 81       	ldd	r25, Z+3	; 0x03
    4486:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    448a:	dc 01       	movw	r26, r24
    448c:	cb 01       	movw	r24, r22
    448e:	f8 01       	movw	r30, r16
    4490:	91 83       	std	Z+1, r25	; 0x01
    4492:	80 83       	st	Z, r24
    4494:	de 01       	movw	r26, r28
    4496:	a7 55       	subi	r26, 0x57	; 87
    4498:	bf 4f       	sbci	r27, 0xFF	; 255
    449a:	fe 01       	movw	r30, r28
    449c:	e3 55       	subi	r30, 0x53	; 83
    449e:	ff 4f       	sbci	r31, 0xFF	; 255
    44a0:	80 81       	ld	r24, Z
    44a2:	91 81       	ldd	r25, Z+1	; 0x01
    44a4:	8d 93       	st	X+, r24
    44a6:	9c 93       	st	X, r25
    44a8:	fe 01       	movw	r30, r28
    44aa:	e7 55       	subi	r30, 0x57	; 87
    44ac:	ff 4f       	sbci	r31, 0xFF	; 255
    44ae:	80 81       	ld	r24, Z
    44b0:	91 81       	ldd	r25, Z+1	; 0x01
    44b2:	01 97       	sbiw	r24, 0x01	; 1
    44b4:	f1 f7       	brne	.-4      	; 0x44b2 <Segment_init+0xe86>
    44b6:	fe 01       	movw	r30, r28
    44b8:	e7 55       	subi	r30, 0x57	; 87
    44ba:	ff 4f       	sbci	r31, 0xFF	; 255
    44bc:	91 83       	std	Z+1, r25	; 0x01
    44be:	80 83       	st	Z, r24
			_delay_ms(2);
			DIO_voidSetPinValue(GPIOB_BASE,PIN6_ID,HIGH);
    44c0:	86 e3       	ldi	r24, 0x36	; 54
    44c2:	90 e0       	ldi	r25, 0x00	; 0
    44c4:	66 e0       	ldi	r22, 0x06	; 6
    44c6:	41 e0       	ldi	r20, 0x01	; 1
    44c8:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    44cc:	0c 94 fd 29 	jmp	0x53fa	; 0x53fa <Segment_init+0x1dce>
			break;
	case FOUR_SEGs:
			DIO_voidSetPinValue(GPIOA_BASE,PIN3_ID,LOW);
    44d0:	89 e3       	ldi	r24, 0x39	; 57
    44d2:	90 e0       	ldi	r25, 0x00	; 0
    44d4:	63 e0       	ldi	r22, 0x03	; 3
    44d6:	40 e0       	ldi	r20, 0x00	; 0
    44d8:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    44dc:	fe 01       	movw	r30, r28
    44de:	eb 55       	subi	r30, 0x5B	; 91
    44e0:	ff 4f       	sbci	r31, 0xFF	; 255
    44e2:	80 e0       	ldi	r24, 0x00	; 0
    44e4:	90 e0       	ldi	r25, 0x00	; 0
    44e6:	a0 e0       	ldi	r26, 0x00	; 0
    44e8:	b0 e4       	ldi	r27, 0x40	; 64
    44ea:	80 83       	st	Z, r24
    44ec:	91 83       	std	Z+1, r25	; 0x01
    44ee:	a2 83       	std	Z+2, r26	; 0x02
    44f0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44f2:	8e 01       	movw	r16, r28
    44f4:	0f 55       	subi	r16, 0x5F	; 95
    44f6:	1f 4f       	sbci	r17, 0xFF	; 255
    44f8:	fe 01       	movw	r30, r28
    44fa:	eb 55       	subi	r30, 0x5B	; 91
    44fc:	ff 4f       	sbci	r31, 0xFF	; 255
    44fe:	60 81       	ld	r22, Z
    4500:	71 81       	ldd	r23, Z+1	; 0x01
    4502:	82 81       	ldd	r24, Z+2	; 0x02
    4504:	93 81       	ldd	r25, Z+3	; 0x03
    4506:	20 e0       	ldi	r18, 0x00	; 0
    4508:	30 e0       	ldi	r19, 0x00	; 0
    450a:	4a e7       	ldi	r20, 0x7A	; 122
    450c:	55 e4       	ldi	r21, 0x45	; 69
    450e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4512:	dc 01       	movw	r26, r24
    4514:	cb 01       	movw	r24, r22
    4516:	f8 01       	movw	r30, r16
    4518:	80 83       	st	Z, r24
    451a:	91 83       	std	Z+1, r25	; 0x01
    451c:	a2 83       	std	Z+2, r26	; 0x02
    451e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4520:	fe 01       	movw	r30, r28
    4522:	ef 55       	subi	r30, 0x5F	; 95
    4524:	ff 4f       	sbci	r31, 0xFF	; 255
    4526:	60 81       	ld	r22, Z
    4528:	71 81       	ldd	r23, Z+1	; 0x01
    452a:	82 81       	ldd	r24, Z+2	; 0x02
    452c:	93 81       	ldd	r25, Z+3	; 0x03
    452e:	20 e0       	ldi	r18, 0x00	; 0
    4530:	30 e0       	ldi	r19, 0x00	; 0
    4532:	40 e8       	ldi	r20, 0x80	; 128
    4534:	5f e3       	ldi	r21, 0x3F	; 63
    4536:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    453a:	88 23       	and	r24, r24
    453c:	44 f4       	brge	.+16     	; 0x454e <Segment_init+0xf22>
		__ticks = 1;
    453e:	fe 01       	movw	r30, r28
    4540:	e1 56       	subi	r30, 0x61	; 97
    4542:	ff 4f       	sbci	r31, 0xFF	; 255
    4544:	81 e0       	ldi	r24, 0x01	; 1
    4546:	90 e0       	ldi	r25, 0x00	; 0
    4548:	91 83       	std	Z+1, r25	; 0x01
    454a:	80 83       	st	Z, r24
    454c:	64 c0       	rjmp	.+200    	; 0x4616 <Segment_init+0xfea>
	else if (__tmp > 65535)
    454e:	fe 01       	movw	r30, r28
    4550:	ef 55       	subi	r30, 0x5F	; 95
    4552:	ff 4f       	sbci	r31, 0xFF	; 255
    4554:	60 81       	ld	r22, Z
    4556:	71 81       	ldd	r23, Z+1	; 0x01
    4558:	82 81       	ldd	r24, Z+2	; 0x02
    455a:	93 81       	ldd	r25, Z+3	; 0x03
    455c:	20 e0       	ldi	r18, 0x00	; 0
    455e:	3f ef       	ldi	r19, 0xFF	; 255
    4560:	4f e7       	ldi	r20, 0x7F	; 127
    4562:	57 e4       	ldi	r21, 0x47	; 71
    4564:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4568:	18 16       	cp	r1, r24
    456a:	0c f0       	brlt	.+2      	; 0x456e <Segment_init+0xf42>
    456c:	43 c0       	rjmp	.+134    	; 0x45f4 <Segment_init+0xfc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    456e:	fe 01       	movw	r30, r28
    4570:	eb 55       	subi	r30, 0x5B	; 91
    4572:	ff 4f       	sbci	r31, 0xFF	; 255
    4574:	60 81       	ld	r22, Z
    4576:	71 81       	ldd	r23, Z+1	; 0x01
    4578:	82 81       	ldd	r24, Z+2	; 0x02
    457a:	93 81       	ldd	r25, Z+3	; 0x03
    457c:	20 e0       	ldi	r18, 0x00	; 0
    457e:	30 e0       	ldi	r19, 0x00	; 0
    4580:	40 e2       	ldi	r20, 0x20	; 32
    4582:	51 e4       	ldi	r21, 0x41	; 65
    4584:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4588:	dc 01       	movw	r26, r24
    458a:	cb 01       	movw	r24, r22
    458c:	8e 01       	movw	r16, r28
    458e:	01 56       	subi	r16, 0x61	; 97
    4590:	1f 4f       	sbci	r17, 0xFF	; 255
    4592:	bc 01       	movw	r22, r24
    4594:	cd 01       	movw	r24, r26
    4596:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    459a:	dc 01       	movw	r26, r24
    459c:	cb 01       	movw	r24, r22
    459e:	f8 01       	movw	r30, r16
    45a0:	91 83       	std	Z+1, r25	; 0x01
    45a2:	80 83       	st	Z, r24
    45a4:	1f c0       	rjmp	.+62     	; 0x45e4 <Segment_init+0xfb8>
    45a6:	fe 01       	movw	r30, r28
    45a8:	e3 56       	subi	r30, 0x63	; 99
    45aa:	ff 4f       	sbci	r31, 0xFF	; 255
    45ac:	80 e9       	ldi	r24, 0x90	; 144
    45ae:	91 e0       	ldi	r25, 0x01	; 1
    45b0:	91 83       	std	Z+1, r25	; 0x01
    45b2:	80 83       	st	Z, r24
    45b4:	fe 01       	movw	r30, r28
    45b6:	e3 56       	subi	r30, 0x63	; 99
    45b8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ba:	80 81       	ld	r24, Z
    45bc:	91 81       	ldd	r25, Z+1	; 0x01
    45be:	01 97       	sbiw	r24, 0x01	; 1
    45c0:	f1 f7       	brne	.-4      	; 0x45be <Segment_init+0xf92>
    45c2:	fe 01       	movw	r30, r28
    45c4:	e3 56       	subi	r30, 0x63	; 99
    45c6:	ff 4f       	sbci	r31, 0xFF	; 255
    45c8:	91 83       	std	Z+1, r25	; 0x01
    45ca:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45cc:	de 01       	movw	r26, r28
    45ce:	a1 56       	subi	r26, 0x61	; 97
    45d0:	bf 4f       	sbci	r27, 0xFF	; 255
    45d2:	fe 01       	movw	r30, r28
    45d4:	e1 56       	subi	r30, 0x61	; 97
    45d6:	ff 4f       	sbci	r31, 0xFF	; 255
    45d8:	80 81       	ld	r24, Z
    45da:	91 81       	ldd	r25, Z+1	; 0x01
    45dc:	01 97       	sbiw	r24, 0x01	; 1
    45de:	11 96       	adiw	r26, 0x01	; 1
    45e0:	9c 93       	st	X, r25
    45e2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45e4:	fe 01       	movw	r30, r28
    45e6:	e1 56       	subi	r30, 0x61	; 97
    45e8:	ff 4f       	sbci	r31, 0xFF	; 255
    45ea:	80 81       	ld	r24, Z
    45ec:	91 81       	ldd	r25, Z+1	; 0x01
    45ee:	00 97       	sbiw	r24, 0x00	; 0
    45f0:	d1 f6       	brne	.-76     	; 0x45a6 <Segment_init+0xf7a>
    45f2:	27 c0       	rjmp	.+78     	; 0x4642 <Segment_init+0x1016>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45f4:	8e 01       	movw	r16, r28
    45f6:	01 56       	subi	r16, 0x61	; 97
    45f8:	1f 4f       	sbci	r17, 0xFF	; 255
    45fa:	fe 01       	movw	r30, r28
    45fc:	ef 55       	subi	r30, 0x5F	; 95
    45fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4600:	60 81       	ld	r22, Z
    4602:	71 81       	ldd	r23, Z+1	; 0x01
    4604:	82 81       	ldd	r24, Z+2	; 0x02
    4606:	93 81       	ldd	r25, Z+3	; 0x03
    4608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    460c:	dc 01       	movw	r26, r24
    460e:	cb 01       	movw	r24, r22
    4610:	f8 01       	movw	r30, r16
    4612:	91 83       	std	Z+1, r25	; 0x01
    4614:	80 83       	st	Z, r24
    4616:	de 01       	movw	r26, r28
    4618:	a5 56       	subi	r26, 0x65	; 101
    461a:	bf 4f       	sbci	r27, 0xFF	; 255
    461c:	fe 01       	movw	r30, r28
    461e:	e1 56       	subi	r30, 0x61	; 97
    4620:	ff 4f       	sbci	r31, 0xFF	; 255
    4622:	80 81       	ld	r24, Z
    4624:	91 81       	ldd	r25, Z+1	; 0x01
    4626:	8d 93       	st	X+, r24
    4628:	9c 93       	st	X, r25
    462a:	fe 01       	movw	r30, r28
    462c:	e5 56       	subi	r30, 0x65	; 101
    462e:	ff 4f       	sbci	r31, 0xFF	; 255
    4630:	80 81       	ld	r24, Z
    4632:	91 81       	ldd	r25, Z+1	; 0x01
    4634:	01 97       	sbiw	r24, 0x01	; 1
    4636:	f1 f7       	brne	.-4      	; 0x4634 <Segment_init+0x1008>
    4638:	fe 01       	movw	r30, r28
    463a:	e5 56       	subi	r30, 0x65	; 101
    463c:	ff 4f       	sbci	r31, 0xFF	; 255
    463e:	91 83       	std	Z+1, r25	; 0x01
    4640:	80 83       	st	Z, r24
			_delay_ms(2);
			DIO_voidSetPinValue(GPIOA_BASE,PIN2_ID,LOW);
    4642:	89 e3       	ldi	r24, 0x39	; 57
    4644:	90 e0       	ldi	r25, 0x00	; 0
    4646:	62 e0       	ldi	r22, 0x02	; 2
    4648:	40 e0       	ldi	r20, 0x00	; 0
    464a:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    464e:	fe 01       	movw	r30, r28
    4650:	e9 56       	subi	r30, 0x69	; 105
    4652:	ff 4f       	sbci	r31, 0xFF	; 255
    4654:	80 e0       	ldi	r24, 0x00	; 0
    4656:	90 e0       	ldi	r25, 0x00	; 0
    4658:	a0 e0       	ldi	r26, 0x00	; 0
    465a:	b0 e4       	ldi	r27, 0x40	; 64
    465c:	80 83       	st	Z, r24
    465e:	91 83       	std	Z+1, r25	; 0x01
    4660:	a2 83       	std	Z+2, r26	; 0x02
    4662:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4664:	8e 01       	movw	r16, r28
    4666:	0d 56       	subi	r16, 0x6D	; 109
    4668:	1f 4f       	sbci	r17, 0xFF	; 255
    466a:	fe 01       	movw	r30, r28
    466c:	e9 56       	subi	r30, 0x69	; 105
    466e:	ff 4f       	sbci	r31, 0xFF	; 255
    4670:	60 81       	ld	r22, Z
    4672:	71 81       	ldd	r23, Z+1	; 0x01
    4674:	82 81       	ldd	r24, Z+2	; 0x02
    4676:	93 81       	ldd	r25, Z+3	; 0x03
    4678:	20 e0       	ldi	r18, 0x00	; 0
    467a:	30 e0       	ldi	r19, 0x00	; 0
    467c:	4a e7       	ldi	r20, 0x7A	; 122
    467e:	55 e4       	ldi	r21, 0x45	; 69
    4680:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4684:	dc 01       	movw	r26, r24
    4686:	cb 01       	movw	r24, r22
    4688:	f8 01       	movw	r30, r16
    468a:	80 83       	st	Z, r24
    468c:	91 83       	std	Z+1, r25	; 0x01
    468e:	a2 83       	std	Z+2, r26	; 0x02
    4690:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4692:	fe 01       	movw	r30, r28
    4694:	ed 56       	subi	r30, 0x6D	; 109
    4696:	ff 4f       	sbci	r31, 0xFF	; 255
    4698:	60 81       	ld	r22, Z
    469a:	71 81       	ldd	r23, Z+1	; 0x01
    469c:	82 81       	ldd	r24, Z+2	; 0x02
    469e:	93 81       	ldd	r25, Z+3	; 0x03
    46a0:	20 e0       	ldi	r18, 0x00	; 0
    46a2:	30 e0       	ldi	r19, 0x00	; 0
    46a4:	40 e8       	ldi	r20, 0x80	; 128
    46a6:	5f e3       	ldi	r21, 0x3F	; 63
    46a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    46ac:	88 23       	and	r24, r24
    46ae:	44 f4       	brge	.+16     	; 0x46c0 <Segment_init+0x1094>
		__ticks = 1;
    46b0:	fe 01       	movw	r30, r28
    46b2:	ef 56       	subi	r30, 0x6F	; 111
    46b4:	ff 4f       	sbci	r31, 0xFF	; 255
    46b6:	81 e0       	ldi	r24, 0x01	; 1
    46b8:	90 e0       	ldi	r25, 0x00	; 0
    46ba:	91 83       	std	Z+1, r25	; 0x01
    46bc:	80 83       	st	Z, r24
    46be:	64 c0       	rjmp	.+200    	; 0x4788 <Segment_init+0x115c>
	else if (__tmp > 65535)
    46c0:	fe 01       	movw	r30, r28
    46c2:	ed 56       	subi	r30, 0x6D	; 109
    46c4:	ff 4f       	sbci	r31, 0xFF	; 255
    46c6:	60 81       	ld	r22, Z
    46c8:	71 81       	ldd	r23, Z+1	; 0x01
    46ca:	82 81       	ldd	r24, Z+2	; 0x02
    46cc:	93 81       	ldd	r25, Z+3	; 0x03
    46ce:	20 e0       	ldi	r18, 0x00	; 0
    46d0:	3f ef       	ldi	r19, 0xFF	; 255
    46d2:	4f e7       	ldi	r20, 0x7F	; 127
    46d4:	57 e4       	ldi	r21, 0x47	; 71
    46d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    46da:	18 16       	cp	r1, r24
    46dc:	0c f0       	brlt	.+2      	; 0x46e0 <Segment_init+0x10b4>
    46de:	43 c0       	rjmp	.+134    	; 0x4766 <Segment_init+0x113a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    46e0:	fe 01       	movw	r30, r28
    46e2:	e9 56       	subi	r30, 0x69	; 105
    46e4:	ff 4f       	sbci	r31, 0xFF	; 255
    46e6:	60 81       	ld	r22, Z
    46e8:	71 81       	ldd	r23, Z+1	; 0x01
    46ea:	82 81       	ldd	r24, Z+2	; 0x02
    46ec:	93 81       	ldd	r25, Z+3	; 0x03
    46ee:	20 e0       	ldi	r18, 0x00	; 0
    46f0:	30 e0       	ldi	r19, 0x00	; 0
    46f2:	40 e2       	ldi	r20, 0x20	; 32
    46f4:	51 e4       	ldi	r21, 0x41	; 65
    46f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    46fa:	dc 01       	movw	r26, r24
    46fc:	cb 01       	movw	r24, r22
    46fe:	8e 01       	movw	r16, r28
    4700:	0f 56       	subi	r16, 0x6F	; 111
    4702:	1f 4f       	sbci	r17, 0xFF	; 255
    4704:	bc 01       	movw	r22, r24
    4706:	cd 01       	movw	r24, r26
    4708:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    470c:	dc 01       	movw	r26, r24
    470e:	cb 01       	movw	r24, r22
    4710:	f8 01       	movw	r30, r16
    4712:	91 83       	std	Z+1, r25	; 0x01
    4714:	80 83       	st	Z, r24
    4716:	1f c0       	rjmp	.+62     	; 0x4756 <Segment_init+0x112a>
    4718:	fe 01       	movw	r30, r28
    471a:	e1 57       	subi	r30, 0x71	; 113
    471c:	ff 4f       	sbci	r31, 0xFF	; 255
    471e:	80 e9       	ldi	r24, 0x90	; 144
    4720:	91 e0       	ldi	r25, 0x01	; 1
    4722:	91 83       	std	Z+1, r25	; 0x01
    4724:	80 83       	st	Z, r24
    4726:	fe 01       	movw	r30, r28
    4728:	e1 57       	subi	r30, 0x71	; 113
    472a:	ff 4f       	sbci	r31, 0xFF	; 255
    472c:	80 81       	ld	r24, Z
    472e:	91 81       	ldd	r25, Z+1	; 0x01
    4730:	01 97       	sbiw	r24, 0x01	; 1
    4732:	f1 f7       	brne	.-4      	; 0x4730 <Segment_init+0x1104>
    4734:	fe 01       	movw	r30, r28
    4736:	e1 57       	subi	r30, 0x71	; 113
    4738:	ff 4f       	sbci	r31, 0xFF	; 255
    473a:	91 83       	std	Z+1, r25	; 0x01
    473c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    473e:	de 01       	movw	r26, r28
    4740:	af 56       	subi	r26, 0x6F	; 111
    4742:	bf 4f       	sbci	r27, 0xFF	; 255
    4744:	fe 01       	movw	r30, r28
    4746:	ef 56       	subi	r30, 0x6F	; 111
    4748:	ff 4f       	sbci	r31, 0xFF	; 255
    474a:	80 81       	ld	r24, Z
    474c:	91 81       	ldd	r25, Z+1	; 0x01
    474e:	01 97       	sbiw	r24, 0x01	; 1
    4750:	11 96       	adiw	r26, 0x01	; 1
    4752:	9c 93       	st	X, r25
    4754:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4756:	fe 01       	movw	r30, r28
    4758:	ef 56       	subi	r30, 0x6F	; 111
    475a:	ff 4f       	sbci	r31, 0xFF	; 255
    475c:	80 81       	ld	r24, Z
    475e:	91 81       	ldd	r25, Z+1	; 0x01
    4760:	00 97       	sbiw	r24, 0x00	; 0
    4762:	d1 f6       	brne	.-76     	; 0x4718 <Segment_init+0x10ec>
    4764:	27 c0       	rjmp	.+78     	; 0x47b4 <Segment_init+0x1188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4766:	8e 01       	movw	r16, r28
    4768:	0f 56       	subi	r16, 0x6F	; 111
    476a:	1f 4f       	sbci	r17, 0xFF	; 255
    476c:	fe 01       	movw	r30, r28
    476e:	ed 56       	subi	r30, 0x6D	; 109
    4770:	ff 4f       	sbci	r31, 0xFF	; 255
    4772:	60 81       	ld	r22, Z
    4774:	71 81       	ldd	r23, Z+1	; 0x01
    4776:	82 81       	ldd	r24, Z+2	; 0x02
    4778:	93 81       	ldd	r25, Z+3	; 0x03
    477a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    477e:	dc 01       	movw	r26, r24
    4780:	cb 01       	movw	r24, r22
    4782:	f8 01       	movw	r30, r16
    4784:	91 83       	std	Z+1, r25	; 0x01
    4786:	80 83       	st	Z, r24
    4788:	de 01       	movw	r26, r28
    478a:	a3 57       	subi	r26, 0x73	; 115
    478c:	bf 4f       	sbci	r27, 0xFF	; 255
    478e:	fe 01       	movw	r30, r28
    4790:	ef 56       	subi	r30, 0x6F	; 111
    4792:	ff 4f       	sbci	r31, 0xFF	; 255
    4794:	80 81       	ld	r24, Z
    4796:	91 81       	ldd	r25, Z+1	; 0x01
    4798:	8d 93       	st	X+, r24
    479a:	9c 93       	st	X, r25
    479c:	fe 01       	movw	r30, r28
    479e:	e3 57       	subi	r30, 0x73	; 115
    47a0:	ff 4f       	sbci	r31, 0xFF	; 255
    47a2:	80 81       	ld	r24, Z
    47a4:	91 81       	ldd	r25, Z+1	; 0x01
    47a6:	01 97       	sbiw	r24, 0x01	; 1
    47a8:	f1 f7       	brne	.-4      	; 0x47a6 <Segment_init+0x117a>
    47aa:	fe 01       	movw	r30, r28
    47ac:	e3 57       	subi	r30, 0x73	; 115
    47ae:	ff 4f       	sbci	r31, 0xFF	; 255
    47b0:	91 83       	std	Z+1, r25	; 0x01
    47b2:	80 83       	st	Z, r24
			_delay_ms(2);
			DIO_voidSetPinValue(GPIOB_BASE,PIN5_ID,LOW);
    47b4:	86 e3       	ldi	r24, 0x36	; 54
    47b6:	90 e0       	ldi	r25, 0x00	; 0
    47b8:	65 e0       	ldi	r22, 0x05	; 5
    47ba:	40 e0       	ldi	r20, 0x00	; 0
    47bc:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    47c0:	fe 01       	movw	r30, r28
    47c2:	e7 57       	subi	r30, 0x77	; 119
    47c4:	ff 4f       	sbci	r31, 0xFF	; 255
    47c6:	80 e0       	ldi	r24, 0x00	; 0
    47c8:	90 e0       	ldi	r25, 0x00	; 0
    47ca:	a0 e0       	ldi	r26, 0x00	; 0
    47cc:	b0 e4       	ldi	r27, 0x40	; 64
    47ce:	80 83       	st	Z, r24
    47d0:	91 83       	std	Z+1, r25	; 0x01
    47d2:	a2 83       	std	Z+2, r26	; 0x02
    47d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    47d6:	8e 01       	movw	r16, r28
    47d8:	0b 57       	subi	r16, 0x7B	; 123
    47da:	1f 4f       	sbci	r17, 0xFF	; 255
    47dc:	fe 01       	movw	r30, r28
    47de:	e7 57       	subi	r30, 0x77	; 119
    47e0:	ff 4f       	sbci	r31, 0xFF	; 255
    47e2:	60 81       	ld	r22, Z
    47e4:	71 81       	ldd	r23, Z+1	; 0x01
    47e6:	82 81       	ldd	r24, Z+2	; 0x02
    47e8:	93 81       	ldd	r25, Z+3	; 0x03
    47ea:	20 e0       	ldi	r18, 0x00	; 0
    47ec:	30 e0       	ldi	r19, 0x00	; 0
    47ee:	4a e7       	ldi	r20, 0x7A	; 122
    47f0:	55 e4       	ldi	r21, 0x45	; 69
    47f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    47f6:	dc 01       	movw	r26, r24
    47f8:	cb 01       	movw	r24, r22
    47fa:	f8 01       	movw	r30, r16
    47fc:	80 83       	st	Z, r24
    47fe:	91 83       	std	Z+1, r25	; 0x01
    4800:	a2 83       	std	Z+2, r26	; 0x02
    4802:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4804:	fe 01       	movw	r30, r28
    4806:	eb 57       	subi	r30, 0x7B	; 123
    4808:	ff 4f       	sbci	r31, 0xFF	; 255
    480a:	60 81       	ld	r22, Z
    480c:	71 81       	ldd	r23, Z+1	; 0x01
    480e:	82 81       	ldd	r24, Z+2	; 0x02
    4810:	93 81       	ldd	r25, Z+3	; 0x03
    4812:	20 e0       	ldi	r18, 0x00	; 0
    4814:	30 e0       	ldi	r19, 0x00	; 0
    4816:	40 e8       	ldi	r20, 0x80	; 128
    4818:	5f e3       	ldi	r21, 0x3F	; 63
    481a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    481e:	88 23       	and	r24, r24
    4820:	44 f4       	brge	.+16     	; 0x4832 <Segment_init+0x1206>
		__ticks = 1;
    4822:	fe 01       	movw	r30, r28
    4824:	ed 57       	subi	r30, 0x7D	; 125
    4826:	ff 4f       	sbci	r31, 0xFF	; 255
    4828:	81 e0       	ldi	r24, 0x01	; 1
    482a:	90 e0       	ldi	r25, 0x00	; 0
    482c:	91 83       	std	Z+1, r25	; 0x01
    482e:	80 83       	st	Z, r24
    4830:	64 c0       	rjmp	.+200    	; 0x48fa <Segment_init+0x12ce>
	else if (__tmp > 65535)
    4832:	fe 01       	movw	r30, r28
    4834:	eb 57       	subi	r30, 0x7B	; 123
    4836:	ff 4f       	sbci	r31, 0xFF	; 255
    4838:	60 81       	ld	r22, Z
    483a:	71 81       	ldd	r23, Z+1	; 0x01
    483c:	82 81       	ldd	r24, Z+2	; 0x02
    483e:	93 81       	ldd	r25, Z+3	; 0x03
    4840:	20 e0       	ldi	r18, 0x00	; 0
    4842:	3f ef       	ldi	r19, 0xFF	; 255
    4844:	4f e7       	ldi	r20, 0x7F	; 127
    4846:	57 e4       	ldi	r21, 0x47	; 71
    4848:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    484c:	18 16       	cp	r1, r24
    484e:	0c f0       	brlt	.+2      	; 0x4852 <Segment_init+0x1226>
    4850:	43 c0       	rjmp	.+134    	; 0x48d8 <Segment_init+0x12ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4852:	fe 01       	movw	r30, r28
    4854:	e7 57       	subi	r30, 0x77	; 119
    4856:	ff 4f       	sbci	r31, 0xFF	; 255
    4858:	60 81       	ld	r22, Z
    485a:	71 81       	ldd	r23, Z+1	; 0x01
    485c:	82 81       	ldd	r24, Z+2	; 0x02
    485e:	93 81       	ldd	r25, Z+3	; 0x03
    4860:	20 e0       	ldi	r18, 0x00	; 0
    4862:	30 e0       	ldi	r19, 0x00	; 0
    4864:	40 e2       	ldi	r20, 0x20	; 32
    4866:	51 e4       	ldi	r21, 0x41	; 65
    4868:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    486c:	dc 01       	movw	r26, r24
    486e:	cb 01       	movw	r24, r22
    4870:	8e 01       	movw	r16, r28
    4872:	0d 57       	subi	r16, 0x7D	; 125
    4874:	1f 4f       	sbci	r17, 0xFF	; 255
    4876:	bc 01       	movw	r22, r24
    4878:	cd 01       	movw	r24, r26
    487a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    487e:	dc 01       	movw	r26, r24
    4880:	cb 01       	movw	r24, r22
    4882:	f8 01       	movw	r30, r16
    4884:	91 83       	std	Z+1, r25	; 0x01
    4886:	80 83       	st	Z, r24
    4888:	1f c0       	rjmp	.+62     	; 0x48c8 <Segment_init+0x129c>
    488a:	fe 01       	movw	r30, r28
    488c:	ef 57       	subi	r30, 0x7F	; 127
    488e:	ff 4f       	sbci	r31, 0xFF	; 255
    4890:	80 e9       	ldi	r24, 0x90	; 144
    4892:	91 e0       	ldi	r25, 0x01	; 1
    4894:	91 83       	std	Z+1, r25	; 0x01
    4896:	80 83       	st	Z, r24
    4898:	fe 01       	movw	r30, r28
    489a:	ef 57       	subi	r30, 0x7F	; 127
    489c:	ff 4f       	sbci	r31, 0xFF	; 255
    489e:	80 81       	ld	r24, Z
    48a0:	91 81       	ldd	r25, Z+1	; 0x01
    48a2:	01 97       	sbiw	r24, 0x01	; 1
    48a4:	f1 f7       	brne	.-4      	; 0x48a2 <Segment_init+0x1276>
    48a6:	fe 01       	movw	r30, r28
    48a8:	ef 57       	subi	r30, 0x7F	; 127
    48aa:	ff 4f       	sbci	r31, 0xFF	; 255
    48ac:	91 83       	std	Z+1, r25	; 0x01
    48ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    48b0:	de 01       	movw	r26, r28
    48b2:	ad 57       	subi	r26, 0x7D	; 125
    48b4:	bf 4f       	sbci	r27, 0xFF	; 255
    48b6:	fe 01       	movw	r30, r28
    48b8:	ed 57       	subi	r30, 0x7D	; 125
    48ba:	ff 4f       	sbci	r31, 0xFF	; 255
    48bc:	80 81       	ld	r24, Z
    48be:	91 81       	ldd	r25, Z+1	; 0x01
    48c0:	01 97       	sbiw	r24, 0x01	; 1
    48c2:	11 96       	adiw	r26, 0x01	; 1
    48c4:	9c 93       	st	X, r25
    48c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    48c8:	fe 01       	movw	r30, r28
    48ca:	ed 57       	subi	r30, 0x7D	; 125
    48cc:	ff 4f       	sbci	r31, 0xFF	; 255
    48ce:	80 81       	ld	r24, Z
    48d0:	91 81       	ldd	r25, Z+1	; 0x01
    48d2:	00 97       	sbiw	r24, 0x00	; 0
    48d4:	d1 f6       	brne	.-76     	; 0x488a <Segment_init+0x125e>
    48d6:	27 c0       	rjmp	.+78     	; 0x4926 <Segment_init+0x12fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    48d8:	8e 01       	movw	r16, r28
    48da:	0d 57       	subi	r16, 0x7D	; 125
    48dc:	1f 4f       	sbci	r17, 0xFF	; 255
    48de:	fe 01       	movw	r30, r28
    48e0:	eb 57       	subi	r30, 0x7B	; 123
    48e2:	ff 4f       	sbci	r31, 0xFF	; 255
    48e4:	60 81       	ld	r22, Z
    48e6:	71 81       	ldd	r23, Z+1	; 0x01
    48e8:	82 81       	ldd	r24, Z+2	; 0x02
    48ea:	93 81       	ldd	r25, Z+3	; 0x03
    48ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    48f0:	dc 01       	movw	r26, r24
    48f2:	cb 01       	movw	r24, r22
    48f4:	f8 01       	movw	r30, r16
    48f6:	91 83       	std	Z+1, r25	; 0x01
    48f8:	80 83       	st	Z, r24
    48fa:	de 01       	movw	r26, r28
    48fc:	a1 58       	subi	r26, 0x81	; 129
    48fe:	bf 4f       	sbci	r27, 0xFF	; 255
    4900:	fe 01       	movw	r30, r28
    4902:	ed 57       	subi	r30, 0x7D	; 125
    4904:	ff 4f       	sbci	r31, 0xFF	; 255
    4906:	80 81       	ld	r24, Z
    4908:	91 81       	ldd	r25, Z+1	; 0x01
    490a:	8d 93       	st	X+, r24
    490c:	9c 93       	st	X, r25
    490e:	fe 01       	movw	r30, r28
    4910:	e1 58       	subi	r30, 0x81	; 129
    4912:	ff 4f       	sbci	r31, 0xFF	; 255
    4914:	80 81       	ld	r24, Z
    4916:	91 81       	ldd	r25, Z+1	; 0x01
    4918:	01 97       	sbiw	r24, 0x01	; 1
    491a:	f1 f7       	brne	.-4      	; 0x4918 <Segment_init+0x12ec>
    491c:	fe 01       	movw	r30, r28
    491e:	e1 58       	subi	r30, 0x81	; 129
    4920:	ff 4f       	sbci	r31, 0xFF	; 255
    4922:	91 83       	std	Z+1, r25	; 0x01
    4924:	80 83       	st	Z, r24
			_delay_ms(2);
			DIO_voidSetPinValue(GPIOB_BASE,PIN6_ID,LOW);
    4926:	86 e3       	ldi	r24, 0x36	; 54
    4928:	90 e0       	ldi	r25, 0x00	; 0
    492a:	66 e0       	ldi	r22, 0x06	; 6
    492c:	40 e0       	ldi	r20, 0x00	; 0
    492e:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    4932:	63 c5       	rjmp	.+2758   	; 0x53fa <Segment_init+0x1dce>
			break;
	case 4:
				DIO_voidSetPinValue(GPIOA_BASE,PIN3_ID,HIGH);
    4934:	89 e3       	ldi	r24, 0x39	; 57
    4936:	90 e0       	ldi	r25, 0x00	; 0
    4938:	63 e0       	ldi	r22, 0x03	; 3
    493a:	41 e0       	ldi	r20, 0x01	; 1
    493c:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    4940:	fe 01       	movw	r30, r28
    4942:	e5 58       	subi	r30, 0x85	; 133
    4944:	ff 4f       	sbci	r31, 0xFF	; 255
    4946:	80 e0       	ldi	r24, 0x00	; 0
    4948:	90 e0       	ldi	r25, 0x00	; 0
    494a:	a0 e0       	ldi	r26, 0x00	; 0
    494c:	b0 e4       	ldi	r27, 0x40	; 64
    494e:	80 83       	st	Z, r24
    4950:	91 83       	std	Z+1, r25	; 0x01
    4952:	a2 83       	std	Z+2, r26	; 0x02
    4954:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4956:	8e 01       	movw	r16, r28
    4958:	09 58       	subi	r16, 0x89	; 137
    495a:	1f 4f       	sbci	r17, 0xFF	; 255
    495c:	fe 01       	movw	r30, r28
    495e:	e5 58       	subi	r30, 0x85	; 133
    4960:	ff 4f       	sbci	r31, 0xFF	; 255
    4962:	60 81       	ld	r22, Z
    4964:	71 81       	ldd	r23, Z+1	; 0x01
    4966:	82 81       	ldd	r24, Z+2	; 0x02
    4968:	93 81       	ldd	r25, Z+3	; 0x03
    496a:	20 e0       	ldi	r18, 0x00	; 0
    496c:	30 e0       	ldi	r19, 0x00	; 0
    496e:	4a e7       	ldi	r20, 0x7A	; 122
    4970:	55 e4       	ldi	r21, 0x45	; 69
    4972:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4976:	dc 01       	movw	r26, r24
    4978:	cb 01       	movw	r24, r22
    497a:	f8 01       	movw	r30, r16
    497c:	80 83       	st	Z, r24
    497e:	91 83       	std	Z+1, r25	; 0x01
    4980:	a2 83       	std	Z+2, r26	; 0x02
    4982:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4984:	fe 01       	movw	r30, r28
    4986:	e9 58       	subi	r30, 0x89	; 137
    4988:	ff 4f       	sbci	r31, 0xFF	; 255
    498a:	60 81       	ld	r22, Z
    498c:	71 81       	ldd	r23, Z+1	; 0x01
    498e:	82 81       	ldd	r24, Z+2	; 0x02
    4990:	93 81       	ldd	r25, Z+3	; 0x03
    4992:	20 e0       	ldi	r18, 0x00	; 0
    4994:	30 e0       	ldi	r19, 0x00	; 0
    4996:	40 e8       	ldi	r20, 0x80	; 128
    4998:	5f e3       	ldi	r21, 0x3F	; 63
    499a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    499e:	88 23       	and	r24, r24
    49a0:	44 f4       	brge	.+16     	; 0x49b2 <Segment_init+0x1386>
		__ticks = 1;
    49a2:	fe 01       	movw	r30, r28
    49a4:	eb 58       	subi	r30, 0x8B	; 139
    49a6:	ff 4f       	sbci	r31, 0xFF	; 255
    49a8:	81 e0       	ldi	r24, 0x01	; 1
    49aa:	90 e0       	ldi	r25, 0x00	; 0
    49ac:	91 83       	std	Z+1, r25	; 0x01
    49ae:	80 83       	st	Z, r24
    49b0:	64 c0       	rjmp	.+200    	; 0x4a7a <Segment_init+0x144e>
	else if (__tmp > 65535)
    49b2:	fe 01       	movw	r30, r28
    49b4:	e9 58       	subi	r30, 0x89	; 137
    49b6:	ff 4f       	sbci	r31, 0xFF	; 255
    49b8:	60 81       	ld	r22, Z
    49ba:	71 81       	ldd	r23, Z+1	; 0x01
    49bc:	82 81       	ldd	r24, Z+2	; 0x02
    49be:	93 81       	ldd	r25, Z+3	; 0x03
    49c0:	20 e0       	ldi	r18, 0x00	; 0
    49c2:	3f ef       	ldi	r19, 0xFF	; 255
    49c4:	4f e7       	ldi	r20, 0x7F	; 127
    49c6:	57 e4       	ldi	r21, 0x47	; 71
    49c8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    49cc:	18 16       	cp	r1, r24
    49ce:	0c f0       	brlt	.+2      	; 0x49d2 <Segment_init+0x13a6>
    49d0:	43 c0       	rjmp	.+134    	; 0x4a58 <Segment_init+0x142c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    49d2:	fe 01       	movw	r30, r28
    49d4:	e5 58       	subi	r30, 0x85	; 133
    49d6:	ff 4f       	sbci	r31, 0xFF	; 255
    49d8:	60 81       	ld	r22, Z
    49da:	71 81       	ldd	r23, Z+1	; 0x01
    49dc:	82 81       	ldd	r24, Z+2	; 0x02
    49de:	93 81       	ldd	r25, Z+3	; 0x03
    49e0:	20 e0       	ldi	r18, 0x00	; 0
    49e2:	30 e0       	ldi	r19, 0x00	; 0
    49e4:	40 e2       	ldi	r20, 0x20	; 32
    49e6:	51 e4       	ldi	r21, 0x41	; 65
    49e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    49ec:	dc 01       	movw	r26, r24
    49ee:	cb 01       	movw	r24, r22
    49f0:	8e 01       	movw	r16, r28
    49f2:	0b 58       	subi	r16, 0x8B	; 139
    49f4:	1f 4f       	sbci	r17, 0xFF	; 255
    49f6:	bc 01       	movw	r22, r24
    49f8:	cd 01       	movw	r24, r26
    49fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    49fe:	dc 01       	movw	r26, r24
    4a00:	cb 01       	movw	r24, r22
    4a02:	f8 01       	movw	r30, r16
    4a04:	91 83       	std	Z+1, r25	; 0x01
    4a06:	80 83       	st	Z, r24
    4a08:	1f c0       	rjmp	.+62     	; 0x4a48 <Segment_init+0x141c>
    4a0a:	fe 01       	movw	r30, r28
    4a0c:	ed 58       	subi	r30, 0x8D	; 141
    4a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4a10:	80 e9       	ldi	r24, 0x90	; 144
    4a12:	91 e0       	ldi	r25, 0x01	; 1
    4a14:	91 83       	std	Z+1, r25	; 0x01
    4a16:	80 83       	st	Z, r24
    4a18:	fe 01       	movw	r30, r28
    4a1a:	ed 58       	subi	r30, 0x8D	; 141
    4a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a1e:	80 81       	ld	r24, Z
    4a20:	91 81       	ldd	r25, Z+1	; 0x01
    4a22:	01 97       	sbiw	r24, 0x01	; 1
    4a24:	f1 f7       	brne	.-4      	; 0x4a22 <Segment_init+0x13f6>
    4a26:	fe 01       	movw	r30, r28
    4a28:	ed 58       	subi	r30, 0x8D	; 141
    4a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a2c:	91 83       	std	Z+1, r25	; 0x01
    4a2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4a30:	de 01       	movw	r26, r28
    4a32:	ab 58       	subi	r26, 0x8B	; 139
    4a34:	bf 4f       	sbci	r27, 0xFF	; 255
    4a36:	fe 01       	movw	r30, r28
    4a38:	eb 58       	subi	r30, 0x8B	; 139
    4a3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4a3c:	80 81       	ld	r24, Z
    4a3e:	91 81       	ldd	r25, Z+1	; 0x01
    4a40:	01 97       	sbiw	r24, 0x01	; 1
    4a42:	11 96       	adiw	r26, 0x01	; 1
    4a44:	9c 93       	st	X, r25
    4a46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4a48:	fe 01       	movw	r30, r28
    4a4a:	eb 58       	subi	r30, 0x8B	; 139
    4a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    4a4e:	80 81       	ld	r24, Z
    4a50:	91 81       	ldd	r25, Z+1	; 0x01
    4a52:	00 97       	sbiw	r24, 0x00	; 0
    4a54:	d1 f6       	brne	.-76     	; 0x4a0a <Segment_init+0x13de>
    4a56:	27 c0       	rjmp	.+78     	; 0x4aa6 <Segment_init+0x147a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4a58:	8e 01       	movw	r16, r28
    4a5a:	0b 58       	subi	r16, 0x8B	; 139
    4a5c:	1f 4f       	sbci	r17, 0xFF	; 255
    4a5e:	fe 01       	movw	r30, r28
    4a60:	e9 58       	subi	r30, 0x89	; 137
    4a62:	ff 4f       	sbci	r31, 0xFF	; 255
    4a64:	60 81       	ld	r22, Z
    4a66:	71 81       	ldd	r23, Z+1	; 0x01
    4a68:	82 81       	ldd	r24, Z+2	; 0x02
    4a6a:	93 81       	ldd	r25, Z+3	; 0x03
    4a6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4a70:	dc 01       	movw	r26, r24
    4a72:	cb 01       	movw	r24, r22
    4a74:	f8 01       	movw	r30, r16
    4a76:	91 83       	std	Z+1, r25	; 0x01
    4a78:	80 83       	st	Z, r24
    4a7a:	de 01       	movw	r26, r28
    4a7c:	af 58       	subi	r26, 0x8F	; 143
    4a7e:	bf 4f       	sbci	r27, 0xFF	; 255
    4a80:	fe 01       	movw	r30, r28
    4a82:	eb 58       	subi	r30, 0x8B	; 139
    4a84:	ff 4f       	sbci	r31, 0xFF	; 255
    4a86:	80 81       	ld	r24, Z
    4a88:	91 81       	ldd	r25, Z+1	; 0x01
    4a8a:	8d 93       	st	X+, r24
    4a8c:	9c 93       	st	X, r25
    4a8e:	fe 01       	movw	r30, r28
    4a90:	ef 58       	subi	r30, 0x8F	; 143
    4a92:	ff 4f       	sbci	r31, 0xFF	; 255
    4a94:	80 81       	ld	r24, Z
    4a96:	91 81       	ldd	r25, Z+1	; 0x01
    4a98:	01 97       	sbiw	r24, 0x01	; 1
    4a9a:	f1 f7       	brne	.-4      	; 0x4a98 <Segment_init+0x146c>
    4a9c:	fe 01       	movw	r30, r28
    4a9e:	ef 58       	subi	r30, 0x8F	; 143
    4aa0:	ff 4f       	sbci	r31, 0xFF	; 255
    4aa2:	91 83       	std	Z+1, r25	; 0x01
    4aa4:	80 83       	st	Z, r24
				_delay_ms(2);
				DIO_voidSetPinValue(GPIOA_BASE,PIN2_ID,LOW);
    4aa6:	89 e3       	ldi	r24, 0x39	; 57
    4aa8:	90 e0       	ldi	r25, 0x00	; 0
    4aaa:	62 e0       	ldi	r22, 0x02	; 2
    4aac:	40 e0       	ldi	r20, 0x00	; 0
    4aae:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    4ab2:	fe 01       	movw	r30, r28
    4ab4:	e3 59       	subi	r30, 0x93	; 147
    4ab6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ab8:	80 e0       	ldi	r24, 0x00	; 0
    4aba:	90 e0       	ldi	r25, 0x00	; 0
    4abc:	a0 e0       	ldi	r26, 0x00	; 0
    4abe:	b0 e4       	ldi	r27, 0x40	; 64
    4ac0:	80 83       	st	Z, r24
    4ac2:	91 83       	std	Z+1, r25	; 0x01
    4ac4:	a2 83       	std	Z+2, r26	; 0x02
    4ac6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4ac8:	8e 01       	movw	r16, r28
    4aca:	07 59       	subi	r16, 0x97	; 151
    4acc:	1f 4f       	sbci	r17, 0xFF	; 255
    4ace:	fe 01       	movw	r30, r28
    4ad0:	e3 59       	subi	r30, 0x93	; 147
    4ad2:	ff 4f       	sbci	r31, 0xFF	; 255
    4ad4:	60 81       	ld	r22, Z
    4ad6:	71 81       	ldd	r23, Z+1	; 0x01
    4ad8:	82 81       	ldd	r24, Z+2	; 0x02
    4ada:	93 81       	ldd	r25, Z+3	; 0x03
    4adc:	20 e0       	ldi	r18, 0x00	; 0
    4ade:	30 e0       	ldi	r19, 0x00	; 0
    4ae0:	4a e7       	ldi	r20, 0x7A	; 122
    4ae2:	55 e4       	ldi	r21, 0x45	; 69
    4ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4ae8:	dc 01       	movw	r26, r24
    4aea:	cb 01       	movw	r24, r22
    4aec:	f8 01       	movw	r30, r16
    4aee:	80 83       	st	Z, r24
    4af0:	91 83       	std	Z+1, r25	; 0x01
    4af2:	a2 83       	std	Z+2, r26	; 0x02
    4af4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4af6:	fe 01       	movw	r30, r28
    4af8:	e7 59       	subi	r30, 0x97	; 151
    4afa:	ff 4f       	sbci	r31, 0xFF	; 255
    4afc:	60 81       	ld	r22, Z
    4afe:	71 81       	ldd	r23, Z+1	; 0x01
    4b00:	82 81       	ldd	r24, Z+2	; 0x02
    4b02:	93 81       	ldd	r25, Z+3	; 0x03
    4b04:	20 e0       	ldi	r18, 0x00	; 0
    4b06:	30 e0       	ldi	r19, 0x00	; 0
    4b08:	40 e8       	ldi	r20, 0x80	; 128
    4b0a:	5f e3       	ldi	r21, 0x3F	; 63
    4b0c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4b10:	88 23       	and	r24, r24
    4b12:	44 f4       	brge	.+16     	; 0x4b24 <Segment_init+0x14f8>
		__ticks = 1;
    4b14:	fe 01       	movw	r30, r28
    4b16:	e9 59       	subi	r30, 0x99	; 153
    4b18:	ff 4f       	sbci	r31, 0xFF	; 255
    4b1a:	81 e0       	ldi	r24, 0x01	; 1
    4b1c:	90 e0       	ldi	r25, 0x00	; 0
    4b1e:	91 83       	std	Z+1, r25	; 0x01
    4b20:	80 83       	st	Z, r24
    4b22:	64 c0       	rjmp	.+200    	; 0x4bec <Segment_init+0x15c0>
	else if (__tmp > 65535)
    4b24:	fe 01       	movw	r30, r28
    4b26:	e7 59       	subi	r30, 0x97	; 151
    4b28:	ff 4f       	sbci	r31, 0xFF	; 255
    4b2a:	60 81       	ld	r22, Z
    4b2c:	71 81       	ldd	r23, Z+1	; 0x01
    4b2e:	82 81       	ldd	r24, Z+2	; 0x02
    4b30:	93 81       	ldd	r25, Z+3	; 0x03
    4b32:	20 e0       	ldi	r18, 0x00	; 0
    4b34:	3f ef       	ldi	r19, 0xFF	; 255
    4b36:	4f e7       	ldi	r20, 0x7F	; 127
    4b38:	57 e4       	ldi	r21, 0x47	; 71
    4b3a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4b3e:	18 16       	cp	r1, r24
    4b40:	0c f0       	brlt	.+2      	; 0x4b44 <Segment_init+0x1518>
    4b42:	43 c0       	rjmp	.+134    	; 0x4bca <Segment_init+0x159e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4b44:	fe 01       	movw	r30, r28
    4b46:	e3 59       	subi	r30, 0x93	; 147
    4b48:	ff 4f       	sbci	r31, 0xFF	; 255
    4b4a:	60 81       	ld	r22, Z
    4b4c:	71 81       	ldd	r23, Z+1	; 0x01
    4b4e:	82 81       	ldd	r24, Z+2	; 0x02
    4b50:	93 81       	ldd	r25, Z+3	; 0x03
    4b52:	20 e0       	ldi	r18, 0x00	; 0
    4b54:	30 e0       	ldi	r19, 0x00	; 0
    4b56:	40 e2       	ldi	r20, 0x20	; 32
    4b58:	51 e4       	ldi	r21, 0x41	; 65
    4b5a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4b5e:	dc 01       	movw	r26, r24
    4b60:	cb 01       	movw	r24, r22
    4b62:	8e 01       	movw	r16, r28
    4b64:	09 59       	subi	r16, 0x99	; 153
    4b66:	1f 4f       	sbci	r17, 0xFF	; 255
    4b68:	bc 01       	movw	r22, r24
    4b6a:	cd 01       	movw	r24, r26
    4b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4b70:	dc 01       	movw	r26, r24
    4b72:	cb 01       	movw	r24, r22
    4b74:	f8 01       	movw	r30, r16
    4b76:	91 83       	std	Z+1, r25	; 0x01
    4b78:	80 83       	st	Z, r24
    4b7a:	1f c0       	rjmp	.+62     	; 0x4bba <Segment_init+0x158e>
    4b7c:	fe 01       	movw	r30, r28
    4b7e:	eb 59       	subi	r30, 0x9B	; 155
    4b80:	ff 4f       	sbci	r31, 0xFF	; 255
    4b82:	80 e9       	ldi	r24, 0x90	; 144
    4b84:	91 e0       	ldi	r25, 0x01	; 1
    4b86:	91 83       	std	Z+1, r25	; 0x01
    4b88:	80 83       	st	Z, r24
    4b8a:	fe 01       	movw	r30, r28
    4b8c:	eb 59       	subi	r30, 0x9B	; 155
    4b8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4b90:	80 81       	ld	r24, Z
    4b92:	91 81       	ldd	r25, Z+1	; 0x01
    4b94:	01 97       	sbiw	r24, 0x01	; 1
    4b96:	f1 f7       	brne	.-4      	; 0x4b94 <Segment_init+0x1568>
    4b98:	fe 01       	movw	r30, r28
    4b9a:	eb 59       	subi	r30, 0x9B	; 155
    4b9c:	ff 4f       	sbci	r31, 0xFF	; 255
    4b9e:	91 83       	std	Z+1, r25	; 0x01
    4ba0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4ba2:	de 01       	movw	r26, r28
    4ba4:	a9 59       	subi	r26, 0x99	; 153
    4ba6:	bf 4f       	sbci	r27, 0xFF	; 255
    4ba8:	fe 01       	movw	r30, r28
    4baa:	e9 59       	subi	r30, 0x99	; 153
    4bac:	ff 4f       	sbci	r31, 0xFF	; 255
    4bae:	80 81       	ld	r24, Z
    4bb0:	91 81       	ldd	r25, Z+1	; 0x01
    4bb2:	01 97       	sbiw	r24, 0x01	; 1
    4bb4:	11 96       	adiw	r26, 0x01	; 1
    4bb6:	9c 93       	st	X, r25
    4bb8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4bba:	fe 01       	movw	r30, r28
    4bbc:	e9 59       	subi	r30, 0x99	; 153
    4bbe:	ff 4f       	sbci	r31, 0xFF	; 255
    4bc0:	80 81       	ld	r24, Z
    4bc2:	91 81       	ldd	r25, Z+1	; 0x01
    4bc4:	00 97       	sbiw	r24, 0x00	; 0
    4bc6:	d1 f6       	brne	.-76     	; 0x4b7c <Segment_init+0x1550>
    4bc8:	27 c0       	rjmp	.+78     	; 0x4c18 <Segment_init+0x15ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4bca:	8e 01       	movw	r16, r28
    4bcc:	09 59       	subi	r16, 0x99	; 153
    4bce:	1f 4f       	sbci	r17, 0xFF	; 255
    4bd0:	fe 01       	movw	r30, r28
    4bd2:	e7 59       	subi	r30, 0x97	; 151
    4bd4:	ff 4f       	sbci	r31, 0xFF	; 255
    4bd6:	60 81       	ld	r22, Z
    4bd8:	71 81       	ldd	r23, Z+1	; 0x01
    4bda:	82 81       	ldd	r24, Z+2	; 0x02
    4bdc:	93 81       	ldd	r25, Z+3	; 0x03
    4bde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4be2:	dc 01       	movw	r26, r24
    4be4:	cb 01       	movw	r24, r22
    4be6:	f8 01       	movw	r30, r16
    4be8:	91 83       	std	Z+1, r25	; 0x01
    4bea:	80 83       	st	Z, r24
    4bec:	de 01       	movw	r26, r28
    4bee:	ad 59       	subi	r26, 0x9D	; 157
    4bf0:	bf 4f       	sbci	r27, 0xFF	; 255
    4bf2:	fe 01       	movw	r30, r28
    4bf4:	e9 59       	subi	r30, 0x99	; 153
    4bf6:	ff 4f       	sbci	r31, 0xFF	; 255
    4bf8:	80 81       	ld	r24, Z
    4bfa:	91 81       	ldd	r25, Z+1	; 0x01
    4bfc:	8d 93       	st	X+, r24
    4bfe:	9c 93       	st	X, r25
    4c00:	fe 01       	movw	r30, r28
    4c02:	ed 59       	subi	r30, 0x9D	; 157
    4c04:	ff 4f       	sbci	r31, 0xFF	; 255
    4c06:	80 81       	ld	r24, Z
    4c08:	91 81       	ldd	r25, Z+1	; 0x01
    4c0a:	01 97       	sbiw	r24, 0x01	; 1
    4c0c:	f1 f7       	brne	.-4      	; 0x4c0a <Segment_init+0x15de>
    4c0e:	fe 01       	movw	r30, r28
    4c10:	ed 59       	subi	r30, 0x9D	; 157
    4c12:	ff 4f       	sbci	r31, 0xFF	; 255
    4c14:	91 83       	std	Z+1, r25	; 0x01
    4c16:	80 83       	st	Z, r24
				_delay_ms(2);
				DIO_voidSetPinValue(GPIOB_BASE,PIN5_ID,HIGH);
    4c18:	86 e3       	ldi	r24, 0x36	; 54
    4c1a:	90 e0       	ldi	r25, 0x00	; 0
    4c1c:	65 e0       	ldi	r22, 0x05	; 5
    4c1e:	41 e0       	ldi	r20, 0x01	; 1
    4c20:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    4c24:	fe 01       	movw	r30, r28
    4c26:	e1 5a       	subi	r30, 0xA1	; 161
    4c28:	ff 4f       	sbci	r31, 0xFF	; 255
    4c2a:	80 e0       	ldi	r24, 0x00	; 0
    4c2c:	90 e0       	ldi	r25, 0x00	; 0
    4c2e:	a0 e0       	ldi	r26, 0x00	; 0
    4c30:	b0 e4       	ldi	r27, 0x40	; 64
    4c32:	80 83       	st	Z, r24
    4c34:	91 83       	std	Z+1, r25	; 0x01
    4c36:	a2 83       	std	Z+2, r26	; 0x02
    4c38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4c3a:	8e 01       	movw	r16, r28
    4c3c:	05 5a       	subi	r16, 0xA5	; 165
    4c3e:	1f 4f       	sbci	r17, 0xFF	; 255
    4c40:	fe 01       	movw	r30, r28
    4c42:	e1 5a       	subi	r30, 0xA1	; 161
    4c44:	ff 4f       	sbci	r31, 0xFF	; 255
    4c46:	60 81       	ld	r22, Z
    4c48:	71 81       	ldd	r23, Z+1	; 0x01
    4c4a:	82 81       	ldd	r24, Z+2	; 0x02
    4c4c:	93 81       	ldd	r25, Z+3	; 0x03
    4c4e:	20 e0       	ldi	r18, 0x00	; 0
    4c50:	30 e0       	ldi	r19, 0x00	; 0
    4c52:	4a e7       	ldi	r20, 0x7A	; 122
    4c54:	55 e4       	ldi	r21, 0x45	; 69
    4c56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4c5a:	dc 01       	movw	r26, r24
    4c5c:	cb 01       	movw	r24, r22
    4c5e:	f8 01       	movw	r30, r16
    4c60:	80 83       	st	Z, r24
    4c62:	91 83       	std	Z+1, r25	; 0x01
    4c64:	a2 83       	std	Z+2, r26	; 0x02
    4c66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4c68:	fe 01       	movw	r30, r28
    4c6a:	e5 5a       	subi	r30, 0xA5	; 165
    4c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    4c6e:	60 81       	ld	r22, Z
    4c70:	71 81       	ldd	r23, Z+1	; 0x01
    4c72:	82 81       	ldd	r24, Z+2	; 0x02
    4c74:	93 81       	ldd	r25, Z+3	; 0x03
    4c76:	20 e0       	ldi	r18, 0x00	; 0
    4c78:	30 e0       	ldi	r19, 0x00	; 0
    4c7a:	40 e8       	ldi	r20, 0x80	; 128
    4c7c:	5f e3       	ldi	r21, 0x3F	; 63
    4c7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4c82:	88 23       	and	r24, r24
    4c84:	44 f4       	brge	.+16     	; 0x4c96 <Segment_init+0x166a>
		__ticks = 1;
    4c86:	fe 01       	movw	r30, r28
    4c88:	e7 5a       	subi	r30, 0xA7	; 167
    4c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c8c:	81 e0       	ldi	r24, 0x01	; 1
    4c8e:	90 e0       	ldi	r25, 0x00	; 0
    4c90:	91 83       	std	Z+1, r25	; 0x01
    4c92:	80 83       	st	Z, r24
    4c94:	64 c0       	rjmp	.+200    	; 0x4d5e <Segment_init+0x1732>
	else if (__tmp > 65535)
    4c96:	fe 01       	movw	r30, r28
    4c98:	e5 5a       	subi	r30, 0xA5	; 165
    4c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    4c9c:	60 81       	ld	r22, Z
    4c9e:	71 81       	ldd	r23, Z+1	; 0x01
    4ca0:	82 81       	ldd	r24, Z+2	; 0x02
    4ca2:	93 81       	ldd	r25, Z+3	; 0x03
    4ca4:	20 e0       	ldi	r18, 0x00	; 0
    4ca6:	3f ef       	ldi	r19, 0xFF	; 255
    4ca8:	4f e7       	ldi	r20, 0x7F	; 127
    4caa:	57 e4       	ldi	r21, 0x47	; 71
    4cac:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4cb0:	18 16       	cp	r1, r24
    4cb2:	0c f0       	brlt	.+2      	; 0x4cb6 <Segment_init+0x168a>
    4cb4:	43 c0       	rjmp	.+134    	; 0x4d3c <Segment_init+0x1710>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4cb6:	fe 01       	movw	r30, r28
    4cb8:	e1 5a       	subi	r30, 0xA1	; 161
    4cba:	ff 4f       	sbci	r31, 0xFF	; 255
    4cbc:	60 81       	ld	r22, Z
    4cbe:	71 81       	ldd	r23, Z+1	; 0x01
    4cc0:	82 81       	ldd	r24, Z+2	; 0x02
    4cc2:	93 81       	ldd	r25, Z+3	; 0x03
    4cc4:	20 e0       	ldi	r18, 0x00	; 0
    4cc6:	30 e0       	ldi	r19, 0x00	; 0
    4cc8:	40 e2       	ldi	r20, 0x20	; 32
    4cca:	51 e4       	ldi	r21, 0x41	; 65
    4ccc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4cd0:	dc 01       	movw	r26, r24
    4cd2:	cb 01       	movw	r24, r22
    4cd4:	8e 01       	movw	r16, r28
    4cd6:	07 5a       	subi	r16, 0xA7	; 167
    4cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    4cda:	bc 01       	movw	r22, r24
    4cdc:	cd 01       	movw	r24, r26
    4cde:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ce2:	dc 01       	movw	r26, r24
    4ce4:	cb 01       	movw	r24, r22
    4ce6:	f8 01       	movw	r30, r16
    4ce8:	91 83       	std	Z+1, r25	; 0x01
    4cea:	80 83       	st	Z, r24
    4cec:	1f c0       	rjmp	.+62     	; 0x4d2c <Segment_init+0x1700>
    4cee:	fe 01       	movw	r30, r28
    4cf0:	e9 5a       	subi	r30, 0xA9	; 169
    4cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    4cf4:	80 e9       	ldi	r24, 0x90	; 144
    4cf6:	91 e0       	ldi	r25, 0x01	; 1
    4cf8:	91 83       	std	Z+1, r25	; 0x01
    4cfa:	80 83       	st	Z, r24
    4cfc:	fe 01       	movw	r30, r28
    4cfe:	e9 5a       	subi	r30, 0xA9	; 169
    4d00:	ff 4f       	sbci	r31, 0xFF	; 255
    4d02:	80 81       	ld	r24, Z
    4d04:	91 81       	ldd	r25, Z+1	; 0x01
    4d06:	01 97       	sbiw	r24, 0x01	; 1
    4d08:	f1 f7       	brne	.-4      	; 0x4d06 <Segment_init+0x16da>
    4d0a:	fe 01       	movw	r30, r28
    4d0c:	e9 5a       	subi	r30, 0xA9	; 169
    4d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d10:	91 83       	std	Z+1, r25	; 0x01
    4d12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4d14:	de 01       	movw	r26, r28
    4d16:	a7 5a       	subi	r26, 0xA7	; 167
    4d18:	bf 4f       	sbci	r27, 0xFF	; 255
    4d1a:	fe 01       	movw	r30, r28
    4d1c:	e7 5a       	subi	r30, 0xA7	; 167
    4d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    4d20:	80 81       	ld	r24, Z
    4d22:	91 81       	ldd	r25, Z+1	; 0x01
    4d24:	01 97       	sbiw	r24, 0x01	; 1
    4d26:	11 96       	adiw	r26, 0x01	; 1
    4d28:	9c 93       	st	X, r25
    4d2a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4d2c:	fe 01       	movw	r30, r28
    4d2e:	e7 5a       	subi	r30, 0xA7	; 167
    4d30:	ff 4f       	sbci	r31, 0xFF	; 255
    4d32:	80 81       	ld	r24, Z
    4d34:	91 81       	ldd	r25, Z+1	; 0x01
    4d36:	00 97       	sbiw	r24, 0x00	; 0
    4d38:	d1 f6       	brne	.-76     	; 0x4cee <Segment_init+0x16c2>
    4d3a:	27 c0       	rjmp	.+78     	; 0x4d8a <Segment_init+0x175e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4d3c:	8e 01       	movw	r16, r28
    4d3e:	07 5a       	subi	r16, 0xA7	; 167
    4d40:	1f 4f       	sbci	r17, 0xFF	; 255
    4d42:	fe 01       	movw	r30, r28
    4d44:	e5 5a       	subi	r30, 0xA5	; 165
    4d46:	ff 4f       	sbci	r31, 0xFF	; 255
    4d48:	60 81       	ld	r22, Z
    4d4a:	71 81       	ldd	r23, Z+1	; 0x01
    4d4c:	82 81       	ldd	r24, Z+2	; 0x02
    4d4e:	93 81       	ldd	r25, Z+3	; 0x03
    4d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4d54:	dc 01       	movw	r26, r24
    4d56:	cb 01       	movw	r24, r22
    4d58:	f8 01       	movw	r30, r16
    4d5a:	91 83       	std	Z+1, r25	; 0x01
    4d5c:	80 83       	st	Z, r24
    4d5e:	de 01       	movw	r26, r28
    4d60:	ab 5a       	subi	r26, 0xAB	; 171
    4d62:	bf 4f       	sbci	r27, 0xFF	; 255
    4d64:	fe 01       	movw	r30, r28
    4d66:	e7 5a       	subi	r30, 0xA7	; 167
    4d68:	ff 4f       	sbci	r31, 0xFF	; 255
    4d6a:	80 81       	ld	r24, Z
    4d6c:	91 81       	ldd	r25, Z+1	; 0x01
    4d6e:	8d 93       	st	X+, r24
    4d70:	9c 93       	st	X, r25
    4d72:	fe 01       	movw	r30, r28
    4d74:	eb 5a       	subi	r30, 0xAB	; 171
    4d76:	ff 4f       	sbci	r31, 0xFF	; 255
    4d78:	80 81       	ld	r24, Z
    4d7a:	91 81       	ldd	r25, Z+1	; 0x01
    4d7c:	01 97       	sbiw	r24, 0x01	; 1
    4d7e:	f1 f7       	brne	.-4      	; 0x4d7c <Segment_init+0x1750>
    4d80:	fe 01       	movw	r30, r28
    4d82:	eb 5a       	subi	r30, 0xAB	; 171
    4d84:	ff 4f       	sbci	r31, 0xFF	; 255
    4d86:	91 83       	std	Z+1, r25	; 0x01
    4d88:	80 83       	st	Z, r24
				_delay_ms(2);
				DIO_voidSetPinValue(GPIOB_BASE,PIN6_ID,HIGH);
    4d8a:	86 e3       	ldi	r24, 0x36	; 54
    4d8c:	90 e0       	ldi	r25, 0x00	; 0
    4d8e:	66 e0       	ldi	r22, 0x06	; 6
    4d90:	41 e0       	ldi	r20, 0x01	; 1
    4d92:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    4d96:	31 c3       	rjmp	.+1634   	; 0x53fa <Segment_init+0x1dce>
				break;
	case 5:
				DIO_voidSetPinValue(GPIOA_BASE,PIN3_ID,HIGH);
    4d98:	89 e3       	ldi	r24, 0x39	; 57
    4d9a:	90 e0       	ldi	r25, 0x00	; 0
    4d9c:	63 e0       	ldi	r22, 0x03	; 3
    4d9e:	41 e0       	ldi	r20, 0x01	; 1
    4da0:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    4da4:	fe 01       	movw	r30, r28
    4da6:	ef 5a       	subi	r30, 0xAF	; 175
    4da8:	ff 4f       	sbci	r31, 0xFF	; 255
    4daa:	80 e0       	ldi	r24, 0x00	; 0
    4dac:	90 e0       	ldi	r25, 0x00	; 0
    4dae:	a0 e0       	ldi	r26, 0x00	; 0
    4db0:	b0 e4       	ldi	r27, 0x40	; 64
    4db2:	80 83       	st	Z, r24
    4db4:	91 83       	std	Z+1, r25	; 0x01
    4db6:	a2 83       	std	Z+2, r26	; 0x02
    4db8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4dba:	8e 01       	movw	r16, r28
    4dbc:	03 5b       	subi	r16, 0xB3	; 179
    4dbe:	1f 4f       	sbci	r17, 0xFF	; 255
    4dc0:	fe 01       	movw	r30, r28
    4dc2:	ef 5a       	subi	r30, 0xAF	; 175
    4dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    4dc6:	60 81       	ld	r22, Z
    4dc8:	71 81       	ldd	r23, Z+1	; 0x01
    4dca:	82 81       	ldd	r24, Z+2	; 0x02
    4dcc:	93 81       	ldd	r25, Z+3	; 0x03
    4dce:	20 e0       	ldi	r18, 0x00	; 0
    4dd0:	30 e0       	ldi	r19, 0x00	; 0
    4dd2:	4a e7       	ldi	r20, 0x7A	; 122
    4dd4:	55 e4       	ldi	r21, 0x45	; 69
    4dd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4dda:	dc 01       	movw	r26, r24
    4ddc:	cb 01       	movw	r24, r22
    4dde:	f8 01       	movw	r30, r16
    4de0:	80 83       	st	Z, r24
    4de2:	91 83       	std	Z+1, r25	; 0x01
    4de4:	a2 83       	std	Z+2, r26	; 0x02
    4de6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4de8:	fe 01       	movw	r30, r28
    4dea:	e3 5b       	subi	r30, 0xB3	; 179
    4dec:	ff 4f       	sbci	r31, 0xFF	; 255
    4dee:	60 81       	ld	r22, Z
    4df0:	71 81       	ldd	r23, Z+1	; 0x01
    4df2:	82 81       	ldd	r24, Z+2	; 0x02
    4df4:	93 81       	ldd	r25, Z+3	; 0x03
    4df6:	20 e0       	ldi	r18, 0x00	; 0
    4df8:	30 e0       	ldi	r19, 0x00	; 0
    4dfa:	40 e8       	ldi	r20, 0x80	; 128
    4dfc:	5f e3       	ldi	r21, 0x3F	; 63
    4dfe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4e02:	88 23       	and	r24, r24
    4e04:	44 f4       	brge	.+16     	; 0x4e16 <Segment_init+0x17ea>
		__ticks = 1;
    4e06:	fe 01       	movw	r30, r28
    4e08:	e5 5b       	subi	r30, 0xB5	; 181
    4e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e0c:	81 e0       	ldi	r24, 0x01	; 1
    4e0e:	90 e0       	ldi	r25, 0x00	; 0
    4e10:	91 83       	std	Z+1, r25	; 0x01
    4e12:	80 83       	st	Z, r24
    4e14:	64 c0       	rjmp	.+200    	; 0x4ede <Segment_init+0x18b2>
	else if (__tmp > 65535)
    4e16:	fe 01       	movw	r30, r28
    4e18:	e3 5b       	subi	r30, 0xB3	; 179
    4e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e1c:	60 81       	ld	r22, Z
    4e1e:	71 81       	ldd	r23, Z+1	; 0x01
    4e20:	82 81       	ldd	r24, Z+2	; 0x02
    4e22:	93 81       	ldd	r25, Z+3	; 0x03
    4e24:	20 e0       	ldi	r18, 0x00	; 0
    4e26:	3f ef       	ldi	r19, 0xFF	; 255
    4e28:	4f e7       	ldi	r20, 0x7F	; 127
    4e2a:	57 e4       	ldi	r21, 0x47	; 71
    4e2c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4e30:	18 16       	cp	r1, r24
    4e32:	0c f0       	brlt	.+2      	; 0x4e36 <Segment_init+0x180a>
    4e34:	43 c0       	rjmp	.+134    	; 0x4ebc <Segment_init+0x1890>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4e36:	fe 01       	movw	r30, r28
    4e38:	ef 5a       	subi	r30, 0xAF	; 175
    4e3a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e3c:	60 81       	ld	r22, Z
    4e3e:	71 81       	ldd	r23, Z+1	; 0x01
    4e40:	82 81       	ldd	r24, Z+2	; 0x02
    4e42:	93 81       	ldd	r25, Z+3	; 0x03
    4e44:	20 e0       	ldi	r18, 0x00	; 0
    4e46:	30 e0       	ldi	r19, 0x00	; 0
    4e48:	40 e2       	ldi	r20, 0x20	; 32
    4e4a:	51 e4       	ldi	r21, 0x41	; 65
    4e4c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4e50:	dc 01       	movw	r26, r24
    4e52:	cb 01       	movw	r24, r22
    4e54:	8e 01       	movw	r16, r28
    4e56:	05 5b       	subi	r16, 0xB5	; 181
    4e58:	1f 4f       	sbci	r17, 0xFF	; 255
    4e5a:	bc 01       	movw	r22, r24
    4e5c:	cd 01       	movw	r24, r26
    4e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4e62:	dc 01       	movw	r26, r24
    4e64:	cb 01       	movw	r24, r22
    4e66:	f8 01       	movw	r30, r16
    4e68:	91 83       	std	Z+1, r25	; 0x01
    4e6a:	80 83       	st	Z, r24
    4e6c:	1f c0       	rjmp	.+62     	; 0x4eac <Segment_init+0x1880>
    4e6e:	fe 01       	movw	r30, r28
    4e70:	e7 5b       	subi	r30, 0xB7	; 183
    4e72:	ff 4f       	sbci	r31, 0xFF	; 255
    4e74:	80 e9       	ldi	r24, 0x90	; 144
    4e76:	91 e0       	ldi	r25, 0x01	; 1
    4e78:	91 83       	std	Z+1, r25	; 0x01
    4e7a:	80 83       	st	Z, r24
    4e7c:	fe 01       	movw	r30, r28
    4e7e:	e7 5b       	subi	r30, 0xB7	; 183
    4e80:	ff 4f       	sbci	r31, 0xFF	; 255
    4e82:	80 81       	ld	r24, Z
    4e84:	91 81       	ldd	r25, Z+1	; 0x01
    4e86:	01 97       	sbiw	r24, 0x01	; 1
    4e88:	f1 f7       	brne	.-4      	; 0x4e86 <Segment_init+0x185a>
    4e8a:	fe 01       	movw	r30, r28
    4e8c:	e7 5b       	subi	r30, 0xB7	; 183
    4e8e:	ff 4f       	sbci	r31, 0xFF	; 255
    4e90:	91 83       	std	Z+1, r25	; 0x01
    4e92:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4e94:	de 01       	movw	r26, r28
    4e96:	a5 5b       	subi	r26, 0xB5	; 181
    4e98:	bf 4f       	sbci	r27, 0xFF	; 255
    4e9a:	fe 01       	movw	r30, r28
    4e9c:	e5 5b       	subi	r30, 0xB5	; 181
    4e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    4ea0:	80 81       	ld	r24, Z
    4ea2:	91 81       	ldd	r25, Z+1	; 0x01
    4ea4:	01 97       	sbiw	r24, 0x01	; 1
    4ea6:	11 96       	adiw	r26, 0x01	; 1
    4ea8:	9c 93       	st	X, r25
    4eaa:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4eac:	fe 01       	movw	r30, r28
    4eae:	e5 5b       	subi	r30, 0xB5	; 181
    4eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    4eb2:	80 81       	ld	r24, Z
    4eb4:	91 81       	ldd	r25, Z+1	; 0x01
    4eb6:	00 97       	sbiw	r24, 0x00	; 0
    4eb8:	d1 f6       	brne	.-76     	; 0x4e6e <Segment_init+0x1842>
    4eba:	27 c0       	rjmp	.+78     	; 0x4f0a <Segment_init+0x18de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ebc:	8e 01       	movw	r16, r28
    4ebe:	05 5b       	subi	r16, 0xB5	; 181
    4ec0:	1f 4f       	sbci	r17, 0xFF	; 255
    4ec2:	fe 01       	movw	r30, r28
    4ec4:	e3 5b       	subi	r30, 0xB3	; 179
    4ec6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ec8:	60 81       	ld	r22, Z
    4eca:	71 81       	ldd	r23, Z+1	; 0x01
    4ecc:	82 81       	ldd	r24, Z+2	; 0x02
    4ece:	93 81       	ldd	r25, Z+3	; 0x03
    4ed0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4ed4:	dc 01       	movw	r26, r24
    4ed6:	cb 01       	movw	r24, r22
    4ed8:	f8 01       	movw	r30, r16
    4eda:	91 83       	std	Z+1, r25	; 0x01
    4edc:	80 83       	st	Z, r24
    4ede:	de 01       	movw	r26, r28
    4ee0:	a9 5b       	subi	r26, 0xB9	; 185
    4ee2:	bf 4f       	sbci	r27, 0xFF	; 255
    4ee4:	fe 01       	movw	r30, r28
    4ee6:	e5 5b       	subi	r30, 0xB5	; 181
    4ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    4eea:	80 81       	ld	r24, Z
    4eec:	91 81       	ldd	r25, Z+1	; 0x01
    4eee:	8d 93       	st	X+, r24
    4ef0:	9c 93       	st	X, r25
    4ef2:	fe 01       	movw	r30, r28
    4ef4:	e9 5b       	subi	r30, 0xB9	; 185
    4ef6:	ff 4f       	sbci	r31, 0xFF	; 255
    4ef8:	80 81       	ld	r24, Z
    4efa:	91 81       	ldd	r25, Z+1	; 0x01
    4efc:	01 97       	sbiw	r24, 0x01	; 1
    4efe:	f1 f7       	brne	.-4      	; 0x4efc <Segment_init+0x18d0>
    4f00:	fe 01       	movw	r30, r28
    4f02:	e9 5b       	subi	r30, 0xB9	; 185
    4f04:	ff 4f       	sbci	r31, 0xFF	; 255
    4f06:	91 83       	std	Z+1, r25	; 0x01
    4f08:	80 83       	st	Z, r24
				_delay_ms(2);
				DIO_voidSetPinValue(GPIOA_BASE,PIN2_ID,HIGH);
    4f0a:	89 e3       	ldi	r24, 0x39	; 57
    4f0c:	90 e0       	ldi	r25, 0x00	; 0
    4f0e:	62 e0       	ldi	r22, 0x02	; 2
    4f10:	41 e0       	ldi	r20, 0x01	; 1
    4f12:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    4f16:	fe 01       	movw	r30, r28
    4f18:	ed 5b       	subi	r30, 0xBD	; 189
    4f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    4f1c:	80 e0       	ldi	r24, 0x00	; 0
    4f1e:	90 e0       	ldi	r25, 0x00	; 0
    4f20:	a0 e0       	ldi	r26, 0x00	; 0
    4f22:	b0 e4       	ldi	r27, 0x40	; 64
    4f24:	80 83       	st	Z, r24
    4f26:	91 83       	std	Z+1, r25	; 0x01
    4f28:	a2 83       	std	Z+2, r26	; 0x02
    4f2a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4f2c:	8e 01       	movw	r16, r28
    4f2e:	01 5c       	subi	r16, 0xC1	; 193
    4f30:	1f 4f       	sbci	r17, 0xFF	; 255
    4f32:	fe 01       	movw	r30, r28
    4f34:	ed 5b       	subi	r30, 0xBD	; 189
    4f36:	ff 4f       	sbci	r31, 0xFF	; 255
    4f38:	60 81       	ld	r22, Z
    4f3a:	71 81       	ldd	r23, Z+1	; 0x01
    4f3c:	82 81       	ldd	r24, Z+2	; 0x02
    4f3e:	93 81       	ldd	r25, Z+3	; 0x03
    4f40:	20 e0       	ldi	r18, 0x00	; 0
    4f42:	30 e0       	ldi	r19, 0x00	; 0
    4f44:	4a e7       	ldi	r20, 0x7A	; 122
    4f46:	55 e4       	ldi	r21, 0x45	; 69
    4f48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4f4c:	dc 01       	movw	r26, r24
    4f4e:	cb 01       	movw	r24, r22
    4f50:	f8 01       	movw	r30, r16
    4f52:	80 83       	st	Z, r24
    4f54:	91 83       	std	Z+1, r25	; 0x01
    4f56:	a2 83       	std	Z+2, r26	; 0x02
    4f58:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4f5a:	fe 01       	movw	r30, r28
    4f5c:	ff 96       	adiw	r30, 0x3f	; 63
    4f5e:	60 81       	ld	r22, Z
    4f60:	71 81       	ldd	r23, Z+1	; 0x01
    4f62:	82 81       	ldd	r24, Z+2	; 0x02
    4f64:	93 81       	ldd	r25, Z+3	; 0x03
    4f66:	20 e0       	ldi	r18, 0x00	; 0
    4f68:	30 e0       	ldi	r19, 0x00	; 0
    4f6a:	40 e8       	ldi	r20, 0x80	; 128
    4f6c:	5f e3       	ldi	r21, 0x3F	; 63
    4f6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4f72:	88 23       	and	r24, r24
    4f74:	2c f4       	brge	.+10     	; 0x4f80 <Segment_init+0x1954>
		__ticks = 1;
    4f76:	81 e0       	ldi	r24, 0x01	; 1
    4f78:	90 e0       	ldi	r25, 0x00	; 0
    4f7a:	9e af       	std	Y+62, r25	; 0x3e
    4f7c:	8d af       	std	Y+61, r24	; 0x3d
    4f7e:	46 c0       	rjmp	.+140    	; 0x500c <Segment_init+0x19e0>
	else if (__tmp > 65535)
    4f80:	fe 01       	movw	r30, r28
    4f82:	ff 96       	adiw	r30, 0x3f	; 63
    4f84:	60 81       	ld	r22, Z
    4f86:	71 81       	ldd	r23, Z+1	; 0x01
    4f88:	82 81       	ldd	r24, Z+2	; 0x02
    4f8a:	93 81       	ldd	r25, Z+3	; 0x03
    4f8c:	20 e0       	ldi	r18, 0x00	; 0
    4f8e:	3f ef       	ldi	r19, 0xFF	; 255
    4f90:	4f e7       	ldi	r20, 0x7F	; 127
    4f92:	57 e4       	ldi	r21, 0x47	; 71
    4f94:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4f98:	18 16       	cp	r1, r24
    4f9a:	64 f5       	brge	.+88     	; 0x4ff4 <Segment_init+0x19c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4f9c:	fe 01       	movw	r30, r28
    4f9e:	ed 5b       	subi	r30, 0xBD	; 189
    4fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    4fa2:	60 81       	ld	r22, Z
    4fa4:	71 81       	ldd	r23, Z+1	; 0x01
    4fa6:	82 81       	ldd	r24, Z+2	; 0x02
    4fa8:	93 81       	ldd	r25, Z+3	; 0x03
    4faa:	20 e0       	ldi	r18, 0x00	; 0
    4fac:	30 e0       	ldi	r19, 0x00	; 0
    4fae:	40 e2       	ldi	r20, 0x20	; 32
    4fb0:	51 e4       	ldi	r21, 0x41	; 65
    4fb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4fb6:	dc 01       	movw	r26, r24
    4fb8:	cb 01       	movw	r24, r22
    4fba:	bc 01       	movw	r22, r24
    4fbc:	cd 01       	movw	r24, r26
    4fbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4fc2:	dc 01       	movw	r26, r24
    4fc4:	cb 01       	movw	r24, r22
    4fc6:	9e af       	std	Y+62, r25	; 0x3e
    4fc8:	8d af       	std	Y+61, r24	; 0x3d
    4fca:	0f c0       	rjmp	.+30     	; 0x4fea <Segment_init+0x19be>
    4fcc:	80 e9       	ldi	r24, 0x90	; 144
    4fce:	91 e0       	ldi	r25, 0x01	; 1
    4fd0:	9c af       	std	Y+60, r25	; 0x3c
    4fd2:	8b af       	std	Y+59, r24	; 0x3b
    4fd4:	8b ad       	ldd	r24, Y+59	; 0x3b
    4fd6:	9c ad       	ldd	r25, Y+60	; 0x3c
    4fd8:	01 97       	sbiw	r24, 0x01	; 1
    4fda:	f1 f7       	brne	.-4      	; 0x4fd8 <Segment_init+0x19ac>
    4fdc:	9c af       	std	Y+60, r25	; 0x3c
    4fde:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4fe0:	8d ad       	ldd	r24, Y+61	; 0x3d
    4fe2:	9e ad       	ldd	r25, Y+62	; 0x3e
    4fe4:	01 97       	sbiw	r24, 0x01	; 1
    4fe6:	9e af       	std	Y+62, r25	; 0x3e
    4fe8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4fea:	8d ad       	ldd	r24, Y+61	; 0x3d
    4fec:	9e ad       	ldd	r25, Y+62	; 0x3e
    4fee:	00 97       	sbiw	r24, 0x00	; 0
    4ff0:	69 f7       	brne	.-38     	; 0x4fcc <Segment_init+0x19a0>
    4ff2:	16 c0       	rjmp	.+44     	; 0x5020 <Segment_init+0x19f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4ff4:	fe 01       	movw	r30, r28
    4ff6:	ff 96       	adiw	r30, 0x3f	; 63
    4ff8:	60 81       	ld	r22, Z
    4ffa:	71 81       	ldd	r23, Z+1	; 0x01
    4ffc:	82 81       	ldd	r24, Z+2	; 0x02
    4ffe:	93 81       	ldd	r25, Z+3	; 0x03
    5000:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5004:	dc 01       	movw	r26, r24
    5006:	cb 01       	movw	r24, r22
    5008:	9e af       	std	Y+62, r25	; 0x3e
    500a:	8d af       	std	Y+61, r24	; 0x3d
    500c:	8d ad       	ldd	r24, Y+61	; 0x3d
    500e:	9e ad       	ldd	r25, Y+62	; 0x3e
    5010:	9a af       	std	Y+58, r25	; 0x3a
    5012:	89 af       	std	Y+57, r24	; 0x39
    5014:	89 ad       	ldd	r24, Y+57	; 0x39
    5016:	9a ad       	ldd	r25, Y+58	; 0x3a
    5018:	01 97       	sbiw	r24, 0x01	; 1
    501a:	f1 f7       	brne	.-4      	; 0x5018 <Segment_init+0x19ec>
    501c:	9a af       	std	Y+58, r25	; 0x3a
    501e:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(2);
				DIO_voidSetPinValue(GPIOB_BASE,PIN5_ID,LOW);
    5020:	86 e3       	ldi	r24, 0x36	; 54
    5022:	90 e0       	ldi	r25, 0x00	; 0
    5024:	65 e0       	ldi	r22, 0x05	; 5
    5026:	40 e0       	ldi	r20, 0x00	; 0
    5028:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    502c:	80 e0       	ldi	r24, 0x00	; 0
    502e:	90 e0       	ldi	r25, 0x00	; 0
    5030:	a0 e0       	ldi	r26, 0x00	; 0
    5032:	b0 e4       	ldi	r27, 0x40	; 64
    5034:	8d ab       	std	Y+53, r24	; 0x35
    5036:	9e ab       	std	Y+54, r25	; 0x36
    5038:	af ab       	std	Y+55, r26	; 0x37
    503a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    503c:	6d a9       	ldd	r22, Y+53	; 0x35
    503e:	7e a9       	ldd	r23, Y+54	; 0x36
    5040:	8f a9       	ldd	r24, Y+55	; 0x37
    5042:	98 ad       	ldd	r25, Y+56	; 0x38
    5044:	20 e0       	ldi	r18, 0x00	; 0
    5046:	30 e0       	ldi	r19, 0x00	; 0
    5048:	4a e7       	ldi	r20, 0x7A	; 122
    504a:	55 e4       	ldi	r21, 0x45	; 69
    504c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5050:	dc 01       	movw	r26, r24
    5052:	cb 01       	movw	r24, r22
    5054:	89 ab       	std	Y+49, r24	; 0x31
    5056:	9a ab       	std	Y+50, r25	; 0x32
    5058:	ab ab       	std	Y+51, r26	; 0x33
    505a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    505c:	69 a9       	ldd	r22, Y+49	; 0x31
    505e:	7a a9       	ldd	r23, Y+50	; 0x32
    5060:	8b a9       	ldd	r24, Y+51	; 0x33
    5062:	9c a9       	ldd	r25, Y+52	; 0x34
    5064:	20 e0       	ldi	r18, 0x00	; 0
    5066:	30 e0       	ldi	r19, 0x00	; 0
    5068:	40 e8       	ldi	r20, 0x80	; 128
    506a:	5f e3       	ldi	r21, 0x3F	; 63
    506c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5070:	88 23       	and	r24, r24
    5072:	2c f4       	brge	.+10     	; 0x507e <Segment_init+0x1a52>
		__ticks = 1;
    5074:	81 e0       	ldi	r24, 0x01	; 1
    5076:	90 e0       	ldi	r25, 0x00	; 0
    5078:	98 ab       	std	Y+48, r25	; 0x30
    507a:	8f a7       	std	Y+47, r24	; 0x2f
    507c:	3f c0       	rjmp	.+126    	; 0x50fc <Segment_init+0x1ad0>
	else if (__tmp > 65535)
    507e:	69 a9       	ldd	r22, Y+49	; 0x31
    5080:	7a a9       	ldd	r23, Y+50	; 0x32
    5082:	8b a9       	ldd	r24, Y+51	; 0x33
    5084:	9c a9       	ldd	r25, Y+52	; 0x34
    5086:	20 e0       	ldi	r18, 0x00	; 0
    5088:	3f ef       	ldi	r19, 0xFF	; 255
    508a:	4f e7       	ldi	r20, 0x7F	; 127
    508c:	57 e4       	ldi	r21, 0x47	; 71
    508e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5092:	18 16       	cp	r1, r24
    5094:	4c f5       	brge	.+82     	; 0x50e8 <Segment_init+0x1abc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5096:	6d a9       	ldd	r22, Y+53	; 0x35
    5098:	7e a9       	ldd	r23, Y+54	; 0x36
    509a:	8f a9       	ldd	r24, Y+55	; 0x37
    509c:	98 ad       	ldd	r25, Y+56	; 0x38
    509e:	20 e0       	ldi	r18, 0x00	; 0
    50a0:	30 e0       	ldi	r19, 0x00	; 0
    50a2:	40 e2       	ldi	r20, 0x20	; 32
    50a4:	51 e4       	ldi	r21, 0x41	; 65
    50a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    50aa:	dc 01       	movw	r26, r24
    50ac:	cb 01       	movw	r24, r22
    50ae:	bc 01       	movw	r22, r24
    50b0:	cd 01       	movw	r24, r26
    50b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50b6:	dc 01       	movw	r26, r24
    50b8:	cb 01       	movw	r24, r22
    50ba:	98 ab       	std	Y+48, r25	; 0x30
    50bc:	8f a7       	std	Y+47, r24	; 0x2f
    50be:	0f c0       	rjmp	.+30     	; 0x50de <Segment_init+0x1ab2>
    50c0:	80 e9       	ldi	r24, 0x90	; 144
    50c2:	91 e0       	ldi	r25, 0x01	; 1
    50c4:	9e a7       	std	Y+46, r25	; 0x2e
    50c6:	8d a7       	std	Y+45, r24	; 0x2d
    50c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    50ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    50cc:	01 97       	sbiw	r24, 0x01	; 1
    50ce:	f1 f7       	brne	.-4      	; 0x50cc <Segment_init+0x1aa0>
    50d0:	9e a7       	std	Y+46, r25	; 0x2e
    50d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    50d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    50d6:	98 a9       	ldd	r25, Y+48	; 0x30
    50d8:	01 97       	sbiw	r24, 0x01	; 1
    50da:	98 ab       	std	Y+48, r25	; 0x30
    50dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    50de:	8f a5       	ldd	r24, Y+47	; 0x2f
    50e0:	98 a9       	ldd	r25, Y+48	; 0x30
    50e2:	00 97       	sbiw	r24, 0x00	; 0
    50e4:	69 f7       	brne	.-38     	; 0x50c0 <Segment_init+0x1a94>
    50e6:	14 c0       	rjmp	.+40     	; 0x5110 <Segment_init+0x1ae4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    50e8:	69 a9       	ldd	r22, Y+49	; 0x31
    50ea:	7a a9       	ldd	r23, Y+50	; 0x32
    50ec:	8b a9       	ldd	r24, Y+51	; 0x33
    50ee:	9c a9       	ldd	r25, Y+52	; 0x34
    50f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    50f4:	dc 01       	movw	r26, r24
    50f6:	cb 01       	movw	r24, r22
    50f8:	98 ab       	std	Y+48, r25	; 0x30
    50fa:	8f a7       	std	Y+47, r24	; 0x2f
    50fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    50fe:	98 a9       	ldd	r25, Y+48	; 0x30
    5100:	9c a7       	std	Y+44, r25	; 0x2c
    5102:	8b a7       	std	Y+43, r24	; 0x2b
    5104:	8b a5       	ldd	r24, Y+43	; 0x2b
    5106:	9c a5       	ldd	r25, Y+44	; 0x2c
    5108:	01 97       	sbiw	r24, 0x01	; 1
    510a:	f1 f7       	brne	.-4      	; 0x5108 <Segment_init+0x1adc>
    510c:	9c a7       	std	Y+44, r25	; 0x2c
    510e:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(2);
				DIO_voidSetPinValue(GPIOB_BASE,PIN6_ID,HIGH);
    5110:	86 e3       	ldi	r24, 0x36	; 54
    5112:	90 e0       	ldi	r25, 0x00	; 0
    5114:	66 e0       	ldi	r22, 0x06	; 6
    5116:	41 e0       	ldi	r20, 0x01	; 1
    5118:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    511c:	6e c1       	rjmp	.+732    	; 0x53fa <Segment_init+0x1dce>
				break;
	case 6:
				DIO_voidSetPinValue(GPIOA_BASE,PIN3_ID,HIGH);
    511e:	89 e3       	ldi	r24, 0x39	; 57
    5120:	90 e0       	ldi	r25, 0x00	; 0
    5122:	63 e0       	ldi	r22, 0x03	; 3
    5124:	41 e0       	ldi	r20, 0x01	; 1
    5126:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    512a:	80 e0       	ldi	r24, 0x00	; 0
    512c:	90 e0       	ldi	r25, 0x00	; 0
    512e:	a0 e0       	ldi	r26, 0x00	; 0
    5130:	b0 e4       	ldi	r27, 0x40	; 64
    5132:	8f a3       	std	Y+39, r24	; 0x27
    5134:	98 a7       	std	Y+40, r25	; 0x28
    5136:	a9 a7       	std	Y+41, r26	; 0x29
    5138:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    513a:	6f a1       	ldd	r22, Y+39	; 0x27
    513c:	78 a5       	ldd	r23, Y+40	; 0x28
    513e:	89 a5       	ldd	r24, Y+41	; 0x29
    5140:	9a a5       	ldd	r25, Y+42	; 0x2a
    5142:	20 e0       	ldi	r18, 0x00	; 0
    5144:	30 e0       	ldi	r19, 0x00	; 0
    5146:	4a e7       	ldi	r20, 0x7A	; 122
    5148:	55 e4       	ldi	r21, 0x45	; 69
    514a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    514e:	dc 01       	movw	r26, r24
    5150:	cb 01       	movw	r24, r22
    5152:	8b a3       	std	Y+35, r24	; 0x23
    5154:	9c a3       	std	Y+36, r25	; 0x24
    5156:	ad a3       	std	Y+37, r26	; 0x25
    5158:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    515a:	6b a1       	ldd	r22, Y+35	; 0x23
    515c:	7c a1       	ldd	r23, Y+36	; 0x24
    515e:	8d a1       	ldd	r24, Y+37	; 0x25
    5160:	9e a1       	ldd	r25, Y+38	; 0x26
    5162:	20 e0       	ldi	r18, 0x00	; 0
    5164:	30 e0       	ldi	r19, 0x00	; 0
    5166:	40 e8       	ldi	r20, 0x80	; 128
    5168:	5f e3       	ldi	r21, 0x3F	; 63
    516a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    516e:	88 23       	and	r24, r24
    5170:	2c f4       	brge	.+10     	; 0x517c <Segment_init+0x1b50>
		__ticks = 1;
    5172:	81 e0       	ldi	r24, 0x01	; 1
    5174:	90 e0       	ldi	r25, 0x00	; 0
    5176:	9a a3       	std	Y+34, r25	; 0x22
    5178:	89 a3       	std	Y+33, r24	; 0x21
    517a:	3f c0       	rjmp	.+126    	; 0x51fa <Segment_init+0x1bce>
	else if (__tmp > 65535)
    517c:	6b a1       	ldd	r22, Y+35	; 0x23
    517e:	7c a1       	ldd	r23, Y+36	; 0x24
    5180:	8d a1       	ldd	r24, Y+37	; 0x25
    5182:	9e a1       	ldd	r25, Y+38	; 0x26
    5184:	20 e0       	ldi	r18, 0x00	; 0
    5186:	3f ef       	ldi	r19, 0xFF	; 255
    5188:	4f e7       	ldi	r20, 0x7F	; 127
    518a:	57 e4       	ldi	r21, 0x47	; 71
    518c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5190:	18 16       	cp	r1, r24
    5192:	4c f5       	brge	.+82     	; 0x51e6 <Segment_init+0x1bba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5194:	6f a1       	ldd	r22, Y+39	; 0x27
    5196:	78 a5       	ldd	r23, Y+40	; 0x28
    5198:	89 a5       	ldd	r24, Y+41	; 0x29
    519a:	9a a5       	ldd	r25, Y+42	; 0x2a
    519c:	20 e0       	ldi	r18, 0x00	; 0
    519e:	30 e0       	ldi	r19, 0x00	; 0
    51a0:	40 e2       	ldi	r20, 0x20	; 32
    51a2:	51 e4       	ldi	r21, 0x41	; 65
    51a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    51a8:	dc 01       	movw	r26, r24
    51aa:	cb 01       	movw	r24, r22
    51ac:	bc 01       	movw	r22, r24
    51ae:	cd 01       	movw	r24, r26
    51b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51b4:	dc 01       	movw	r26, r24
    51b6:	cb 01       	movw	r24, r22
    51b8:	9a a3       	std	Y+34, r25	; 0x22
    51ba:	89 a3       	std	Y+33, r24	; 0x21
    51bc:	0f c0       	rjmp	.+30     	; 0x51dc <Segment_init+0x1bb0>
    51be:	80 e9       	ldi	r24, 0x90	; 144
    51c0:	91 e0       	ldi	r25, 0x01	; 1
    51c2:	98 a3       	std	Y+32, r25	; 0x20
    51c4:	8f 8f       	std	Y+31, r24	; 0x1f
    51c6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    51c8:	98 a1       	ldd	r25, Y+32	; 0x20
    51ca:	01 97       	sbiw	r24, 0x01	; 1
    51cc:	f1 f7       	brne	.-4      	; 0x51ca <Segment_init+0x1b9e>
    51ce:	98 a3       	std	Y+32, r25	; 0x20
    51d0:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    51d2:	89 a1       	ldd	r24, Y+33	; 0x21
    51d4:	9a a1       	ldd	r25, Y+34	; 0x22
    51d6:	01 97       	sbiw	r24, 0x01	; 1
    51d8:	9a a3       	std	Y+34, r25	; 0x22
    51da:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    51dc:	89 a1       	ldd	r24, Y+33	; 0x21
    51de:	9a a1       	ldd	r25, Y+34	; 0x22
    51e0:	00 97       	sbiw	r24, 0x00	; 0
    51e2:	69 f7       	brne	.-38     	; 0x51be <Segment_init+0x1b92>
    51e4:	14 c0       	rjmp	.+40     	; 0x520e <Segment_init+0x1be2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    51e6:	6b a1       	ldd	r22, Y+35	; 0x23
    51e8:	7c a1       	ldd	r23, Y+36	; 0x24
    51ea:	8d a1       	ldd	r24, Y+37	; 0x25
    51ec:	9e a1       	ldd	r25, Y+38	; 0x26
    51ee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    51f2:	dc 01       	movw	r26, r24
    51f4:	cb 01       	movw	r24, r22
    51f6:	9a a3       	std	Y+34, r25	; 0x22
    51f8:	89 a3       	std	Y+33, r24	; 0x21
    51fa:	89 a1       	ldd	r24, Y+33	; 0x21
    51fc:	9a a1       	ldd	r25, Y+34	; 0x22
    51fe:	9e 8f       	std	Y+30, r25	; 0x1e
    5200:	8d 8f       	std	Y+29, r24	; 0x1d
    5202:	8d 8d       	ldd	r24, Y+29	; 0x1d
    5204:	9e 8d       	ldd	r25, Y+30	; 0x1e
    5206:	01 97       	sbiw	r24, 0x01	; 1
    5208:	f1 f7       	brne	.-4      	; 0x5206 <Segment_init+0x1bda>
    520a:	9e 8f       	std	Y+30, r25	; 0x1e
    520c:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(2);
				DIO_voidSetPinValue(GPIOA_BASE,PIN2_ID,HIGH);
    520e:	89 e3       	ldi	r24, 0x39	; 57
    5210:	90 e0       	ldi	r25, 0x00	; 0
    5212:	62 e0       	ldi	r22, 0x02	; 2
    5214:	41 e0       	ldi	r20, 0x01	; 1
    5216:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    521a:	80 e0       	ldi	r24, 0x00	; 0
    521c:	90 e0       	ldi	r25, 0x00	; 0
    521e:	a0 e0       	ldi	r26, 0x00	; 0
    5220:	b0 e4       	ldi	r27, 0x40	; 64
    5222:	89 8f       	std	Y+25, r24	; 0x19
    5224:	9a 8f       	std	Y+26, r25	; 0x1a
    5226:	ab 8f       	std	Y+27, r26	; 0x1b
    5228:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    522a:	69 8d       	ldd	r22, Y+25	; 0x19
    522c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    522e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    5230:	9c 8d       	ldd	r25, Y+28	; 0x1c
    5232:	20 e0       	ldi	r18, 0x00	; 0
    5234:	30 e0       	ldi	r19, 0x00	; 0
    5236:	4a e7       	ldi	r20, 0x7A	; 122
    5238:	55 e4       	ldi	r21, 0x45	; 69
    523a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    523e:	dc 01       	movw	r26, r24
    5240:	cb 01       	movw	r24, r22
    5242:	8d 8b       	std	Y+21, r24	; 0x15
    5244:	9e 8b       	std	Y+22, r25	; 0x16
    5246:	af 8b       	std	Y+23, r26	; 0x17
    5248:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    524a:	6d 89       	ldd	r22, Y+21	; 0x15
    524c:	7e 89       	ldd	r23, Y+22	; 0x16
    524e:	8f 89       	ldd	r24, Y+23	; 0x17
    5250:	98 8d       	ldd	r25, Y+24	; 0x18
    5252:	20 e0       	ldi	r18, 0x00	; 0
    5254:	30 e0       	ldi	r19, 0x00	; 0
    5256:	40 e8       	ldi	r20, 0x80	; 128
    5258:	5f e3       	ldi	r21, 0x3F	; 63
    525a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    525e:	88 23       	and	r24, r24
    5260:	2c f4       	brge	.+10     	; 0x526c <Segment_init+0x1c40>
		__ticks = 1;
    5262:	81 e0       	ldi	r24, 0x01	; 1
    5264:	90 e0       	ldi	r25, 0x00	; 0
    5266:	9c 8b       	std	Y+20, r25	; 0x14
    5268:	8b 8b       	std	Y+19, r24	; 0x13
    526a:	3f c0       	rjmp	.+126    	; 0x52ea <Segment_init+0x1cbe>
	else if (__tmp > 65535)
    526c:	6d 89       	ldd	r22, Y+21	; 0x15
    526e:	7e 89       	ldd	r23, Y+22	; 0x16
    5270:	8f 89       	ldd	r24, Y+23	; 0x17
    5272:	98 8d       	ldd	r25, Y+24	; 0x18
    5274:	20 e0       	ldi	r18, 0x00	; 0
    5276:	3f ef       	ldi	r19, 0xFF	; 255
    5278:	4f e7       	ldi	r20, 0x7F	; 127
    527a:	57 e4       	ldi	r21, 0x47	; 71
    527c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5280:	18 16       	cp	r1, r24
    5282:	4c f5       	brge	.+82     	; 0x52d6 <Segment_init+0x1caa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5284:	69 8d       	ldd	r22, Y+25	; 0x19
    5286:	7a 8d       	ldd	r23, Y+26	; 0x1a
    5288:	8b 8d       	ldd	r24, Y+27	; 0x1b
    528a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    528c:	20 e0       	ldi	r18, 0x00	; 0
    528e:	30 e0       	ldi	r19, 0x00	; 0
    5290:	40 e2       	ldi	r20, 0x20	; 32
    5292:	51 e4       	ldi	r21, 0x41	; 65
    5294:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5298:	dc 01       	movw	r26, r24
    529a:	cb 01       	movw	r24, r22
    529c:	bc 01       	movw	r22, r24
    529e:	cd 01       	movw	r24, r26
    52a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52a4:	dc 01       	movw	r26, r24
    52a6:	cb 01       	movw	r24, r22
    52a8:	9c 8b       	std	Y+20, r25	; 0x14
    52aa:	8b 8b       	std	Y+19, r24	; 0x13
    52ac:	0f c0       	rjmp	.+30     	; 0x52cc <Segment_init+0x1ca0>
    52ae:	80 e9       	ldi	r24, 0x90	; 144
    52b0:	91 e0       	ldi	r25, 0x01	; 1
    52b2:	9a 8b       	std	Y+18, r25	; 0x12
    52b4:	89 8b       	std	Y+17, r24	; 0x11
    52b6:	89 89       	ldd	r24, Y+17	; 0x11
    52b8:	9a 89       	ldd	r25, Y+18	; 0x12
    52ba:	01 97       	sbiw	r24, 0x01	; 1
    52bc:	f1 f7       	brne	.-4      	; 0x52ba <Segment_init+0x1c8e>
    52be:	9a 8b       	std	Y+18, r25	; 0x12
    52c0:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    52c2:	8b 89       	ldd	r24, Y+19	; 0x13
    52c4:	9c 89       	ldd	r25, Y+20	; 0x14
    52c6:	01 97       	sbiw	r24, 0x01	; 1
    52c8:	9c 8b       	std	Y+20, r25	; 0x14
    52ca:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    52cc:	8b 89       	ldd	r24, Y+19	; 0x13
    52ce:	9c 89       	ldd	r25, Y+20	; 0x14
    52d0:	00 97       	sbiw	r24, 0x00	; 0
    52d2:	69 f7       	brne	.-38     	; 0x52ae <Segment_init+0x1c82>
    52d4:	14 c0       	rjmp	.+40     	; 0x52fe <Segment_init+0x1cd2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    52d6:	6d 89       	ldd	r22, Y+21	; 0x15
    52d8:	7e 89       	ldd	r23, Y+22	; 0x16
    52da:	8f 89       	ldd	r24, Y+23	; 0x17
    52dc:	98 8d       	ldd	r25, Y+24	; 0x18
    52de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52e2:	dc 01       	movw	r26, r24
    52e4:	cb 01       	movw	r24, r22
    52e6:	9c 8b       	std	Y+20, r25	; 0x14
    52e8:	8b 8b       	std	Y+19, r24	; 0x13
    52ea:	8b 89       	ldd	r24, Y+19	; 0x13
    52ec:	9c 89       	ldd	r25, Y+20	; 0x14
    52ee:	98 8b       	std	Y+16, r25	; 0x10
    52f0:	8f 87       	std	Y+15, r24	; 0x0f
    52f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    52f4:	98 89       	ldd	r25, Y+16	; 0x10
    52f6:	01 97       	sbiw	r24, 0x01	; 1
    52f8:	f1 f7       	brne	.-4      	; 0x52f6 <Segment_init+0x1cca>
    52fa:	98 8b       	std	Y+16, r25	; 0x10
    52fc:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(2);
				DIO_voidSetPinValue(GPIOB_BASE,PIN5_ID,HIGH);
    52fe:	86 e3       	ldi	r24, 0x36	; 54
    5300:	90 e0       	ldi	r25, 0x00	; 0
    5302:	65 e0       	ldi	r22, 0x05	; 5
    5304:	41 e0       	ldi	r20, 0x01	; 1
    5306:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    530a:	80 e0       	ldi	r24, 0x00	; 0
    530c:	90 e0       	ldi	r25, 0x00	; 0
    530e:	a0 e0       	ldi	r26, 0x00	; 0
    5310:	b0 e4       	ldi	r27, 0x40	; 64
    5312:	8b 87       	std	Y+11, r24	; 0x0b
    5314:	9c 87       	std	Y+12, r25	; 0x0c
    5316:	ad 87       	std	Y+13, r26	; 0x0d
    5318:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    531a:	6b 85       	ldd	r22, Y+11	; 0x0b
    531c:	7c 85       	ldd	r23, Y+12	; 0x0c
    531e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5320:	9e 85       	ldd	r25, Y+14	; 0x0e
    5322:	20 e0       	ldi	r18, 0x00	; 0
    5324:	30 e0       	ldi	r19, 0x00	; 0
    5326:	4a e7       	ldi	r20, 0x7A	; 122
    5328:	55 e4       	ldi	r21, 0x45	; 69
    532a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    532e:	dc 01       	movw	r26, r24
    5330:	cb 01       	movw	r24, r22
    5332:	8f 83       	std	Y+7, r24	; 0x07
    5334:	98 87       	std	Y+8, r25	; 0x08
    5336:	a9 87       	std	Y+9, r26	; 0x09
    5338:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    533a:	6f 81       	ldd	r22, Y+7	; 0x07
    533c:	78 85       	ldd	r23, Y+8	; 0x08
    533e:	89 85       	ldd	r24, Y+9	; 0x09
    5340:	9a 85       	ldd	r25, Y+10	; 0x0a
    5342:	20 e0       	ldi	r18, 0x00	; 0
    5344:	30 e0       	ldi	r19, 0x00	; 0
    5346:	40 e8       	ldi	r20, 0x80	; 128
    5348:	5f e3       	ldi	r21, 0x3F	; 63
    534a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    534e:	88 23       	and	r24, r24
    5350:	2c f4       	brge	.+10     	; 0x535c <Segment_init+0x1d30>
		__ticks = 1;
    5352:	81 e0       	ldi	r24, 0x01	; 1
    5354:	90 e0       	ldi	r25, 0x00	; 0
    5356:	9e 83       	std	Y+6, r25	; 0x06
    5358:	8d 83       	std	Y+5, r24	; 0x05
    535a:	3f c0       	rjmp	.+126    	; 0x53da <Segment_init+0x1dae>
	else if (__tmp > 65535)
    535c:	6f 81       	ldd	r22, Y+7	; 0x07
    535e:	78 85       	ldd	r23, Y+8	; 0x08
    5360:	89 85       	ldd	r24, Y+9	; 0x09
    5362:	9a 85       	ldd	r25, Y+10	; 0x0a
    5364:	20 e0       	ldi	r18, 0x00	; 0
    5366:	3f ef       	ldi	r19, 0xFF	; 255
    5368:	4f e7       	ldi	r20, 0x7F	; 127
    536a:	57 e4       	ldi	r21, 0x47	; 71
    536c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5370:	18 16       	cp	r1, r24
    5372:	4c f5       	brge	.+82     	; 0x53c6 <Segment_init+0x1d9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5374:	6b 85       	ldd	r22, Y+11	; 0x0b
    5376:	7c 85       	ldd	r23, Y+12	; 0x0c
    5378:	8d 85       	ldd	r24, Y+13	; 0x0d
    537a:	9e 85       	ldd	r25, Y+14	; 0x0e
    537c:	20 e0       	ldi	r18, 0x00	; 0
    537e:	30 e0       	ldi	r19, 0x00	; 0
    5380:	40 e2       	ldi	r20, 0x20	; 32
    5382:	51 e4       	ldi	r21, 0x41	; 65
    5384:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5388:	dc 01       	movw	r26, r24
    538a:	cb 01       	movw	r24, r22
    538c:	bc 01       	movw	r22, r24
    538e:	cd 01       	movw	r24, r26
    5390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5394:	dc 01       	movw	r26, r24
    5396:	cb 01       	movw	r24, r22
    5398:	9e 83       	std	Y+6, r25	; 0x06
    539a:	8d 83       	std	Y+5, r24	; 0x05
    539c:	0f c0       	rjmp	.+30     	; 0x53bc <Segment_init+0x1d90>
    539e:	80 e9       	ldi	r24, 0x90	; 144
    53a0:	91 e0       	ldi	r25, 0x01	; 1
    53a2:	9c 83       	std	Y+4, r25	; 0x04
    53a4:	8b 83       	std	Y+3, r24	; 0x03
    53a6:	8b 81       	ldd	r24, Y+3	; 0x03
    53a8:	9c 81       	ldd	r25, Y+4	; 0x04
    53aa:	01 97       	sbiw	r24, 0x01	; 1
    53ac:	f1 f7       	brne	.-4      	; 0x53aa <Segment_init+0x1d7e>
    53ae:	9c 83       	std	Y+4, r25	; 0x04
    53b0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    53b2:	8d 81       	ldd	r24, Y+5	; 0x05
    53b4:	9e 81       	ldd	r25, Y+6	; 0x06
    53b6:	01 97       	sbiw	r24, 0x01	; 1
    53b8:	9e 83       	std	Y+6, r25	; 0x06
    53ba:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    53bc:	8d 81       	ldd	r24, Y+5	; 0x05
    53be:	9e 81       	ldd	r25, Y+6	; 0x06
    53c0:	00 97       	sbiw	r24, 0x00	; 0
    53c2:	69 f7       	brne	.-38     	; 0x539e <Segment_init+0x1d72>
    53c4:	14 c0       	rjmp	.+40     	; 0x53ee <Segment_init+0x1dc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    53c6:	6f 81       	ldd	r22, Y+7	; 0x07
    53c8:	78 85       	ldd	r23, Y+8	; 0x08
    53ca:	89 85       	ldd	r24, Y+9	; 0x09
    53cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    53ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    53d2:	dc 01       	movw	r26, r24
    53d4:	cb 01       	movw	r24, r22
    53d6:	9e 83       	std	Y+6, r25	; 0x06
    53d8:	8d 83       	std	Y+5, r24	; 0x05
    53da:	8d 81       	ldd	r24, Y+5	; 0x05
    53dc:	9e 81       	ldd	r25, Y+6	; 0x06
    53de:	9a 83       	std	Y+2, r25	; 0x02
    53e0:	89 83       	std	Y+1, r24	; 0x01
    53e2:	89 81       	ldd	r24, Y+1	; 0x01
    53e4:	9a 81       	ldd	r25, Y+2	; 0x02
    53e6:	01 97       	sbiw	r24, 0x01	; 1
    53e8:	f1 f7       	brne	.-4      	; 0x53e6 <Segment_init+0x1dba>
    53ea:	9a 83       	std	Y+2, r25	; 0x02
    53ec:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(2);
				DIO_voidSetPinValue(GPIOB_BASE,PIN6_ID,LOW);
    53ee:	86 e3       	ldi	r24, 0x36	; 54
    53f0:	90 e0       	ldi	r25, 0x00	; 0
    53f2:	66 e0       	ldi	r22, 0x06	; 6
    53f4:	40 e0       	ldi	r20, 0x00	; 0
    53f6:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
				break;

	}

}
    53fa:	c7 5d       	subi	r28, 0xD7	; 215
    53fc:	de 4f       	sbci	r29, 0xFE	; 254
    53fe:	0f b6       	in	r0, 0x3f	; 63
    5400:	f8 94       	cli
    5402:	de bf       	out	0x3e, r29	; 62
    5404:	0f be       	out	0x3f, r0	; 63
    5406:	cd bf       	out	0x3d, r28	; 61
    5408:	cf 91       	pop	r28
    540a:	df 91       	pop	r29
    540c:	1f 91       	pop	r17
    540e:	0f 91       	pop	r16
    5410:	08 95       	ret

00005412 <SevenSeg_Num>:
 * @retval 			-none
 * Note				-none
 * =================================================================*/
void SevenSeg_Num(uint8 num)

{
    5412:	df 93       	push	r29
    5414:	cf 93       	push	r28
    5416:	00 d0       	rcall	.+0      	; 0x5418 <SevenSeg_Num+0x6>
    5418:	0f 92       	push	r0
    541a:	cd b7       	in	r28, 0x3d	; 61
    541c:	de b7       	in	r29, 0x3e	; 62
    541e:	89 83       	std	Y+1, r24	; 0x01
	switch(num)
    5420:	89 81       	ldd	r24, Y+1	; 0x01
    5422:	28 2f       	mov	r18, r24
    5424:	30 e0       	ldi	r19, 0x00	; 0
    5426:	3b 83       	std	Y+3, r19	; 0x03
    5428:	2a 83       	std	Y+2, r18	; 0x02
    542a:	8a 81       	ldd	r24, Y+2	; 0x02
    542c:	9b 81       	ldd	r25, Y+3	; 0x03
    542e:	84 30       	cpi	r24, 0x04	; 4
    5430:	91 05       	cpc	r25, r1
    5432:	09 f4       	brne	.+2      	; 0x5436 <SevenSeg_Num+0x24>
    5434:	ab c0       	rjmp	.+342    	; 0x558c <SevenSeg_Num+0x17a>
    5436:	2a 81       	ldd	r18, Y+2	; 0x02
    5438:	3b 81       	ldd	r19, Y+3	; 0x03
    543a:	25 30       	cpi	r18, 0x05	; 5
    543c:	31 05       	cpc	r19, r1
    543e:	ec f4       	brge	.+58     	; 0x547a <SevenSeg_Num+0x68>
    5440:	8a 81       	ldd	r24, Y+2	; 0x02
    5442:	9b 81       	ldd	r25, Y+3	; 0x03
    5444:	81 30       	cpi	r24, 0x01	; 1
    5446:	91 05       	cpc	r25, r1
    5448:	09 f4       	brne	.+2      	; 0x544c <SevenSeg_Num+0x3a>
    544a:	55 c0       	rjmp	.+170    	; 0x54f6 <SevenSeg_Num+0xe4>
    544c:	2a 81       	ldd	r18, Y+2	; 0x02
    544e:	3b 81       	ldd	r19, Y+3	; 0x03
    5450:	22 30       	cpi	r18, 0x02	; 2
    5452:	31 05       	cpc	r19, r1
    5454:	2c f4       	brge	.+10     	; 0x5460 <SevenSeg_Num+0x4e>
    5456:	8a 81       	ldd	r24, Y+2	; 0x02
    5458:	9b 81       	ldd	r25, Y+3	; 0x03
    545a:	00 97       	sbiw	r24, 0x00	; 0
    545c:	99 f1       	breq	.+102    	; 0x54c4 <SevenSeg_Num+0xb2>
    545e:	2b c1       	rjmp	.+598    	; 0x56b6 <SevenSeg_Num+0x2a4>
    5460:	2a 81       	ldd	r18, Y+2	; 0x02
    5462:	3b 81       	ldd	r19, Y+3	; 0x03
    5464:	22 30       	cpi	r18, 0x02	; 2
    5466:	31 05       	cpc	r19, r1
    5468:	09 f4       	brne	.+2      	; 0x546c <SevenSeg_Num+0x5a>
    546a:	5e c0       	rjmp	.+188    	; 0x5528 <SevenSeg_Num+0x116>
    546c:	8a 81       	ldd	r24, Y+2	; 0x02
    546e:	9b 81       	ldd	r25, Y+3	; 0x03
    5470:	83 30       	cpi	r24, 0x03	; 3
    5472:	91 05       	cpc	r25, r1
    5474:	09 f4       	brne	.+2      	; 0x5478 <SevenSeg_Num+0x66>
    5476:	71 c0       	rjmp	.+226    	; 0x555a <SevenSeg_Num+0x148>
    5478:	1e c1       	rjmp	.+572    	; 0x56b6 <SevenSeg_Num+0x2a4>
    547a:	2a 81       	ldd	r18, Y+2	; 0x02
    547c:	3b 81       	ldd	r19, Y+3	; 0x03
    547e:	27 30       	cpi	r18, 0x07	; 7
    5480:	31 05       	cpc	r19, r1
    5482:	09 f4       	brne	.+2      	; 0x5486 <SevenSeg_Num+0x74>
    5484:	ce c0       	rjmp	.+412    	; 0x5622 <SevenSeg_Num+0x210>
    5486:	8a 81       	ldd	r24, Y+2	; 0x02
    5488:	9b 81       	ldd	r25, Y+3	; 0x03
    548a:	88 30       	cpi	r24, 0x08	; 8
    548c:	91 05       	cpc	r25, r1
    548e:	6c f4       	brge	.+26     	; 0x54aa <SevenSeg_Num+0x98>
    5490:	2a 81       	ldd	r18, Y+2	; 0x02
    5492:	3b 81       	ldd	r19, Y+3	; 0x03
    5494:	25 30       	cpi	r18, 0x05	; 5
    5496:	31 05       	cpc	r19, r1
    5498:	09 f4       	brne	.+2      	; 0x549c <SevenSeg_Num+0x8a>
    549a:	91 c0       	rjmp	.+290    	; 0x55be <SevenSeg_Num+0x1ac>
    549c:	8a 81       	ldd	r24, Y+2	; 0x02
    549e:	9b 81       	ldd	r25, Y+3	; 0x03
    54a0:	86 30       	cpi	r24, 0x06	; 6
    54a2:	91 05       	cpc	r25, r1
    54a4:	09 f4       	brne	.+2      	; 0x54a8 <SevenSeg_Num+0x96>
    54a6:	a4 c0       	rjmp	.+328    	; 0x55f0 <SevenSeg_Num+0x1de>
    54a8:	06 c1       	rjmp	.+524    	; 0x56b6 <SevenSeg_Num+0x2a4>
    54aa:	2a 81       	ldd	r18, Y+2	; 0x02
    54ac:	3b 81       	ldd	r19, Y+3	; 0x03
    54ae:	28 30       	cpi	r18, 0x08	; 8
    54b0:	31 05       	cpc	r19, r1
    54b2:	09 f4       	brne	.+2      	; 0x54b6 <SevenSeg_Num+0xa4>
    54b4:	cf c0       	rjmp	.+414    	; 0x5654 <SevenSeg_Num+0x242>
    54b6:	8a 81       	ldd	r24, Y+2	; 0x02
    54b8:	9b 81       	ldd	r25, Y+3	; 0x03
    54ba:	89 30       	cpi	r24, 0x09	; 9
    54bc:	91 05       	cpc	r25, r1
    54be:	09 f4       	brne	.+2      	; 0x54c2 <SevenSeg_Num+0xb0>
    54c0:	e2 c0       	rjmp	.+452    	; 0x5686 <SevenSeg_Num+0x274>
    54c2:	f9 c0       	rjmp	.+498    	; 0x56b6 <SevenSeg_Num+0x2a4>
	{
	case 0:
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,LOW);
    54c4:	86 e3       	ldi	r24, 0x36	; 54
    54c6:	90 e0       	ldi	r25, 0x00	; 0
    54c8:	60 e0       	ldi	r22, 0x00	; 0
    54ca:	40 e0       	ldi	r20, 0x00	; 0
    54cc:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,LOW);
    54d0:	86 e3       	ldi	r24, 0x36	; 54
    54d2:	90 e0       	ldi	r25, 0x00	; 0
    54d4:	61 e0       	ldi	r22, 0x01	; 1
    54d6:	40 e0       	ldi	r20, 0x00	; 0
    54d8:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,LOW);
    54dc:	86 e3       	ldi	r24, 0x36	; 54
    54de:	90 e0       	ldi	r25, 0x00	; 0
    54e0:	62 e0       	ldi	r22, 0x02	; 2
    54e2:	40 e0       	ldi	r20, 0x00	; 0
    54e4:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,LOW);
    54e8:	86 e3       	ldi	r24, 0x36	; 54
    54ea:	90 e0       	ldi	r25, 0x00	; 0
    54ec:	64 e0       	ldi	r22, 0x04	; 4
    54ee:	40 e0       	ldi	r20, 0x00	; 0
    54f0:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    54f4:	e0 c0       	rjmp	.+448    	; 0x56b6 <SevenSeg_Num+0x2a4>
		break;
	case 1 :
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,HIGH);
    54f6:	86 e3       	ldi	r24, 0x36	; 54
    54f8:	90 e0       	ldi	r25, 0x00	; 0
    54fa:	60 e0       	ldi	r22, 0x00	; 0
    54fc:	41 e0       	ldi	r20, 0x01	; 1
    54fe:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,LOW);
    5502:	86 e3       	ldi	r24, 0x36	; 54
    5504:	90 e0       	ldi	r25, 0x00	; 0
    5506:	61 e0       	ldi	r22, 0x01	; 1
    5508:	40 e0       	ldi	r20, 0x00	; 0
    550a:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,LOW);
    550e:	86 e3       	ldi	r24, 0x36	; 54
    5510:	90 e0       	ldi	r25, 0x00	; 0
    5512:	62 e0       	ldi	r22, 0x02	; 2
    5514:	40 e0       	ldi	r20, 0x00	; 0
    5516:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,LOW);
    551a:	86 e3       	ldi	r24, 0x36	; 54
    551c:	90 e0       	ldi	r25, 0x00	; 0
    551e:	64 e0       	ldi	r22, 0x04	; 4
    5520:	40 e0       	ldi	r20, 0x00	; 0
    5522:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    5526:	c7 c0       	rjmp	.+398    	; 0x56b6 <SevenSeg_Num+0x2a4>
		break;
	case 2 :
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,LOW);
    5528:	86 e3       	ldi	r24, 0x36	; 54
    552a:	90 e0       	ldi	r25, 0x00	; 0
    552c:	60 e0       	ldi	r22, 0x00	; 0
    552e:	40 e0       	ldi	r20, 0x00	; 0
    5530:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,HIGH);
    5534:	86 e3       	ldi	r24, 0x36	; 54
    5536:	90 e0       	ldi	r25, 0x00	; 0
    5538:	61 e0       	ldi	r22, 0x01	; 1
    553a:	41 e0       	ldi	r20, 0x01	; 1
    553c:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,LOW);
    5540:	86 e3       	ldi	r24, 0x36	; 54
    5542:	90 e0       	ldi	r25, 0x00	; 0
    5544:	62 e0       	ldi	r22, 0x02	; 2
    5546:	40 e0       	ldi	r20, 0x00	; 0
    5548:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,LOW);
    554c:	86 e3       	ldi	r24, 0x36	; 54
    554e:	90 e0       	ldi	r25, 0x00	; 0
    5550:	64 e0       	ldi	r22, 0x04	; 4
    5552:	40 e0       	ldi	r20, 0x00	; 0
    5554:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    5558:	ae c0       	rjmp	.+348    	; 0x56b6 <SevenSeg_Num+0x2a4>
		break;
	case 3 :
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,HIGH);
    555a:	86 e3       	ldi	r24, 0x36	; 54
    555c:	90 e0       	ldi	r25, 0x00	; 0
    555e:	60 e0       	ldi	r22, 0x00	; 0
    5560:	41 e0       	ldi	r20, 0x01	; 1
    5562:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,HIGH);
    5566:	86 e3       	ldi	r24, 0x36	; 54
    5568:	90 e0       	ldi	r25, 0x00	; 0
    556a:	61 e0       	ldi	r22, 0x01	; 1
    556c:	41 e0       	ldi	r20, 0x01	; 1
    556e:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,LOW);
    5572:	86 e3       	ldi	r24, 0x36	; 54
    5574:	90 e0       	ldi	r25, 0x00	; 0
    5576:	62 e0       	ldi	r22, 0x02	; 2
    5578:	40 e0       	ldi	r20, 0x00	; 0
    557a:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,LOW);
    557e:	86 e3       	ldi	r24, 0x36	; 54
    5580:	90 e0       	ldi	r25, 0x00	; 0
    5582:	64 e0       	ldi	r22, 0x04	; 4
    5584:	40 e0       	ldi	r20, 0x00	; 0
    5586:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    558a:	95 c0       	rjmp	.+298    	; 0x56b6 <SevenSeg_Num+0x2a4>
		break;
	case 4 :
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,LOW);
    558c:	86 e3       	ldi	r24, 0x36	; 54
    558e:	90 e0       	ldi	r25, 0x00	; 0
    5590:	60 e0       	ldi	r22, 0x00	; 0
    5592:	40 e0       	ldi	r20, 0x00	; 0
    5594:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,LOW);
    5598:	86 e3       	ldi	r24, 0x36	; 54
    559a:	90 e0       	ldi	r25, 0x00	; 0
    559c:	61 e0       	ldi	r22, 0x01	; 1
    559e:	40 e0       	ldi	r20, 0x00	; 0
    55a0:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,HIGH);
    55a4:	86 e3       	ldi	r24, 0x36	; 54
    55a6:	90 e0       	ldi	r25, 0x00	; 0
    55a8:	62 e0       	ldi	r22, 0x02	; 2
    55aa:	41 e0       	ldi	r20, 0x01	; 1
    55ac:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,LOW);
    55b0:	86 e3       	ldi	r24, 0x36	; 54
    55b2:	90 e0       	ldi	r25, 0x00	; 0
    55b4:	64 e0       	ldi	r22, 0x04	; 4
    55b6:	40 e0       	ldi	r20, 0x00	; 0
    55b8:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    55bc:	7c c0       	rjmp	.+248    	; 0x56b6 <SevenSeg_Num+0x2a4>
		break;
	case 5 :
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,HIGH);
    55be:	86 e3       	ldi	r24, 0x36	; 54
    55c0:	90 e0       	ldi	r25, 0x00	; 0
    55c2:	60 e0       	ldi	r22, 0x00	; 0
    55c4:	41 e0       	ldi	r20, 0x01	; 1
    55c6:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,LOW);
    55ca:	86 e3       	ldi	r24, 0x36	; 54
    55cc:	90 e0       	ldi	r25, 0x00	; 0
    55ce:	61 e0       	ldi	r22, 0x01	; 1
    55d0:	40 e0       	ldi	r20, 0x00	; 0
    55d2:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,HIGH);
    55d6:	86 e3       	ldi	r24, 0x36	; 54
    55d8:	90 e0       	ldi	r25, 0x00	; 0
    55da:	62 e0       	ldi	r22, 0x02	; 2
    55dc:	41 e0       	ldi	r20, 0x01	; 1
    55de:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,LOW);
    55e2:	86 e3       	ldi	r24, 0x36	; 54
    55e4:	90 e0       	ldi	r25, 0x00	; 0
    55e6:	64 e0       	ldi	r22, 0x04	; 4
    55e8:	40 e0       	ldi	r20, 0x00	; 0
    55ea:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    55ee:	63 c0       	rjmp	.+198    	; 0x56b6 <SevenSeg_Num+0x2a4>
		break;
	case 6 :
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,LOW);
    55f0:	86 e3       	ldi	r24, 0x36	; 54
    55f2:	90 e0       	ldi	r25, 0x00	; 0
    55f4:	60 e0       	ldi	r22, 0x00	; 0
    55f6:	40 e0       	ldi	r20, 0x00	; 0
    55f8:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,HIGH);
    55fc:	86 e3       	ldi	r24, 0x36	; 54
    55fe:	90 e0       	ldi	r25, 0x00	; 0
    5600:	61 e0       	ldi	r22, 0x01	; 1
    5602:	41 e0       	ldi	r20, 0x01	; 1
    5604:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,HIGH);
    5608:	86 e3       	ldi	r24, 0x36	; 54
    560a:	90 e0       	ldi	r25, 0x00	; 0
    560c:	62 e0       	ldi	r22, 0x02	; 2
    560e:	41 e0       	ldi	r20, 0x01	; 1
    5610:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,LOW);
    5614:	86 e3       	ldi	r24, 0x36	; 54
    5616:	90 e0       	ldi	r25, 0x00	; 0
    5618:	64 e0       	ldi	r22, 0x04	; 4
    561a:	40 e0       	ldi	r20, 0x00	; 0
    561c:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    5620:	4a c0       	rjmp	.+148    	; 0x56b6 <SevenSeg_Num+0x2a4>
		break;
	case 7 :
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,HIGH);
    5622:	86 e3       	ldi	r24, 0x36	; 54
    5624:	90 e0       	ldi	r25, 0x00	; 0
    5626:	60 e0       	ldi	r22, 0x00	; 0
    5628:	41 e0       	ldi	r20, 0x01	; 1
    562a:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,HIGH);
    562e:	86 e3       	ldi	r24, 0x36	; 54
    5630:	90 e0       	ldi	r25, 0x00	; 0
    5632:	61 e0       	ldi	r22, 0x01	; 1
    5634:	41 e0       	ldi	r20, 0x01	; 1
    5636:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,HIGH);
    563a:	86 e3       	ldi	r24, 0x36	; 54
    563c:	90 e0       	ldi	r25, 0x00	; 0
    563e:	62 e0       	ldi	r22, 0x02	; 2
    5640:	41 e0       	ldi	r20, 0x01	; 1
    5642:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,LOW);
    5646:	86 e3       	ldi	r24, 0x36	; 54
    5648:	90 e0       	ldi	r25, 0x00	; 0
    564a:	64 e0       	ldi	r22, 0x04	; 4
    564c:	40 e0       	ldi	r20, 0x00	; 0
    564e:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    5652:	31 c0       	rjmp	.+98     	; 0x56b6 <SevenSeg_Num+0x2a4>
		break;
	case 8 :
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,LOW);
    5654:	86 e3       	ldi	r24, 0x36	; 54
    5656:	90 e0       	ldi	r25, 0x00	; 0
    5658:	60 e0       	ldi	r22, 0x00	; 0
    565a:	40 e0       	ldi	r20, 0x00	; 0
    565c:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,LOW);
    5660:	86 e3       	ldi	r24, 0x36	; 54
    5662:	90 e0       	ldi	r25, 0x00	; 0
    5664:	61 e0       	ldi	r22, 0x01	; 1
    5666:	40 e0       	ldi	r20, 0x00	; 0
    5668:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,LOW);
    566c:	86 e3       	ldi	r24, 0x36	; 54
    566e:	90 e0       	ldi	r25, 0x00	; 0
    5670:	62 e0       	ldi	r22, 0x02	; 2
    5672:	40 e0       	ldi	r20, 0x00	; 0
    5674:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,HIGH);
    5678:	86 e3       	ldi	r24, 0x36	; 54
    567a:	90 e0       	ldi	r25, 0x00	; 0
    567c:	64 e0       	ldi	r22, 0x04	; 4
    567e:	41 e0       	ldi	r20, 0x01	; 1
    5680:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    5684:	18 c0       	rjmp	.+48     	; 0x56b6 <SevenSeg_Num+0x2a4>
		break;
	case 9 :
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,HIGH);
    5686:	86 e3       	ldi	r24, 0x36	; 54
    5688:	90 e0       	ldi	r25, 0x00	; 0
    568a:	60 e0       	ldi	r22, 0x00	; 0
    568c:	41 e0       	ldi	r20, 0x01	; 1
    568e:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,LOW);
    5692:	86 e3       	ldi	r24, 0x36	; 54
    5694:	90 e0       	ldi	r25, 0x00	; 0
    5696:	61 e0       	ldi	r22, 0x01	; 1
    5698:	40 e0       	ldi	r20, 0x00	; 0
    569a:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,LOW);
    569e:	86 e3       	ldi	r24, 0x36	; 54
    56a0:	90 e0       	ldi	r25, 0x00	; 0
    56a2:	62 e0       	ldi	r22, 0x02	; 2
    56a4:	40 e0       	ldi	r20, 0x00	; 0
    56a6:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,HIGH);
    56aa:	86 e3       	ldi	r24, 0x36	; 54
    56ac:	90 e0       	ldi	r25, 0x00	; 0
    56ae:	64 e0       	ldi	r22, 0x04	; 4
    56b0:	41 e0       	ldi	r20, 0x01	; 1
    56b2:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		break;
	}

}
    56b6:	0f 90       	pop	r0
    56b8:	0f 90       	pop	r0
    56ba:	0f 90       	pop	r0
    56bc:	cf 91       	pop	r28
    56be:	df 91       	pop	r29
    56c0:	08 95       	ret

000056c2 <timer_callBack>:
#include "Timer_INTERFACE.h"

static uint8 flag = 0;
unsigned char seconds=0,minutes=0; // Variables For counting Time
void timer_callBack(void)
{
    56c2:	df 93       	push	r29
    56c4:	cf 93       	push	r28
    56c6:	cd b7       	in	r28, 0x3d	; 61
    56c8:	de b7       	in	r29, 0x3e	; 62
    56ca:	2e 97       	sbiw	r28, 0x0e	; 14
    56cc:	0f b6       	in	r0, 0x3f	; 63
    56ce:	f8 94       	cli
    56d0:	de bf       	out	0x3e, r29	; 62
    56d2:	0f be       	out	0x3f, r0	; 63
    56d4:	cd bf       	out	0x3d, r28	; 61
	flag ++;
    56d6:	80 91 8d 01 	lds	r24, 0x018D
    56da:	8f 5f       	subi	r24, 0xFF	; 255
    56dc:	80 93 8d 01 	sts	0x018D, r24
	if (flag == 1)
    56e0:	80 91 8d 01 	lds	r24, 0x018D
    56e4:	81 30       	cpi	r24, 0x01	; 1
    56e6:	09 f0       	breq	.+2      	; 0x56ea <timer_callBack+0x28>
    56e8:	7a c0       	rjmp	.+244    	; 0x57de <timer_callBack+0x11c>
	{
		DIO_voidSetPinValue(GPIOC_BASE, PIN6_ID, HIGH);
    56ea:	83 e3       	ldi	r24, 0x33	; 51
    56ec:	90 e0       	ldi	r25, 0x00	; 0
    56ee:	66 e0       	ldi	r22, 0x06	; 6
    56f0:	41 e0       	ldi	r20, 0x01	; 1
    56f2:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    56f6:	80 e0       	ldi	r24, 0x00	; 0
    56f8:	90 e8       	ldi	r25, 0x80	; 128
    56fa:	ab e3       	ldi	r26, 0x3B	; 59
    56fc:	b5 e4       	ldi	r27, 0x45	; 69
    56fe:	8b 87       	std	Y+11, r24	; 0x0b
    5700:	9c 87       	std	Y+12, r25	; 0x0c
    5702:	ad 87       	std	Y+13, r26	; 0x0d
    5704:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5706:	6b 85       	ldd	r22, Y+11	; 0x0b
    5708:	7c 85       	ldd	r23, Y+12	; 0x0c
    570a:	8d 85       	ldd	r24, Y+13	; 0x0d
    570c:	9e 85       	ldd	r25, Y+14	; 0x0e
    570e:	20 e0       	ldi	r18, 0x00	; 0
    5710:	30 e0       	ldi	r19, 0x00	; 0
    5712:	4a e7       	ldi	r20, 0x7A	; 122
    5714:	55 e4       	ldi	r21, 0x45	; 69
    5716:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    571a:	dc 01       	movw	r26, r24
    571c:	cb 01       	movw	r24, r22
    571e:	8f 83       	std	Y+7, r24	; 0x07
    5720:	98 87       	std	Y+8, r25	; 0x08
    5722:	a9 87       	std	Y+9, r26	; 0x09
    5724:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    5726:	6f 81       	ldd	r22, Y+7	; 0x07
    5728:	78 85       	ldd	r23, Y+8	; 0x08
    572a:	89 85       	ldd	r24, Y+9	; 0x09
    572c:	9a 85       	ldd	r25, Y+10	; 0x0a
    572e:	20 e0       	ldi	r18, 0x00	; 0
    5730:	30 e0       	ldi	r19, 0x00	; 0
    5732:	40 e8       	ldi	r20, 0x80	; 128
    5734:	5f e3       	ldi	r21, 0x3F	; 63
    5736:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    573a:	88 23       	and	r24, r24
    573c:	2c f4       	brge	.+10     	; 0x5748 <timer_callBack+0x86>
		__ticks = 1;
    573e:	81 e0       	ldi	r24, 0x01	; 1
    5740:	90 e0       	ldi	r25, 0x00	; 0
    5742:	9e 83       	std	Y+6, r25	; 0x06
    5744:	8d 83       	std	Y+5, r24	; 0x05
    5746:	3f c0       	rjmp	.+126    	; 0x57c6 <timer_callBack+0x104>
	else if (__tmp > 65535)
    5748:	6f 81       	ldd	r22, Y+7	; 0x07
    574a:	78 85       	ldd	r23, Y+8	; 0x08
    574c:	89 85       	ldd	r24, Y+9	; 0x09
    574e:	9a 85       	ldd	r25, Y+10	; 0x0a
    5750:	20 e0       	ldi	r18, 0x00	; 0
    5752:	3f ef       	ldi	r19, 0xFF	; 255
    5754:	4f e7       	ldi	r20, 0x7F	; 127
    5756:	57 e4       	ldi	r21, 0x47	; 71
    5758:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    575c:	18 16       	cp	r1, r24
    575e:	4c f5       	brge	.+82     	; 0x57b2 <timer_callBack+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5760:	6b 85       	ldd	r22, Y+11	; 0x0b
    5762:	7c 85       	ldd	r23, Y+12	; 0x0c
    5764:	8d 85       	ldd	r24, Y+13	; 0x0d
    5766:	9e 85       	ldd	r25, Y+14	; 0x0e
    5768:	20 e0       	ldi	r18, 0x00	; 0
    576a:	30 e0       	ldi	r19, 0x00	; 0
    576c:	40 e2       	ldi	r20, 0x20	; 32
    576e:	51 e4       	ldi	r21, 0x41	; 65
    5770:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5774:	dc 01       	movw	r26, r24
    5776:	cb 01       	movw	r24, r22
    5778:	bc 01       	movw	r22, r24
    577a:	cd 01       	movw	r24, r26
    577c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5780:	dc 01       	movw	r26, r24
    5782:	cb 01       	movw	r24, r22
    5784:	9e 83       	std	Y+6, r25	; 0x06
    5786:	8d 83       	std	Y+5, r24	; 0x05
    5788:	0f c0       	rjmp	.+30     	; 0x57a8 <timer_callBack+0xe6>
    578a:	80 e9       	ldi	r24, 0x90	; 144
    578c:	91 e0       	ldi	r25, 0x01	; 1
    578e:	9c 83       	std	Y+4, r25	; 0x04
    5790:	8b 83       	std	Y+3, r24	; 0x03
    5792:	8b 81       	ldd	r24, Y+3	; 0x03
    5794:	9c 81       	ldd	r25, Y+4	; 0x04
    5796:	01 97       	sbiw	r24, 0x01	; 1
    5798:	f1 f7       	brne	.-4      	; 0x5796 <timer_callBack+0xd4>
    579a:	9c 83       	std	Y+4, r25	; 0x04
    579c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    579e:	8d 81       	ldd	r24, Y+5	; 0x05
    57a0:	9e 81       	ldd	r25, Y+6	; 0x06
    57a2:	01 97       	sbiw	r24, 0x01	; 1
    57a4:	9e 83       	std	Y+6, r25	; 0x06
    57a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    57a8:	8d 81       	ldd	r24, Y+5	; 0x05
    57aa:	9e 81       	ldd	r25, Y+6	; 0x06
    57ac:	00 97       	sbiw	r24, 0x00	; 0
    57ae:	69 f7       	brne	.-38     	; 0x578a <timer_callBack+0xc8>
    57b0:	14 c0       	rjmp	.+40     	; 0x57da <timer_callBack+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57b2:	6f 81       	ldd	r22, Y+7	; 0x07
    57b4:	78 85       	ldd	r23, Y+8	; 0x08
    57b6:	89 85       	ldd	r24, Y+9	; 0x09
    57b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    57ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57be:	dc 01       	movw	r26, r24
    57c0:	cb 01       	movw	r24, r22
    57c2:	9e 83       	std	Y+6, r25	; 0x06
    57c4:	8d 83       	std	Y+5, r24	; 0x05
    57c6:	8d 81       	ldd	r24, Y+5	; 0x05
    57c8:	9e 81       	ldd	r25, Y+6	; 0x06
    57ca:	9a 83       	std	Y+2, r25	; 0x02
    57cc:	89 83       	std	Y+1, r24	; 0x01
    57ce:	89 81       	ldd	r24, Y+1	; 0x01
    57d0:	9a 81       	ldd	r25, Y+2	; 0x02
    57d2:	01 97       	sbiw	r24, 0x01	; 1
    57d4:	f1 f7       	brne	.-4      	; 0x57d2 <timer_callBack+0x110>
    57d6:	9a 83       	std	Y+2, r25	; 0x02
    57d8:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(3000);
		flag =0;
    57da:	10 92 8d 01 	sts	0x018D, r1
	}
}
    57de:	2e 96       	adiw	r28, 0x0e	; 14
    57e0:	0f b6       	in	r0, 0x3f	; 63
    57e2:	f8 94       	cli
    57e4:	de bf       	out	0x3e, r29	; 62
    57e6:	0f be       	out	0x3f, r0	; 63
    57e8:	cd bf       	out	0x3d, r28	; 61
    57ea:	cf 91       	pop	r28
    57ec:	df 91       	pop	r29
    57ee:	08 95       	ret

000057f0 <timer1_int>:

void timer1_int()
{
    57f0:	df 93       	push	r29
    57f2:	cf 93       	push	r28
    57f4:	cd b7       	in	r28, 0x3d	; 61
    57f6:	de b7       	in	r29, 0x3e	; 62
    57f8:	29 97       	sbiw	r28, 0x09	; 9
    57fa:	0f b6       	in	r0, 0x3f	; 63
    57fc:	f8 94       	cli
    57fe:	de bf       	out	0x3e, r29	; 62
    5800:	0f be       	out	0x3f, r0	; 63
    5802:	cd bf       	out	0x3d, r28	; 61
	Timer_Config time;
	time.Timer_ID = Timer1;
    5804:	81 e0       	ldi	r24, 0x01	; 1
    5806:	88 87       	std	Y+8, r24	; 0x08
	time.mode = TIMER1_NORMAL;
    5808:	19 82       	std	Y+1, r1	; 0x01
	time.reload_value = 0;
    580a:	1d 82       	std	Y+5, r1	; 0x05
    580c:	1c 82       	std	Y+4, r1	; 0x04
	time.prescalar = F_CPU_1024_;
    580e:	85 e0       	ldi	r24, 0x05	; 5
    5810:	8a 83       	std	Y+2, r24	; 0x02
	Timer_Init(&time);
    5812:	ce 01       	movw	r24, r28
    5814:	01 96       	adiw	r24, 0x01	; 1
    5816:	0e 94 40 0d 	call	0x1a80	; 0x1a80 <Timer_Init>
	EnableInt(&time, timer_callBack);
    581a:	21 e6       	ldi	r18, 0x61	; 97
    581c:	3b e2       	ldi	r19, 0x2B	; 43
    581e:	ce 01       	movw	r24, r28
    5820:	01 96       	adiw	r24, 0x01	; 1
    5822:	b9 01       	movw	r22, r18
    5824:	0e 94 36 11 	call	0x226c	; 0x226c <EnableInt>
}
    5828:	29 96       	adiw	r28, 0x09	; 9
    582a:	0f b6       	in	r0, 0x3f	; 63
    582c:	f8 94       	cli
    582e:	de bf       	out	0x3e, r29	; 62
    5830:	0f be       	out	0x3f, r0	; 63
    5832:	cd bf       	out	0x3d, r28	; 61
    5834:	cf 91       	pop	r28
    5836:	df 91       	pop	r29
    5838:	08 95       	ret

0000583a <main>:

int main(void)
{
    583a:	df 93       	push	r29
    583c:	cf 93       	push	r28
    583e:	cd b7       	in	r28, 0x3d	; 61
    5840:	de b7       	in	r29, 0x3e	; 62
	DIO_voidSetPinDirection(GPIOC_BASE, PIN6_ID, 1);
    5842:	83 e3       	ldi	r24, 0x33	; 51
    5844:	90 e0       	ldi	r25, 0x00	; 0
    5846:	66 e0       	ldi	r22, 0x06	; 6
    5848:	41 e0       	ldi	r20, 0x01	; 1
    584a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
	timer1_int();
    584e:	0e 94 f8 2b 	call	0x57f0	; 0x57f0 <timer1_int>
	KEYPAD_INIT();
    5852:	0e 94 fe 13 	call	0x27fc	; 0x27fc <KEYPAD_INIT>
	H_LCD_void_IniT();
    5856:	0e 94 d8 18 	call	0x31b0	; 0x31b0 <H_LCD_void_IniT>
	Segment_init(FIRST_SEG);
    585a:	80 e0       	ldi	r24, 0x00	; 0
    585c:	0e 94 16 1b 	call	0x362c	; 0x362c <Segment_init>

	while(1)
	{
		DIO_voidSetPinValue(GPIOC_BASE, PIN6_ID, LOW);
    5860:	83 e3       	ldi	r24, 0x33	; 51
    5862:	90 e0       	ldi	r25, 0x00	; 0
    5864:	66 e0       	ldi	r22, 0x06	; 6
    5866:	40 e0       	ldi	r20, 0x00	; 0
    5868:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    586c:	f9 cf       	rjmp	.-14     	; 0x5860 <main+0x26>

0000586e <__udivmodhi4>:
    586e:	aa 1b       	sub	r26, r26
    5870:	bb 1b       	sub	r27, r27
    5872:	51 e1       	ldi	r21, 0x11	; 17
    5874:	07 c0       	rjmp	.+14     	; 0x5884 <__udivmodhi4_ep>

00005876 <__udivmodhi4_loop>:
    5876:	aa 1f       	adc	r26, r26
    5878:	bb 1f       	adc	r27, r27
    587a:	a6 17       	cp	r26, r22
    587c:	b7 07       	cpc	r27, r23
    587e:	10 f0       	brcs	.+4      	; 0x5884 <__udivmodhi4_ep>
    5880:	a6 1b       	sub	r26, r22
    5882:	b7 0b       	sbc	r27, r23

00005884 <__udivmodhi4_ep>:
    5884:	88 1f       	adc	r24, r24
    5886:	99 1f       	adc	r25, r25
    5888:	5a 95       	dec	r21
    588a:	a9 f7       	brne	.-22     	; 0x5876 <__udivmodhi4_loop>
    588c:	80 95       	com	r24
    588e:	90 95       	com	r25
    5890:	bc 01       	movw	r22, r24
    5892:	cd 01       	movw	r24, r26
    5894:	08 95       	ret

00005896 <__divmodhi4>:
    5896:	97 fb       	bst	r25, 7
    5898:	09 2e       	mov	r0, r25
    589a:	07 26       	eor	r0, r23
    589c:	0a d0       	rcall	.+20     	; 0x58b2 <__divmodhi4_neg1>
    589e:	77 fd       	sbrc	r23, 7
    58a0:	04 d0       	rcall	.+8      	; 0x58aa <__divmodhi4_neg2>
    58a2:	e5 df       	rcall	.-54     	; 0x586e <__udivmodhi4>
    58a4:	06 d0       	rcall	.+12     	; 0x58b2 <__divmodhi4_neg1>
    58a6:	00 20       	and	r0, r0
    58a8:	1a f4       	brpl	.+6      	; 0x58b0 <__divmodhi4_exit>

000058aa <__divmodhi4_neg2>:
    58aa:	70 95       	com	r23
    58ac:	61 95       	neg	r22
    58ae:	7f 4f       	sbci	r23, 0xFF	; 255

000058b0 <__divmodhi4_exit>:
    58b0:	08 95       	ret

000058b2 <__divmodhi4_neg1>:
    58b2:	f6 f7       	brtc	.-4      	; 0x58b0 <__divmodhi4_exit>
    58b4:	90 95       	com	r25
    58b6:	81 95       	neg	r24
    58b8:	9f 4f       	sbci	r25, 0xFF	; 255
    58ba:	08 95       	ret

000058bc <__prologue_saves__>:
    58bc:	2f 92       	push	r2
    58be:	3f 92       	push	r3
    58c0:	4f 92       	push	r4
    58c2:	5f 92       	push	r5
    58c4:	6f 92       	push	r6
    58c6:	7f 92       	push	r7
    58c8:	8f 92       	push	r8
    58ca:	9f 92       	push	r9
    58cc:	af 92       	push	r10
    58ce:	bf 92       	push	r11
    58d0:	cf 92       	push	r12
    58d2:	df 92       	push	r13
    58d4:	ef 92       	push	r14
    58d6:	ff 92       	push	r15
    58d8:	0f 93       	push	r16
    58da:	1f 93       	push	r17
    58dc:	cf 93       	push	r28
    58de:	df 93       	push	r29
    58e0:	cd b7       	in	r28, 0x3d	; 61
    58e2:	de b7       	in	r29, 0x3e	; 62
    58e4:	ca 1b       	sub	r28, r26
    58e6:	db 0b       	sbc	r29, r27
    58e8:	0f b6       	in	r0, 0x3f	; 63
    58ea:	f8 94       	cli
    58ec:	de bf       	out	0x3e, r29	; 62
    58ee:	0f be       	out	0x3f, r0	; 63
    58f0:	cd bf       	out	0x3d, r28	; 61
    58f2:	09 94       	ijmp

000058f4 <__epilogue_restores__>:
    58f4:	2a 88       	ldd	r2, Y+18	; 0x12
    58f6:	39 88       	ldd	r3, Y+17	; 0x11
    58f8:	48 88       	ldd	r4, Y+16	; 0x10
    58fa:	5f 84       	ldd	r5, Y+15	; 0x0f
    58fc:	6e 84       	ldd	r6, Y+14	; 0x0e
    58fe:	7d 84       	ldd	r7, Y+13	; 0x0d
    5900:	8c 84       	ldd	r8, Y+12	; 0x0c
    5902:	9b 84       	ldd	r9, Y+11	; 0x0b
    5904:	aa 84       	ldd	r10, Y+10	; 0x0a
    5906:	b9 84       	ldd	r11, Y+9	; 0x09
    5908:	c8 84       	ldd	r12, Y+8	; 0x08
    590a:	df 80       	ldd	r13, Y+7	; 0x07
    590c:	ee 80       	ldd	r14, Y+6	; 0x06
    590e:	fd 80       	ldd	r15, Y+5	; 0x05
    5910:	0c 81       	ldd	r16, Y+4	; 0x04
    5912:	1b 81       	ldd	r17, Y+3	; 0x03
    5914:	aa 81       	ldd	r26, Y+2	; 0x02
    5916:	b9 81       	ldd	r27, Y+1	; 0x01
    5918:	ce 0f       	add	r28, r30
    591a:	d1 1d       	adc	r29, r1
    591c:	0f b6       	in	r0, 0x3f	; 63
    591e:	f8 94       	cli
    5920:	de bf       	out	0x3e, r29	; 62
    5922:	0f be       	out	0x3f, r0	; 63
    5924:	cd bf       	out	0x3d, r28	; 61
    5926:	ed 01       	movw	r28, r26
    5928:	08 95       	ret

0000592a <itoa>:
    592a:	fb 01       	movw	r30, r22
    592c:	9f 01       	movw	r18, r30
    592e:	e8 94       	clt
    5930:	42 30       	cpi	r20, 0x02	; 2
    5932:	c4 f0       	brlt	.+48     	; 0x5964 <itoa+0x3a>
    5934:	45 32       	cpi	r20, 0x25	; 37
    5936:	b4 f4       	brge	.+44     	; 0x5964 <itoa+0x3a>
    5938:	4a 30       	cpi	r20, 0x0A	; 10
    593a:	29 f4       	brne	.+10     	; 0x5946 <itoa+0x1c>
    593c:	97 fb       	bst	r25, 7
    593e:	1e f4       	brtc	.+6      	; 0x5946 <itoa+0x1c>
    5940:	90 95       	com	r25
    5942:	81 95       	neg	r24
    5944:	9f 4f       	sbci	r25, 0xFF	; 255
    5946:	64 2f       	mov	r22, r20
    5948:	77 27       	eor	r23, r23
    594a:	0e 94 37 2c 	call	0x586e	; 0x586e <__udivmodhi4>
    594e:	80 5d       	subi	r24, 0xD0	; 208
    5950:	8a 33       	cpi	r24, 0x3A	; 58
    5952:	0c f0       	brlt	.+2      	; 0x5956 <itoa+0x2c>
    5954:	89 5d       	subi	r24, 0xD9	; 217
    5956:	81 93       	st	Z+, r24
    5958:	cb 01       	movw	r24, r22
    595a:	00 97       	sbiw	r24, 0x00	; 0
    595c:	a1 f7       	brne	.-24     	; 0x5946 <itoa+0x1c>
    595e:	16 f4       	brtc	.+4      	; 0x5964 <itoa+0x3a>
    5960:	5d e2       	ldi	r21, 0x2D	; 45
    5962:	51 93       	st	Z+, r21
    5964:	10 82       	st	Z, r1
    5966:	c9 01       	movw	r24, r18
    5968:	0c 94 b6 2c 	jmp	0x596c	; 0x596c <strrev>

0000596c <strrev>:
    596c:	dc 01       	movw	r26, r24
    596e:	fc 01       	movw	r30, r24
    5970:	67 2f       	mov	r22, r23
    5972:	71 91       	ld	r23, Z+
    5974:	77 23       	and	r23, r23
    5976:	e1 f7       	brne	.-8      	; 0x5970 <strrev+0x4>
    5978:	32 97       	sbiw	r30, 0x02	; 2
    597a:	04 c0       	rjmp	.+8      	; 0x5984 <strrev+0x18>
    597c:	7c 91       	ld	r23, X
    597e:	6d 93       	st	X+, r22
    5980:	70 83       	st	Z, r23
    5982:	62 91       	ld	r22, -Z
    5984:	ae 17       	cp	r26, r30
    5986:	bf 07       	cpc	r27, r31
    5988:	c8 f3       	brcs	.-14     	; 0x597c <strrev+0x10>
    598a:	08 95       	ret

0000598c <_exit>:
    598c:	f8 94       	cli

0000598e <__stop_program>:
    598e:	ff cf       	rjmp	.-2      	; 0x598e <__stop_program>
