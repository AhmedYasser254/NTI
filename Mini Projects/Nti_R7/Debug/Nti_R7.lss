
Nti_R7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00007c12  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017a  00800060  00007c12  00007ca6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000006a  008001da  008001da  00007e20  2**0
                  ALLOC
  3 .stab         00008aa8  00000000  00000000  00007e20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004537  00000000  00000000  000108c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00014dff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  00014f9f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00015191  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0001759c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  00018922  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  00019af8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  00019cb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  00019fae  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0001a91c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 9c 0b 	jmp	0x1738	; 0x1738 <__vector_1>
       8:	0c 94 d1 0b 	jmp	0x17a2	; 0x17a2 <__vector_2>
       c:	0c 94 06 0c 	jmp	0x180c	; 0x180c <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 c9 0d 	jmp	0x1b92	; 0x1b92 <__vector_6>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 20 12 	jmp	0x2440	; 0x2440 <__vector_10>
      2c:	0c 94 dd 11 	jmp	0x23ba	; 0x23ba <__vector_11>
      30:	0c 94 57 0c 	jmp	0x18ae	; 0x18ae <__vector_12>
      34:	0c 94 dc 14 	jmp	0x29b8	; 0x29b8 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e1       	ldi	r30, 0x12	; 18
      68:	fc e7       	ldi	r31, 0x7C	; 124
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3d       	cpi	r26, 0xDA	; 218
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	aa ed       	ldi	r26, 0xDA	; 218
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a4 34       	cpi	r26, 0x44	; 68
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f1 3c 	call	0x79e2	; 0x79e2 <main>
      8a:	0c 94 07 3e 	jmp	0x7c0e	; 0x7c0e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 9f 3d 	jmp	0x7b3e	; 0x7b3e <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 bb 3d 	jmp	0x7b76	; 0x7b76 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ab 3d 	jmp	0x7b56	; 0x7b56 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 c7 3d 	jmp	0x7b8e	; 0x7b8e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ab 3d 	jmp	0x7b56	; 0x7b56 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 c7 3d 	jmp	0x7b8e	; 0x7b8e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 9f 3d 	jmp	0x7b3e	; 0x7b3e <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 bb 3d 	jmp	0x7b76	; 0x7b76 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 a7 3d 	jmp	0x7b4e	; 0x7b4e <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	60 e6       	ldi	r22, 0x60	; 96
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 c3 3d 	jmp	0x7b86	; 0x7b86 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ab 3d 	jmp	0x7b56	; 0x7b56 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 c7 3d 	jmp	0x7b8e	; 0x7b8e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ab 3d 	jmp	0x7b56	; 0x7b56 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 c7 3d 	jmp	0x7b8e	; 0x7b8e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ab 3d 	jmp	0x7b56	; 0x7b56 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 c7 3d 	jmp	0x7b8e	; 0x7b8e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 af 3d 	jmp	0x7b5e	; 0x7b5e <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 cb 3d 	jmp	0x7b96	; 0x7b96 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 a7 3d 	jmp	0x7b4e	; 0x7b4e <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 c3 3d 	jmp	0x7b86	; 0x7b86 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	e8 59       	subi	r30, 0x98	; 152
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_16>:




void __vector_16 ()
{
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT (SREG_t ,I) ;
     e58:	af e5       	ldi	r26, 0x5F	; 95
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	ef e5       	ldi	r30, 0x5F	; 95
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	8f 77       	andi	r24, 0x7F	; 127
     e64:	8c 93       	st	X, r24
	adc_ptr ();
     e66:	e0 91 fb 01 	lds	r30, 0x01FB
     e6a:	f0 91 fc 01 	lds	r31, 0x01FC
     e6e:	09 95       	icall
	ADC_BASE->ADCSRA_Reg.Bitfield.B4 = 1;
     e70:	e4 e2       	ldi	r30, 0x24	; 36
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	82 81       	ldd	r24, Z+2	; 0x02
     e76:	80 61       	ori	r24, 0x10	; 16
     e78:	82 83       	std	Z+2, r24	; 0x02
}
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	ff 91       	pop	r31
     e80:	ef 91       	pop	r30
     e82:	bf 91       	pop	r27
     e84:	af 91       	pop	r26
     e86:	9f 91       	pop	r25
     e88:	8f 91       	pop	r24
     e8a:	7f 91       	pop	r23
     e8c:	6f 91       	pop	r22
     e8e:	5f 91       	pop	r21
     e90:	4f 91       	pop	r20
     e92:	3f 91       	pop	r19
     e94:	2f 91       	pop	r18
     e96:	0f 90       	pop	r0
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	0f 90       	pop	r0
     e9c:	1f 90       	pop	r1
     e9e:	18 95       	reti

00000ea0 <ADC_init>:
/*
 * this function should select ( Vref , Right or Left adjust
, prescaler , autotrigger or Not , and ADC enable).
 */
void ADC_init( const ADC_Config_t * Config_Ptr)
{
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <ADC_init+0x6>
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	9a 83       	std	Y+2, r25	; 0x02
     eac:	89 83       	std	Y+1, r24	; 0x01


	/*Inserting the ref Volatage*/
	ADC_BASE->ADMUX_Reg.Reg = (ADC_BASE->ADMUX_Reg.Reg & VOLTAGE_SELECTION_MASK) | ((Config_Ptr->ref_volt) << REFS0);
     eae:	a4 e2       	ldi	r26, 0x24	; 36
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e4 e2       	ldi	r30, 0x24	; 36
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	83 81       	ldd	r24, Z+3	; 0x03
     eb8:	28 2f       	mov	r18, r24
     eba:	2f 73       	andi	r18, 0x3F	; 63
     ebc:	e9 81       	ldd	r30, Y+1	; 0x01
     ebe:	fa 81       	ldd	r31, Y+2	; 0x02
     ec0:	80 81       	ld	r24, Z
     ec2:	88 2f       	mov	r24, r24
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	00 24       	eor	r0, r0
     ec8:	96 95       	lsr	r25
     eca:	87 95       	ror	r24
     ecc:	07 94       	ror	r0
     ece:	96 95       	lsr	r25
     ed0:	87 95       	ror	r24
     ed2:	07 94       	ror	r0
     ed4:	98 2f       	mov	r25, r24
     ed6:	80 2d       	mov	r24, r0
     ed8:	82 2b       	or	r24, r18
     eda:	13 96       	adiw	r26, 0x03	; 3
     edc:	8c 93       	st	X, r24

	/*Inserting the Prescalar*/
	ADC_BASE->ADCSRA_Reg.Reg = (ADC_BASE->ADCSRA_Reg.Reg & ADC_Prescaler_Select_Bits_Mask) | (Config_Ptr->prescaler);
     ede:	a4 e2       	ldi	r26, 0x24	; 36
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e4 e2       	ldi	r30, 0x24	; 36
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	82 81       	ldd	r24, Z+2	; 0x02
     ee8:	98 2f       	mov	r25, r24
     eea:	98 7f       	andi	r25, 0xF8	; 248
     eec:	e9 81       	ldd	r30, Y+1	; 0x01
     eee:	fa 81       	ldd	r31, Y+2	; 0x02
     ef0:	81 81       	ldd	r24, Z+1	; 0x01
     ef2:	89 2b       	or	r24, r25
     ef4:	12 96       	adiw	r26, 0x02	; 2
     ef6:	8c 93       	st	X, r24

	SET_BIT(ADC_BASE->ADCSRA_Reg.Reg,ADEN);
     ef8:	a4 e2       	ldi	r26, 0x24	; 36
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e4 e2       	ldi	r30, 0x24	; 36
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	82 81       	ldd	r24, Z+2	; 0x02
     f02:	80 68       	ori	r24, 0x80	; 128
     f04:	12 96       	adiw	r26, 0x02	; 2
     f06:	8c 93       	st	X, r24
     f08:	12 97       	sbiw	r26, 0x02	; 2



	if(Config_Ptr->adjust == Left_adjust)
     f0a:	e9 81       	ldd	r30, Y+1	; 0x01
     f0c:	fa 81       	ldd	r31, Y+2	; 0x02
     f0e:	83 81       	ldd	r24, Z+3	; 0x03
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	a1 f4       	brne	.+40     	; 0xf3c <ADC_init+0x9c>
		ADC_BASE->ADMUX_Reg.Bitfield.B5 = Config_Ptr->adjust;
     f14:	a4 e2       	ldi	r26, 0x24	; 36
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e9 81       	ldd	r30, Y+1	; 0x01
     f1a:	fa 81       	ldd	r31, Y+2	; 0x02
     f1c:	83 81       	ldd	r24, Z+3	; 0x03
     f1e:	81 70       	andi	r24, 0x01	; 1
     f20:	81 70       	andi	r24, 0x01	; 1
     f22:	98 2f       	mov	r25, r24
     f24:	92 95       	swap	r25
     f26:	99 0f       	add	r25, r25
     f28:	90 7e       	andi	r25, 0xE0	; 224
     f2a:	13 96       	adiw	r26, 0x03	; 3
     f2c:	8c 91       	ld	r24, X
     f2e:	13 97       	sbiw	r26, 0x03	; 3
     f30:	8f 7d       	andi	r24, 0xDF	; 223
     f32:	89 2b       	or	r24, r25
     f34:	13 96       	adiw	r26, 0x03	; 3
     f36:	8c 93       	st	X, r24
     f38:	13 97       	sbiw	r26, 0x03	; 3
     f3a:	18 c0       	rjmp	.+48     	; 0xf6c <ADC_init+0xcc>
	else if(Config_Ptr->adjust == Right_adjust)
     f3c:	e9 81       	ldd	r30, Y+1	; 0x01
     f3e:	fa 81       	ldd	r31, Y+2	; 0x02
     f40:	83 81       	ldd	r24, Z+3	; 0x03
     f42:	88 23       	and	r24, r24
     f44:	99 f4       	brne	.+38     	; 0xf6c <ADC_init+0xcc>
		ADC_BASE->ADMUX_Reg.Bitfield.B5 = Config_Ptr->adjust;
     f46:	a4 e2       	ldi	r26, 0x24	; 36
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e9 81       	ldd	r30, Y+1	; 0x01
     f4c:	fa 81       	ldd	r31, Y+2	; 0x02
     f4e:	83 81       	ldd	r24, Z+3	; 0x03
     f50:	81 70       	andi	r24, 0x01	; 1
     f52:	81 70       	andi	r24, 0x01	; 1
     f54:	98 2f       	mov	r25, r24
     f56:	92 95       	swap	r25
     f58:	99 0f       	add	r25, r25
     f5a:	90 7e       	andi	r25, 0xE0	; 224
     f5c:	13 96       	adiw	r26, 0x03	; 3
     f5e:	8c 91       	ld	r24, X
     f60:	13 97       	sbiw	r26, 0x03	; 3
     f62:	8f 7d       	andi	r24, 0xDF	; 223
     f64:	89 2b       	or	r24, r25
     f66:	13 96       	adiw	r26, 0x03	; 3
     f68:	8c 93       	st	X, r24
     f6a:	13 97       	sbiw	r26, 0x03	; 3


	if(Config_Ptr->AutoTrigger == Enable_AutoTrigger)
     f6c:	e9 81       	ldd	r30, Y+1	; 0x01
     f6e:	fa 81       	ldd	r31, Y+2	; 0x02
     f70:	84 81       	ldd	r24, Z+4	; 0x04
     f72:	88 23       	and	r24, r24
     f74:	f9 f4       	brne	.+62     	; 0xfb4 <ADC_init+0x114>
	{
		ADC_BASE->ADCSRA_Reg.Bitfield.B5 = 0;
     f76:	e4 e2       	ldi	r30, 0x24	; 36
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	82 81       	ldd	r24, Z+2	; 0x02
     f7c:	8f 7d       	andi	r24, 0xDF	; 223
     f7e:	82 83       	std	Z+2, r24	; 0x02

		ADC_BASE->ADCSRA_Reg.Bitfield.B5 = 1;
     f80:	e4 e2       	ldi	r30, 0x24	; 36
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	82 81       	ldd	r24, Z+2	; 0x02
     f86:	80 62       	ori	r24, 0x20	; 32
     f88:	82 83       	std	Z+2, r24	; 0x02
		SFIOR_t |= (Config_Ptr->AutoTrigger_Source) << 5;
     f8a:	a0 e5       	ldi	r26, 0x50	; 80
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e0 e5       	ldi	r30, 0x50	; 80
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	28 2f       	mov	r18, r24
     f96:	e9 81       	ldd	r30, Y+1	; 0x01
     f98:	fa 81       	ldd	r31, Y+2	; 0x02
     f9a:	85 81       	ldd	r24, Z+5	; 0x05
     f9c:	88 2f       	mov	r24, r24
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	82 95       	swap	r24
     fa6:	92 95       	swap	r25
     fa8:	90 7f       	andi	r25, 0xF0	; 240
     faa:	98 27       	eor	r25, r24
     fac:	80 7f       	andi	r24, 0xF0	; 240
     fae:	98 27       	eor	r25, r24
     fb0:	82 2b       	or	r24, r18
     fb2:	8c 93       	st	X, r24
	}



}
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <ADC_getDigitalValueSynchNonBlocking>:




unsigned short ADC_getDigitalValueSynchNonBlocking(ANALOG_CHANNEL channel)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	0f 92       	push	r0
     fc4:	cd b7       	in	r28, 0x3d	; 61
     fc6:	de b7       	in	r29, 0x3e	; 62
     fc8:	89 83       	std	Y+1, r24	; 0x01
	/* Inserting Channel */
	ADC_BASE->ADMUX_Reg.Reg = (ADC_BASE->ADMUX_Reg.Reg & Analog_Channel_Mask) | channel;
     fca:	a4 e2       	ldi	r26, 0x24	; 36
     fcc:	b0 e0       	ldi	r27, 0x00	; 0
     fce:	e4 e2       	ldi	r30, 0x24	; 36
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	83 81       	ldd	r24, Z+3	; 0x03
     fd4:	98 2f       	mov	r25, r24
     fd6:	90 7e       	andi	r25, 0xE0	; 224
     fd8:	89 81       	ldd	r24, Y+1	; 0x01
     fda:	89 2b       	or	r24, r25
     fdc:	13 96       	adiw	r26, 0x03	; 3
     fde:	8c 93       	st	X, r24

	/*Start Conversion */
	SET_BIT(ADC_BASE->ADCSRA_Reg.Reg , ADSC);
     fe0:	a4 e2       	ldi	r26, 0x24	; 36
     fe2:	b0 e0       	ldi	r27, 0x00	; 0
     fe4:	e4 e2       	ldi	r30, 0x24	; 36
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	82 81       	ldd	r24, Z+2	; 0x02
     fea:	80 64       	ori	r24, 0x40	; 64
     fec:	12 96       	adiw	r26, 0x02	; 2
     fee:	8c 93       	st	X, r24
     ff0:	12 97       	sbiw	r26, 0x02	; 2



	while(BIT_IS_CLEAR(ADC_BASE->ADCSRA_Reg.Reg,ADIF));
     ff2:	e4 e2       	ldi	r30, 0x24	; 36
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	82 81       	ldd	r24, Z+2	; 0x02
     ff8:	88 2f       	mov	r24, r24
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	80 71       	andi	r24, 0x10	; 16
     ffe:	90 70       	andi	r25, 0x00	; 0
    1000:	00 97       	sbiw	r24, 0x00	; 0
    1002:	b9 f3       	breq	.-18     	; 0xff2 <ADC_getDigitalValueSynchNonBlocking+0x34>
	SET_BIT(ADC_BASE->ADCSRA_Reg.Reg,ADIF);
    1004:	a4 e2       	ldi	r26, 0x24	; 36
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	e4 e2       	ldi	r30, 0x24	; 36
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	82 81       	ldd	r24, Z+2	; 0x02
    100e:	80 61       	ori	r24, 0x10	; 16
    1010:	12 96       	adiw	r26, 0x02	; 2
    1012:	8c 93       	st	X, r24
    1014:	12 97       	sbiw	r26, 0x02	; 2
	return 	 ADC_BASE->ADCL_Reg;
    1016:	e4 e2       	ldi	r30, 0x24	; 36
    1018:	f0 e0       	ldi	r31, 0x00	; 0
    101a:	80 81       	ld	r24, Z
    101c:	91 81       	ldd	r25, Z+1	; 0x01

}
    101e:	0f 90       	pop	r0
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <ADC_getDigitalValueAsynchCallBack>:
 * needs to know channel and the call back pointer ,
 *	this fn enables Interrupt and selects the channel and
 *	starts conversion.
 */
void ADC_getDigitalValueAsynchCallBack( ANALOG_CHANNEL channel,void(*fnptr)(void))
{	/* Inserting Channel */
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	00 d0       	rcall	.+0      	; 0x102c <ADC_getDigitalValueAsynchCallBack+0x6>
    102c:	0f 92       	push	r0
    102e:	cd b7       	in	r28, 0x3d	; 61
    1030:	de b7       	in	r29, 0x3e	; 62
    1032:	89 83       	std	Y+1, r24	; 0x01
    1034:	7b 83       	std	Y+3, r23	; 0x03
    1036:	6a 83       	std	Y+2, r22	; 0x02
	ADC_BASE->ADMUX_Reg.Reg = (ADC_BASE->ADMUX_Reg.Reg & Analog_Channel_Mask) | channel;
    1038:	a4 e2       	ldi	r26, 0x24	; 36
    103a:	b0 e0       	ldi	r27, 0x00	; 0
    103c:	e4 e2       	ldi	r30, 0x24	; 36
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	83 81       	ldd	r24, Z+3	; 0x03
    1042:	98 2f       	mov	r25, r24
    1044:	90 7e       	andi	r25, 0xE0	; 224
    1046:	89 81       	ldd	r24, Y+1	; 0x01
    1048:	89 2b       	or	r24, r25
    104a:	13 96       	adiw	r26, 0x03	; 3
    104c:	8c 93       	st	X, r24

	SET_BIT (SREG_t , I) ;
    104e:	af e5       	ldi	r26, 0x5F	; 95
    1050:	b0 e0       	ldi	r27, 0x00	; 0
    1052:	ef e5       	ldi	r30, 0x5F	; 95
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	80 68       	ori	r24, 0x80	; 128
    105a:	8c 93       	st	X, r24
	SET_BIT(ADC_BASE->ADCSRA_Reg.Reg,ADIE);
    105c:	a4 e2       	ldi	r26, 0x24	; 36
    105e:	b0 e0       	ldi	r27, 0x00	; 0
    1060:	e4 e2       	ldi	r30, 0x24	; 36
    1062:	f0 e0       	ldi	r31, 0x00	; 0
    1064:	82 81       	ldd	r24, Z+2	; 0x02
    1066:	88 60       	ori	r24, 0x08	; 8
    1068:	12 96       	adiw	r26, 0x02	; 2
    106a:	8c 93       	st	X, r24

	/*Start Conversion */
	SET_BIT(ADC_BASE->ADCSRA_Reg.Reg , ADSC);
    106c:	a4 e2       	ldi	r26, 0x24	; 36
    106e:	b0 e0       	ldi	r27, 0x00	; 0
    1070:	e4 e2       	ldi	r30, 0x24	; 36
    1072:	f0 e0       	ldi	r31, 0x00	; 0
    1074:	82 81       	ldd	r24, Z+2	; 0x02
    1076:	80 64       	ori	r24, 0x40	; 64
    1078:	12 96       	adiw	r26, 0x02	; 2
    107a:	8c 93       	st	X, r24
    107c:	12 97       	sbiw	r26, 0x02	; 2
	adc_ptr = fnptr;
    107e:	8a 81       	ldd	r24, Y+2	; 0x02
    1080:	9b 81       	ldd	r25, Y+3	; 0x03
    1082:	90 93 fc 01 	sts	0x01FC, r25
    1086:	80 93 fb 01 	sts	0x01FB, r24


}
    108a:	0f 90       	pop	r0
    108c:	0f 90       	pop	r0
    108e:	0f 90       	pop	r0
    1090:	cf 91       	pop	r28
    1092:	df 91       	pop	r29
    1094:	08 95       	ret

00001096 <DIO_voidSetPinDirection>:
 *@param [in] 			-Value: Pin Value
 * @retval 			-none
 * Note				-none
 */
void DIO_voidSetPinDirection(Port_Def* ptr,Pin_ID_t Copy_u8PinId,Pin_Direction_t Copy_u8Direction)
{
    1096:	df 93       	push	r29
    1098:	cf 93       	push	r28
    109a:	00 d0       	rcall	.+0      	; 0x109c <DIO_voidSetPinDirection+0x6>
    109c:	00 d0       	rcall	.+0      	; 0x109e <DIO_voidSetPinDirection+0x8>
    109e:	00 d0       	rcall	.+0      	; 0x10a0 <DIO_voidSetPinDirection+0xa>
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	9a 83       	std	Y+2, r25	; 0x02
    10a6:	89 83       	std	Y+1, r24	; 0x01
    10a8:	6b 83       	std	Y+3, r22	; 0x03
    10aa:	4c 83       	std	Y+4, r20	; 0x04

	switch (Copy_u8PinId)
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	28 2f       	mov	r18, r24
    10b0:	30 e0       	ldi	r19, 0x00	; 0
    10b2:	3e 83       	std	Y+6, r19	; 0x06
    10b4:	2d 83       	std	Y+5, r18	; 0x05
    10b6:	8d 81       	ldd	r24, Y+5	; 0x05
    10b8:	9e 81       	ldd	r25, Y+6	; 0x06
    10ba:	83 30       	cpi	r24, 0x03	; 3
    10bc:	91 05       	cpc	r25, r1
    10be:	09 f4       	brne	.+2      	; 0x10c2 <DIO_voidSetPinDirection+0x2c>
    10c0:	51 c0       	rjmp	.+162    	; 0x1164 <DIO_voidSetPinDirection+0xce>
    10c2:	2d 81       	ldd	r18, Y+5	; 0x05
    10c4:	3e 81       	ldd	r19, Y+6	; 0x06
    10c6:	24 30       	cpi	r18, 0x04	; 4
    10c8:	31 05       	cpc	r19, r1
    10ca:	7c f4       	brge	.+30     	; 0x10ea <DIO_voidSetPinDirection+0x54>
    10cc:	8d 81       	ldd	r24, Y+5	; 0x05
    10ce:	9e 81       	ldd	r25, Y+6	; 0x06
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	91 05       	cpc	r25, r1
    10d4:	71 f1       	breq	.+92     	; 0x1132 <DIO_voidSetPinDirection+0x9c>
    10d6:	2d 81       	ldd	r18, Y+5	; 0x05
    10d8:	3e 81       	ldd	r19, Y+6	; 0x06
    10da:	22 30       	cpi	r18, 0x02	; 2
    10dc:	31 05       	cpc	r19, r1
    10de:	ac f5       	brge	.+106    	; 0x114a <DIO_voidSetPinDirection+0xb4>
    10e0:	8d 81       	ldd	r24, Y+5	; 0x05
    10e2:	9e 81       	ldd	r25, Y+6	; 0x06
    10e4:	00 97       	sbiw	r24, 0x00	; 0
    10e6:	d1 f0       	breq	.+52     	; 0x111c <DIO_voidSetPinDirection+0x86>
    10e8:	81 c0       	rjmp	.+258    	; 0x11ec <DIO_voidSetPinDirection+0x156>
    10ea:	2d 81       	ldd	r18, Y+5	; 0x05
    10ec:	3e 81       	ldd	r19, Y+6	; 0x06
    10ee:	25 30       	cpi	r18, 0x05	; 5
    10f0:	31 05       	cpc	r19, r1
    10f2:	09 f4       	brne	.+2      	; 0x10f6 <DIO_voidSetPinDirection+0x60>
    10f4:	52 c0       	rjmp	.+164    	; 0x119a <DIO_voidSetPinDirection+0x104>
    10f6:	8d 81       	ldd	r24, Y+5	; 0x05
    10f8:	9e 81       	ldd	r25, Y+6	; 0x06
    10fa:	85 30       	cpi	r24, 0x05	; 5
    10fc:	91 05       	cpc	r25, r1
    10fe:	0c f4       	brge	.+2      	; 0x1102 <DIO_voidSetPinDirection+0x6c>
    1100:	3f c0       	rjmp	.+126    	; 0x1180 <DIO_voidSetPinDirection+0xea>
    1102:	2d 81       	ldd	r18, Y+5	; 0x05
    1104:	3e 81       	ldd	r19, Y+6	; 0x06
    1106:	26 30       	cpi	r18, 0x06	; 6
    1108:	31 05       	cpc	r19, r1
    110a:	09 f4       	brne	.+2      	; 0x110e <DIO_voidSetPinDirection+0x78>
    110c:	54 c0       	rjmp	.+168    	; 0x11b6 <DIO_voidSetPinDirection+0x120>
    110e:	8d 81       	ldd	r24, Y+5	; 0x05
    1110:	9e 81       	ldd	r25, Y+6	; 0x06
    1112:	87 30       	cpi	r24, 0x07	; 7
    1114:	91 05       	cpc	r25, r1
    1116:	09 f4       	brne	.+2      	; 0x111a <DIO_voidSetPinDirection+0x84>
    1118:	5d c0       	rjmp	.+186    	; 0x11d4 <DIO_voidSetPinDirection+0x13e>
    111a:	68 c0       	rjmp	.+208    	; 0x11ec <DIO_voidSetPinDirection+0x156>
	{
	case 0:
		ptr->DDR.Bitfield.B0=Copy_u8Direction;
    111c:	8c 81       	ldd	r24, Y+4	; 0x04
    111e:	81 70       	andi	r24, 0x01	; 1
    1120:	e9 81       	ldd	r30, Y+1	; 0x01
    1122:	fa 81       	ldd	r31, Y+2	; 0x02
    1124:	98 2f       	mov	r25, r24
    1126:	91 70       	andi	r25, 0x01	; 1
    1128:	81 81       	ldd	r24, Z+1	; 0x01
    112a:	8e 7f       	andi	r24, 0xFE	; 254
    112c:	89 2b       	or	r24, r25
    112e:	81 83       	std	Z+1, r24	; 0x01
    1130:	5d c0       	rjmp	.+186    	; 0x11ec <DIO_voidSetPinDirection+0x156>
		break;
	case 1:
		ptr->DDR.Bitfield.B1=Copy_u8Direction;
    1132:	8c 81       	ldd	r24, Y+4	; 0x04
    1134:	81 70       	andi	r24, 0x01	; 1
    1136:	e9 81       	ldd	r30, Y+1	; 0x01
    1138:	fa 81       	ldd	r31, Y+2	; 0x02
    113a:	81 70       	andi	r24, 0x01	; 1
    113c:	98 2f       	mov	r25, r24
    113e:	99 0f       	add	r25, r25
    1140:	81 81       	ldd	r24, Z+1	; 0x01
    1142:	8d 7f       	andi	r24, 0xFD	; 253
    1144:	89 2b       	or	r24, r25
    1146:	81 83       	std	Z+1, r24	; 0x01
    1148:	51 c0       	rjmp	.+162    	; 0x11ec <DIO_voidSetPinDirection+0x156>
		break;
	case 2:
		ptr->DDR.Bitfield.B2=Copy_u8Direction;
    114a:	8c 81       	ldd	r24, Y+4	; 0x04
    114c:	81 70       	andi	r24, 0x01	; 1
    114e:	e9 81       	ldd	r30, Y+1	; 0x01
    1150:	fa 81       	ldd	r31, Y+2	; 0x02
    1152:	81 70       	andi	r24, 0x01	; 1
    1154:	98 2f       	mov	r25, r24
    1156:	99 0f       	add	r25, r25
    1158:	99 0f       	add	r25, r25
    115a:	81 81       	ldd	r24, Z+1	; 0x01
    115c:	8b 7f       	andi	r24, 0xFB	; 251
    115e:	89 2b       	or	r24, r25
    1160:	81 83       	std	Z+1, r24	; 0x01
    1162:	44 c0       	rjmp	.+136    	; 0x11ec <DIO_voidSetPinDirection+0x156>
		break;
	case 3:
		ptr->DDR.Bitfield.B3=Copy_u8Direction;
    1164:	8c 81       	ldd	r24, Y+4	; 0x04
    1166:	81 70       	andi	r24, 0x01	; 1
    1168:	e9 81       	ldd	r30, Y+1	; 0x01
    116a:	fa 81       	ldd	r31, Y+2	; 0x02
    116c:	81 70       	andi	r24, 0x01	; 1
    116e:	98 2f       	mov	r25, r24
    1170:	99 0f       	add	r25, r25
    1172:	99 0f       	add	r25, r25
    1174:	99 0f       	add	r25, r25
    1176:	81 81       	ldd	r24, Z+1	; 0x01
    1178:	87 7f       	andi	r24, 0xF7	; 247
    117a:	89 2b       	or	r24, r25
    117c:	81 83       	std	Z+1, r24	; 0x01
    117e:	36 c0       	rjmp	.+108    	; 0x11ec <DIO_voidSetPinDirection+0x156>
		break;
	case 4:
		ptr->DDR.Bitfield.B4=Copy_u8Direction;
    1180:	8c 81       	ldd	r24, Y+4	; 0x04
    1182:	81 70       	andi	r24, 0x01	; 1
    1184:	e9 81       	ldd	r30, Y+1	; 0x01
    1186:	fa 81       	ldd	r31, Y+2	; 0x02
    1188:	81 70       	andi	r24, 0x01	; 1
    118a:	98 2f       	mov	r25, r24
    118c:	92 95       	swap	r25
    118e:	90 7f       	andi	r25, 0xF0	; 240
    1190:	81 81       	ldd	r24, Z+1	; 0x01
    1192:	8f 7e       	andi	r24, 0xEF	; 239
    1194:	89 2b       	or	r24, r25
    1196:	81 83       	std	Z+1, r24	; 0x01
    1198:	29 c0       	rjmp	.+82     	; 0x11ec <DIO_voidSetPinDirection+0x156>
		break;
	case 5:
		ptr->DDR.Bitfield.B5=Copy_u8Direction;
    119a:	8c 81       	ldd	r24, Y+4	; 0x04
    119c:	81 70       	andi	r24, 0x01	; 1
    119e:	e9 81       	ldd	r30, Y+1	; 0x01
    11a0:	fa 81       	ldd	r31, Y+2	; 0x02
    11a2:	81 70       	andi	r24, 0x01	; 1
    11a4:	98 2f       	mov	r25, r24
    11a6:	92 95       	swap	r25
    11a8:	99 0f       	add	r25, r25
    11aa:	90 7e       	andi	r25, 0xE0	; 224
    11ac:	81 81       	ldd	r24, Z+1	; 0x01
    11ae:	8f 7d       	andi	r24, 0xDF	; 223
    11b0:	89 2b       	or	r24, r25
    11b2:	81 83       	std	Z+1, r24	; 0x01
    11b4:	1b c0       	rjmp	.+54     	; 0x11ec <DIO_voidSetPinDirection+0x156>
		break;
	case 6:
		ptr->DDR.Bitfield.B6=Copy_u8Direction;
    11b6:	8c 81       	ldd	r24, Y+4	; 0x04
    11b8:	81 70       	andi	r24, 0x01	; 1
    11ba:	e9 81       	ldd	r30, Y+1	; 0x01
    11bc:	fa 81       	ldd	r31, Y+2	; 0x02
    11be:	81 70       	andi	r24, 0x01	; 1
    11c0:	98 2f       	mov	r25, r24
    11c2:	92 95       	swap	r25
    11c4:	99 0f       	add	r25, r25
    11c6:	99 0f       	add	r25, r25
    11c8:	90 7c       	andi	r25, 0xC0	; 192
    11ca:	81 81       	ldd	r24, Z+1	; 0x01
    11cc:	8f 7b       	andi	r24, 0xBF	; 191
    11ce:	89 2b       	or	r24, r25
    11d0:	81 83       	std	Z+1, r24	; 0x01
    11d2:	0c c0       	rjmp	.+24     	; 0x11ec <DIO_voidSetPinDirection+0x156>
		break;
	case 7:
		ptr->DDR.Bitfield.B7=Copy_u8Direction;
    11d4:	8c 81       	ldd	r24, Y+4	; 0x04
    11d6:	81 70       	andi	r24, 0x01	; 1
    11d8:	e9 81       	ldd	r30, Y+1	; 0x01
    11da:	fa 81       	ldd	r31, Y+2	; 0x02
    11dc:	98 2f       	mov	r25, r24
    11de:	97 95       	ror	r25
    11e0:	99 27       	eor	r25, r25
    11e2:	97 95       	ror	r25
    11e4:	81 81       	ldd	r24, Z+1	; 0x01
    11e6:	8f 77       	andi	r24, 0x7F	; 127
    11e8:	89 2b       	or	r24, r25
    11ea:	81 83       	std	Z+1, r24	; 0x01
		break;

	}
}
    11ec:	26 96       	adiw	r28, 0x06	; 6
    11ee:	0f b6       	in	r0, 0x3f	; 63
    11f0:	f8 94       	cli
    11f2:	de bf       	out	0x3e, r29	; 62
    11f4:	0f be       	out	0x3f, r0	; 63
    11f6:	cd bf       	out	0x3d, r28	; 61
    11f8:	cf 91       	pop	r28
    11fa:	df 91       	pop	r29
    11fc:	08 95       	ret

000011fe <DIO_voidSetPinValue>:
 *@param [in] 			-Copy_u8Value: Pin Value
 * @retval 			-none
 * Note				-none
 */
void DIO_voidSetPinValue(Port_Def* ptr,Pin_ID_t Copy_u8PinId, PIN_VALUE_t Copy_u8Value)
{
    11fe:	df 93       	push	r29
    1200:	cf 93       	push	r28
    1202:	00 d0       	rcall	.+0      	; 0x1204 <DIO_voidSetPinValue+0x6>
    1204:	00 d0       	rcall	.+0      	; 0x1206 <DIO_voidSetPinValue+0x8>
    1206:	00 d0       	rcall	.+0      	; 0x1208 <DIO_voidSetPinValue+0xa>
    1208:	cd b7       	in	r28, 0x3d	; 61
    120a:	de b7       	in	r29, 0x3e	; 62
    120c:	9a 83       	std	Y+2, r25	; 0x02
    120e:	89 83       	std	Y+1, r24	; 0x01
    1210:	6b 83       	std	Y+3, r22	; 0x03
    1212:	4c 83       	std	Y+4, r20	; 0x04

	switch (Copy_u8PinId)
    1214:	8b 81       	ldd	r24, Y+3	; 0x03
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	3e 83       	std	Y+6, r19	; 0x06
    121c:	2d 83       	std	Y+5, r18	; 0x05
    121e:	8d 81       	ldd	r24, Y+5	; 0x05
    1220:	9e 81       	ldd	r25, Y+6	; 0x06
    1222:	83 30       	cpi	r24, 0x03	; 3
    1224:	91 05       	cpc	r25, r1
    1226:	09 f4       	brne	.+2      	; 0x122a <DIO_voidSetPinValue+0x2c>
    1228:	51 c0       	rjmp	.+162    	; 0x12cc <DIO_voidSetPinValue+0xce>
    122a:	2d 81       	ldd	r18, Y+5	; 0x05
    122c:	3e 81       	ldd	r19, Y+6	; 0x06
    122e:	24 30       	cpi	r18, 0x04	; 4
    1230:	31 05       	cpc	r19, r1
    1232:	7c f4       	brge	.+30     	; 0x1252 <DIO_voidSetPinValue+0x54>
    1234:	8d 81       	ldd	r24, Y+5	; 0x05
    1236:	9e 81       	ldd	r25, Y+6	; 0x06
    1238:	81 30       	cpi	r24, 0x01	; 1
    123a:	91 05       	cpc	r25, r1
    123c:	71 f1       	breq	.+92     	; 0x129a <DIO_voidSetPinValue+0x9c>
    123e:	2d 81       	ldd	r18, Y+5	; 0x05
    1240:	3e 81       	ldd	r19, Y+6	; 0x06
    1242:	22 30       	cpi	r18, 0x02	; 2
    1244:	31 05       	cpc	r19, r1
    1246:	ac f5       	brge	.+106    	; 0x12b2 <DIO_voidSetPinValue+0xb4>
    1248:	8d 81       	ldd	r24, Y+5	; 0x05
    124a:	9e 81       	ldd	r25, Y+6	; 0x06
    124c:	00 97       	sbiw	r24, 0x00	; 0
    124e:	d1 f0       	breq	.+52     	; 0x1284 <DIO_voidSetPinValue+0x86>
    1250:	81 c0       	rjmp	.+258    	; 0x1354 <DIO_voidSetPinValue+0x156>
    1252:	2d 81       	ldd	r18, Y+5	; 0x05
    1254:	3e 81       	ldd	r19, Y+6	; 0x06
    1256:	25 30       	cpi	r18, 0x05	; 5
    1258:	31 05       	cpc	r19, r1
    125a:	09 f4       	brne	.+2      	; 0x125e <DIO_voidSetPinValue+0x60>
    125c:	52 c0       	rjmp	.+164    	; 0x1302 <DIO_voidSetPinValue+0x104>
    125e:	8d 81       	ldd	r24, Y+5	; 0x05
    1260:	9e 81       	ldd	r25, Y+6	; 0x06
    1262:	85 30       	cpi	r24, 0x05	; 5
    1264:	91 05       	cpc	r25, r1
    1266:	0c f4       	brge	.+2      	; 0x126a <DIO_voidSetPinValue+0x6c>
    1268:	3f c0       	rjmp	.+126    	; 0x12e8 <DIO_voidSetPinValue+0xea>
    126a:	2d 81       	ldd	r18, Y+5	; 0x05
    126c:	3e 81       	ldd	r19, Y+6	; 0x06
    126e:	26 30       	cpi	r18, 0x06	; 6
    1270:	31 05       	cpc	r19, r1
    1272:	09 f4       	brne	.+2      	; 0x1276 <DIO_voidSetPinValue+0x78>
    1274:	54 c0       	rjmp	.+168    	; 0x131e <DIO_voidSetPinValue+0x120>
    1276:	8d 81       	ldd	r24, Y+5	; 0x05
    1278:	9e 81       	ldd	r25, Y+6	; 0x06
    127a:	87 30       	cpi	r24, 0x07	; 7
    127c:	91 05       	cpc	r25, r1
    127e:	09 f4       	brne	.+2      	; 0x1282 <DIO_voidSetPinValue+0x84>
    1280:	5d c0       	rjmp	.+186    	; 0x133c <DIO_voidSetPinValue+0x13e>
    1282:	68 c0       	rjmp	.+208    	; 0x1354 <DIO_voidSetPinValue+0x156>
	{
	case 0:
		ptr->PORT.Bitfield.B0=Copy_u8Value;
    1284:	8c 81       	ldd	r24, Y+4	; 0x04
    1286:	81 70       	andi	r24, 0x01	; 1
    1288:	e9 81       	ldd	r30, Y+1	; 0x01
    128a:	fa 81       	ldd	r31, Y+2	; 0x02
    128c:	98 2f       	mov	r25, r24
    128e:	91 70       	andi	r25, 0x01	; 1
    1290:	82 81       	ldd	r24, Z+2	; 0x02
    1292:	8e 7f       	andi	r24, 0xFE	; 254
    1294:	89 2b       	or	r24, r25
    1296:	82 83       	std	Z+2, r24	; 0x02
    1298:	5d c0       	rjmp	.+186    	; 0x1354 <DIO_voidSetPinValue+0x156>
		break;
	case 1:
		ptr->PORT.Bitfield.B1=Copy_u8Value;
    129a:	8c 81       	ldd	r24, Y+4	; 0x04
    129c:	81 70       	andi	r24, 0x01	; 1
    129e:	e9 81       	ldd	r30, Y+1	; 0x01
    12a0:	fa 81       	ldd	r31, Y+2	; 0x02
    12a2:	81 70       	andi	r24, 0x01	; 1
    12a4:	98 2f       	mov	r25, r24
    12a6:	99 0f       	add	r25, r25
    12a8:	82 81       	ldd	r24, Z+2	; 0x02
    12aa:	8d 7f       	andi	r24, 0xFD	; 253
    12ac:	89 2b       	or	r24, r25
    12ae:	82 83       	std	Z+2, r24	; 0x02
    12b0:	51 c0       	rjmp	.+162    	; 0x1354 <DIO_voidSetPinValue+0x156>
		break;
	case 2:
		ptr->PORT.Bitfield.B2=Copy_u8Value;
    12b2:	8c 81       	ldd	r24, Y+4	; 0x04
    12b4:	81 70       	andi	r24, 0x01	; 1
    12b6:	e9 81       	ldd	r30, Y+1	; 0x01
    12b8:	fa 81       	ldd	r31, Y+2	; 0x02
    12ba:	81 70       	andi	r24, 0x01	; 1
    12bc:	98 2f       	mov	r25, r24
    12be:	99 0f       	add	r25, r25
    12c0:	99 0f       	add	r25, r25
    12c2:	82 81       	ldd	r24, Z+2	; 0x02
    12c4:	8b 7f       	andi	r24, 0xFB	; 251
    12c6:	89 2b       	or	r24, r25
    12c8:	82 83       	std	Z+2, r24	; 0x02
    12ca:	44 c0       	rjmp	.+136    	; 0x1354 <DIO_voidSetPinValue+0x156>
		break;
	case 3:
		ptr->PORT.Bitfield.B3=Copy_u8Value;
    12cc:	8c 81       	ldd	r24, Y+4	; 0x04
    12ce:	81 70       	andi	r24, 0x01	; 1
    12d0:	e9 81       	ldd	r30, Y+1	; 0x01
    12d2:	fa 81       	ldd	r31, Y+2	; 0x02
    12d4:	81 70       	andi	r24, 0x01	; 1
    12d6:	98 2f       	mov	r25, r24
    12d8:	99 0f       	add	r25, r25
    12da:	99 0f       	add	r25, r25
    12dc:	99 0f       	add	r25, r25
    12de:	82 81       	ldd	r24, Z+2	; 0x02
    12e0:	87 7f       	andi	r24, 0xF7	; 247
    12e2:	89 2b       	or	r24, r25
    12e4:	82 83       	std	Z+2, r24	; 0x02
    12e6:	36 c0       	rjmp	.+108    	; 0x1354 <DIO_voidSetPinValue+0x156>
		break;
	case 4:
		ptr->PORT.Bitfield.B4=Copy_u8Value;
    12e8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ea:	81 70       	andi	r24, 0x01	; 1
    12ec:	e9 81       	ldd	r30, Y+1	; 0x01
    12ee:	fa 81       	ldd	r31, Y+2	; 0x02
    12f0:	81 70       	andi	r24, 0x01	; 1
    12f2:	98 2f       	mov	r25, r24
    12f4:	92 95       	swap	r25
    12f6:	90 7f       	andi	r25, 0xF0	; 240
    12f8:	82 81       	ldd	r24, Z+2	; 0x02
    12fa:	8f 7e       	andi	r24, 0xEF	; 239
    12fc:	89 2b       	or	r24, r25
    12fe:	82 83       	std	Z+2, r24	; 0x02
    1300:	29 c0       	rjmp	.+82     	; 0x1354 <DIO_voidSetPinValue+0x156>
		break;
	case 5:
		ptr->PORT.Bitfield.B5=Copy_u8Value;
    1302:	8c 81       	ldd	r24, Y+4	; 0x04
    1304:	81 70       	andi	r24, 0x01	; 1
    1306:	e9 81       	ldd	r30, Y+1	; 0x01
    1308:	fa 81       	ldd	r31, Y+2	; 0x02
    130a:	81 70       	andi	r24, 0x01	; 1
    130c:	98 2f       	mov	r25, r24
    130e:	92 95       	swap	r25
    1310:	99 0f       	add	r25, r25
    1312:	90 7e       	andi	r25, 0xE0	; 224
    1314:	82 81       	ldd	r24, Z+2	; 0x02
    1316:	8f 7d       	andi	r24, 0xDF	; 223
    1318:	89 2b       	or	r24, r25
    131a:	82 83       	std	Z+2, r24	; 0x02
    131c:	1b c0       	rjmp	.+54     	; 0x1354 <DIO_voidSetPinValue+0x156>
		break;
	case 6:
		ptr->PORT.Bitfield.B6=Copy_u8Value;
    131e:	8c 81       	ldd	r24, Y+4	; 0x04
    1320:	81 70       	andi	r24, 0x01	; 1
    1322:	e9 81       	ldd	r30, Y+1	; 0x01
    1324:	fa 81       	ldd	r31, Y+2	; 0x02
    1326:	81 70       	andi	r24, 0x01	; 1
    1328:	98 2f       	mov	r25, r24
    132a:	92 95       	swap	r25
    132c:	99 0f       	add	r25, r25
    132e:	99 0f       	add	r25, r25
    1330:	90 7c       	andi	r25, 0xC0	; 192
    1332:	82 81       	ldd	r24, Z+2	; 0x02
    1334:	8f 7b       	andi	r24, 0xBF	; 191
    1336:	89 2b       	or	r24, r25
    1338:	82 83       	std	Z+2, r24	; 0x02
    133a:	0c c0       	rjmp	.+24     	; 0x1354 <DIO_voidSetPinValue+0x156>
		break;
	case 7:
		ptr->PORT.Bitfield.B7=Copy_u8Value;
    133c:	8c 81       	ldd	r24, Y+4	; 0x04
    133e:	81 70       	andi	r24, 0x01	; 1
    1340:	e9 81       	ldd	r30, Y+1	; 0x01
    1342:	fa 81       	ldd	r31, Y+2	; 0x02
    1344:	98 2f       	mov	r25, r24
    1346:	97 95       	ror	r25
    1348:	99 27       	eor	r25, r25
    134a:	97 95       	ror	r25
    134c:	82 81       	ldd	r24, Z+2	; 0x02
    134e:	8f 77       	andi	r24, 0x7F	; 127
    1350:	89 2b       	or	r24, r25
    1352:	82 83       	std	Z+2, r24	; 0x02
		break;

	}
}
    1354:	26 96       	adiw	r28, 0x06	; 6
    1356:	0f b6       	in	r0, 0x3f	; 63
    1358:	f8 94       	cli
    135a:	de bf       	out	0x3e, r29	; 62
    135c:	0f be       	out	0x3f, r0	; 63
    135e:	cd bf       	out	0x3d, r28	; 61
    1360:	cf 91       	pop	r28
    1362:	df 91       	pop	r29
    1364:	08 95       	ret

00001366 <DIO_voidGetPinValue>:
 * @retval
 * Note				-none
 */

uint8 DIO_voidGetPinValue(Port_Def* ptr,Pin_ID_t Copy_u8PinId)
{
    1366:	df 93       	push	r29
    1368:	cf 93       	push	r28
    136a:	00 d0       	rcall	.+0      	; 0x136c <DIO_voidGetPinValue+0x6>
    136c:	00 d0       	rcall	.+0      	; 0x136e <DIO_voidGetPinValue+0x8>
    136e:	00 d0       	rcall	.+0      	; 0x1370 <DIO_voidGetPinValue+0xa>
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    1374:	9b 83       	std	Y+3, r25	; 0x03
    1376:	8a 83       	std	Y+2, r24	; 0x02
    1378:	6c 83       	std	Y+4, r22	; 0x04
	uint8 value=0;
    137a:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8PinId)
    137c:	8c 81       	ldd	r24, Y+4	; 0x04
    137e:	28 2f       	mov	r18, r24
    1380:	30 e0       	ldi	r19, 0x00	; 0
    1382:	3e 83       	std	Y+6, r19	; 0x06
    1384:	2d 83       	std	Y+5, r18	; 0x05
    1386:	8d 81       	ldd	r24, Y+5	; 0x05
    1388:	9e 81       	ldd	r25, Y+6	; 0x06
    138a:	83 30       	cpi	r24, 0x03	; 3
    138c:	91 05       	cpc	r25, r1
    138e:	09 f4       	brne	.+2      	; 0x1392 <DIO_voidGetPinValue+0x2c>
    1390:	3e c0       	rjmp	.+124    	; 0x140e <DIO_voidGetPinValue+0xa8>
    1392:	2d 81       	ldd	r18, Y+5	; 0x05
    1394:	3e 81       	ldd	r19, Y+6	; 0x06
    1396:	24 30       	cpi	r18, 0x04	; 4
    1398:	31 05       	cpc	r19, r1
    139a:	7c f4       	brge	.+30     	; 0x13ba <DIO_voidGetPinValue+0x54>
    139c:	8d 81       	ldd	r24, Y+5	; 0x05
    139e:	9e 81       	ldd	r25, Y+6	; 0x06
    13a0:	81 30       	cpi	r24, 0x01	; 1
    13a2:	91 05       	cpc	r25, r1
    13a4:	29 f1       	breq	.+74     	; 0x13f0 <DIO_voidGetPinValue+0x8a>
    13a6:	2d 81       	ldd	r18, Y+5	; 0x05
    13a8:	3e 81       	ldd	r19, Y+6	; 0x06
    13aa:	22 30       	cpi	r18, 0x02	; 2
    13ac:	31 05       	cpc	r19, r1
    13ae:	3c f5       	brge	.+78     	; 0x13fe <DIO_voidGetPinValue+0x98>
    13b0:	8d 81       	ldd	r24, Y+5	; 0x05
    13b2:	9e 81       	ldd	r25, Y+6	; 0x06
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	b1 f0       	breq	.+44     	; 0x13e4 <DIO_voidGetPinValue+0x7e>
    13b8:	55 c0       	rjmp	.+170    	; 0x1464 <DIO_voidGetPinValue+0xfe>
    13ba:	2d 81       	ldd	r18, Y+5	; 0x05
    13bc:	3e 81       	ldd	r19, Y+6	; 0x06
    13be:	25 30       	cpi	r18, 0x05	; 5
    13c0:	31 05       	cpc	r19, r1
    13c2:	b1 f1       	breq	.+108    	; 0x1430 <DIO_voidGetPinValue+0xca>
    13c4:	8d 81       	ldd	r24, Y+5	; 0x05
    13c6:	9e 81       	ldd	r25, Y+6	; 0x06
    13c8:	85 30       	cpi	r24, 0x05	; 5
    13ca:	91 05       	cpc	r25, r1
    13cc:	4c f1       	brlt	.+82     	; 0x1420 <DIO_voidGetPinValue+0xba>
    13ce:	2d 81       	ldd	r18, Y+5	; 0x05
    13d0:	3e 81       	ldd	r19, Y+6	; 0x06
    13d2:	26 30       	cpi	r18, 0x06	; 6
    13d4:	31 05       	cpc	r19, r1
    13d6:	a9 f1       	breq	.+106    	; 0x1442 <DIO_voidGetPinValue+0xdc>
    13d8:	8d 81       	ldd	r24, Y+5	; 0x05
    13da:	9e 81       	ldd	r25, Y+6	; 0x06
    13dc:	87 30       	cpi	r24, 0x07	; 7
    13de:	91 05       	cpc	r25, r1
    13e0:	d1 f1       	breq	.+116    	; 0x1456 <DIO_voidGetPinValue+0xf0>
    13e2:	40 c0       	rjmp	.+128    	; 0x1464 <DIO_voidGetPinValue+0xfe>
	{
	case 0:
		value=ptr->Pin.Bitfield.B0;
    13e4:	ea 81       	ldd	r30, Y+2	; 0x02
    13e6:	fb 81       	ldd	r31, Y+3	; 0x03
    13e8:	80 81       	ld	r24, Z
    13ea:	81 70       	andi	r24, 0x01	; 1
    13ec:	89 83       	std	Y+1, r24	; 0x01
    13ee:	3a c0       	rjmp	.+116    	; 0x1464 <DIO_voidGetPinValue+0xfe>
		break;
	case 1:
		value=ptr->Pin.Bitfield.B1;
    13f0:	ea 81       	ldd	r30, Y+2	; 0x02
    13f2:	fb 81       	ldd	r31, Y+3	; 0x03
    13f4:	80 81       	ld	r24, Z
    13f6:	86 95       	lsr	r24
    13f8:	81 70       	andi	r24, 0x01	; 1
    13fa:	89 83       	std	Y+1, r24	; 0x01
    13fc:	33 c0       	rjmp	.+102    	; 0x1464 <DIO_voidGetPinValue+0xfe>
		break;
	case 2:
		value=ptr->Pin.Bitfield.B2;
    13fe:	ea 81       	ldd	r30, Y+2	; 0x02
    1400:	fb 81       	ldd	r31, Y+3	; 0x03
    1402:	80 81       	ld	r24, Z
    1404:	86 95       	lsr	r24
    1406:	86 95       	lsr	r24
    1408:	81 70       	andi	r24, 0x01	; 1
    140a:	89 83       	std	Y+1, r24	; 0x01
    140c:	2b c0       	rjmp	.+86     	; 0x1464 <DIO_voidGetPinValue+0xfe>
		break;
	case 3:
		value=ptr->Pin.Bitfield.B3;
    140e:	ea 81       	ldd	r30, Y+2	; 0x02
    1410:	fb 81       	ldd	r31, Y+3	; 0x03
    1412:	80 81       	ld	r24, Z
    1414:	86 95       	lsr	r24
    1416:	86 95       	lsr	r24
    1418:	86 95       	lsr	r24
    141a:	81 70       	andi	r24, 0x01	; 1
    141c:	89 83       	std	Y+1, r24	; 0x01
    141e:	22 c0       	rjmp	.+68     	; 0x1464 <DIO_voidGetPinValue+0xfe>
		break;
	case 4:
		value=ptr->Pin.Bitfield.B4;
    1420:	ea 81       	ldd	r30, Y+2	; 0x02
    1422:	fb 81       	ldd	r31, Y+3	; 0x03
    1424:	80 81       	ld	r24, Z
    1426:	82 95       	swap	r24
    1428:	8f 70       	andi	r24, 0x0F	; 15
    142a:	81 70       	andi	r24, 0x01	; 1
    142c:	89 83       	std	Y+1, r24	; 0x01
    142e:	1a c0       	rjmp	.+52     	; 0x1464 <DIO_voidGetPinValue+0xfe>
		break;
	case 5:
		value=ptr->Pin.Bitfield.B5;
    1430:	ea 81       	ldd	r30, Y+2	; 0x02
    1432:	fb 81       	ldd	r31, Y+3	; 0x03
    1434:	80 81       	ld	r24, Z
    1436:	82 95       	swap	r24
    1438:	86 95       	lsr	r24
    143a:	87 70       	andi	r24, 0x07	; 7
    143c:	81 70       	andi	r24, 0x01	; 1
    143e:	89 83       	std	Y+1, r24	; 0x01
    1440:	11 c0       	rjmp	.+34     	; 0x1464 <DIO_voidGetPinValue+0xfe>
		break;
	case 6:
		value=ptr->Pin.Bitfield.B6;
    1442:	ea 81       	ldd	r30, Y+2	; 0x02
    1444:	fb 81       	ldd	r31, Y+3	; 0x03
    1446:	80 81       	ld	r24, Z
    1448:	82 95       	swap	r24
    144a:	86 95       	lsr	r24
    144c:	86 95       	lsr	r24
    144e:	83 70       	andi	r24, 0x03	; 3
    1450:	81 70       	andi	r24, 0x01	; 1
    1452:	89 83       	std	Y+1, r24	; 0x01
    1454:	07 c0       	rjmp	.+14     	; 0x1464 <DIO_voidGetPinValue+0xfe>
		break;
	case 7:
		value=ptr->Pin.Bitfield.B7;
    1456:	ea 81       	ldd	r30, Y+2	; 0x02
    1458:	fb 81       	ldd	r31, Y+3	; 0x03
    145a:	80 81       	ld	r24, Z
    145c:	88 1f       	adc	r24, r24
    145e:	88 27       	eor	r24, r24
    1460:	88 1f       	adc	r24, r24
    1462:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return value;
    1464:	89 81       	ldd	r24, Y+1	; 0x01
}
    1466:	26 96       	adiw	r28, 0x06	; 6
    1468:	0f b6       	in	r0, 0x3f	; 63
    146a:	f8 94       	cli
    146c:	de bf       	out	0x3e, r29	; 62
    146e:	0f be       	out	0x3f, r0	; 63
    1470:	cd bf       	out	0x3d, r28	; 61
    1472:	cf 91       	pop	r28
    1474:	df 91       	pop	r29
    1476:	08 95       	ret

00001478 <DIO_voidSetPortDirection>:
 *@param [in] 			-Copy_u8Direction:  specifies the port bit to Make direction. Set by @ref GPIO_PORT_Value
 * @retval 			-none
 * Note				-none
 */
void DIO_voidSetPortDirection(Port_Def* ptr,Port_Direction_t Copy_u8Direction)
{
    1478:	df 93       	push	r29
    147a:	cf 93       	push	r28
    147c:	00 d0       	rcall	.+0      	; 0x147e <DIO_voidSetPortDirection+0x6>
    147e:	0f 92       	push	r0
    1480:	cd b7       	in	r28, 0x3d	; 61
    1482:	de b7       	in	r29, 0x3e	; 62
    1484:	9a 83       	std	Y+2, r25	; 0x02
    1486:	89 83       	std	Y+1, r24	; 0x01
    1488:	6b 83       	std	Y+3, r22	; 0x03
	ptr->DDR.Reg=Copy_u8Direction;
    148a:	e9 81       	ldd	r30, Y+1	; 0x01
    148c:	fa 81       	ldd	r31, Y+2	; 0x02
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	81 83       	std	Z+1, r24	; 0x01
}
    1492:	0f 90       	pop	r0
    1494:	0f 90       	pop	r0
    1496:	0f 90       	pop	r0
    1498:	cf 91       	pop	r28
    149a:	df 91       	pop	r29
    149c:	08 95       	ret

0000149e <DIO_voidSetPortValue>:
 *
 * @retval 				-none
 * Note					-none
 */
void DIO_voidSetPortValue(Port_Def* ptr,PORT_VALUE_t Copy_u8Value)
{
    149e:	df 93       	push	r29
    14a0:	cf 93       	push	r28
    14a2:	00 d0       	rcall	.+0      	; 0x14a4 <DIO_voidSetPortValue+0x6>
    14a4:	0f 92       	push	r0
    14a6:	cd b7       	in	r28, 0x3d	; 61
    14a8:	de b7       	in	r29, 0x3e	; 62
    14aa:	9a 83       	std	Y+2, r25	; 0x02
    14ac:	89 83       	std	Y+1, r24	; 0x01
    14ae:	6b 83       	std	Y+3, r22	; 0x03
	ptr->PORT.Reg=Copy_u8Value;
    14b0:	e9 81       	ldd	r30, Y+1	; 0x01
    14b2:	fa 81       	ldd	r31, Y+2	; 0x02
    14b4:	8b 81       	ldd	r24, Y+3	; 0x03
    14b6:	82 83       	std	Z+2, r24	; 0x02
}
    14b8:	0f 90       	pop	r0
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	cf 91       	pop	r28
    14c0:	df 91       	pop	r29
    14c2:	08 95       	ret

000014c4 <DIO_voidGetPortValue>:



uint8 DIO_voidGetPortValue(Port_Def* ptr)
{
    14c4:	df 93       	push	r29
    14c6:	cf 93       	push	r28
    14c8:	00 d0       	rcall	.+0      	; 0x14ca <DIO_voidGetPortValue+0x6>
    14ca:	cd b7       	in	r28, 0x3d	; 61
    14cc:	de b7       	in	r29, 0x3e	; 62
    14ce:	9a 83       	std	Y+2, r25	; 0x02
    14d0:	89 83       	std	Y+1, r24	; 0x01
	return ptr->Pin.Reg;
    14d2:	e9 81       	ldd	r30, Y+1	; 0x01
    14d4:	fa 81       	ldd	r31, Y+2	; 0x02
    14d6:	80 81       	ld	r24, Z
}
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	cf 91       	pop	r28
    14de:	df 91       	pop	r29
    14e0:	08 95       	ret

000014e2 <MCAL_EXTI_INIT>:
 * @param [in]   	-EXTI_Config set by @ref EXTI_define, EXTI_Trigger_define
 * @retval 			-ErrorSate if (E_OK or E_NOK if the CONFIG PTR is NULL
 * Note				-We use ENABLE_GIC() to Enable the SREG REGISTERS
 */
ErrorState_t MCAL_EXTI_INIT(EXTI_CONFIG_t* EXTI_Config)
{
    14e2:	df 93       	push	r29
    14e4:	cf 93       	push	r28
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <MCAL_EXTI_INIT+0x6>
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <MCAL_EXTI_INIT+0x8>
    14ea:	0f 92       	push	r0
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	9a 83       	std	Y+2, r25	; 0x02
    14f2:	89 83       	std	Y+1, r24	; 0x01
	if (EXTI_Config == NULL_PTR)
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	9a 81       	ldd	r25, Y+2	; 0x02
    14f8:	00 97       	sbiw	r24, 0x00	; 0
    14fa:	19 f4       	brne	.+6      	; 0x1502 <MCAL_EXTI_INIT+0x20>
	{
		return E_NOK;
    14fc:	21 e0       	ldi	r18, 0x01	; 1
    14fe:	2d 83       	std	Y+5, r18	; 0x05
    1500:	97 c0       	rjmp	.+302    	; 0x1630 <MCAL_EXTI_INIT+0x14e>
	}
	else
	{
		// Enable Global Interrupt
		ENABLE_GIE();
    1502:	0e 94 3b 0c 	call	0x1876	; 0x1876 <ENABLE_GIE>

		//Enable Interrupt For the Choosen INTx
		SET_BIT(EXTI_BASE->GICR_Reg.Reg, EXTI_Config->external_number);
    1506:	a4 e5       	ldi	r26, 0x54	; 84
    1508:	b0 e0       	ldi	r27, 0x00	; 0
    150a:	e4 e5       	ldi	r30, 0x54	; 84
    150c:	f0 e0       	ldi	r31, 0x00	; 0
    150e:	87 81       	ldd	r24, Z+7	; 0x07
    1510:	48 2f       	mov	r20, r24
    1512:	e9 81       	ldd	r30, Y+1	; 0x01
    1514:	fa 81       	ldd	r31, Y+2	; 0x02
    1516:	80 81       	ld	r24, Z
    1518:	28 2f       	mov	r18, r24
    151a:	30 e0       	ldi	r19, 0x00	; 0
    151c:	81 e0       	ldi	r24, 0x01	; 1
    151e:	90 e0       	ldi	r25, 0x00	; 0
    1520:	02 c0       	rjmp	.+4      	; 0x1526 <MCAL_EXTI_INIT+0x44>
    1522:	88 0f       	add	r24, r24
    1524:	99 1f       	adc	r25, r25
    1526:	2a 95       	dec	r18
    1528:	e2 f7       	brpl	.-8      	; 0x1522 <MCAL_EXTI_INIT+0x40>
    152a:	84 2b       	or	r24, r20
    152c:	17 96       	adiw	r26, 0x07	; 7
    152e:	8c 93       	st	X, r24
    1530:	17 97       	sbiw	r26, 0x07	; 7

		/*
		 * Switch on the nmber of the intterrput to writing on the related reg and
		 * Puts the call back function in the related index
		 */
		switch (EXTI_Config->external_number)
    1532:	e9 81       	ldd	r30, Y+1	; 0x01
    1534:	fa 81       	ldd	r31, Y+2	; 0x02
    1536:	80 81       	ld	r24, Z
    1538:	28 2f       	mov	r18, r24
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	3c 83       	std	Y+4, r19	; 0x04
    153e:	2b 83       	std	Y+3, r18	; 0x03
    1540:	8b 81       	ldd	r24, Y+3	; 0x03
    1542:	9c 81       	ldd	r25, Y+4	; 0x04
    1544:	86 30       	cpi	r24, 0x06	; 6
    1546:	91 05       	cpc	r25, r1
    1548:	61 f0       	breq	.+24     	; 0x1562 <MCAL_EXTI_INIT+0x80>
    154a:	2b 81       	ldd	r18, Y+3	; 0x03
    154c:	3c 81       	ldd	r19, Y+4	; 0x04
    154e:	27 30       	cpi	r18, 0x07	; 7
    1550:	31 05       	cpc	r19, r1
    1552:	19 f1       	breq	.+70     	; 0x159a <MCAL_EXTI_INIT+0xb8>
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	9c 81       	ldd	r25, Y+4	; 0x04
    1558:	85 30       	cpi	r24, 0x05	; 5
    155a:	91 05       	cpc	r25, r1
    155c:	09 f4       	brne	.+2      	; 0x1560 <MCAL_EXTI_INIT+0x7e>
    155e:	41 c0       	rjmp	.+130    	; 0x15e2 <MCAL_EXTI_INIT+0x100>
    1560:	66 c0       	rjmp	.+204    	; 0x162e <MCAL_EXTI_INIT+0x14c>
		{
		case EXTI_NUM_0:
			EXTI_BASE->MCUCR_Reg.Reg &= ~(INT0_MASK);
    1562:	a4 e5       	ldi	r26, 0x54	; 84
    1564:	b0 e0       	ldi	r27, 0x00	; 0
    1566:	e4 e5       	ldi	r30, 0x54	; 84
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	81 81       	ldd	r24, Z+1	; 0x01
    156c:	11 96       	adiw	r26, 0x01	; 1
    156e:	8c 93       	st	X, r24
			EXTI_BASE->MCUCR_Reg.Reg |= EXTI_Config->trigger_edge;
    1570:	a4 e5       	ldi	r26, 0x54	; 84
    1572:	b0 e0       	ldi	r27, 0x00	; 0
    1574:	e4 e5       	ldi	r30, 0x54	; 84
    1576:	f0 e0       	ldi	r31, 0x00	; 0
    1578:	91 81       	ldd	r25, Z+1	; 0x01
    157a:	e9 81       	ldd	r30, Y+1	; 0x01
    157c:	fa 81       	ldd	r31, Y+2	; 0x02
    157e:	81 81       	ldd	r24, Z+1	; 0x01
    1580:	89 2b       	or	r24, r25
    1582:	11 96       	adiw	r26, 0x01	; 1
    1584:	8c 93       	st	X, r24
    1586:	11 97       	sbiw	r26, 0x01	; 1
			g_EXT_INT_POINTERS[0]  = EXTI_Config->P_IRQ_CallBack;
    1588:	e9 81       	ldd	r30, Y+1	; 0x01
    158a:	fa 81       	ldd	r31, Y+2	; 0x02
    158c:	82 81       	ldd	r24, Z+2	; 0x02
    158e:	93 81       	ldd	r25, Z+3	; 0x03
    1590:	90 93 fe 01 	sts	0x01FE, r25
    1594:	80 93 fd 01 	sts	0x01FD, r24
    1598:	4a c0       	rjmp	.+148    	; 0x162e <MCAL_EXTI_INIT+0x14c>
			break;
		case EXTI_NUM_1:
			EXTI_BASE->MCUCR_Reg.Reg &= (INT1_MASK);
    159a:	a4 e5       	ldi	r26, 0x54	; 84
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	e4 e5       	ldi	r30, 0x54	; 84
    15a0:	f0 e0       	ldi	r31, 0x00	; 0
    15a2:	81 81       	ldd	r24, Z+1	; 0x01
    15a4:	81 71       	andi	r24, 0x11	; 17
    15a6:	11 96       	adiw	r26, 0x01	; 1
    15a8:	8c 93       	st	X, r24
			EXTI_BASE->MCUCR_Reg.Reg |= (EXTI_Config->trigger_edge)<<2 ;
    15aa:	a4 e5       	ldi	r26, 0x54	; 84
    15ac:	b0 e0       	ldi	r27, 0x00	; 0
    15ae:	e4 e5       	ldi	r30, 0x54	; 84
    15b0:	f0 e0       	ldi	r31, 0x00	; 0
    15b2:	81 81       	ldd	r24, Z+1	; 0x01
    15b4:	28 2f       	mov	r18, r24
    15b6:	e9 81       	ldd	r30, Y+1	; 0x01
    15b8:	fa 81       	ldd	r31, Y+2	; 0x02
    15ba:	81 81       	ldd	r24, Z+1	; 0x01
    15bc:	88 2f       	mov	r24, r24
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	88 0f       	add	r24, r24
    15c2:	99 1f       	adc	r25, r25
    15c4:	88 0f       	add	r24, r24
    15c6:	99 1f       	adc	r25, r25
    15c8:	82 2b       	or	r24, r18
    15ca:	11 96       	adiw	r26, 0x01	; 1
    15cc:	8c 93       	st	X, r24
    15ce:	11 97       	sbiw	r26, 0x01	; 1
			g_EXT_INT_POINTERS[1]  = EXTI_Config->P_IRQ_CallBack;
    15d0:	e9 81       	ldd	r30, Y+1	; 0x01
    15d2:	fa 81       	ldd	r31, Y+2	; 0x02
    15d4:	82 81       	ldd	r24, Z+2	; 0x02
    15d6:	93 81       	ldd	r25, Z+3	; 0x03
    15d8:	90 93 00 02 	sts	0x0200, r25
    15dc:	80 93 ff 01 	sts	0x01FF, r24
    15e0:	26 c0       	rjmp	.+76     	; 0x162e <MCAL_EXTI_INIT+0x14c>

			break;
		case EXTI_NUM_2:
			EXTI_BASE->MCUCSR_Reg.Reg &= (INT2_MASK);
    15e2:	a4 e5       	ldi	r26, 0x54	; 84
    15e4:	b0 e0       	ldi	r27, 0x00	; 0
    15e6:	e4 e5       	ldi	r30, 0x54	; 84
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	81 71       	andi	r24, 0x11	; 17
    15ee:	8c 93       	st	X, r24
			EXTI_BASE->MCUCSR_Reg.Reg |= (EXTI_Config->trigger_edge - 2)<<6;
    15f0:	a4 e5       	ldi	r26, 0x54	; 84
    15f2:	b0 e0       	ldi	r27, 0x00	; 0
    15f4:	e4 e5       	ldi	r30, 0x54	; 84
    15f6:	f0 e0       	ldi	r31, 0x00	; 0
    15f8:	80 81       	ld	r24, Z
    15fa:	28 2f       	mov	r18, r24
    15fc:	e9 81       	ldd	r30, Y+1	; 0x01
    15fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1600:	81 81       	ldd	r24, Z+1	; 0x01
    1602:	88 2f       	mov	r24, r24
    1604:	90 e0       	ldi	r25, 0x00	; 0
    1606:	02 97       	sbiw	r24, 0x02	; 2
    1608:	00 24       	eor	r0, r0
    160a:	96 95       	lsr	r25
    160c:	87 95       	ror	r24
    160e:	07 94       	ror	r0
    1610:	96 95       	lsr	r25
    1612:	87 95       	ror	r24
    1614:	07 94       	ror	r0
    1616:	98 2f       	mov	r25, r24
    1618:	80 2d       	mov	r24, r0
    161a:	82 2b       	or	r24, r18
    161c:	8c 93       	st	X, r24
			g_EXT_INT_POINTERS[2]  = EXTI_Config->P_IRQ_CallBack;
    161e:	e9 81       	ldd	r30, Y+1	; 0x01
    1620:	fa 81       	ldd	r31, Y+2	; 0x02
    1622:	82 81       	ldd	r24, Z+2	; 0x02
    1624:	93 81       	ldd	r25, Z+3	; 0x03
    1626:	90 93 02 02 	sts	0x0202, r25
    162a:	80 93 01 02 	sts	0x0201, r24
			break;

		}
	}
	return E_OK;
    162e:	1d 82       	std	Y+5, r1	; 0x05
    1630:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1632:	0f 90       	pop	r0
    1634:	0f 90       	pop	r0
    1636:	0f 90       	pop	r0
    1638:	0f 90       	pop	r0
    163a:	0f 90       	pop	r0
    163c:	cf 91       	pop	r28
    163e:	df 91       	pop	r29
    1640:	08 95       	ret

00001642 <MCAL_EXTI_DeInit>:
 * param [in]			- Number of the External interrupt
 * @retval 				-ErrorState_t
 * Note					-none
 */
ErrorState_t MCAL_EXTI_DeInit (EXTI_CONFIG_t* EXTI_Config)
{
    1642:	df 93       	push	r29
    1644:	cf 93       	push	r28
    1646:	00 d0       	rcall	.+0      	; 0x1648 <MCAL_EXTI_DeInit+0x6>
    1648:	00 d0       	rcall	.+0      	; 0x164a <MCAL_EXTI_DeInit+0x8>
    164a:	0f 92       	push	r0
    164c:	cd b7       	in	r28, 0x3d	; 61
    164e:	de b7       	in	r29, 0x3e	; 62
    1650:	9a 83       	std	Y+2, r25	; 0x02
    1652:	89 83       	std	Y+1, r24	; 0x01
	if (EXTI_Config == NULL_PTR)
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	9a 81       	ldd	r25, Y+2	; 0x02
    1658:	00 97       	sbiw	r24, 0x00	; 0
    165a:	19 f4       	brne	.+6      	; 0x1662 <MCAL_EXTI_DeInit+0x20>
	{
		return E_NOK;
    165c:	21 e0       	ldi	r18, 0x01	; 1
    165e:	2d 83       	std	Y+5, r18	; 0x05
    1660:	62 c0       	rjmp	.+196    	; 0x1726 <MCAL_EXTI_DeInit+0xe4>
	}
	else
	{
		switch(EXTI_Config->external_number)
    1662:	e9 81       	ldd	r30, Y+1	; 0x01
    1664:	fa 81       	ldd	r31, Y+2	; 0x02
    1666:	80 81       	ld	r24, Z
    1668:	28 2f       	mov	r18, r24
    166a:	30 e0       	ldi	r19, 0x00	; 0
    166c:	3c 83       	std	Y+4, r19	; 0x04
    166e:	2b 83       	std	Y+3, r18	; 0x03
    1670:	8b 81       	ldd	r24, Y+3	; 0x03
    1672:	9c 81       	ldd	r25, Y+4	; 0x04
    1674:	86 30       	cpi	r24, 0x06	; 6
    1676:	91 05       	cpc	r25, r1
    1678:	59 f0       	breq	.+22     	; 0x1690 <MCAL_EXTI_DeInit+0x4e>
    167a:	2b 81       	ldd	r18, Y+3	; 0x03
    167c:	3c 81       	ldd	r19, Y+4	; 0x04
    167e:	27 30       	cpi	r18, 0x07	; 7
    1680:	31 05       	cpc	r19, r1
    1682:	f9 f0       	breq	.+62     	; 0x16c2 <MCAL_EXTI_DeInit+0x80>
    1684:	8b 81       	ldd	r24, Y+3	; 0x03
    1686:	9c 81       	ldd	r25, Y+4	; 0x04
    1688:	85 30       	cpi	r24, 0x05	; 5
    168a:	91 05       	cpc	r25, r1
    168c:	99 f1       	breq	.+102    	; 0x16f4 <MCAL_EXTI_DeInit+0xb2>
    168e:	4a c0       	rjmp	.+148    	; 0x1724 <MCAL_EXTI_DeInit+0xe2>
		{
		case EXTI_NUM_0:

			CLR_BIT(EXTI_BASE->GICR_Reg.Reg,EXTI_Config->external_number);
    1690:	a4 e5       	ldi	r26, 0x54	; 84
    1692:	b0 e0       	ldi	r27, 0x00	; 0
    1694:	e4 e5       	ldi	r30, 0x54	; 84
    1696:	f0 e0       	ldi	r31, 0x00	; 0
    1698:	87 81       	ldd	r24, Z+7	; 0x07
    169a:	48 2f       	mov	r20, r24
    169c:	e9 81       	ldd	r30, Y+1	; 0x01
    169e:	fa 81       	ldd	r31, Y+2	; 0x02
    16a0:	80 81       	ld	r24, Z
    16a2:	28 2f       	mov	r18, r24
    16a4:	30 e0       	ldi	r19, 0x00	; 0
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	02 2e       	mov	r0, r18
    16ac:	02 c0       	rjmp	.+4      	; 0x16b2 <MCAL_EXTI_DeInit+0x70>
    16ae:	88 0f       	add	r24, r24
    16b0:	99 1f       	adc	r25, r25
    16b2:	0a 94       	dec	r0
    16b4:	e2 f7       	brpl	.-8      	; 0x16ae <MCAL_EXTI_DeInit+0x6c>
    16b6:	80 95       	com	r24
    16b8:	84 23       	and	r24, r20
    16ba:	17 96       	adiw	r26, 0x07	; 7
    16bc:	8c 93       	st	X, r24
    16be:	17 97       	sbiw	r26, 0x07	; 7
    16c0:	31 c0       	rjmp	.+98     	; 0x1724 <MCAL_EXTI_DeInit+0xe2>
			break;
		case EXTI_NUM_1:

			CLR_BIT(EXTI_BASE->GICR_Reg.Reg,EXTI_Config->external_number);
    16c2:	a4 e5       	ldi	r26, 0x54	; 84
    16c4:	b0 e0       	ldi	r27, 0x00	; 0
    16c6:	e4 e5       	ldi	r30, 0x54	; 84
    16c8:	f0 e0       	ldi	r31, 0x00	; 0
    16ca:	87 81       	ldd	r24, Z+7	; 0x07
    16cc:	48 2f       	mov	r20, r24
    16ce:	e9 81       	ldd	r30, Y+1	; 0x01
    16d0:	fa 81       	ldd	r31, Y+2	; 0x02
    16d2:	80 81       	ld	r24, Z
    16d4:	28 2f       	mov	r18, r24
    16d6:	30 e0       	ldi	r19, 0x00	; 0
    16d8:	81 e0       	ldi	r24, 0x01	; 1
    16da:	90 e0       	ldi	r25, 0x00	; 0
    16dc:	02 2e       	mov	r0, r18
    16de:	02 c0       	rjmp	.+4      	; 0x16e4 <MCAL_EXTI_DeInit+0xa2>
    16e0:	88 0f       	add	r24, r24
    16e2:	99 1f       	adc	r25, r25
    16e4:	0a 94       	dec	r0
    16e6:	e2 f7       	brpl	.-8      	; 0x16e0 <MCAL_EXTI_DeInit+0x9e>
    16e8:	80 95       	com	r24
    16ea:	84 23       	and	r24, r20
    16ec:	17 96       	adiw	r26, 0x07	; 7
    16ee:	8c 93       	st	X, r24
    16f0:	17 97       	sbiw	r26, 0x07	; 7
    16f2:	18 c0       	rjmp	.+48     	; 0x1724 <MCAL_EXTI_DeInit+0xe2>
			break;

		case EXTI_NUM_2:

			CLR_BIT(EXTI_BASE->GICR_Reg.Reg,EXTI_Config->external_number);
    16f4:	a4 e5       	ldi	r26, 0x54	; 84
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e4 e5       	ldi	r30, 0x54	; 84
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	87 81       	ldd	r24, Z+7	; 0x07
    16fe:	48 2f       	mov	r20, r24
    1700:	e9 81       	ldd	r30, Y+1	; 0x01
    1702:	fa 81       	ldd	r31, Y+2	; 0x02
    1704:	80 81       	ld	r24, Z
    1706:	28 2f       	mov	r18, r24
    1708:	30 e0       	ldi	r19, 0x00	; 0
    170a:	81 e0       	ldi	r24, 0x01	; 1
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	02 2e       	mov	r0, r18
    1710:	02 c0       	rjmp	.+4      	; 0x1716 <MCAL_EXTI_DeInit+0xd4>
    1712:	88 0f       	add	r24, r24
    1714:	99 1f       	adc	r25, r25
    1716:	0a 94       	dec	r0
    1718:	e2 f7       	brpl	.-8      	; 0x1712 <MCAL_EXTI_DeInit+0xd0>
    171a:	80 95       	com	r24
    171c:	84 23       	and	r24, r20
    171e:	17 96       	adiw	r26, 0x07	; 7
    1720:	8c 93       	st	X, r24
    1722:	17 97       	sbiw	r26, 0x07	; 7
			break;


		}
	}
	return E_OK;
    1724:	1d 82       	std	Y+5, r1	; 0x05
    1726:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1728:	0f 90       	pop	r0
    172a:	0f 90       	pop	r0
    172c:	0f 90       	pop	r0
    172e:	0f 90       	pop	r0
    1730:	0f 90       	pop	r0
    1732:	cf 91       	pop	r28
    1734:	df 91       	pop	r29
    1736:	08 95       	ret

00001738 <__vector_1>:
/*******************************************************************************
 *                      		ISR Functions                                   *
 *******************************************************************************/

void __vector_1 (void)
{
    1738:	1f 92       	push	r1
    173a:	0f 92       	push	r0
    173c:	0f b6       	in	r0, 0x3f	; 63
    173e:	0f 92       	push	r0
    1740:	11 24       	eor	r1, r1
    1742:	2f 93       	push	r18
    1744:	3f 93       	push	r19
    1746:	4f 93       	push	r20
    1748:	5f 93       	push	r21
    174a:	6f 93       	push	r22
    174c:	7f 93       	push	r23
    174e:	8f 93       	push	r24
    1750:	9f 93       	push	r25
    1752:	af 93       	push	r26
    1754:	bf 93       	push	r27
    1756:	ef 93       	push	r30
    1758:	ff 93       	push	r31
    175a:	df 93       	push	r29
    175c:	cf 93       	push	r28
    175e:	cd b7       	in	r28, 0x3d	; 61
    1760:	de b7       	in	r29, 0x3e	; 62
	//CLEAR THE FLAG
	CLR_BIT(EXTI_BASE->GICR_Reg.Reg,EXTI_NUM_0);
    1762:	a4 e5       	ldi	r26, 0x54	; 84
    1764:	b0 e0       	ldi	r27, 0x00	; 0
    1766:	e4 e5       	ldi	r30, 0x54	; 84
    1768:	f0 e0       	ldi	r31, 0x00	; 0
    176a:	87 81       	ldd	r24, Z+7	; 0x07
    176c:	8f 7b       	andi	r24, 0xBF	; 191
    176e:	17 96       	adiw	r26, 0x07	; 7
    1770:	8c 93       	st	X, r24

	//CALL IRQ_CALL
	g_EXT_INT_POINTERS[0]();
    1772:	e0 91 fd 01 	lds	r30, 0x01FD
    1776:	f0 91 fe 01 	lds	r31, 0x01FE
    177a:	09 95       	icall
}
    177c:	cf 91       	pop	r28
    177e:	df 91       	pop	r29
    1780:	ff 91       	pop	r31
    1782:	ef 91       	pop	r30
    1784:	bf 91       	pop	r27
    1786:	af 91       	pop	r26
    1788:	9f 91       	pop	r25
    178a:	8f 91       	pop	r24
    178c:	7f 91       	pop	r23
    178e:	6f 91       	pop	r22
    1790:	5f 91       	pop	r21
    1792:	4f 91       	pop	r20
    1794:	3f 91       	pop	r19
    1796:	2f 91       	pop	r18
    1798:	0f 90       	pop	r0
    179a:	0f be       	out	0x3f, r0	; 63
    179c:	0f 90       	pop	r0
    179e:	1f 90       	pop	r1
    17a0:	18 95       	reti

000017a2 <__vector_2>:

void __vector_2 (void)
{
    17a2:	1f 92       	push	r1
    17a4:	0f 92       	push	r0
    17a6:	0f b6       	in	r0, 0x3f	; 63
    17a8:	0f 92       	push	r0
    17aa:	11 24       	eor	r1, r1
    17ac:	2f 93       	push	r18
    17ae:	3f 93       	push	r19
    17b0:	4f 93       	push	r20
    17b2:	5f 93       	push	r21
    17b4:	6f 93       	push	r22
    17b6:	7f 93       	push	r23
    17b8:	8f 93       	push	r24
    17ba:	9f 93       	push	r25
    17bc:	af 93       	push	r26
    17be:	bf 93       	push	r27
    17c0:	ef 93       	push	r30
    17c2:	ff 93       	push	r31
    17c4:	df 93       	push	r29
    17c6:	cf 93       	push	r28
    17c8:	cd b7       	in	r28, 0x3d	; 61
    17ca:	de b7       	in	r29, 0x3e	; 62
	//CLEAR THE FLAG
	CLR_BIT(EXTI_BASE->GICR_Reg.Reg,EXTI_NUM_1);
    17cc:	a4 e5       	ldi	r26, 0x54	; 84
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	e4 e5       	ldi	r30, 0x54	; 84
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	87 81       	ldd	r24, Z+7	; 0x07
    17d6:	8f 77       	andi	r24, 0x7F	; 127
    17d8:	17 96       	adiw	r26, 0x07	; 7
    17da:	8c 93       	st	X, r24

	//CALL IRQ_CALL
	g_EXT_INT_POINTERS[1]();
    17dc:	e0 91 ff 01 	lds	r30, 0x01FF
    17e0:	f0 91 00 02 	lds	r31, 0x0200
    17e4:	09 95       	icall
}
    17e6:	cf 91       	pop	r28
    17e8:	df 91       	pop	r29
    17ea:	ff 91       	pop	r31
    17ec:	ef 91       	pop	r30
    17ee:	bf 91       	pop	r27
    17f0:	af 91       	pop	r26
    17f2:	9f 91       	pop	r25
    17f4:	8f 91       	pop	r24
    17f6:	7f 91       	pop	r23
    17f8:	6f 91       	pop	r22
    17fa:	5f 91       	pop	r21
    17fc:	4f 91       	pop	r20
    17fe:	3f 91       	pop	r19
    1800:	2f 91       	pop	r18
    1802:	0f 90       	pop	r0
    1804:	0f be       	out	0x3f, r0	; 63
    1806:	0f 90       	pop	r0
    1808:	1f 90       	pop	r1
    180a:	18 95       	reti

0000180c <__vector_3>:


void __vector_3 (void)
{
    180c:	1f 92       	push	r1
    180e:	0f 92       	push	r0
    1810:	0f b6       	in	r0, 0x3f	; 63
    1812:	0f 92       	push	r0
    1814:	11 24       	eor	r1, r1
    1816:	2f 93       	push	r18
    1818:	3f 93       	push	r19
    181a:	4f 93       	push	r20
    181c:	5f 93       	push	r21
    181e:	6f 93       	push	r22
    1820:	7f 93       	push	r23
    1822:	8f 93       	push	r24
    1824:	9f 93       	push	r25
    1826:	af 93       	push	r26
    1828:	bf 93       	push	r27
    182a:	ef 93       	push	r30
    182c:	ff 93       	push	r31
    182e:	df 93       	push	r29
    1830:	cf 93       	push	r28
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
	//CLEAR THE FLAG
	CLR_BIT(EXTI_BASE->GICR_Reg.Reg,EXTI_NUM_2);
    1836:	a4 e5       	ldi	r26, 0x54	; 84
    1838:	b0 e0       	ldi	r27, 0x00	; 0
    183a:	e4 e5       	ldi	r30, 0x54	; 84
    183c:	f0 e0       	ldi	r31, 0x00	; 0
    183e:	87 81       	ldd	r24, Z+7	; 0x07
    1840:	8f 7d       	andi	r24, 0xDF	; 223
    1842:	17 96       	adiw	r26, 0x07	; 7
    1844:	8c 93       	st	X, r24

	//CALL IRQ_CALL
	g_EXT_INT_POINTERS[2]();
    1846:	e0 91 01 02 	lds	r30, 0x0201
    184a:	f0 91 02 02 	lds	r31, 0x0202
    184e:	09 95       	icall
}
    1850:	cf 91       	pop	r28
    1852:	df 91       	pop	r29
    1854:	ff 91       	pop	r31
    1856:	ef 91       	pop	r30
    1858:	bf 91       	pop	r27
    185a:	af 91       	pop	r26
    185c:	9f 91       	pop	r25
    185e:	8f 91       	pop	r24
    1860:	7f 91       	pop	r23
    1862:	6f 91       	pop	r22
    1864:	5f 91       	pop	r21
    1866:	4f 91       	pop	r20
    1868:	3f 91       	pop	r19
    186a:	2f 91       	pop	r18
    186c:	0f 90       	pop	r0
    186e:	0f be       	out	0x3f, r0	; 63
    1870:	0f 90       	pop	r0
    1872:	1f 90       	pop	r1
    1874:	18 95       	reti

00001876 <ENABLE_GIE>:
 *******************************************************************************/
#include "GIC.h"


void ENABLE_GIE()
{
    1876:	df 93       	push	r29
    1878:	cf 93       	push	r28
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_t,I);
    187e:	af e5       	ldi	r26, 0x5F	; 95
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	ef e5       	ldi	r30, 0x5F	; 95
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	80 68       	ori	r24, 0x80	; 128
    188a:	8c 93       	st	X, r24
}
    188c:	cf 91       	pop	r28
    188e:	df 91       	pop	r29
    1890:	08 95       	ret

00001892 <DISABLE_GIE>:

void DISABLE_GIE()
{
    1892:	df 93       	push	r29
    1894:	cf 93       	push	r28
    1896:	cd b7       	in	r28, 0x3d	; 61
    1898:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_t,I);
    189a:	af e5       	ldi	r26, 0x5F	; 95
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	ef e5       	ldi	r30, 0x5F	; 95
    18a0:	f0 e0       	ldi	r31, 0x00	; 0
    18a2:	80 81       	ld	r24, Z
    18a4:	8f 77       	andi	r24, 0x7F	; 127
    18a6:	8c 93       	st	X, r24
}
    18a8:	cf 91       	pop	r28
    18aa:	df 91       	pop	r29
    18ac:	08 95       	ret

000018ae <__vector_12>:
/*******************************************************************************
 *                      		ISR Function                                   *
 *******************************************************************************/

ISR(SPI_STC_vect)
{
    18ae:	1f 92       	push	r1
    18b0:	0f 92       	push	r0
    18b2:	0f b6       	in	r0, 0x3f	; 63
    18b4:	0f 92       	push	r0
    18b6:	11 24       	eor	r1, r1
    18b8:	2f 93       	push	r18
    18ba:	3f 93       	push	r19
    18bc:	4f 93       	push	r20
    18be:	5f 93       	push	r21
    18c0:	6f 93       	push	r22
    18c2:	7f 93       	push	r23
    18c4:	8f 93       	push	r24
    18c6:	9f 93       	push	r25
    18c8:	af 93       	push	r26
    18ca:	bf 93       	push	r27
    18cc:	ef 93       	push	r30
    18ce:	ff 93       	push	r31
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	cd b7       	in	r28, 0x3d	; 61
    18d6:	de b7       	in	r29, 0x3e	; 62
	g_SpiCallBackPtr(SPI_BASE->SPDR_t.Reg);
    18d8:	e0 91 da 01 	lds	r30, 0x01DA
    18dc:	f0 91 db 01 	lds	r31, 0x01DB
    18e0:	ad e2       	ldi	r26, 0x2D	; 45
    18e2:	b0 e0       	ldi	r27, 0x00	; 0
    18e4:	12 96       	adiw	r26, 0x02	; 2
    18e6:	8c 91       	ld	r24, X
    18e8:	09 95       	icall
}
    18ea:	cf 91       	pop	r28
    18ec:	df 91       	pop	r29
    18ee:	ff 91       	pop	r31
    18f0:	ef 91       	pop	r30
    18f2:	bf 91       	pop	r27
    18f4:	af 91       	pop	r26
    18f6:	9f 91       	pop	r25
    18f8:	8f 91       	pop	r24
    18fa:	7f 91       	pop	r23
    18fc:	6f 91       	pop	r22
    18fe:	5f 91       	pop	r21
    1900:	4f 91       	pop	r20
    1902:	3f 91       	pop	r19
    1904:	2f 91       	pop	r18
    1906:	0f 90       	pop	r0
    1908:	0f be       	out	0x3f, r0	; 63
    190a:	0f 90       	pop	r0
    190c:	1f 90       	pop	r1
    190e:	18 95       	reti

00001910 <MCAL_SPI_Init>:




void MCAL_SPI_Init(Spi_Config* Config_Ptr)
{
    1910:	df 93       	push	r29
    1912:	cf 93       	push	r28
    1914:	00 d0       	rcall	.+0      	; 0x1916 <MCAL_SPI_Init+0x6>
    1916:	cd b7       	in	r28, 0x3d	; 61
    1918:	de b7       	in	r29, 0x3e	; 62
    191a:	9a 83       	std	Y+2, r25	; 0x02
    191c:	89 83       	std	Y+1, r24	; 0x01
	//Enable Spi
	SPI_BASE->SPCR_t.Reg = (SPI_BASE->SPCR_t.Reg & ENABLE_MASK) | (1<<SPE);
    191e:	ad e2       	ldi	r26, 0x2D	; 45
    1920:	b0 e0       	ldi	r27, 0x00	; 0
    1922:	ed e2       	ldi	r30, 0x2D	; 45
    1924:	f0 e0       	ldi	r31, 0x00	; 0
    1926:	80 81       	ld	r24, Z
    1928:	80 64       	ori	r24, 0x40	; 64
    192a:	8c 93       	st	X, r24

	//LSB or MSB
	SPI_BASE->SPCR_t.Reg = (SPI_BASE->SPCR_t.Reg & LsbOrMSB_MASK) | ((Config_Ptr->Order)<<DORD);
    192c:	ad e2       	ldi	r26, 0x2D	; 45
    192e:	b0 e0       	ldi	r27, 0x00	; 0
    1930:	ed e2       	ldi	r30, 0x2D	; 45
    1932:	f0 e0       	ldi	r31, 0x00	; 0
    1934:	80 81       	ld	r24, Z
    1936:	28 2f       	mov	r18, r24
    1938:	2f 7d       	andi	r18, 0xDF	; 223
    193a:	e9 81       	ldd	r30, Y+1	; 0x01
    193c:	fa 81       	ldd	r31, Y+2	; 0x02
    193e:	80 81       	ld	r24, Z
    1940:	88 2f       	mov	r24, r24
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	88 0f       	add	r24, r24
    1946:	99 1f       	adc	r25, r25
    1948:	82 95       	swap	r24
    194a:	92 95       	swap	r25
    194c:	90 7f       	andi	r25, 0xF0	; 240
    194e:	98 27       	eor	r25, r24
    1950:	80 7f       	andi	r24, 0xF0	; 240
    1952:	98 27       	eor	r25, r24
    1954:	82 2b       	or	r24, r18
    1956:	8c 93       	st	X, r24

	//Master or slave
	SPI_BASE->SPCR_t.Reg = (SPI_BASE->SPCR_t.Reg & MASTER_SLAVE_MASK) | ((Config_Ptr->Select)<<MSTR);
    1958:	ad e2       	ldi	r26, 0x2D	; 45
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	ed e2       	ldi	r30, 0x2D	; 45
    195e:	f0 e0       	ldi	r31, 0x00	; 0
    1960:	80 81       	ld	r24, Z
    1962:	28 2f       	mov	r18, r24
    1964:	2f 7e       	andi	r18, 0xEF	; 239
    1966:	e9 81       	ldd	r30, Y+1	; 0x01
    1968:	fa 81       	ldd	r31, Y+2	; 0x02
    196a:	85 81       	ldd	r24, Z+5	; 0x05
    196c:	88 2f       	mov	r24, r24
    196e:	90 e0       	ldi	r25, 0x00	; 0
    1970:	82 95       	swap	r24
    1972:	92 95       	swap	r25
    1974:	90 7f       	andi	r25, 0xF0	; 240
    1976:	98 27       	eor	r25, r24
    1978:	80 7f       	andi	r24, 0xF0	; 240
    197a:	98 27       	eor	r25, r24
    197c:	82 2b       	or	r24, r18
    197e:	8c 93       	st	X, r24

	//Clock Polarity
	SPI_BASE->SPCR_t.Reg = (SPI_BASE->SPCR_t.Reg & POLARITY_MASK) | ((Config_Ptr->Polarity)<<CPOL);
    1980:	ad e2       	ldi	r26, 0x2D	; 45
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	ed e2       	ldi	r30, 0x2D	; 45
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	28 2f       	mov	r18, r24
    198c:	2e 7f       	andi	r18, 0xFE	; 254
    198e:	e9 81       	ldd	r30, Y+1	; 0x01
    1990:	fa 81       	ldd	r31, Y+2	; 0x02
    1992:	81 81       	ldd	r24, Z+1	; 0x01
    1994:	88 2f       	mov	r24, r24
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	88 0f       	add	r24, r24
    199a:	99 1f       	adc	r25, r25
    199c:	88 0f       	add	r24, r24
    199e:	99 1f       	adc	r25, r25
    19a0:	88 0f       	add	r24, r24
    19a2:	99 1f       	adc	r25, r25
    19a4:	82 2b       	or	r24, r18
    19a6:	8c 93       	st	X, r24

	//Clock Phase
	SPI_BASE->SPCR_t.Reg = (SPI_BASE->SPCR_t.Reg & PHASE_MASK) | ((Config_Ptr->Phase)<<CPHA);
    19a8:	ad e2       	ldi	r26, 0x2D	; 45
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	ed e2       	ldi	r30, 0x2D	; 45
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	28 2f       	mov	r18, r24
    19b4:	2b 7f       	andi	r18, 0xFB	; 251
    19b6:	e9 81       	ldd	r30, Y+1	; 0x01
    19b8:	fa 81       	ldd	r31, Y+2	; 0x02
    19ba:	82 81       	ldd	r24, Z+2	; 0x02
    19bc:	88 2f       	mov	r24, r24
    19be:	90 e0       	ldi	r25, 0x00	; 0
    19c0:	88 0f       	add	r24, r24
    19c2:	99 1f       	adc	r25, r25
    19c4:	88 0f       	add	r24, r24
    19c6:	99 1f       	adc	r25, r25
    19c8:	82 2b       	or	r24, r18
    19ca:	8c 93       	st	X, r24

	//clock pres
	SPI_BASE->SPCR_t.Reg = (SPI_BASE->SPCR_t.Reg & PRESCALAR_MASk) | ((Config_Ptr->Clock)<<SPR0);
    19cc:	ad e2       	ldi	r26, 0x2D	; 45
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	ed e2       	ldi	r30, 0x2D	; 45
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	80 81       	ld	r24, Z
    19d6:	98 2f       	mov	r25, r24
    19d8:	9c 7f       	andi	r25, 0xFC	; 252
    19da:	e9 81       	ldd	r30, Y+1	; 0x01
    19dc:	fa 81       	ldd	r31, Y+2	; 0x02
    19de:	84 81       	ldd	r24, Z+4	; 0x04
    19e0:	89 2b       	or	r24, r25
    19e2:	8c 93       	st	X, r24




}
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	cf 91       	pop	r28
    19ea:	df 91       	pop	r29
    19ec:	08 95       	ret

000019ee <MCAL_SPI_Transfer>:




void MCAL_SPI_Transfer(uint8 copy, uint8* pch)
{
    19ee:	df 93       	push	r29
    19f0:	cf 93       	push	r28
    19f2:	00 d0       	rcall	.+0      	; 0x19f4 <MCAL_SPI_Transfer+0x6>
    19f4:	0f 92       	push	r0
    19f6:	cd b7       	in	r28, 0x3d	; 61
    19f8:	de b7       	in	r29, 0x3e	; 62
    19fa:	89 83       	std	Y+1, r24	; 0x01
    19fc:	7b 83       	std	Y+3, r23	; 0x03
    19fe:	6a 83       	std	Y+2, r22	; 0x02

	SPI_BASE->SPDR_t.Reg = copy;
    1a00:	ed e2       	ldi	r30, 0x2D	; 45
    1a02:	f0 e0       	ldi	r31, 0x00	; 0
    1a04:	89 81       	ldd	r24, Y+1	; 0x01
    1a06:	82 83       	std	Z+2, r24	; 0x02


	while (BIT_IS_CLEAR(SPI_BASE->SPSR_t.Reg,SPIF));
    1a08:	ed e2       	ldi	r30, 0x2D	; 45
    1a0a:	f0 e0       	ldi	r31, 0x00	; 0
    1a0c:	81 81       	ldd	r24, Z+1	; 0x01
    1a0e:	88 23       	and	r24, r24
    1a10:	dc f7       	brge	.-10     	; 0x1a08 <MCAL_SPI_Transfer+0x1a>

	*pch = SPI_BASE->SPDR_t.Reg;
    1a12:	ed e2       	ldi	r30, 0x2D	; 45
    1a14:	f0 e0       	ldi	r31, 0x00	; 0
    1a16:	82 81       	ldd	r24, Z+2	; 0x02
    1a18:	ea 81       	ldd	r30, Y+2	; 0x02
    1a1a:	fb 81       	ldd	r31, Y+3	; 0x03
    1a1c:	80 83       	st	Z, r24

}
    1a1e:	0f 90       	pop	r0
    1a20:	0f 90       	pop	r0
    1a22:	0f 90       	pop	r0
    1a24:	cf 91       	pop	r28
    1a26:	df 91       	pop	r29
    1a28:	08 95       	ret

00001a2a <AsynchSetCallBack>:



void AsynchSetCallBack( void (*ptr)(uint8 dat))
{
    1a2a:	df 93       	push	r29
    1a2c:	cf 93       	push	r28
    1a2e:	00 d0       	rcall	.+0      	; 0x1a30 <AsynchSetCallBack+0x6>
    1a30:	cd b7       	in	r28, 0x3d	; 61
    1a32:	de b7       	in	r29, 0x3e	; 62
    1a34:	9a 83       	std	Y+2, r25	; 0x02
    1a36:	89 83       	std	Y+1, r24	; 0x01
	SPI_BASE->SPCR_t.Reg = (SPI_BASE->SPCR_t.Reg & 0x7F) | (1<<SPIE);
    1a38:	ad e2       	ldi	r26, 0x2D	; 45
    1a3a:	b0 e0       	ldi	r27, 0x00	; 0
    1a3c:	ed e2       	ldi	r30, 0x2D	; 45
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	80 68       	ori	r24, 0x80	; 128
    1a44:	8c 93       	st	X, r24
	g_SpiCallBackPtr = ptr;
    1a46:	89 81       	ldd	r24, Y+1	; 0x01
    1a48:	9a 81       	ldd	r25, Y+2	; 0x02
    1a4a:	90 93 db 01 	sts	0x01DB, r25
    1a4e:	80 93 da 01 	sts	0x01DA, r24
}
    1a52:	0f 90       	pop	r0
    1a54:	0f 90       	pop	r0
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <TWI_init>:
#include "TWI_INTERFACE.h"
#include "TWI_Private.h"


void TWI_init(TWIconfig * TWIconfig)
{
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <TWI_init+0x6>
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	9a 83       	std	Y+2, r25	; 0x02
    1a68:	89 83       	std	Y+1, r24	; 0x01

	TWI_BASE->TWBR_t.Reg = TWIconfig->freq;
    1a6a:	a0 e2       	ldi	r26, 0x20	; 32
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	e9 81       	ldd	r30, Y+1	; 0x01
    1a70:	fa 81       	ldd	r31, Y+2	; 0x02
    1a72:	81 81       	ldd	r24, Z+1	; 0x01
    1a74:	8c 93       	st	X, r24

	TWCR_t = (1<<TWINT) | (1<<TWEN);    /*Clear the interrupt flag & enable the TWI module*/
    1a76:	e6 e5       	ldi	r30, 0x56	; 86
    1a78:	f0 e0       	ldi	r31, 0x00	; 0
    1a7a:	84 e8       	ldi	r24, 0x84	; 132
    1a7c:	80 83       	st	Z, r24
	TWI_BASE->TWSR_t.Reg = (TWSR & Pre_Mask) | (TWIconfig -> preScaler); /*Set the prescaler */
    1a7e:	a0 e2       	ldi	r26, 0x20	; 32
    1a80:	b0 e0       	ldi	r27, 0x00	; 0
    1a82:	e1 e2       	ldi	r30, 0x21	; 33
    1a84:	f0 e0       	ldi	r31, 0x00	; 0
    1a86:	80 81       	ld	r24, Z
    1a88:	98 2f       	mov	r25, r24
    1a8a:	98 7f       	andi	r25, 0xF8	; 248
    1a8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1a8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1a90:	80 81       	ld	r24, Z
    1a92:	89 2b       	or	r24, r25
    1a94:	11 96       	adiw	r26, 0x01	; 1
    1a96:	8c 93       	st	X, r24
    1a98:	11 97       	sbiw	r26, 0x01	; 1
}
    1a9a:	0f 90       	pop	r0
    1a9c:	0f 90       	pop	r0
    1a9e:	cf 91       	pop	r28
    1aa0:	df 91       	pop	r29
    1aa2:	08 95       	ret

00001aa4 <TWI_start>:

void TWI_start(void)
{
    1aa4:	df 93       	push	r29
    1aa6:	cf 93       	push	r28
    1aa8:	cd b7       	in	r28, 0x3d	; 61
    1aaa:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR_t = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    1aac:	e6 e5       	ldi	r30, 0x56	; 86
    1aae:	f0 e0       	ldi	r31, 0x00	; 0
    1ab0:	84 ea       	ldi	r24, 0xA4	; 164
    1ab2:	80 83       	st	Z, r24

	/* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
	while(BIT_IS_CLEAR(TWCR_t,TWINT));
    1ab4:	e6 e5       	ldi	r30, 0x56	; 86
    1ab6:	f0 e0       	ldi	r31, 0x00	; 0
    1ab8:	80 81       	ld	r24, Z
    1aba:	88 23       	and	r24, r24
    1abc:	dc f7       	brge	.-10     	; 0x1ab4 <TWI_start+0x10>
}
    1abe:	cf 91       	pop	r28
    1ac0:	df 91       	pop	r29
    1ac2:	08 95       	ret

00001ac4 <TWI_stop>:

void TWI_stop(void)
{
    1ac4:	df 93       	push	r29
    1ac6:	cf 93       	push	r28
    1ac8:	cd b7       	in	r28, 0x3d	; 61
    1aca:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR_t = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    1acc:	e6 e5       	ldi	r30, 0x56	; 86
    1ace:	f0 e0       	ldi	r31, 0x00	; 0
    1ad0:	84 e9       	ldi	r24, 0x94	; 148
    1ad2:	80 83       	st	Z, r24
}
    1ad4:	cf 91       	pop	r28
    1ad6:	df 91       	pop	r29
    1ad8:	08 95       	ret

00001ada <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    1ada:	df 93       	push	r29
    1adc:	cf 93       	push	r28
    1ade:	0f 92       	push	r0
    1ae0:	cd b7       	in	r28, 0x3d	; 61
    1ae2:	de b7       	in	r29, 0x3e	; 62
    1ae4:	89 83       	std	Y+1, r24	; 0x01
	/* Put data On TWI data Register */
	TWI_BASE->TWDR_t.Reg = data;
    1ae6:	e0 e2       	ldi	r30, 0x20	; 32
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	83 83       	std	Z+3, r24	; 0x03
	/*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR_t = (1 << TWINT) | (1 << TWEN);
    1aee:	e6 e5       	ldi	r30, 0x56	; 86
    1af0:	f0 e0       	ldi	r31, 0x00	; 0
    1af2:	84 e8       	ldi	r24, 0x84	; 132
    1af4:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register(data is send successfully) */
	while(BIT_IS_CLEAR(TWCR_t,TWINT));
    1af6:	e6 e5       	ldi	r30, 0x56	; 86
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	88 23       	and	r24, r24
    1afe:	dc f7       	brge	.-10     	; 0x1af6 <TWI_writeByte+0x1c>

}
    1b00:	0f 90       	pop	r0
    1b02:	cf 91       	pop	r28
    1b04:	df 91       	pop	r29
    1b06:	08 95       	ret

00001b08 <TWI_readByteWithACK>:

void TWI_readByteWithACK(uint8* ptr)
{
    1b08:	df 93       	push	r29
    1b0a:	cf 93       	push	r28
    1b0c:	00 d0       	rcall	.+0      	; 0x1b0e <TWI_readByteWithACK+0x6>
    1b0e:	cd b7       	in	r28, 0x3d	; 61
    1b10:	de b7       	in	r29, 0x3e	; 62
    1b12:	9a 83       	std	Y+2, r25	; 0x02
    1b14:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR_t = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    1b16:	e6 e5       	ldi	r30, 0x56	; 86
    1b18:	f0 e0       	ldi	r31, 0x00	; 0
    1b1a:	84 ec       	ldi	r24, 0xC4	; 196
    1b1c:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR_t,TWINT));
    1b1e:	e6 e5       	ldi	r30, 0x56	; 86
    1b20:	f0 e0       	ldi	r31, 0x00	; 0
    1b22:	80 81       	ld	r24, Z
    1b24:	88 23       	and	r24, r24
    1b26:	dc f7       	brge	.-10     	; 0x1b1e <TWI_readByteWithACK+0x16>
	/* Read Data */
	*ptr =  TWI_BASE->TWDR_t.Reg;
    1b28:	e0 e2       	ldi	r30, 0x20	; 32
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	83 81       	ldd	r24, Z+3	; 0x03
    1b2e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b30:	fa 81       	ldd	r31, Y+2	; 0x02
    1b32:	80 83       	st	Z, r24
}
    1b34:	0f 90       	pop	r0
    1b36:	0f 90       	pop	r0
    1b38:	cf 91       	pop	r28
    1b3a:	df 91       	pop	r29
    1b3c:	08 95       	ret

00001b3e <TWI_readByteWithNACK>:


void TWI_readByteWithNACK(uint8* ptr)
{
    1b3e:	df 93       	push	r29
    1b40:	cf 93       	push	r28
    1b42:	00 d0       	rcall	.+0      	; 0x1b44 <TWI_readByteWithNACK+0x6>
    1b44:	cd b7       	in	r28, 0x3d	; 61
    1b46:	de b7       	in	r29, 0x3e	; 62
    1b48:	9a 83       	std	Y+2, r25	; 0x02
    1b4a:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
	TWCR_t = (1 << TWINT) | (1 << TWEN);
    1b4c:	e6 e5       	ldi	r30, 0x56	; 86
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	84 e8       	ldi	r24, 0x84	; 132
    1b52:	80 83       	st	Z, r24
	/* Wait for TWINT flag set in TWCR Register (data received successfully) */
	while(BIT_IS_CLEAR(TWCR_t,TWINT));
    1b54:	e6 e5       	ldi	r30, 0x56	; 86
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	80 81       	ld	r24, Z
    1b5a:	88 23       	and	r24, r24
    1b5c:	dc f7       	brge	.-10     	; 0x1b54 <TWI_readByteWithNACK+0x16>
	/* Read Data */
	*ptr =  TWI_BASE->TWDR_t.Reg;
    1b5e:	e0 e2       	ldi	r30, 0x20	; 32
    1b60:	f0 e0       	ldi	r31, 0x00	; 0
    1b62:	83 81       	ldd	r24, Z+3	; 0x03
    1b64:	e9 81       	ldd	r30, Y+1	; 0x01
    1b66:	fa 81       	ldd	r31, Y+2	; 0x02
    1b68:	80 83       	st	Z, r24
}
    1b6a:	0f 90       	pop	r0
    1b6c:	0f 90       	pop	r0
    1b6e:	cf 91       	pop	r28
    1b70:	df 91       	pop	r29
    1b72:	08 95       	ret

00001b74 <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    1b74:	df 93       	push	r29
    1b76:	cf 93       	push	r28
    1b78:	0f 92       	push	r0
    1b7a:	cd b7       	in	r28, 0x3d	; 61
    1b7c:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	/* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
	status = TWI_BASE->TWSR_t.Reg & Masking_To_Eliminate_First_3bits;
    1b7e:	e0 e2       	ldi	r30, 0x20	; 32
    1b80:	f0 e0       	ldi	r31, 0x00	; 0
    1b82:	81 81       	ldd	r24, Z+1	; 0x01
    1b84:	88 7f       	andi	r24, 0xF8	; 248
    1b86:	89 83       	std	Y+1, r24	; 0x01
	return  status;
    1b88:	89 81       	ldd	r24, Y+1	; 0x01
}
    1b8a:	0f 90       	pop	r0
    1b8c:	cf 91       	pop	r28
    1b8e:	df 91       	pop	r29
    1b90:	08 95       	ret

00001b92 <__vector_6>:
//
//}


ISR(TIMER1_CAPT_vect)
{
    1b92:	1f 92       	push	r1
    1b94:	0f 92       	push	r0
    1b96:	0f b6       	in	r0, 0x3f	; 63
    1b98:	0f 92       	push	r0
    1b9a:	11 24       	eor	r1, r1
    1b9c:	2f 93       	push	r18
    1b9e:	3f 93       	push	r19
    1ba0:	4f 93       	push	r20
    1ba2:	5f 93       	push	r21
    1ba4:	6f 93       	push	r22
    1ba6:	7f 93       	push	r23
    1ba8:	8f 93       	push	r24
    1baa:	9f 93       	push	r25
    1bac:	af 93       	push	r26
    1bae:	bf 93       	push	r27
    1bb0:	ef 93       	push	r30
    1bb2:	ff 93       	push	r31
    1bb4:	df 93       	push	r29
    1bb6:	cf 93       	push	r28
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62


	if(g_ICUcallBackPtr != NULL_PTR)
    1bbc:	80 91 e0 01 	lds	r24, 0x01E0
    1bc0:	90 91 e1 01 	lds	r25, 0x01E1
    1bc4:	00 97       	sbiw	r24, 0x00	; 0
    1bc6:	69 f0       	breq	.+26     	; 0x1be2 <__vector_6+0x50>
	{
		SET_BIT(Timer0_BASE->TIMSK_Reg.Reg,TICIE1);
    1bc8:	a2 e5       	ldi	r26, 0x52	; 82
    1bca:	b0 e0       	ldi	r27, 0x00	; 0
    1bcc:	e2 e5       	ldi	r30, 0x52	; 82
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	87 81       	ldd	r24, Z+7	; 0x07
    1bd2:	80 62       	ori	r24, 0x20	; 32
    1bd4:	17 96       	adiw	r26, 0x07	; 7
    1bd6:	8c 93       	st	X, r24
		(*g_ICUcallBackPtr)();
    1bd8:	e0 91 e0 01 	lds	r30, 0x01E0
    1bdc:	f0 91 e1 01 	lds	r31, 0x01E1
    1be0:	09 95       	icall
	}
}
    1be2:	cf 91       	pop	r28
    1be4:	df 91       	pop	r29
    1be6:	ff 91       	pop	r31
    1be8:	ef 91       	pop	r30
    1bea:	bf 91       	pop	r27
    1bec:	af 91       	pop	r26
    1bee:	9f 91       	pop	r25
    1bf0:	8f 91       	pop	r24
    1bf2:	7f 91       	pop	r23
    1bf4:	6f 91       	pop	r22
    1bf6:	5f 91       	pop	r21
    1bf8:	4f 91       	pop	r20
    1bfa:	3f 91       	pop	r19
    1bfc:	2f 91       	pop	r18
    1bfe:	0f 90       	pop	r0
    1c00:	0f be       	out	0x3f, r0	; 63
    1c02:	0f 90       	pop	r0
    1c04:	1f 90       	pop	r1
    1c06:	18 95       	reti

00001c08 <MCAL_Timer1_Init>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
void MCAL_Timer1_Init(Timer1_Config *Config_ptr)
{
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <MCAL_Timer1_Init+0x6>
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <MCAL_Timer1_Init+0x8>
    1c10:	cd b7       	in	r28, 0x3d	; 61
    1c12:	de b7       	in	r29, 0x3e	; 62
    1c14:	9a 83       	std	Y+2, r25	; 0x02
    1c16:	89 83       	std	Y+1, r24	; 0x01

	Timer1_BASE->TCCR1A_t.Reg = 0;
    1c18:	e6 e4       	ldi	r30, 0x46	; 70
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	11 86       	std	Z+9, r1	; 0x09

	switch (Config_ptr->mode)
    1c1e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c20:	fa 81       	ldd	r31, Y+2	; 0x02
    1c22:	80 81       	ld	r24, Z
    1c24:	28 2f       	mov	r18, r24
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	3c 83       	std	Y+4, r19	; 0x04
    1c2a:	2b 83       	std	Y+3, r18	; 0x03
    1c2c:	8b 81       	ldd	r24, Y+3	; 0x03
    1c2e:	9c 81       	ldd	r25, Y+4	; 0x04
    1c30:	87 30       	cpi	r24, 0x07	; 7
    1c32:	91 05       	cpc	r25, r1
    1c34:	09 f4       	brne	.+2      	; 0x1c38 <MCAL_Timer1_Init+0x30>
    1c36:	3e c1       	rjmp	.+636    	; 0x1eb4 <MCAL_Timer1_Init+0x2ac>
    1c38:	2b 81       	ldd	r18, Y+3	; 0x03
    1c3a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c3c:	28 30       	cpi	r18, 0x08	; 8
    1c3e:	31 05       	cpc	r19, r1
    1c40:	4c f5       	brge	.+82     	; 0x1c94 <MCAL_Timer1_Init+0x8c>
    1c42:	8b 81       	ldd	r24, Y+3	; 0x03
    1c44:	9c 81       	ldd	r25, Y+4	; 0x04
    1c46:	83 30       	cpi	r24, 0x03	; 3
    1c48:	91 05       	cpc	r25, r1
    1c4a:	09 f4       	brne	.+2      	; 0x1c4e <MCAL_Timer1_Init+0x46>
    1c4c:	ad c0       	rjmp	.+346    	; 0x1da8 <MCAL_Timer1_Init+0x1a0>
    1c4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1c50:	3c 81       	ldd	r19, Y+4	; 0x04
    1c52:	24 30       	cpi	r18, 0x04	; 4
    1c54:	31 05       	cpc	r19, r1
    1c56:	8c f4       	brge	.+34     	; 0x1c7a <MCAL_Timer1_Init+0x72>
    1c58:	8b 81       	ldd	r24, Y+3	; 0x03
    1c5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1c5c:	81 30       	cpi	r24, 0x01	; 1
    1c5e:	91 05       	cpc	r25, r1
    1c60:	09 f4       	brne	.+2      	; 0x1c64 <MCAL_Timer1_Init+0x5c>
    1c62:	5e c0       	rjmp	.+188    	; 0x1d20 <MCAL_Timer1_Init+0x118>
    1c64:	2b 81       	ldd	r18, Y+3	; 0x03
    1c66:	3c 81       	ldd	r19, Y+4	; 0x04
    1c68:	22 30       	cpi	r18, 0x02	; 2
    1c6a:	31 05       	cpc	r19, r1
    1c6c:	0c f0       	brlt	.+2      	; 0x1c70 <MCAL_Timer1_Init+0x68>
    1c6e:	7a c0       	rjmp	.+244    	; 0x1d64 <MCAL_Timer1_Init+0x15c>
    1c70:	8b 81       	ldd	r24, Y+3	; 0x03
    1c72:	9c 81       	ldd	r25, Y+4	; 0x04
    1c74:	00 97       	sbiw	r24, 0x00	; 0
    1c76:	c9 f1       	breq	.+114    	; 0x1cea <MCAL_Timer1_Init+0xe2>
    1c78:	2c c2       	rjmp	.+1112   	; 0x20d2 <MCAL_Timer1_Init+0x4ca>
    1c7a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c7c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c7e:	25 30       	cpi	r18, 0x05	; 5
    1c80:	31 05       	cpc	r19, r1
    1c82:	09 f4       	brne	.+2      	; 0x1c86 <MCAL_Timer1_Init+0x7e>
    1c84:	d3 c0       	rjmp	.+422    	; 0x1e2c <MCAL_Timer1_Init+0x224>
    1c86:	8b 81       	ldd	r24, Y+3	; 0x03
    1c88:	9c 81       	ldd	r25, Y+4	; 0x04
    1c8a:	86 30       	cpi	r24, 0x06	; 6
    1c8c:	91 05       	cpc	r25, r1
    1c8e:	0c f0       	brlt	.+2      	; 0x1c92 <MCAL_Timer1_Init+0x8a>
    1c90:	ef c0       	rjmp	.+478    	; 0x1e70 <MCAL_Timer1_Init+0x268>
    1c92:	ac c0       	rjmp	.+344    	; 0x1dec <MCAL_Timer1_Init+0x1e4>
    1c94:	2b 81       	ldd	r18, Y+3	; 0x03
    1c96:	3c 81       	ldd	r19, Y+4	; 0x04
    1c98:	2b 30       	cpi	r18, 0x0B	; 11
    1c9a:	31 05       	cpc	r19, r1
    1c9c:	09 f4       	brne	.+2      	; 0x1ca0 <MCAL_Timer1_Init+0x98>
    1c9e:	92 c1       	rjmp	.+804    	; 0x1fc4 <MCAL_Timer1_Init+0x3bc>
    1ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca2:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca4:	8c 30       	cpi	r24, 0x0C	; 12
    1ca6:	91 05       	cpc	r25, r1
    1ca8:	6c f4       	brge	.+26     	; 0x1cc4 <MCAL_Timer1_Init+0xbc>
    1caa:	2b 81       	ldd	r18, Y+3	; 0x03
    1cac:	3c 81       	ldd	r19, Y+4	; 0x04
    1cae:	29 30       	cpi	r18, 0x09	; 9
    1cb0:	31 05       	cpc	r19, r1
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <MCAL_Timer1_Init+0xae>
    1cb4:	43 c1       	rjmp	.+646    	; 0x1f3c <MCAL_Timer1_Init+0x334>
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cba:	8a 30       	cpi	r24, 0x0A	; 10
    1cbc:	91 05       	cpc	r25, r1
    1cbe:	0c f0       	brlt	.+2      	; 0x1cc2 <MCAL_Timer1_Init+0xba>
    1cc0:	5f c1       	rjmp	.+702    	; 0x1f80 <MCAL_Timer1_Init+0x378>
    1cc2:	1a c1       	rjmp	.+564    	; 0x1ef8 <MCAL_Timer1_Init+0x2f0>
    1cc4:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc6:	3c 81       	ldd	r19, Y+4	; 0x04
    1cc8:	2e 30       	cpi	r18, 0x0E	; 14
    1cca:	31 05       	cpc	r19, r1
    1ccc:	09 f4       	brne	.+2      	; 0x1cd0 <MCAL_Timer1_Init+0xc8>
    1cce:	be c1       	rjmp	.+892    	; 0x204c <MCAL_Timer1_Init+0x444>
    1cd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1cd2:	9c 81       	ldd	r25, Y+4	; 0x04
    1cd4:	8f 30       	cpi	r24, 0x0F	; 15
    1cd6:	91 05       	cpc	r25, r1
    1cd8:	09 f4       	brne	.+2      	; 0x1cdc <MCAL_Timer1_Init+0xd4>
    1cda:	da c1       	rjmp	.+948    	; 0x2090 <MCAL_Timer1_Init+0x488>
    1cdc:	2b 81       	ldd	r18, Y+3	; 0x03
    1cde:	3c 81       	ldd	r19, Y+4	; 0x04
    1ce0:	2c 30       	cpi	r18, 0x0C	; 12
    1ce2:	31 05       	cpc	r19, r1
    1ce4:	09 f4       	brne	.+2      	; 0x1ce8 <MCAL_Timer1_Init+0xe0>
    1ce6:	90 c1       	rjmp	.+800    	; 0x2008 <MCAL_Timer1_Init+0x400>
    1ce8:	f4 c1       	rjmp	.+1000   	; 0x20d2 <MCAL_Timer1_Init+0x4ca>
	{

	case TIMER1_NORMAL:
		Timer1_BASE->TCCR1A_t.Reg = (1<<FOC1A) | (1<<FOC1B);
    1cea:	e6 e4       	ldi	r30, 0x46	; 70
    1cec:	f0 e0       	ldi	r31, 0x00	; 0
    1cee:	8c e0       	ldi	r24, 0x0C	; 12
    1cf0:	81 87       	std	Z+9, r24	; 0x09
		Timer1_BASE->TCNT1_t = Config_ptr->reload_value;
    1cf2:	a6 e4       	ldi	r26, 0x46	; 70
    1cf4:	b0 e0       	ldi	r27, 0x00	; 0
    1cf6:	e9 81       	ldd	r30, Y+1	; 0x01
    1cf8:	fa 81       	ldd	r31, Y+2	; 0x02
    1cfa:	83 81       	ldd	r24, Z+3	; 0x03
    1cfc:	94 81       	ldd	r25, Z+4	; 0x04
    1cfe:	17 96       	adiw	r26, 0x07	; 7
    1d00:	9c 93       	st	X, r25
    1d02:	8e 93       	st	-X, r24
    1d04:	16 97       	sbiw	r26, 0x06	; 6
		Timer1_BASE->TCCR1B_t.Reg |= (Config_ptr->prescalar) ;
    1d06:	a6 e4       	ldi	r26, 0x46	; 70
    1d08:	b0 e0       	ldi	r27, 0x00	; 0
    1d0a:	e6 e4       	ldi	r30, 0x46	; 70
    1d0c:	f0 e0       	ldi	r31, 0x00	; 0
    1d0e:	90 85       	ldd	r25, Z+8	; 0x08
    1d10:	e9 81       	ldd	r30, Y+1	; 0x01
    1d12:	fa 81       	ldd	r31, Y+2	; 0x02
    1d14:	81 81       	ldd	r24, Z+1	; 0x01
    1d16:	89 2b       	or	r24, r25
    1d18:	18 96       	adiw	r26, 0x08	; 8
    1d1a:	8c 93       	st	X, r24
    1d1c:	18 97       	sbiw	r26, 0x08	; 8
    1d1e:	d9 c1       	rjmp	.+946    	; 0x20d2 <MCAL_Timer1_Init+0x4ca>
		break;

	case TIMER1_PWM_PHASE_CORRECT_8BIT:
		SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    1d20:	a6 e4       	ldi	r26, 0x46	; 70
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	e6 e4       	ldi	r30, 0x46	; 70
    1d26:	f0 e0       	ldi	r31, 0x00	; 0
    1d28:	81 85       	ldd	r24, Z+9	; 0x09
    1d2a:	81 60       	ori	r24, 0x01	; 1
    1d2c:	19 96       	adiw	r26, 0x09	; 9
    1d2e:	8c 93       	st	X, r24
		CLR_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    1d30:	a6 e4       	ldi	r26, 0x46	; 70
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	e6 e4       	ldi	r30, 0x46	; 70
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	81 85       	ldd	r24, Z+9	; 0x09
    1d3a:	8d 7f       	andi	r24, 0xFD	; 253
    1d3c:	19 96       	adiw	r26, 0x09	; 9
    1d3e:	8c 93       	st	X, r24
		CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    1d40:	a6 e4       	ldi	r26, 0x46	; 70
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	e6 e4       	ldi	r30, 0x46	; 70
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 85       	ldd	r24, Z+8	; 0x08
    1d4a:	87 7f       	andi	r24, 0xF7	; 247
    1d4c:	18 96       	adiw	r26, 0x08	; 8
    1d4e:	8c 93       	st	X, r24
		CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    1d50:	a6 e4       	ldi	r26, 0x46	; 70
    1d52:	b0 e0       	ldi	r27, 0x00	; 0
    1d54:	e6 e4       	ldi	r30, 0x46	; 70
    1d56:	f0 e0       	ldi	r31, 0x00	; 0
    1d58:	80 85       	ldd	r24, Z+8	; 0x08
    1d5a:	8f 7e       	andi	r24, 0xEF	; 239
    1d5c:	18 96       	adiw	r26, 0x08	; 8
    1d5e:	8c 93       	st	X, r24
    1d60:	18 97       	sbiw	r26, 0x08	; 8
    1d62:	b7 c1       	rjmp	.+878    	; 0x20d2 <MCAL_Timer1_Init+0x4ca>
		break;

	case TIMER1_PWM_PHASE_CORRECT_9BIT:
		CLR_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    1d64:	a6 e4       	ldi	r26, 0x46	; 70
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e6 e4       	ldi	r30, 0x46	; 70
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	81 85       	ldd	r24, Z+9	; 0x09
    1d6e:	8e 7f       	andi	r24, 0xFE	; 254
    1d70:	19 96       	adiw	r26, 0x09	; 9
    1d72:	8c 93       	st	X, r24
		SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    1d74:	a6 e4       	ldi	r26, 0x46	; 70
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	e6 e4       	ldi	r30, 0x46	; 70
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	81 85       	ldd	r24, Z+9	; 0x09
    1d7e:	82 60       	ori	r24, 0x02	; 2
    1d80:	19 96       	adiw	r26, 0x09	; 9
    1d82:	8c 93       	st	X, r24
		CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    1d84:	a6 e4       	ldi	r26, 0x46	; 70
    1d86:	b0 e0       	ldi	r27, 0x00	; 0
    1d88:	e6 e4       	ldi	r30, 0x46	; 70
    1d8a:	f0 e0       	ldi	r31, 0x00	; 0
    1d8c:	80 85       	ldd	r24, Z+8	; 0x08
    1d8e:	87 7f       	andi	r24, 0xF7	; 247
    1d90:	18 96       	adiw	r26, 0x08	; 8
    1d92:	8c 93       	st	X, r24
		CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    1d94:	a6 e4       	ldi	r26, 0x46	; 70
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	e6 e4       	ldi	r30, 0x46	; 70
    1d9a:	f0 e0       	ldi	r31, 0x00	; 0
    1d9c:	80 85       	ldd	r24, Z+8	; 0x08
    1d9e:	8f 7e       	andi	r24, 0xEF	; 239
    1da0:	18 96       	adiw	r26, 0x08	; 8
    1da2:	8c 93       	st	X, r24
    1da4:	18 97       	sbiw	r26, 0x08	; 8
    1da6:	95 c1       	rjmp	.+810    	; 0x20d2 <MCAL_Timer1_Init+0x4ca>
		break;

	case TIMER1_PWM_PHASE_CORRECT_10BIT:
		SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    1da8:	a6 e4       	ldi	r26, 0x46	; 70
    1daa:	b0 e0       	ldi	r27, 0x00	; 0
    1dac:	e6 e4       	ldi	r30, 0x46	; 70
    1dae:	f0 e0       	ldi	r31, 0x00	; 0
    1db0:	81 85       	ldd	r24, Z+9	; 0x09
    1db2:	81 60       	ori	r24, 0x01	; 1
    1db4:	19 96       	adiw	r26, 0x09	; 9
    1db6:	8c 93       	st	X, r24
		SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    1db8:	a6 e4       	ldi	r26, 0x46	; 70
    1dba:	b0 e0       	ldi	r27, 0x00	; 0
    1dbc:	e6 e4       	ldi	r30, 0x46	; 70
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	81 85       	ldd	r24, Z+9	; 0x09
    1dc2:	82 60       	ori	r24, 0x02	; 2
    1dc4:	19 96       	adiw	r26, 0x09	; 9
    1dc6:	8c 93       	st	X, r24
		CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    1dc8:	a6 e4       	ldi	r26, 0x46	; 70
    1dca:	b0 e0       	ldi	r27, 0x00	; 0
    1dcc:	e6 e4       	ldi	r30, 0x46	; 70
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	80 85       	ldd	r24, Z+8	; 0x08
    1dd2:	87 7f       	andi	r24, 0xF7	; 247
    1dd4:	18 96       	adiw	r26, 0x08	; 8
    1dd6:	8c 93       	st	X, r24
		CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    1dd8:	a6 e4       	ldi	r26, 0x46	; 70
    1dda:	b0 e0       	ldi	r27, 0x00	; 0
    1ddc:	e6 e4       	ldi	r30, 0x46	; 70
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 85       	ldd	r24, Z+8	; 0x08
    1de2:	8f 7e       	andi	r24, 0xEF	; 239
    1de4:	18 96       	adiw	r26, 0x08	; 8
    1de6:	8c 93       	st	X, r24
    1de8:	18 97       	sbiw	r26, 0x08	; 8
    1dea:	73 c1       	rjmp	.+742    	; 0x20d2 <MCAL_Timer1_Init+0x4ca>
		break;

	case TIMER1_CTC_OCR:

		Timer1_BASE->OCR1A_t = Config_ptr->compare_value;
    1dec:	a6 e4       	ldi	r26, 0x46	; 70
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	e9 81       	ldd	r30, Y+1	; 0x01
    1df2:	fa 81       	ldd	r31, Y+2	; 0x02
    1df4:	85 81       	ldd	r24, Z+5	; 0x05
    1df6:	96 81       	ldd	r25, Z+6	; 0x06
    1df8:	15 96       	adiw	r26, 0x05	; 5
    1dfa:	9c 93       	st	X, r25
    1dfc:	8e 93       	st	-X, r24
    1dfe:	14 97       	sbiw	r26, 0x04	; 4
		Timer1_BASE->TCCR1A_t.Reg |= (1<<FOC1A) | (1<<FOC1B);
    1e00:	a6 e4       	ldi	r26, 0x46	; 70
    1e02:	b0 e0       	ldi	r27, 0x00	; 0
    1e04:	e6 e4       	ldi	r30, 0x46	; 70
    1e06:	f0 e0       	ldi	r31, 0x00	; 0
    1e08:	81 85       	ldd	r24, Z+9	; 0x09
    1e0a:	8c 60       	ori	r24, 0x0C	; 12
    1e0c:	19 96       	adiw	r26, 0x09	; 9
    1e0e:	8c 93       	st	X, r24
		Timer1_BASE->TCCR1B_t.Reg |= (Config_ptr->prescalar) | (1<<WGM12);
    1e10:	a6 e4       	ldi	r26, 0x46	; 70
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	e6 e4       	ldi	r30, 0x46	; 70
    1e16:	f0 e0       	ldi	r31, 0x00	; 0
    1e18:	90 85       	ldd	r25, Z+8	; 0x08
    1e1a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e1c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e1e:	81 81       	ldd	r24, Z+1	; 0x01
    1e20:	89 2b       	or	r24, r25
    1e22:	88 60       	ori	r24, 0x08	; 8
    1e24:	18 96       	adiw	r26, 0x08	; 8
    1e26:	8c 93       	st	X, r24
    1e28:	18 97       	sbiw	r26, 0x08	; 8
    1e2a:	53 c1       	rjmp	.+678    	; 0x20d2 <MCAL_Timer1_Init+0x4ca>
		break;

	case TIMER1_FAST_PWM_8BIT:
		SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    1e2c:	a6 e4       	ldi	r26, 0x46	; 70
    1e2e:	b0 e0       	ldi	r27, 0x00	; 0
    1e30:	e6 e4       	ldi	r30, 0x46	; 70
    1e32:	f0 e0       	ldi	r31, 0x00	; 0
    1e34:	81 85       	ldd	r24, Z+9	; 0x09
    1e36:	81 60       	ori	r24, 0x01	; 1
    1e38:	19 96       	adiw	r26, 0x09	; 9
    1e3a:	8c 93       	st	X, r24
		CLR_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    1e3c:	a6 e4       	ldi	r26, 0x46	; 70
    1e3e:	b0 e0       	ldi	r27, 0x00	; 0
    1e40:	e6 e4       	ldi	r30, 0x46	; 70
    1e42:	f0 e0       	ldi	r31, 0x00	; 0
    1e44:	81 85       	ldd	r24, Z+9	; 0x09
    1e46:	8d 7f       	andi	r24, 0xFD	; 253
    1e48:	19 96       	adiw	r26, 0x09	; 9
    1e4a:	8c 93       	st	X, r24
		SET_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    1e4c:	a6 e4       	ldi	r26, 0x46	; 70
    1e4e:	b0 e0       	ldi	r27, 0x00	; 0
    1e50:	e6 e4       	ldi	r30, 0x46	; 70
    1e52:	f0 e0       	ldi	r31, 0x00	; 0
    1e54:	80 85       	ldd	r24, Z+8	; 0x08
    1e56:	88 60       	ori	r24, 0x08	; 8
    1e58:	18 96       	adiw	r26, 0x08	; 8
    1e5a:	8c 93       	st	X, r24
		CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    1e5c:	a6 e4       	ldi	r26, 0x46	; 70
    1e5e:	b0 e0       	ldi	r27, 0x00	; 0
    1e60:	e6 e4       	ldi	r30, 0x46	; 70
    1e62:	f0 e0       	ldi	r31, 0x00	; 0
    1e64:	80 85       	ldd	r24, Z+8	; 0x08
    1e66:	8f 7e       	andi	r24, 0xEF	; 239
    1e68:	18 96       	adiw	r26, 0x08	; 8
    1e6a:	8c 93       	st	X, r24
    1e6c:	18 97       	sbiw	r26, 0x08	; 8
    1e6e:	31 c1       	rjmp	.+610    	; 0x20d2 <MCAL_Timer1_Init+0x4ca>
		break;

	case TIMER1_FAST_PWM_9BIT:
		CLR_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    1e70:	a6 e4       	ldi	r26, 0x46	; 70
    1e72:	b0 e0       	ldi	r27, 0x00	; 0
    1e74:	e6 e4       	ldi	r30, 0x46	; 70
    1e76:	f0 e0       	ldi	r31, 0x00	; 0
    1e78:	81 85       	ldd	r24, Z+9	; 0x09
    1e7a:	8e 7f       	andi	r24, 0xFE	; 254
    1e7c:	19 96       	adiw	r26, 0x09	; 9
    1e7e:	8c 93       	st	X, r24
		SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    1e80:	a6 e4       	ldi	r26, 0x46	; 70
    1e82:	b0 e0       	ldi	r27, 0x00	; 0
    1e84:	e6 e4       	ldi	r30, 0x46	; 70
    1e86:	f0 e0       	ldi	r31, 0x00	; 0
    1e88:	81 85       	ldd	r24, Z+9	; 0x09
    1e8a:	82 60       	ori	r24, 0x02	; 2
    1e8c:	19 96       	adiw	r26, 0x09	; 9
    1e8e:	8c 93       	st	X, r24
		SET_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    1e90:	a6 e4       	ldi	r26, 0x46	; 70
    1e92:	b0 e0       	ldi	r27, 0x00	; 0
    1e94:	e6 e4       	ldi	r30, 0x46	; 70
    1e96:	f0 e0       	ldi	r31, 0x00	; 0
    1e98:	80 85       	ldd	r24, Z+8	; 0x08
    1e9a:	88 60       	ori	r24, 0x08	; 8
    1e9c:	18 96       	adiw	r26, 0x08	; 8
    1e9e:	8c 93       	st	X, r24
		CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    1ea0:	a6 e4       	ldi	r26, 0x46	; 70
    1ea2:	b0 e0       	ldi	r27, 0x00	; 0
    1ea4:	e6 e4       	ldi	r30, 0x46	; 70
    1ea6:	f0 e0       	ldi	r31, 0x00	; 0
    1ea8:	80 85       	ldd	r24, Z+8	; 0x08
    1eaa:	8f 7e       	andi	r24, 0xEF	; 239
    1eac:	18 96       	adiw	r26, 0x08	; 8
    1eae:	8c 93       	st	X, r24
    1eb0:	18 97       	sbiw	r26, 0x08	; 8
    1eb2:	0f c1       	rjmp	.+542    	; 0x20d2 <MCAL_Timer1_Init+0x4ca>
		break;

	case TIMER1_FAST_PWM_10BIT:
		SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    1eb4:	a6 e4       	ldi	r26, 0x46	; 70
    1eb6:	b0 e0       	ldi	r27, 0x00	; 0
    1eb8:	e6 e4       	ldi	r30, 0x46	; 70
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	81 85       	ldd	r24, Z+9	; 0x09
    1ebe:	81 60       	ori	r24, 0x01	; 1
    1ec0:	19 96       	adiw	r26, 0x09	; 9
    1ec2:	8c 93       	st	X, r24
		SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    1ec4:	a6 e4       	ldi	r26, 0x46	; 70
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e6 e4       	ldi	r30, 0x46	; 70
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	81 85       	ldd	r24, Z+9	; 0x09
    1ece:	82 60       	ori	r24, 0x02	; 2
    1ed0:	19 96       	adiw	r26, 0x09	; 9
    1ed2:	8c 93       	st	X, r24
		SET_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    1ed4:	a6 e4       	ldi	r26, 0x46	; 70
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	e6 e4       	ldi	r30, 0x46	; 70
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 85       	ldd	r24, Z+8	; 0x08
    1ede:	88 60       	ori	r24, 0x08	; 8
    1ee0:	18 96       	adiw	r26, 0x08	; 8
    1ee2:	8c 93       	st	X, r24
		CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    1ee4:	a6 e4       	ldi	r26, 0x46	; 70
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	e6 e4       	ldi	r30, 0x46	; 70
    1eea:	f0 e0       	ldi	r31, 0x00	; 0
    1eec:	80 85       	ldd	r24, Z+8	; 0x08
    1eee:	8f 7e       	andi	r24, 0xEF	; 239
    1ef0:	18 96       	adiw	r26, 0x08	; 8
    1ef2:	8c 93       	st	X, r24
    1ef4:	18 97       	sbiw	r26, 0x08	; 8
    1ef6:	ed c0       	rjmp	.+474    	; 0x20d2 <MCAL_Timer1_Init+0x4ca>
		break;

	case TIMER1_PWM_PHASE_FREQUENCY_CORRECT_ICR:
		CLR_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    1ef8:	a6 e4       	ldi	r26, 0x46	; 70
    1efa:	b0 e0       	ldi	r27, 0x00	; 0
    1efc:	e6 e4       	ldi	r30, 0x46	; 70
    1efe:	f0 e0       	ldi	r31, 0x00	; 0
    1f00:	81 85       	ldd	r24, Z+9	; 0x09
    1f02:	8e 7f       	andi	r24, 0xFE	; 254
    1f04:	19 96       	adiw	r26, 0x09	; 9
    1f06:	8c 93       	st	X, r24
		CLR_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    1f08:	a6 e4       	ldi	r26, 0x46	; 70
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	e6 e4       	ldi	r30, 0x46	; 70
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	81 85       	ldd	r24, Z+9	; 0x09
    1f12:	8d 7f       	andi	r24, 0xFD	; 253
    1f14:	19 96       	adiw	r26, 0x09	; 9
    1f16:	8c 93       	st	X, r24
		CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    1f18:	a6 e4       	ldi	r26, 0x46	; 70
    1f1a:	b0 e0       	ldi	r27, 0x00	; 0
    1f1c:	e6 e4       	ldi	r30, 0x46	; 70
    1f1e:	f0 e0       	ldi	r31, 0x00	; 0
    1f20:	80 85       	ldd	r24, Z+8	; 0x08
    1f22:	87 7f       	andi	r24, 0xF7	; 247
    1f24:	18 96       	adiw	r26, 0x08	; 8
    1f26:	8c 93       	st	X, r24
		SET_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    1f28:	a6 e4       	ldi	r26, 0x46	; 70
    1f2a:	b0 e0       	ldi	r27, 0x00	; 0
    1f2c:	e6 e4       	ldi	r30, 0x46	; 70
    1f2e:	f0 e0       	ldi	r31, 0x00	; 0
    1f30:	80 85       	ldd	r24, Z+8	; 0x08
    1f32:	80 61       	ori	r24, 0x10	; 16
    1f34:	18 96       	adiw	r26, 0x08	; 8
    1f36:	8c 93       	st	X, r24
    1f38:	18 97       	sbiw	r26, 0x08	; 8
    1f3a:	cb c0       	rjmp	.+406    	; 0x20d2 <MCAL_Timer1_Init+0x4ca>
		break;

	case TIMER1_PWM_PHASE_FREQUENCY_CORRECT_OCR:
		SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    1f3c:	a6 e4       	ldi	r26, 0x46	; 70
    1f3e:	b0 e0       	ldi	r27, 0x00	; 0
    1f40:	e6 e4       	ldi	r30, 0x46	; 70
    1f42:	f0 e0       	ldi	r31, 0x00	; 0
    1f44:	81 85       	ldd	r24, Z+9	; 0x09
    1f46:	81 60       	ori	r24, 0x01	; 1
    1f48:	19 96       	adiw	r26, 0x09	; 9
    1f4a:	8c 93       	st	X, r24
		CLR_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    1f4c:	a6 e4       	ldi	r26, 0x46	; 70
    1f4e:	b0 e0       	ldi	r27, 0x00	; 0
    1f50:	e6 e4       	ldi	r30, 0x46	; 70
    1f52:	f0 e0       	ldi	r31, 0x00	; 0
    1f54:	81 85       	ldd	r24, Z+9	; 0x09
    1f56:	8d 7f       	andi	r24, 0xFD	; 253
    1f58:	19 96       	adiw	r26, 0x09	; 9
    1f5a:	8c 93       	st	X, r24
		CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    1f5c:	a6 e4       	ldi	r26, 0x46	; 70
    1f5e:	b0 e0       	ldi	r27, 0x00	; 0
    1f60:	e6 e4       	ldi	r30, 0x46	; 70
    1f62:	f0 e0       	ldi	r31, 0x00	; 0
    1f64:	80 85       	ldd	r24, Z+8	; 0x08
    1f66:	87 7f       	andi	r24, 0xF7	; 247
    1f68:	18 96       	adiw	r26, 0x08	; 8
    1f6a:	8c 93       	st	X, r24
		SET_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    1f6c:	a6 e4       	ldi	r26, 0x46	; 70
    1f6e:	b0 e0       	ldi	r27, 0x00	; 0
    1f70:	e6 e4       	ldi	r30, 0x46	; 70
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 85       	ldd	r24, Z+8	; 0x08
    1f76:	80 61       	ori	r24, 0x10	; 16
    1f78:	18 96       	adiw	r26, 0x08	; 8
    1f7a:	8c 93       	st	X, r24
    1f7c:	18 97       	sbiw	r26, 0x08	; 8
    1f7e:	a9 c0       	rjmp	.+338    	; 0x20d2 <MCAL_Timer1_Init+0x4ca>
		break;

	case TIMER1_PWM_PHASE_CORRECT_ICR:
		CLR_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    1f80:	a6 e4       	ldi	r26, 0x46	; 70
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	e6 e4       	ldi	r30, 0x46	; 70
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	81 85       	ldd	r24, Z+9	; 0x09
    1f8a:	8e 7f       	andi	r24, 0xFE	; 254
    1f8c:	19 96       	adiw	r26, 0x09	; 9
    1f8e:	8c 93       	st	X, r24
		SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    1f90:	a6 e4       	ldi	r26, 0x46	; 70
    1f92:	b0 e0       	ldi	r27, 0x00	; 0
    1f94:	e6 e4       	ldi	r30, 0x46	; 70
    1f96:	f0 e0       	ldi	r31, 0x00	; 0
    1f98:	81 85       	ldd	r24, Z+9	; 0x09
    1f9a:	82 60       	ori	r24, 0x02	; 2
    1f9c:	19 96       	adiw	r26, 0x09	; 9
    1f9e:	8c 93       	st	X, r24
		CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    1fa0:	a6 e4       	ldi	r26, 0x46	; 70
    1fa2:	b0 e0       	ldi	r27, 0x00	; 0
    1fa4:	e6 e4       	ldi	r30, 0x46	; 70
    1fa6:	f0 e0       	ldi	r31, 0x00	; 0
    1fa8:	80 85       	ldd	r24, Z+8	; 0x08
    1faa:	87 7f       	andi	r24, 0xF7	; 247
    1fac:	18 96       	adiw	r26, 0x08	; 8
    1fae:	8c 93       	st	X, r24
		SET_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    1fb0:	a6 e4       	ldi	r26, 0x46	; 70
    1fb2:	b0 e0       	ldi	r27, 0x00	; 0
    1fb4:	e6 e4       	ldi	r30, 0x46	; 70
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	80 85       	ldd	r24, Z+8	; 0x08
    1fba:	80 61       	ori	r24, 0x10	; 16
    1fbc:	18 96       	adiw	r26, 0x08	; 8
    1fbe:	8c 93       	st	X, r24
    1fc0:	18 97       	sbiw	r26, 0x08	; 8
    1fc2:	87 c0       	rjmp	.+270    	; 0x20d2 <MCAL_Timer1_Init+0x4ca>
		break;

	case TIMER1_PWM_PHASE_CORRECT_OCR:
		SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    1fc4:	a6 e4       	ldi	r26, 0x46	; 70
    1fc6:	b0 e0       	ldi	r27, 0x00	; 0
    1fc8:	e6 e4       	ldi	r30, 0x46	; 70
    1fca:	f0 e0       	ldi	r31, 0x00	; 0
    1fcc:	81 85       	ldd	r24, Z+9	; 0x09
    1fce:	81 60       	ori	r24, 0x01	; 1
    1fd0:	19 96       	adiw	r26, 0x09	; 9
    1fd2:	8c 93       	st	X, r24
		SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    1fd4:	a6 e4       	ldi	r26, 0x46	; 70
    1fd6:	b0 e0       	ldi	r27, 0x00	; 0
    1fd8:	e6 e4       	ldi	r30, 0x46	; 70
    1fda:	f0 e0       	ldi	r31, 0x00	; 0
    1fdc:	81 85       	ldd	r24, Z+9	; 0x09
    1fde:	82 60       	ori	r24, 0x02	; 2
    1fe0:	19 96       	adiw	r26, 0x09	; 9
    1fe2:	8c 93       	st	X, r24
		CLR_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    1fe4:	a6 e4       	ldi	r26, 0x46	; 70
    1fe6:	b0 e0       	ldi	r27, 0x00	; 0
    1fe8:	e6 e4       	ldi	r30, 0x46	; 70
    1fea:	f0 e0       	ldi	r31, 0x00	; 0
    1fec:	80 85       	ldd	r24, Z+8	; 0x08
    1fee:	87 7f       	andi	r24, 0xF7	; 247
    1ff0:	18 96       	adiw	r26, 0x08	; 8
    1ff2:	8c 93       	st	X, r24
		SET_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    1ff4:	a6 e4       	ldi	r26, 0x46	; 70
    1ff6:	b0 e0       	ldi	r27, 0x00	; 0
    1ff8:	e6 e4       	ldi	r30, 0x46	; 70
    1ffa:	f0 e0       	ldi	r31, 0x00	; 0
    1ffc:	80 85       	ldd	r24, Z+8	; 0x08
    1ffe:	80 61       	ori	r24, 0x10	; 16
    2000:	18 96       	adiw	r26, 0x08	; 8
    2002:	8c 93       	st	X, r24
    2004:	18 97       	sbiw	r26, 0x08	; 8
    2006:	65 c0       	rjmp	.+202    	; 0x20d2 <MCAL_Timer1_Init+0x4ca>
		break;

	case TIMER1_CTC_ICR:
		CLR_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    2008:	a6 e4       	ldi	r26, 0x46	; 70
    200a:	b0 e0       	ldi	r27, 0x00	; 0
    200c:	e6 e4       	ldi	r30, 0x46	; 70
    200e:	f0 e0       	ldi	r31, 0x00	; 0
    2010:	81 85       	ldd	r24, Z+9	; 0x09
    2012:	8e 7f       	andi	r24, 0xFE	; 254
    2014:	19 96       	adiw	r26, 0x09	; 9
    2016:	8c 93       	st	X, r24
		CLR_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    2018:	a6 e4       	ldi	r26, 0x46	; 70
    201a:	b0 e0       	ldi	r27, 0x00	; 0
    201c:	e6 e4       	ldi	r30, 0x46	; 70
    201e:	f0 e0       	ldi	r31, 0x00	; 0
    2020:	81 85       	ldd	r24, Z+9	; 0x09
    2022:	8d 7f       	andi	r24, 0xFD	; 253
    2024:	19 96       	adiw	r26, 0x09	; 9
    2026:	8c 93       	st	X, r24
		SET_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    2028:	a6 e4       	ldi	r26, 0x46	; 70
    202a:	b0 e0       	ldi	r27, 0x00	; 0
    202c:	e6 e4       	ldi	r30, 0x46	; 70
    202e:	f0 e0       	ldi	r31, 0x00	; 0
    2030:	80 85       	ldd	r24, Z+8	; 0x08
    2032:	88 60       	ori	r24, 0x08	; 8
    2034:	18 96       	adiw	r26, 0x08	; 8
    2036:	8c 93       	st	X, r24
		SET_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    2038:	a6 e4       	ldi	r26, 0x46	; 70
    203a:	b0 e0       	ldi	r27, 0x00	; 0
    203c:	e6 e4       	ldi	r30, 0x46	; 70
    203e:	f0 e0       	ldi	r31, 0x00	; 0
    2040:	80 85       	ldd	r24, Z+8	; 0x08
    2042:	80 61       	ori	r24, 0x10	; 16
    2044:	18 96       	adiw	r26, 0x08	; 8
    2046:	8c 93       	st	X, r24
    2048:	18 97       	sbiw	r26, 0x08	; 8
    204a:	43 c0       	rjmp	.+134    	; 0x20d2 <MCAL_Timer1_Init+0x4ca>
		break;

	case TIMER1_FAST_PWM_ICR:
		CLR_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    204c:	a6 e4       	ldi	r26, 0x46	; 70
    204e:	b0 e0       	ldi	r27, 0x00	; 0
    2050:	e6 e4       	ldi	r30, 0x46	; 70
    2052:	f0 e0       	ldi	r31, 0x00	; 0
    2054:	81 85       	ldd	r24, Z+9	; 0x09
    2056:	8e 7f       	andi	r24, 0xFE	; 254
    2058:	19 96       	adiw	r26, 0x09	; 9
    205a:	8c 93       	st	X, r24
		SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    205c:	a6 e4       	ldi	r26, 0x46	; 70
    205e:	b0 e0       	ldi	r27, 0x00	; 0
    2060:	e6 e4       	ldi	r30, 0x46	; 70
    2062:	f0 e0       	ldi	r31, 0x00	; 0
    2064:	81 85       	ldd	r24, Z+9	; 0x09
    2066:	82 60       	ori	r24, 0x02	; 2
    2068:	19 96       	adiw	r26, 0x09	; 9
    206a:	8c 93       	st	X, r24
		SET_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    206c:	a6 e4       	ldi	r26, 0x46	; 70
    206e:	b0 e0       	ldi	r27, 0x00	; 0
    2070:	e6 e4       	ldi	r30, 0x46	; 70
    2072:	f0 e0       	ldi	r31, 0x00	; 0
    2074:	80 85       	ldd	r24, Z+8	; 0x08
    2076:	88 60       	ori	r24, 0x08	; 8
    2078:	18 96       	adiw	r26, 0x08	; 8
    207a:	8c 93       	st	X, r24
		SET_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    207c:	a6 e4       	ldi	r26, 0x46	; 70
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	e6 e4       	ldi	r30, 0x46	; 70
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 85       	ldd	r24, Z+8	; 0x08
    2086:	80 61       	ori	r24, 0x10	; 16
    2088:	18 96       	adiw	r26, 0x08	; 8
    208a:	8c 93       	st	X, r24
    208c:	18 97       	sbiw	r26, 0x08	; 8
    208e:	21 c0       	rjmp	.+66     	; 0x20d2 <MCAL_Timer1_Init+0x4ca>
		break;

	case TIMER1_FAST_PWM_OCR:
		SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM10);
    2090:	a6 e4       	ldi	r26, 0x46	; 70
    2092:	b0 e0       	ldi	r27, 0x00	; 0
    2094:	e6 e4       	ldi	r30, 0x46	; 70
    2096:	f0 e0       	ldi	r31, 0x00	; 0
    2098:	81 85       	ldd	r24, Z+9	; 0x09
    209a:	81 60       	ori	r24, 0x01	; 1
    209c:	19 96       	adiw	r26, 0x09	; 9
    209e:	8c 93       	st	X, r24
		SET_BIT(Timer1_BASE->TCCR1A_t.Reg,WGM11);
    20a0:	a6 e4       	ldi	r26, 0x46	; 70
    20a2:	b0 e0       	ldi	r27, 0x00	; 0
    20a4:	e6 e4       	ldi	r30, 0x46	; 70
    20a6:	f0 e0       	ldi	r31, 0x00	; 0
    20a8:	81 85       	ldd	r24, Z+9	; 0x09
    20aa:	82 60       	ori	r24, 0x02	; 2
    20ac:	19 96       	adiw	r26, 0x09	; 9
    20ae:	8c 93       	st	X, r24
		SET_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM12);
    20b0:	a6 e4       	ldi	r26, 0x46	; 70
    20b2:	b0 e0       	ldi	r27, 0x00	; 0
    20b4:	e6 e4       	ldi	r30, 0x46	; 70
    20b6:	f0 e0       	ldi	r31, 0x00	; 0
    20b8:	80 85       	ldd	r24, Z+8	; 0x08
    20ba:	88 60       	ori	r24, 0x08	; 8
    20bc:	18 96       	adiw	r26, 0x08	; 8
    20be:	8c 93       	st	X, r24
		SET_BIT(Timer1_BASE->TCCR1B_t.Reg,WGM13);
    20c0:	a6 e4       	ldi	r26, 0x46	; 70
    20c2:	b0 e0       	ldi	r27, 0x00	; 0
    20c4:	e6 e4       	ldi	r30, 0x46	; 70
    20c6:	f0 e0       	ldi	r31, 0x00	; 0
    20c8:	80 85       	ldd	r24, Z+8	; 0x08
    20ca:	80 61       	ori	r24, 0x10	; 16
    20cc:	18 96       	adiw	r26, 0x08	; 8
    20ce:	8c 93       	st	X, r24
    20d0:	18 97       	sbiw	r26, 0x08	; 8
		break;

	default:
		break;
	}
	if(Config_ptr->Channels == ChannelB)
    20d2:	e9 81       	ldd	r30, Y+1	; 0x01
    20d4:	fa 81       	ldd	r31, Y+2	; 0x02
    20d6:	87 81       	ldd	r24, Z+7	; 0x07
    20d8:	81 30       	cpi	r24, 0x01	; 1
    20da:	d1 f4       	brne	.+52     	; 0x2110 <MCAL_Timer1_Init+0x508>
	{
		Timer1_BASE->TCCR1B_t.Reg = ((Timer1_BASE->TCCR1B_t.Reg & 0x3F) | (Config_ptr->signal_output) << COM1A0);
    20dc:	a6 e4       	ldi	r26, 0x46	; 70
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	e6 e4       	ldi	r30, 0x46	; 70
    20e2:	f0 e0       	ldi	r31, 0x00	; 0
    20e4:	80 85       	ldd	r24, Z+8	; 0x08
    20e6:	28 2f       	mov	r18, r24
    20e8:	2f 73       	andi	r18, 0x3F	; 63
    20ea:	e9 81       	ldd	r30, Y+1	; 0x01
    20ec:	fa 81       	ldd	r31, Y+2	; 0x02
    20ee:	82 81       	ldd	r24, Z+2	; 0x02
    20f0:	88 2f       	mov	r24, r24
    20f2:	90 e0       	ldi	r25, 0x00	; 0
    20f4:	00 24       	eor	r0, r0
    20f6:	96 95       	lsr	r25
    20f8:	87 95       	ror	r24
    20fa:	07 94       	ror	r0
    20fc:	96 95       	lsr	r25
    20fe:	87 95       	ror	r24
    2100:	07 94       	ror	r0
    2102:	98 2f       	mov	r25, r24
    2104:	80 2d       	mov	r24, r0
    2106:	82 2b       	or	r24, r18
    2108:	18 96       	adiw	r26, 0x08	; 8
    210a:	8c 93       	st	X, r24
    210c:	18 97       	sbiw	r26, 0x08	; 8
    210e:	16 c0       	rjmp	.+44     	; 0x213c <MCAL_Timer1_Init+0x534>
	}
	else
	{
		Timer1_BASE->TCCR1A_t.Reg = ((Timer1_BASE->TCCR1A_t.Reg & 0xCF) | (Config_ptr->signal_output) << COM1B0);
    2110:	a6 e4       	ldi	r26, 0x46	; 70
    2112:	b0 e0       	ldi	r27, 0x00	; 0
    2114:	e6 e4       	ldi	r30, 0x46	; 70
    2116:	f0 e0       	ldi	r31, 0x00	; 0
    2118:	81 85       	ldd	r24, Z+9	; 0x09
    211a:	28 2f       	mov	r18, r24
    211c:	2f 7c       	andi	r18, 0xCF	; 207
    211e:	e9 81       	ldd	r30, Y+1	; 0x01
    2120:	fa 81       	ldd	r31, Y+2	; 0x02
    2122:	82 81       	ldd	r24, Z+2	; 0x02
    2124:	88 2f       	mov	r24, r24
    2126:	90 e0       	ldi	r25, 0x00	; 0
    2128:	82 95       	swap	r24
    212a:	92 95       	swap	r25
    212c:	90 7f       	andi	r25, 0xF0	; 240
    212e:	98 27       	eor	r25, r24
    2130:	80 7f       	andi	r24, 0xF0	; 240
    2132:	98 27       	eor	r25, r24
    2134:	82 2b       	or	r24, r18
    2136:	19 96       	adiw	r26, 0x09	; 9
    2138:	8c 93       	st	X, r24
    213a:	19 97       	sbiw	r26, 0x09	; 9
	}

}
    213c:	0f 90       	pop	r0
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	0f 90       	pop	r0
    2144:	cf 91       	pop	r28
    2146:	df 91       	pop	r29
    2148:	08 95       	ret

0000214a <MCAL_Timer1_EnableInt>:




void MCAL_Timer1_EnableInt(Timer1_Config *Config_ptr,void(*Ptr2Func)(void))
{
    214a:	df 93       	push	r29
    214c:	cf 93       	push	r28
    214e:	00 d0       	rcall	.+0      	; 0x2150 <MCAL_Timer1_EnableInt+0x6>
    2150:	00 d0       	rcall	.+0      	; 0x2152 <MCAL_Timer1_EnableInt+0x8>
    2152:	00 d0       	rcall	.+0      	; 0x2154 <MCAL_Timer1_EnableInt+0xa>
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
    2158:	9a 83       	std	Y+2, r25	; 0x02
    215a:	89 83       	std	Y+1, r24	; 0x01
    215c:	7c 83       	std	Y+4, r23	; 0x04
    215e:	6b 83       	std	Y+3, r22	; 0x03

	switch(Config_ptr->mode)
    2160:	e9 81       	ldd	r30, Y+1	; 0x01
    2162:	fa 81       	ldd	r31, Y+2	; 0x02
    2164:	80 81       	ld	r24, Z
    2166:	28 2f       	mov	r18, r24
    2168:	30 e0       	ldi	r19, 0x00	; 0
    216a:	3e 83       	std	Y+6, r19	; 0x06
    216c:	2d 83       	std	Y+5, r18	; 0x05
    216e:	8d 81       	ldd	r24, Y+5	; 0x05
    2170:	9e 81       	ldd	r25, Y+6	; 0x06
    2172:	84 30       	cpi	r24, 0x04	; 4
    2174:	91 05       	cpc	r25, r1
    2176:	b1 f1       	breq	.+108    	; 0x21e4 <MCAL_Timer1_EnableInt+0x9a>
    2178:	2d 81       	ldd	r18, Y+5	; 0x05
    217a:	3e 81       	ldd	r19, Y+6	; 0x06
    217c:	2c 30       	cpi	r18, 0x0C	; 12
    217e:	31 05       	cpc	r19, r1
    2180:	91 f0       	breq	.+36     	; 0x21a6 <MCAL_Timer1_EnableInt+0x5c>
    2182:	8d 81       	ldd	r24, Y+5	; 0x05
    2184:	9e 81       	ldd	r25, Y+6	; 0x06
    2186:	00 97       	sbiw	r24, 0x00	; 0
    2188:	09 f0       	breq	.+2      	; 0x218c <MCAL_Timer1_EnableInt+0x42>
    218a:	4a c0       	rjmp	.+148    	; 0x2220 <MCAL_Timer1_EnableInt+0xd6>
	{
	case TIMER1_NORMAL:
		Timer0_BASE->TIMSK_Reg.Reg |= (1<<TOIE1);
    218c:	a2 e5       	ldi	r26, 0x52	; 82
    218e:	b0 e0       	ldi	r27, 0x00	; 0
    2190:	e2 e5       	ldi	r30, 0x52	; 82
    2192:	f0 e0       	ldi	r31, 0x00	; 0
    2194:	87 81       	ldd	r24, Z+7	; 0x07
    2196:	84 60       	ori	r24, 0x04	; 4
    2198:	17 96       	adiw	r26, 0x07	; 7
    219a:	8c 93       	st	X, r24
		MCAL_Timer1_setCallBack(Ptr2Func);
    219c:	8b 81       	ldd	r24, Y+3	; 0x03
    219e:	9c 81       	ldd	r25, Y+4	; 0x04
    21a0:	0e 94 19 11 	call	0x2232	; 0x2232 <MCAL_Timer1_setCallBack>
    21a4:	3d c0       	rjmp	.+122    	; 0x2220 <MCAL_Timer1_EnableInt+0xd6>

		break;
	case TIMER1_CTC_ICR:
		if(Config_ptr->Channels == ChannelA)
    21a6:	e9 81       	ldd	r30, Y+1	; 0x01
    21a8:	fa 81       	ldd	r31, Y+2	; 0x02
    21aa:	87 81       	ldd	r24, Z+7	; 0x07
    21ac:	88 23       	and	r24, r24
    21ae:	69 f4       	brne	.+26     	; 0x21ca <MCAL_Timer1_EnableInt+0x80>
		{

			SET_BIT(Timer0_BASE->TIMSK_Reg.Reg,OCIE1A);
    21b0:	a2 e5       	ldi	r26, 0x52	; 82
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	e2 e5       	ldi	r30, 0x52	; 82
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	87 81       	ldd	r24, Z+7	; 0x07
    21ba:	80 61       	ori	r24, 0x10	; 16
    21bc:	17 96       	adiw	r26, 0x07	; 7
    21be:	8c 93       	st	X, r24
			MCAL_Timer1_setCallBack(*Ptr2Func);
    21c0:	8b 81       	ldd	r24, Y+3	; 0x03
    21c2:	9c 81       	ldd	r25, Y+4	; 0x04
    21c4:	0e 94 19 11 	call	0x2232	; 0x2232 <MCAL_Timer1_setCallBack>
    21c8:	2b c0       	rjmp	.+86     	; 0x2220 <MCAL_Timer1_EnableInt+0xd6>

		}
		else
		{
			SET_BIT(Timer0_BASE->TIMSK_Reg.Reg,OCIE1B);
    21ca:	a2 e5       	ldi	r26, 0x52	; 82
    21cc:	b0 e0       	ldi	r27, 0x00	; 0
    21ce:	e2 e5       	ldi	r30, 0x52	; 82
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	87 81       	ldd	r24, Z+7	; 0x07
    21d4:	88 60       	ori	r24, 0x08	; 8
    21d6:	17 96       	adiw	r26, 0x07	; 7
    21d8:	8c 93       	st	X, r24
			MCAL_Timer1_setCallBack(*Ptr2Func);
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	9c 81       	ldd	r25, Y+4	; 0x04
    21de:	0e 94 19 11 	call	0x2232	; 0x2232 <MCAL_Timer1_setCallBack>
    21e2:	1e c0       	rjmp	.+60     	; 0x2220 <MCAL_Timer1_EnableInt+0xd6>

		}
		break;
	case TIMER1_CTC_OCR:
		if(Config_ptr->Channels == ChannelA)
    21e4:	e9 81       	ldd	r30, Y+1	; 0x01
    21e6:	fa 81       	ldd	r31, Y+2	; 0x02
    21e8:	87 81       	ldd	r24, Z+7	; 0x07
    21ea:	88 23       	and	r24, r24
    21ec:	69 f4       	brne	.+26     	; 0x2208 <MCAL_Timer1_EnableInt+0xbe>
		{
			Timer0_BASE->TIMSK_Reg.Reg |= (1<<OCIE1A);
    21ee:	a2 e5       	ldi	r26, 0x52	; 82
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	e2 e5       	ldi	r30, 0x52	; 82
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	87 81       	ldd	r24, Z+7	; 0x07
    21f8:	80 61       	ori	r24, 0x10	; 16
    21fa:	17 96       	adiw	r26, 0x07	; 7
    21fc:	8c 93       	st	X, r24
			MCAL_Timer1_setCallBack(*Ptr2Func);
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	9c 81       	ldd	r25, Y+4	; 0x04
    2202:	0e 94 19 11 	call	0x2232	; 0x2232 <MCAL_Timer1_setCallBack>
    2206:	0c c0       	rjmp	.+24     	; 0x2220 <MCAL_Timer1_EnableInt+0xd6>

		}
		else
		{
			SET_BIT(Timer0_BASE->TIMSK_Reg.Reg,OCIE1B);
    2208:	a2 e5       	ldi	r26, 0x52	; 82
    220a:	b0 e0       	ldi	r27, 0x00	; 0
    220c:	e2 e5       	ldi	r30, 0x52	; 82
    220e:	f0 e0       	ldi	r31, 0x00	; 0
    2210:	87 81       	ldd	r24, Z+7	; 0x07
    2212:	88 60       	ori	r24, 0x08	; 8
    2214:	17 96       	adiw	r26, 0x07	; 7
    2216:	8c 93       	st	X, r24
			MCAL_Timer1_setCallBack(*Ptr2Func);
    2218:	8b 81       	ldd	r24, Y+3	; 0x03
    221a:	9c 81       	ldd	r25, Y+4	; 0x04
    221c:	0e 94 19 11 	call	0x2232	; 0x2232 <MCAL_Timer1_setCallBack>

		}
		break;
	}
}
    2220:	26 96       	adiw	r28, 0x06	; 6
    2222:	0f b6       	in	r0, 0x3f	; 63
    2224:	f8 94       	cli
    2226:	de bf       	out	0x3e, r29	; 62
    2228:	0f be       	out	0x3f, r0	; 63
    222a:	cd bf       	out	0x3d, r28	; 61
    222c:	cf 91       	pop	r28
    222e:	df 91       	pop	r29
    2230:	08 95       	ret

00002232 <MCAL_Timer1_setCallBack>:



void MCAL_Timer1_setCallBack(void(*a_ptr)(void))
{
    2232:	df 93       	push	r29
    2234:	cf 93       	push	r28
    2236:	00 d0       	rcall	.+0      	; 0x2238 <MCAL_Timer1_setCallBack+0x6>
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
    223c:	9a 83       	std	Y+2, r25	; 0x02
    223e:	89 83       	std	Y+1, r24	; 0x01
	g_Timer1CallBackPtr = a_ptr;
    2240:	89 81       	ldd	r24, Y+1	; 0x01
    2242:	9a 81       	ldd	r25, Y+2	; 0x02
    2244:	90 93 dd 01 	sts	0x01DD, r25
    2248:	80 93 dc 01 	sts	0x01DC, r24
}
    224c:	0f 90       	pop	r0
    224e:	0f 90       	pop	r0
    2250:	cf 91       	pop	r28
    2252:	df 91       	pop	r29
    2254:	08 95       	ret

00002256 <MCAL_Timer1_ICU_Init>:



void MCAL_Timer1_ICU_Init(Icu_ConfigType* Config_ptr)
{
    2256:	df 93       	push	r29
    2258:	cf 93       	push	r28
    225a:	00 d0       	rcall	.+0      	; 0x225c <MCAL_Timer1_ICU_Init+0x6>
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
    2260:	9a 83       	std	Y+2, r25	; 0x02
    2262:	89 83       	std	Y+1, r24	; 0x01

	DIO_voidSetPinDirection(GPIOD_BASE, PIN6_ID, PIN_INPUT);
    2264:	80 e3       	ldi	r24, 0x30	; 48
    2266:	90 e0       	ldi	r25, 0x00	; 0
    2268:	66 e0       	ldi	r22, 0x06	; 6
    226a:	40 e0       	ldi	r20, 0x00	; 0
    226c:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>



	TCCR1A = (1<<FOC1A) | (1<<FOC1B);
    2270:	ef e4       	ldi	r30, 0x4F	; 79
    2272:	f0 e0       	ldi	r31, 0x00	; 0
    2274:	8c e0       	ldi	r24, 0x0C	; 12
    2276:	80 83       	st	Z, r24

	TCCR1B = (TCCR1A & 0xF8) | (Config_ptr->prescalar) ;
    2278:	ae e4       	ldi	r26, 0x4E	; 78
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	ef e4       	ldi	r30, 0x4F	; 79
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	98 2f       	mov	r25, r24
    2284:	98 7f       	andi	r25, 0xF8	; 248
    2286:	e9 81       	ldd	r30, Y+1	; 0x01
    2288:	fa 81       	ldd	r31, Y+2	; 0x02
    228a:	81 81       	ldd	r24, Z+1	; 0x01
    228c:	89 2b       	or	r24, r25
    228e:	8c 93       	st	X, r24


	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B = (TCCR1B & 0xBF)|((Config_ptr->edge)<<ICES1);
    2290:	ae e4       	ldi	r26, 0x4E	; 78
    2292:	b0 e0       	ldi	r27, 0x00	; 0
    2294:	ee e4       	ldi	r30, 0x4E	; 78
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	80 81       	ld	r24, Z
    229a:	28 2f       	mov	r18, r24
    229c:	2f 7b       	andi	r18, 0xBF	; 191
    229e:	e9 81       	ldd	r30, Y+1	; 0x01
    22a0:	fa 81       	ldd	r31, Y+2	; 0x02
    22a2:	80 81       	ld	r24, Z
    22a4:	88 2f       	mov	r24, r24
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	00 24       	eor	r0, r0
    22aa:	96 95       	lsr	r25
    22ac:	87 95       	ror	r24
    22ae:	07 94       	ror	r0
    22b0:	96 95       	lsr	r25
    22b2:	87 95       	ror	r24
    22b4:	07 94       	ror	r0
    22b6:	98 2f       	mov	r25, r24
    22b8:	80 2d       	mov	r24, r0
    22ba:	82 2b       	or	r24, r18
    22bc:	8c 93       	st	X, r24


	/* Initial Value for the input capture register */

	TCNT1 = 0;
    22be:	ec e4       	ldi	r30, 0x4C	; 76
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	11 82       	std	Z+1, r1	; 0x01
    22c4:	10 82       	st	Z, r1
	ICR1 = 0;
    22c6:	e6 e4       	ldi	r30, 0x46	; 70
    22c8:	f0 e0       	ldi	r31, 0x00	; 0
    22ca:	11 82       	std	Z+1, r1	; 0x01
    22cc:	10 82       	st	Z, r1
	/* Enable the Input Capture interrupt to generate an interrupt when edge is detected on ICP1/PD6 pin */
	TIMSK |= (1<<TICIE1);
    22ce:	a9 e5       	ldi	r26, 0x59	; 89
    22d0:	b0 e0       	ldi	r27, 0x00	; 0
    22d2:	e9 e5       	ldi	r30, 0x59	; 89
    22d4:	f0 e0       	ldi	r31, 0x00	; 0
    22d6:	80 81       	ld	r24, Z
    22d8:	80 62       	ori	r24, 0x20	; 32
    22da:	8c 93       	st	X, r24
}
    22dc:	0f 90       	pop	r0
    22de:	0f 90       	pop	r0
    22e0:	cf 91       	pop	r28
    22e2:	df 91       	pop	r29
    22e4:	08 95       	ret

000022e6 <MCAL_Timer1_ICU_setCallBack>:


void MCAL_Timer1_ICU_setCallBack(void(*a_ptr)(void))
{
    22e6:	df 93       	push	r29
    22e8:	cf 93       	push	r28
    22ea:	00 d0       	rcall	.+0      	; 0x22ec <MCAL_Timer1_ICU_setCallBack+0x6>
    22ec:	cd b7       	in	r28, 0x3d	; 61
    22ee:	de b7       	in	r29, 0x3e	; 62
    22f0:	9a 83       	std	Y+2, r25	; 0x02
    22f2:	89 83       	std	Y+1, r24	; 0x01
	g_ICUcallBackPtr = a_ptr;
    22f4:	89 81       	ldd	r24, Y+1	; 0x01
    22f6:	9a 81       	ldd	r25, Y+2	; 0x02
    22f8:	90 93 e1 01 	sts	0x01E1, r25
    22fc:	80 93 e0 01 	sts	0x01E0, r24
}
    2300:	0f 90       	pop	r0
    2302:	0f 90       	pop	r0
    2304:	cf 91       	pop	r28
    2306:	df 91       	pop	r29
    2308:	08 95       	ret

0000230a <MCAL_Timer1_ICU_setEdgeDetectionType>:

/*
 * Description: Function to set the required edge detection.
 */
void MCAL_Timer1_ICU_setEdgeDetectionType(const Icu_EdgeType a_edgeType)
{
    230a:	df 93       	push	r29
    230c:	cf 93       	push	r28
    230e:	0f 92       	push	r0
    2310:	cd b7       	in	r28, 0x3d	; 61
    2312:	de b7       	in	r29, 0x3e	; 62
    2314:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * insert the required edge type in ICES1 bit in TCCR1B Register
	 */
	TCCR1B |= ((TCCR1B & 0xBF)| (a_edgeType)<<ICES1);
    2316:	ae e4       	ldi	r26, 0x4E	; 78
    2318:	b0 e0       	ldi	r27, 0x00	; 0
    231a:	ee e4       	ldi	r30, 0x4E	; 78
    231c:	f0 e0       	ldi	r31, 0x00	; 0
    231e:	80 81       	ld	r24, Z
    2320:	38 2f       	mov	r19, r24
    2322:	ee e4       	ldi	r30, 0x4E	; 78
    2324:	f0 e0       	ldi	r31, 0x00	; 0
    2326:	80 81       	ld	r24, Z
    2328:	28 2f       	mov	r18, r24
    232a:	2f 7b       	andi	r18, 0xBF	; 191
    232c:	89 81       	ldd	r24, Y+1	; 0x01
    232e:	88 2f       	mov	r24, r24
    2330:	90 e0       	ldi	r25, 0x00	; 0
    2332:	00 24       	eor	r0, r0
    2334:	96 95       	lsr	r25
    2336:	87 95       	ror	r24
    2338:	07 94       	ror	r0
    233a:	96 95       	lsr	r25
    233c:	87 95       	ror	r24
    233e:	07 94       	ror	r0
    2340:	98 2f       	mov	r25, r24
    2342:	80 2d       	mov	r24, r0
    2344:	82 2b       	or	r24, r18
    2346:	83 2b       	or	r24, r19
    2348:	8c 93       	st	X, r24

}
    234a:	0f 90       	pop	r0
    234c:	cf 91       	pop	r28
    234e:	df 91       	pop	r29
    2350:	08 95       	ret

00002352 <MCAL_Timer1_ICU_getInputCaptureValue>:
/*
 * Description: Function to get the Timer1 Value when the input is captured
 *              The value stored at Input Capture Register ICR1
 */
uint16 MCAL_Timer1_ICU_getInputCaptureValue(void)
{
    2352:	df 93       	push	r29
    2354:	cf 93       	push	r28
    2356:	cd b7       	in	r28, 0x3d	; 61
    2358:	de b7       	in	r29, 0x3e	; 62
	return ICR1;
    235a:	e6 e4       	ldi	r30, 0x46	; 70
    235c:	f0 e0       	ldi	r31, 0x00	; 0
    235e:	80 81       	ld	r24, Z
    2360:	91 81       	ldd	r25, Z+1	; 0x01
}
    2362:	cf 91       	pop	r28
    2364:	df 91       	pop	r29
    2366:	08 95       	ret

00002368 <MCAL_Timer1_ICU_clearTimerValue>:

/*
 * Description: Function to clear the Timer1 Value to start count from ZERO
 */
void MCAL_Timer1_ICU_clearTimerValue(void)
{
    2368:	df 93       	push	r29
    236a:	cf 93       	push	r28
    236c:	cd b7       	in	r28, 0x3d	; 61
    236e:	de b7       	in	r29, 0x3e	; 62
	//Timer1_BASE->TCNT1_t = 0;

	TCNT1 = 0;
    2370:	ec e4       	ldi	r30, 0x4C	; 76
    2372:	f0 e0       	ldi	r31, 0x00	; 0
    2374:	11 82       	std	Z+1, r1	; 0x01
    2376:	10 82       	st	Z, r1
}
    2378:	cf 91       	pop	r28
    237a:	df 91       	pop	r29
    237c:	08 95       	ret

0000237e <MCAL_Timer1_ICU_DeInit>:

/*
 * Description: Function to disable the Timer1 to stop the ICU Driver
 */
void MCAL_Timer1_ICU_DeInit(void)
{
    237e:	df 93       	push	r29
    2380:	cf 93       	push	r28
    2382:	cd b7       	in	r28, 0x3d	; 61
    2384:	de b7       	in	r29, 0x3e	; 62
	/* Clear All Timer1 Registers */
	Timer1_BASE->TCCR1A_t.Reg = 0;
    2386:	e6 e4       	ldi	r30, 0x46	; 70
    2388:	f0 e0       	ldi	r31, 0x00	; 0
    238a:	11 86       	std	Z+9, r1	; 0x09
	Timer1_BASE->TCCR1B_t.Reg = 0;
    238c:	e6 e4       	ldi	r30, 0x46	; 70
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	10 86       	std	Z+8, r1	; 0x08
	Timer1_BASE->TCNT1_t = 0;
    2392:	e6 e4       	ldi	r30, 0x46	; 70
    2394:	f0 e0       	ldi	r31, 0x00	; 0
    2396:	17 82       	std	Z+7, r1	; 0x07
    2398:	16 82       	std	Z+6, r1	; 0x06
	Timer1_BASE->ICR1_t = 0;
    239a:	e6 e4       	ldi	r30, 0x46	; 70
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	11 82       	std	Z+1, r1	; 0x01
    23a0:	10 82       	st	Z, r1

	/* Disable the Input Capture interrupt */
	Timer0_BASE->TIMSK_Reg.Reg &= ~(1<<TICIE1);
    23a2:	a2 e5       	ldi	r26, 0x52	; 82
    23a4:	b0 e0       	ldi	r27, 0x00	; 0
    23a6:	e2 e5       	ldi	r30, 0x52	; 82
    23a8:	f0 e0       	ldi	r31, 0x00	; 0
    23aa:	87 81       	ldd	r24, Z+7	; 0x07
    23ac:	8f 7d       	andi	r24, 0xDF	; 223
    23ae:	17 96       	adiw	r26, 0x07	; 7
    23b0:	8c 93       	st	X, r24
    23b2:	17 97       	sbiw	r26, 0x07	; 7
}
    23b4:	cf 91       	pop	r28
    23b6:	df 91       	pop	r29
    23b8:	08 95       	ret

000023ba <__vector_11>:



/* Timer0 overflow*/
ISR(TIMER0_OVF_vect)
{
    23ba:	1f 92       	push	r1
    23bc:	0f 92       	push	r0
    23be:	0f b6       	in	r0, 0x3f	; 63
    23c0:	0f 92       	push	r0
    23c2:	11 24       	eor	r1, r1
    23c4:	2f 93       	push	r18
    23c6:	3f 93       	push	r19
    23c8:	4f 93       	push	r20
    23ca:	5f 93       	push	r21
    23cc:	6f 93       	push	r22
    23ce:	7f 93       	push	r23
    23d0:	8f 93       	push	r24
    23d2:	9f 93       	push	r25
    23d4:	af 93       	push	r26
    23d6:	bf 93       	push	r27
    23d8:	ef 93       	push	r30
    23da:	ff 93       	push	r31
    23dc:	df 93       	push	r29
    23de:	cf 93       	push	r28
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    23e4:	af e5       	ldi	r26, 0x5F	; 95
    23e6:	b0 e0       	ldi	r27, 0x00	; 0
    23e8:	ef e5       	ldi	r30, 0x5F	; 95
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	8f 77       	andi	r24, 0x7F	; 127
    23f0:	8c 93       	st	X, r24
	SET_BIT(Timer0_BASE->TIFR_Reg.Reg,TOV0); /* Clear Flag W1C*/
    23f2:	a2 e5       	ldi	r26, 0x52	; 82
    23f4:	b0 e0       	ldi	r27, 0x00	; 0
    23f6:	e2 e5       	ldi	r30, 0x52	; 82
    23f8:	f0 e0       	ldi	r31, 0x00	; 0
    23fa:	86 81       	ldd	r24, Z+6	; 0x06
    23fc:	81 60       	ori	r24, 0x01	; 1
    23fe:	16 96       	adiw	r26, 0x06	; 6
    2400:	8c 93       	st	X, r24
    2402:	16 97       	sbiw	r26, 0x06	; 6

	if (gTimer0_Call_BackPOINTER != NULL_PTR)
    2404:	80 91 e2 01 	lds	r24, 0x01E2
    2408:	90 91 e3 01 	lds	r25, 0x01E3
    240c:	00 97       	sbiw	r24, 0x00	; 0
    240e:	29 f0       	breq	.+10     	; 0x241a <__vector_11+0x60>
	{
		(*gTimer0_Call_BackPOINTER)();
    2410:	e0 91 e2 01 	lds	r30, 0x01E2
    2414:	f0 91 e3 01 	lds	r31, 0x01E3
    2418:	09 95       	icall
	}
}
    241a:	cf 91       	pop	r28
    241c:	df 91       	pop	r29
    241e:	ff 91       	pop	r31
    2420:	ef 91       	pop	r30
    2422:	bf 91       	pop	r27
    2424:	af 91       	pop	r26
    2426:	9f 91       	pop	r25
    2428:	8f 91       	pop	r24
    242a:	7f 91       	pop	r23
    242c:	6f 91       	pop	r22
    242e:	5f 91       	pop	r21
    2430:	4f 91       	pop	r20
    2432:	3f 91       	pop	r19
    2434:	2f 91       	pop	r18
    2436:	0f 90       	pop	r0
    2438:	0f be       	out	0x3f, r0	; 63
    243a:	0f 90       	pop	r0
    243c:	1f 90       	pop	r1
    243e:	18 95       	reti

00002440 <__vector_10>:

/* Timer0 Compare*/
ISR(TIMER0_COMP_vect)
{
    2440:	1f 92       	push	r1
    2442:	0f 92       	push	r0
    2444:	0f b6       	in	r0, 0x3f	; 63
    2446:	0f 92       	push	r0
    2448:	11 24       	eor	r1, r1
    244a:	2f 93       	push	r18
    244c:	3f 93       	push	r19
    244e:	4f 93       	push	r20
    2450:	5f 93       	push	r21
    2452:	6f 93       	push	r22
    2454:	7f 93       	push	r23
    2456:	8f 93       	push	r24
    2458:	9f 93       	push	r25
    245a:	af 93       	push	r26
    245c:	bf 93       	push	r27
    245e:	ef 93       	push	r30
    2460:	ff 93       	push	r31
    2462:	df 93       	push	r29
    2464:	cf 93       	push	r28
    2466:	cd b7       	in	r28, 0x3d	; 61
    2468:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    246a:	af e5       	ldi	r26, 0x5F	; 95
    246c:	b0 e0       	ldi	r27, 0x00	; 0
    246e:	ef e5       	ldi	r30, 0x5F	; 95
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
    2474:	8f 77       	andi	r24, 0x7F	; 127
    2476:	8c 93       	st	X, r24
	SET_BIT(Timer0_BASE->TIFR_Reg.Reg,OCF0); /* Clear Flag W1C*/
    2478:	a2 e5       	ldi	r26, 0x52	; 82
    247a:	b0 e0       	ldi	r27, 0x00	; 0
    247c:	e2 e5       	ldi	r30, 0x52	; 82
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	86 81       	ldd	r24, Z+6	; 0x06
    2482:	82 60       	ori	r24, 0x02	; 2
    2484:	16 96       	adiw	r26, 0x06	; 6
    2486:	8c 93       	st	X, r24
    2488:	16 97       	sbiw	r26, 0x06	; 6
	if (gTimer0_Call_BackPOINTER != NULL_PTR)
    248a:	80 91 e2 01 	lds	r24, 0x01E2
    248e:	90 91 e3 01 	lds	r25, 0x01E3
    2492:	00 97       	sbiw	r24, 0x00	; 0
    2494:	29 f0       	breq	.+10     	; 0x24a0 <__vector_10+0x60>
	{
		(*gTimer0_Call_BackPOINTER)();
    2496:	e0 91 e2 01 	lds	r30, 0x01E2
    249a:	f0 91 e3 01 	lds	r31, 0x01E3
    249e:	09 95       	icall
	}
}
    24a0:	cf 91       	pop	r28
    24a2:	df 91       	pop	r29
    24a4:	ff 91       	pop	r31
    24a6:	ef 91       	pop	r30
    24a8:	bf 91       	pop	r27
    24aa:	af 91       	pop	r26
    24ac:	9f 91       	pop	r25
    24ae:	8f 91       	pop	r24
    24b0:	7f 91       	pop	r23
    24b2:	6f 91       	pop	r22
    24b4:	5f 91       	pop	r21
    24b6:	4f 91       	pop	r20
    24b8:	3f 91       	pop	r19
    24ba:	2f 91       	pop	r18
    24bc:	0f 90       	pop	r0
    24be:	0f be       	out	0x3f, r0	; 63
    24c0:	0f 90       	pop	r0
    24c2:	1f 90       	pop	r1
    24c4:	18 95       	reti

000024c6 <Timer_Init>:




void Timer_Init(Timer_Config *Config_ptr)
{
    24c6:	df 93       	push	r29
    24c8:	cf 93       	push	r28
    24ca:	00 d0       	rcall	.+0      	; 0x24cc <Timer_Init+0x6>
    24cc:	00 d0       	rcall	.+0      	; 0x24ce <Timer_Init+0x8>
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    24d2:	9a 83       	std	Y+2, r25	; 0x02
    24d4:	89 83       	std	Y+1, r24	; 0x01


	/* Inserting Clock Sourc */
	Timer0_BASE->TCCR0_Reg.Reg |= Config_ptr->prescalar;
    24d6:	a2 e5       	ldi	r26, 0x52	; 82
    24d8:	b0 e0       	ldi	r27, 0x00	; 0
    24da:	e2 e5       	ldi	r30, 0x52	; 82
    24dc:	f0 e0       	ldi	r31, 0x00	; 0
    24de:	91 81       	ldd	r25, Z+1	; 0x01
    24e0:	e9 81       	ldd	r30, Y+1	; 0x01
    24e2:	fa 81       	ldd	r31, Y+2	; 0x02
    24e4:	81 81       	ldd	r24, Z+1	; 0x01
    24e6:	89 2b       	or	r24, r25
    24e8:	11 96       	adiw	r26, 0x01	; 1
    24ea:	8c 93       	st	X, r24
    24ec:	11 97       	sbiw	r26, 0x01	; 1

	switch(Config_ptr->mode)
    24ee:	e9 81       	ldd	r30, Y+1	; 0x01
    24f0:	fa 81       	ldd	r31, Y+2	; 0x02
    24f2:	80 81       	ld	r24, Z
    24f4:	28 2f       	mov	r18, r24
    24f6:	30 e0       	ldi	r19, 0x00	; 0
    24f8:	3c 83       	std	Y+4, r19	; 0x04
    24fa:	2b 83       	std	Y+3, r18	; 0x03
    24fc:	8b 81       	ldd	r24, Y+3	; 0x03
    24fe:	9c 81       	ldd	r25, Y+4	; 0x04
    2500:	81 30       	cpi	r24, 0x01	; 1
    2502:	91 05       	cpc	r25, r1
    2504:	09 f4       	brne	.+2      	; 0x2508 <Timer_Init+0x42>
    2506:	54 c0       	rjmp	.+168    	; 0x25b0 <Timer_Init+0xea>
    2508:	2b 81       	ldd	r18, Y+3	; 0x03
    250a:	3c 81       	ldd	r19, Y+4	; 0x04
    250c:	22 30       	cpi	r18, 0x02	; 2
    250e:	31 05       	cpc	r19, r1
    2510:	2c f4       	brge	.+10     	; 0x251c <Timer_Init+0x56>
    2512:	8b 81       	ldd	r24, Y+3	; 0x03
    2514:	9c 81       	ldd	r25, Y+4	; 0x04
    2516:	00 97       	sbiw	r24, 0x00	; 0
    2518:	69 f0       	breq	.+26     	; 0x2534 <Timer_Init+0x6e>
    251a:	d0 c0       	rjmp	.+416    	; 0x26bc <Timer_Init+0x1f6>
    251c:	2b 81       	ldd	r18, Y+3	; 0x03
    251e:	3c 81       	ldd	r19, Y+4	; 0x04
    2520:	22 30       	cpi	r18, 0x02	; 2
    2522:	31 05       	cpc	r19, r1
    2524:	b9 f0       	breq	.+46     	; 0x2554 <Timer_Init+0x8e>
    2526:	8b 81       	ldd	r24, Y+3	; 0x03
    2528:	9c 81       	ldd	r25, Y+4	; 0x04
    252a:	83 30       	cpi	r24, 0x03	; 3
    252c:	91 05       	cpc	r25, r1
    252e:	09 f4       	brne	.+2      	; 0x2532 <Timer_Init+0x6c>
    2530:	83 c0       	rjmp	.+262    	; 0x2638 <Timer_Init+0x172>
    2532:	c4 c0       	rjmp	.+392    	; 0x26bc <Timer_Init+0x1f6>
	{
	case TIMER0_NORMAL:

		SET_BIT(Timer0_BASE->TCCR0_Reg.Reg,FOC0);
    2534:	a2 e5       	ldi	r26, 0x52	; 82
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	e2 e5       	ldi	r30, 0x52	; 82
    253a:	f0 e0       	ldi	r31, 0x00	; 0
    253c:	81 81       	ldd	r24, Z+1	; 0x01
    253e:	80 68       	ori	r24, 0x80	; 128
    2540:	11 96       	adiw	r26, 0x01	; 1
    2542:	8c 93       	st	X, r24
		//Timer0_BASE->TCCR0_Reg.Reg = 0;

		/* Inserting Clock Sourc */

		Timer0_BASE->TCNT0_Reg.Reg = Config_ptr -> reload_value;
    2544:	a2 e5       	ldi	r26, 0x52	; 82
    2546:	b0 e0       	ldi	r27, 0x00	; 0
    2548:	e9 81       	ldd	r30, Y+1	; 0x01
    254a:	fa 81       	ldd	r31, Y+2	; 0x02
    254c:	83 81       	ldd	r24, Z+3	; 0x03
    254e:	94 81       	ldd	r25, Z+4	; 0x04
    2550:	8c 93       	st	X, r24
    2552:	b4 c0       	rjmp	.+360    	; 0x26bc <Timer_Init+0x1f6>

		break;

	case TIMER0_CTC:
		SET_BIT(Timer0_BASE->TCCR0_Reg.Reg,FOC0);
    2554:	a2 e5       	ldi	r26, 0x52	; 82
    2556:	b0 e0       	ldi	r27, 0x00	; 0
    2558:	e2 e5       	ldi	r30, 0x52	; 82
    255a:	f0 e0       	ldi	r31, 0x00	; 0
    255c:	81 81       	ldd	r24, Z+1	; 0x01
    255e:	80 68       	ori	r24, 0x80	; 128
    2560:	11 96       	adiw	r26, 0x01	; 1
    2562:	8c 93       	st	X, r24

		SET_BIT(Timer0_BASE->TCCR0_Reg.Reg,WGM01);
    2564:	a2 e5       	ldi	r26, 0x52	; 82
    2566:	b0 e0       	ldi	r27, 0x00	; 0
    2568:	e2 e5       	ldi	r30, 0x52	; 82
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	81 81       	ldd	r24, Z+1	; 0x01
    256e:	88 60       	ori	r24, 0x08	; 8
    2570:	11 96       	adiw	r26, 0x01	; 1
    2572:	8c 93       	st	X, r24


		Timer0_BASE->TCCR0_Reg.Reg |= ((Config_ptr->signal_output) )<< COM00;
    2574:	a2 e5       	ldi	r26, 0x52	; 82
    2576:	b0 e0       	ldi	r27, 0x00	; 0
    2578:	e2 e5       	ldi	r30, 0x52	; 82
    257a:	f0 e0       	ldi	r31, 0x00	; 0
    257c:	81 81       	ldd	r24, Z+1	; 0x01
    257e:	28 2f       	mov	r18, r24
    2580:	e9 81       	ldd	r30, Y+1	; 0x01
    2582:	fa 81       	ldd	r31, Y+2	; 0x02
    2584:	82 81       	ldd	r24, Z+2	; 0x02
    2586:	88 2f       	mov	r24, r24
    2588:	90 e0       	ldi	r25, 0x00	; 0
    258a:	82 95       	swap	r24
    258c:	92 95       	swap	r25
    258e:	90 7f       	andi	r25, 0xF0	; 240
    2590:	98 27       	eor	r25, r24
    2592:	80 7f       	andi	r24, 0xF0	; 240
    2594:	98 27       	eor	r25, r24
    2596:	82 2b       	or	r24, r18
    2598:	11 96       	adiw	r26, 0x01	; 1
    259a:	8c 93       	st	X, r24
		Timer0_BASE->OCR0_Reg.Reg = Config_ptr->compare_value;
    259c:	a2 e5       	ldi	r26, 0x52	; 82
    259e:	b0 e0       	ldi	r27, 0x00	; 0
    25a0:	e9 81       	ldd	r30, Y+1	; 0x01
    25a2:	fa 81       	ldd	r31, Y+2	; 0x02
    25a4:	85 81       	ldd	r24, Z+5	; 0x05
    25a6:	96 81       	ldd	r25, Z+6	; 0x06
    25a8:	1a 96       	adiw	r26, 0x0a	; 10
    25aa:	8c 93       	st	X, r24
    25ac:	1a 97       	sbiw	r26, 0x0a	; 10
    25ae:	86 c0       	rjmp	.+268    	; 0x26bc <Timer_Init+0x1f6>
		break;

	case TIMER0_PWM_PHASE_CORRECT:
		SET_BIT(Timer0_BASE->TCCR0_Reg.Reg,WGM00);
    25b0:	a2 e5       	ldi	r26, 0x52	; 82
    25b2:	b0 e0       	ldi	r27, 0x00	; 0
    25b4:	e2 e5       	ldi	r30, 0x52	; 82
    25b6:	f0 e0       	ldi	r31, 0x00	; 0
    25b8:	81 81       	ldd	r24, Z+1	; 0x01
    25ba:	80 64       	ori	r24, 0x40	; 64
    25bc:	11 96       	adiw	r26, 0x01	; 1
    25be:	8c 93       	st	X, r24
		CLR_BIT(Timer0_BASE->TCCR0_Reg.Reg,WGM01);
    25c0:	a2 e5       	ldi	r26, 0x52	; 82
    25c2:	b0 e0       	ldi	r27, 0x00	; 0
    25c4:	e2 e5       	ldi	r30, 0x52	; 82
    25c6:	f0 e0       	ldi	r31, 0x00	; 0
    25c8:	81 81       	ldd	r24, Z+1	; 0x01
    25ca:	87 7f       	andi	r24, 0xF7	; 247
    25cc:	11 96       	adiw	r26, 0x01	; 1
    25ce:	8c 93       	st	X, r24
		/* Inserting Clock Sourc */
		Timer0_BASE->TCCR0_Reg.Reg |= ((Config_ptr->signal_output) )<< COM00;
    25d0:	a2 e5       	ldi	r26, 0x52	; 82
    25d2:	b0 e0       	ldi	r27, 0x00	; 0
    25d4:	e2 e5       	ldi	r30, 0x52	; 82
    25d6:	f0 e0       	ldi	r31, 0x00	; 0
    25d8:	81 81       	ldd	r24, Z+1	; 0x01
    25da:	28 2f       	mov	r18, r24
    25dc:	e9 81       	ldd	r30, Y+1	; 0x01
    25de:	fa 81       	ldd	r31, Y+2	; 0x02
    25e0:	82 81       	ldd	r24, Z+2	; 0x02
    25e2:	88 2f       	mov	r24, r24
    25e4:	90 e0       	ldi	r25, 0x00	; 0
    25e6:	82 95       	swap	r24
    25e8:	92 95       	swap	r25
    25ea:	90 7f       	andi	r25, 0xF0	; 240
    25ec:	98 27       	eor	r25, r24
    25ee:	80 7f       	andi	r24, 0xF0	; 240
    25f0:	98 27       	eor	r25, r24
    25f2:	82 2b       	or	r24, r18
    25f4:	11 96       	adiw	r26, 0x01	; 1
    25f6:	8c 93       	st	X, r24
    25f8:	11 97       	sbiw	r26, 0x01	; 1

		if(Config_ptr->signal_output == Clear_OCx)
    25fa:	e9 81       	ldd	r30, Y+1	; 0x01
    25fc:	fa 81       	ldd	r31, Y+2	; 0x02
    25fe:	82 81       	ldd	r24, Z+2	; 0x02
    2600:	82 30       	cpi	r24, 0x02	; 2
    2602:	51 f4       	brne	.+20     	; 0x2618 <Timer_Init+0x152>
		{
			Timer0_BASE->TCCR0_Reg.Reg |= (1 << COM01);
    2604:	a2 e5       	ldi	r26, 0x52	; 82
    2606:	b0 e0       	ldi	r27, 0x00	; 0
    2608:	e2 e5       	ldi	r30, 0x52	; 82
    260a:	f0 e0       	ldi	r31, 0x00	; 0
    260c:	81 81       	ldd	r24, Z+1	; 0x01
    260e:	80 62       	ori	r24, 0x20	; 32
    2610:	11 96       	adiw	r26, 0x01	; 1
    2612:	8c 93       	st	X, r24
    2614:	11 97       	sbiw	r26, 0x01	; 1
    2616:	52 c0       	rjmp	.+164    	; 0x26bc <Timer_Init+0x1f6>
		}
		else if(Config_ptr->signal_output == Set_OCx)
    2618:	e9 81       	ldd	r30, Y+1	; 0x01
    261a:	fa 81       	ldd	r31, Y+2	; 0x02
    261c:	82 81       	ldd	r24, Z+2	; 0x02
    261e:	83 30       	cpi	r24, 0x03	; 3
    2620:	09 f0       	breq	.+2      	; 0x2624 <Timer_Init+0x15e>
    2622:	4c c0       	rjmp	.+152    	; 0x26bc <Timer_Init+0x1f6>
		{
			Timer0_BASE->TCCR0_Reg.Reg |= (1 << COM01) | (1<<COM00);
    2624:	a2 e5       	ldi	r26, 0x52	; 82
    2626:	b0 e0       	ldi	r27, 0x00	; 0
    2628:	e2 e5       	ldi	r30, 0x52	; 82
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	81 81       	ldd	r24, Z+1	; 0x01
    262e:	80 63       	ori	r24, 0x30	; 48
    2630:	11 96       	adiw	r26, 0x01	; 1
    2632:	8c 93       	st	X, r24
    2634:	11 97       	sbiw	r26, 0x01	; 1
    2636:	42 c0       	rjmp	.+132    	; 0x26bc <Timer_Init+0x1f6>



	case TIMER0_FAST_PWM:

		SET_BIT(Timer0_BASE->TCCR0_Reg.Reg,WGM01);
    2638:	a2 e5       	ldi	r26, 0x52	; 82
    263a:	b0 e0       	ldi	r27, 0x00	; 0
    263c:	e2 e5       	ldi	r30, 0x52	; 82
    263e:	f0 e0       	ldi	r31, 0x00	; 0
    2640:	81 81       	ldd	r24, Z+1	; 0x01
    2642:	88 60       	ori	r24, 0x08	; 8
    2644:	11 96       	adiw	r26, 0x01	; 1
    2646:	8c 93       	st	X, r24
		SET_BIT(Timer0_BASE->TCCR0_Reg.Reg,WGM00);
    2648:	a2 e5       	ldi	r26, 0x52	; 82
    264a:	b0 e0       	ldi	r27, 0x00	; 0
    264c:	e2 e5       	ldi	r30, 0x52	; 82
    264e:	f0 e0       	ldi	r31, 0x00	; 0
    2650:	81 81       	ldd	r24, Z+1	; 0x01
    2652:	80 64       	ori	r24, 0x40	; 64
    2654:	11 96       	adiw	r26, 0x01	; 1
    2656:	8c 93       	st	X, r24


		Timer0_BASE->TCCR0_Reg.Reg |= ((Config_ptr->signal_output) )<< COM00;
    2658:	a2 e5       	ldi	r26, 0x52	; 82
    265a:	b0 e0       	ldi	r27, 0x00	; 0
    265c:	e2 e5       	ldi	r30, 0x52	; 82
    265e:	f0 e0       	ldi	r31, 0x00	; 0
    2660:	81 81       	ldd	r24, Z+1	; 0x01
    2662:	28 2f       	mov	r18, r24
    2664:	e9 81       	ldd	r30, Y+1	; 0x01
    2666:	fa 81       	ldd	r31, Y+2	; 0x02
    2668:	82 81       	ldd	r24, Z+2	; 0x02
    266a:	88 2f       	mov	r24, r24
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	82 95       	swap	r24
    2670:	92 95       	swap	r25
    2672:	90 7f       	andi	r25, 0xF0	; 240
    2674:	98 27       	eor	r25, r24
    2676:	80 7f       	andi	r24, 0xF0	; 240
    2678:	98 27       	eor	r25, r24
    267a:	82 2b       	or	r24, r18
    267c:	11 96       	adiw	r26, 0x01	; 1
    267e:	8c 93       	st	X, r24
    2680:	11 97       	sbiw	r26, 0x01	; 1
		if(Config_ptr->signal_output == Non_inverting)
    2682:	e9 81       	ldd	r30, Y+1	; 0x01
    2684:	fa 81       	ldd	r31, Y+2	; 0x02
    2686:	82 81       	ldd	r24, Z+2	; 0x02
    2688:	82 30       	cpi	r24, 0x02	; 2
    268a:	51 f4       	brne	.+20     	; 0x26a0 <Timer_Init+0x1da>
		{
			Timer0_BASE->TCCR0_Reg.Reg |= (1 << COM01);
    268c:	a2 e5       	ldi	r26, 0x52	; 82
    268e:	b0 e0       	ldi	r27, 0x00	; 0
    2690:	e2 e5       	ldi	r30, 0x52	; 82
    2692:	f0 e0       	ldi	r31, 0x00	; 0
    2694:	81 81       	ldd	r24, Z+1	; 0x01
    2696:	80 62       	ori	r24, 0x20	; 32
    2698:	11 96       	adiw	r26, 0x01	; 1
    269a:	8c 93       	st	X, r24
    269c:	11 97       	sbiw	r26, 0x01	; 1
    269e:	0e c0       	rjmp	.+28     	; 0x26bc <Timer_Init+0x1f6>

		}
		else if(Config_ptr->signal_output == Inverting)
    26a0:	e9 81       	ldd	r30, Y+1	; 0x01
    26a2:	fa 81       	ldd	r31, Y+2	; 0x02
    26a4:	82 81       	ldd	r24, Z+2	; 0x02
    26a6:	83 30       	cpi	r24, 0x03	; 3
    26a8:	49 f4       	brne	.+18     	; 0x26bc <Timer_Init+0x1f6>
		{
			Timer0_BASE->TCCR0_Reg.Reg |= (1 << COM01) | (1<<COM00);
    26aa:	a2 e5       	ldi	r26, 0x52	; 82
    26ac:	b0 e0       	ldi	r27, 0x00	; 0
    26ae:	e2 e5       	ldi	r30, 0x52	; 82
    26b0:	f0 e0       	ldi	r31, 0x00	; 0
    26b2:	81 81       	ldd	r24, Z+1	; 0x01
    26b4:	80 63       	ori	r24, 0x30	; 48
    26b6:	11 96       	adiw	r26, 0x01	; 1
    26b8:	8c 93       	st	X, r24
    26ba:	11 97       	sbiw	r26, 0x01	; 1
	}




}
    26bc:	0f 90       	pop	r0
    26be:	0f 90       	pop	r0
    26c0:	0f 90       	pop	r0
    26c2:	0f 90       	pop	r0
    26c4:	cf 91       	pop	r28
    26c6:	df 91       	pop	r29
    26c8:	08 95       	ret

000026ca <Timer_start>:


void Timer_start(Timer_Config *Config_ptr)
{
    26ca:	df 93       	push	r29
    26cc:	cf 93       	push	r28
    26ce:	00 d0       	rcall	.+0      	; 0x26d0 <Timer_start+0x6>
    26d0:	cd b7       	in	r28, 0x3d	; 61
    26d2:	de b7       	in	r29, 0x3e	; 62
    26d4:	9a 83       	std	Y+2, r25	; 0x02
    26d6:	89 83       	std	Y+1, r24	; 0x01
	Timer0_BASE->TCCR0_Reg.Reg |= Config_ptr->prescalar;
    26d8:	a2 e5       	ldi	r26, 0x52	; 82
    26da:	b0 e0       	ldi	r27, 0x00	; 0
    26dc:	e2 e5       	ldi	r30, 0x52	; 82
    26de:	f0 e0       	ldi	r31, 0x00	; 0
    26e0:	91 81       	ldd	r25, Z+1	; 0x01
    26e2:	e9 81       	ldd	r30, Y+1	; 0x01
    26e4:	fa 81       	ldd	r31, Y+2	; 0x02
    26e6:	81 81       	ldd	r24, Z+1	; 0x01
    26e8:	89 2b       	or	r24, r25
    26ea:	11 96       	adiw	r26, 0x01	; 1
    26ec:	8c 93       	st	X, r24
    26ee:	11 97       	sbiw	r26, 0x01	; 1

}
    26f0:	0f 90       	pop	r0
    26f2:	0f 90       	pop	r0
    26f4:	cf 91       	pop	r28
    26f6:	df 91       	pop	r29
    26f8:	08 95       	ret

000026fa <Timer_stop>:


void Timer_stop()
{
    26fa:	df 93       	push	r29
    26fc:	cf 93       	push	r28
    26fe:	cd b7       	in	r28, 0x3d	; 61
    2700:	de b7       	in	r29, 0x3e	; 62
	Timer0_BASE->TCCR0_Reg.Reg &= 0xF8;
    2702:	a2 e5       	ldi	r26, 0x52	; 82
    2704:	b0 e0       	ldi	r27, 0x00	; 0
    2706:	e2 e5       	ldi	r30, 0x52	; 82
    2708:	f0 e0       	ldi	r31, 0x00	; 0
    270a:	81 81       	ldd	r24, Z+1	; 0x01
    270c:	88 7f       	andi	r24, 0xF8	; 248
    270e:	11 96       	adiw	r26, 0x01	; 1
    2710:	8c 93       	st	X, r24
    2712:	11 97       	sbiw	r26, 0x01	; 1

}
    2714:	cf 91       	pop	r28
    2716:	df 91       	pop	r29
    2718:	08 95       	ret

0000271a <EnableInt>:




void EnableInt(	Timer_Config *Config_ptr,void(*fnptr)(void))
{
    271a:	df 93       	push	r29
    271c:	cf 93       	push	r28
    271e:	00 d0       	rcall	.+0      	; 0x2720 <EnableInt+0x6>
    2720:	00 d0       	rcall	.+0      	; 0x2722 <EnableInt+0x8>
    2722:	00 d0       	rcall	.+0      	; 0x2724 <EnableInt+0xa>
    2724:	cd b7       	in	r28, 0x3d	; 61
    2726:	de b7       	in	r29, 0x3e	; 62
    2728:	9a 83       	std	Y+2, r25	; 0x02
    272a:	89 83       	std	Y+1, r24	; 0x01
    272c:	7c 83       	std	Y+4, r23	; 0x04
    272e:	6b 83       	std	Y+3, r22	; 0x03
	switch(Config_ptr->mode)
    2730:	e9 81       	ldd	r30, Y+1	; 0x01
    2732:	fa 81       	ldd	r31, Y+2	; 0x02
    2734:	80 81       	ld	r24, Z
    2736:	28 2f       	mov	r18, r24
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	3e 83       	std	Y+6, r19	; 0x06
    273c:	2d 83       	std	Y+5, r18	; 0x05
    273e:	8d 81       	ldd	r24, Y+5	; 0x05
    2740:	9e 81       	ldd	r25, Y+6	; 0x06
    2742:	00 97       	sbiw	r24, 0x00	; 0
    2744:	31 f0       	breq	.+12     	; 0x2752 <EnableInt+0x38>
    2746:	2d 81       	ldd	r18, Y+5	; 0x05
    2748:	3e 81       	ldd	r19, Y+6	; 0x06
    274a:	22 30       	cpi	r18, 0x02	; 2
    274c:	31 05       	cpc	r19, r1
    274e:	b1 f0       	breq	.+44     	; 0x277c <EnableInt+0x62>
    2750:	29 c0       	rjmp	.+82     	; 0x27a4 <EnableInt+0x8a>
	{
	case TIMER0_NORMAL:

		SET_BIT(Timer0_BASE->TIMSK_Reg.Reg,TOIE0); /* enable interrupts for overflow mode */
    2752:	a2 e5       	ldi	r26, 0x52	; 82
    2754:	b0 e0       	ldi	r27, 0x00	; 0
    2756:	e2 e5       	ldi	r30, 0x52	; 82
    2758:	f0 e0       	ldi	r31, 0x00	; 0
    275a:	87 81       	ldd	r24, Z+7	; 0x07
    275c:	81 60       	ori	r24, 0x01	; 1
    275e:	17 96       	adiw	r26, 0x07	; 7
    2760:	8c 93       	st	X, r24
		SET_BIT(Timer0_BASE->TIFR_Reg.Reg,TOV0); /* enable overflow flag */
    2762:	a2 e5       	ldi	r26, 0x52	; 82
    2764:	b0 e0       	ldi	r27, 0x00	; 0
    2766:	e2 e5       	ldi	r30, 0x52	; 82
    2768:	f0 e0       	ldi	r31, 0x00	; 0
    276a:	86 81       	ldd	r24, Z+6	; 0x06
    276c:	81 60       	ori	r24, 0x01	; 1
    276e:	16 96       	adiw	r26, 0x06	; 6
    2770:	8c 93       	st	X, r24
		Timer0_setCallBack(fnptr);
    2772:	8b 81       	ldd	r24, Y+3	; 0x03
    2774:	9c 81       	ldd	r25, Y+4	; 0x04
    2776:	0e 94 ca 14 	call	0x2994	; 0x2994 <Timer0_setCallBack>
    277a:	14 c0       	rjmp	.+40     	; 0x27a4 <EnableInt+0x8a>
		break;

	case TIMER0_CTC:

		SET_BIT(Timer0_BASE->TIMSK_Reg.Reg,OCIE0); /* enable interrupts for overflow mode */
    277c:	a2 e5       	ldi	r26, 0x52	; 82
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	e2 e5       	ldi	r30, 0x52	; 82
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	87 81       	ldd	r24, Z+7	; 0x07
    2786:	82 60       	ori	r24, 0x02	; 2
    2788:	17 96       	adiw	r26, 0x07	; 7
    278a:	8c 93       	st	X, r24
		SET_BIT(Timer0_BASE->TIFR_Reg.Reg,OCF0); /* enable overflow flag */
    278c:	a2 e5       	ldi	r26, 0x52	; 82
    278e:	b0 e0       	ldi	r27, 0x00	; 0
    2790:	e2 e5       	ldi	r30, 0x52	; 82
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	86 81       	ldd	r24, Z+6	; 0x06
    2796:	82 60       	ori	r24, 0x02	; 2
    2798:	16 96       	adiw	r26, 0x06	; 6
    279a:	8c 93       	st	X, r24
		Timer0_setCallBack(fnptr);
    279c:	8b 81       	ldd	r24, Y+3	; 0x03
    279e:	9c 81       	ldd	r25, Y+4	; 0x04
    27a0:	0e 94 ca 14 	call	0x2994	; 0x2994 <Timer0_setCallBack>
		break;
	}
}
    27a4:	26 96       	adiw	r28, 0x06	; 6
    27a6:	0f b6       	in	r0, 0x3f	; 63
    27a8:	f8 94       	cli
    27aa:	de bf       	out	0x3e, r29	; 62
    27ac:	0f be       	out	0x3f, r0	; 63
    27ae:	cd bf       	out	0x3d, r28	; 61
    27b0:	cf 91       	pop	r28
    27b2:	df 91       	pop	r29
    27b4:	08 95       	ret

000027b6 <DisableInt>:

void DisableInt()
{
    27b6:	df 93       	push	r29
    27b8:	cf 93       	push	r28
    27ba:	cd b7       	in	r28, 0x3d	; 61
    27bc:	de b7       	in	r29, 0x3e	; 62

	SET_BIT(Timer0_BASE->TIFR_Reg.Reg,OCF0); /* W1C clear flag*/
    27be:	a2 e5       	ldi	r26, 0x52	; 82
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	e2 e5       	ldi	r30, 0x52	; 82
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	86 81       	ldd	r24, Z+6	; 0x06
    27c8:	82 60       	ori	r24, 0x02	; 2
    27ca:	16 96       	adiw	r26, 0x06	; 6
    27cc:	8c 93       	st	X, r24
	SET_BIT(Timer0_BASE->TIFR_Reg.Reg,TOV0); /* W1C clear flag */
    27ce:	a2 e5       	ldi	r26, 0x52	; 82
    27d0:	b0 e0       	ldi	r27, 0x00	; 0
    27d2:	e2 e5       	ldi	r30, 0x52	; 82
    27d4:	f0 e0       	ldi	r31, 0x00	; 0
    27d6:	86 81       	ldd	r24, Z+6	; 0x06
    27d8:	81 60       	ori	r24, 0x01	; 1
    27da:	16 96       	adiw	r26, 0x06	; 6
    27dc:	8c 93       	st	X, r24
    27de:	16 97       	sbiw	r26, 0x06	; 6

}
    27e0:	cf 91       	pop	r28
    27e2:	df 91       	pop	r29
    27e4:	08 95       	ret

000027e6 <setFastPWM>:




void setFastPWM(uint8 duty,Compare_Output_Mode_t SignalOutput)
{
    27e6:	df 93       	push	r29
    27e8:	cf 93       	push	r28
    27ea:	cd b7       	in	r28, 0x3d	; 61
    27ec:	de b7       	in	r29, 0x3e	; 62
    27ee:	2a 97       	sbiw	r28, 0x0a	; 10
    27f0:	0f b6       	in	r0, 0x3f	; 63
    27f2:	f8 94       	cli
    27f4:	de bf       	out	0x3e, r29	; 62
    27f6:	0f be       	out	0x3f, r0	; 63
    27f8:	cd bf       	out	0x3d, r28	; 61
    27fa:	89 83       	std	Y+1, r24	; 0x01
    27fc:	6a 83       	std	Y+2, r22	; 0x02


	if(SignalOutput == Non_inverting)
    27fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2800:	82 30       	cpi	r24, 0x02	; 2
    2802:	71 f5       	brne	.+92     	; 0x2860 <setFastPWM+0x7a>
	{
		Timer0_BASE->OCR0_Reg.Reg  = abs (((duty*255)/100)-1);
    2804:	82 e5       	ldi	r24, 0x52	; 82
    2806:	90 e0       	ldi	r25, 0x00	; 0
    2808:	9a 87       	std	Y+10, r25	; 0x0a
    280a:	89 87       	std	Y+9, r24	; 0x09
    280c:	89 81       	ldd	r24, Y+1	; 0x01
    280e:	48 2f       	mov	r20, r24
    2810:	50 e0       	ldi	r21, 0x00	; 0
    2812:	ca 01       	movw	r24, r20
    2814:	9c 01       	movw	r18, r24
    2816:	22 0f       	add	r18, r18
    2818:	33 1f       	adc	r19, r19
    281a:	c9 01       	movw	r24, r18
    281c:	96 95       	lsr	r25
    281e:	98 2f       	mov	r25, r24
    2820:	88 27       	eor	r24, r24
    2822:	97 95       	ror	r25
    2824:	87 95       	ror	r24
    2826:	82 1b       	sub	r24, r18
    2828:	93 0b       	sbc	r25, r19
    282a:	84 0f       	add	r24, r20
    282c:	95 1f       	adc	r25, r21
    282e:	24 e6       	ldi	r18, 0x64	; 100
    2830:	30 e0       	ldi	r19, 0x00	; 0
    2832:	b9 01       	movw	r22, r18
    2834:	0e 94 4f 3d 	call	0x7a9e	; 0x7a9e <__divmodhi4>
    2838:	cb 01       	movw	r24, r22
    283a:	01 97       	sbiw	r24, 0x01	; 1
    283c:	98 87       	std	Y+8, r25	; 0x08
    283e:	8f 83       	std	Y+7, r24	; 0x07
    2840:	ef 81       	ldd	r30, Y+7	; 0x07
    2842:	f8 85       	ldd	r31, Y+8	; 0x08
    2844:	ff 23       	and	r31, r31
    2846:	3c f4       	brge	.+14     	; 0x2856 <setFastPWM+0x70>
    2848:	8f 81       	ldd	r24, Y+7	; 0x07
    284a:	98 85       	ldd	r25, Y+8	; 0x08
    284c:	90 95       	com	r25
    284e:	81 95       	neg	r24
    2850:	9f 4f       	sbci	r25, 0xFF	; 255
    2852:	98 87       	std	Y+8, r25	; 0x08
    2854:	8f 83       	std	Y+7, r24	; 0x07
    2856:	8f 81       	ldd	r24, Y+7	; 0x07
    2858:	e9 85       	ldd	r30, Y+9	; 0x09
    285a:	fa 85       	ldd	r31, Y+10	; 0x0a
    285c:	82 87       	std	Z+10, r24	; 0x0a
    285e:	28 c0       	rjmp	.+80     	; 0x28b0 <setFastPWM+0xca>
	}
	else if(SignalOutput== Inverting)
    2860:	8a 81       	ldd	r24, Y+2	; 0x02
    2862:	83 30       	cpi	r24, 0x03	; 3
    2864:	29 f5       	brne	.+74     	; 0x28b0 <setFastPWM+0xca>
	{
		Timer0_BASE->OCR0_Reg.Reg  = abs(255-((duty*256)/100));
    2866:	82 e5       	ldi	r24, 0x52	; 82
    2868:	90 e0       	ldi	r25, 0x00	; 0
    286a:	9e 83       	std	Y+6, r25	; 0x06
    286c:	8d 83       	std	Y+5, r24	; 0x05
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	88 2f       	mov	r24, r24
    2872:	90 e0       	ldi	r25, 0x00	; 0
    2874:	98 2f       	mov	r25, r24
    2876:	88 27       	eor	r24, r24
    2878:	24 e6       	ldi	r18, 0x64	; 100
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	b9 01       	movw	r22, r18
    287e:	0e 94 4f 3d 	call	0x7a9e	; 0x7a9e <__divmodhi4>
    2882:	cb 01       	movw	r24, r22
    2884:	9c 01       	movw	r18, r24
    2886:	8f ef       	ldi	r24, 0xFF	; 255
    2888:	90 e0       	ldi	r25, 0x00	; 0
    288a:	82 1b       	sub	r24, r18
    288c:	93 0b       	sbc	r25, r19
    288e:	9c 83       	std	Y+4, r25	; 0x04
    2890:	8b 83       	std	Y+3, r24	; 0x03
    2892:	eb 81       	ldd	r30, Y+3	; 0x03
    2894:	fc 81       	ldd	r31, Y+4	; 0x04
    2896:	ff 23       	and	r31, r31
    2898:	3c f4       	brge	.+14     	; 0x28a8 <setFastPWM+0xc2>
    289a:	8b 81       	ldd	r24, Y+3	; 0x03
    289c:	9c 81       	ldd	r25, Y+4	; 0x04
    289e:	90 95       	com	r25
    28a0:	81 95       	neg	r24
    28a2:	9f 4f       	sbci	r25, 0xFF	; 255
    28a4:	9c 83       	std	Y+4, r25	; 0x04
    28a6:	8b 83       	std	Y+3, r24	; 0x03
    28a8:	8b 81       	ldd	r24, Y+3	; 0x03
    28aa:	ed 81       	ldd	r30, Y+5	; 0x05
    28ac:	fe 81       	ldd	r31, Y+6	; 0x06
    28ae:	82 87       	std	Z+10, r24	; 0x0a

	}


}
    28b0:	2a 96       	adiw	r28, 0x0a	; 10
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	f8 94       	cli
    28b6:	de bf       	out	0x3e, r29	; 62
    28b8:	0f be       	out	0x3f, r0	; 63
    28ba:	cd bf       	out	0x3d, r28	; 61
    28bc:	cf 91       	pop	r28
    28be:	df 91       	pop	r29
    28c0:	08 95       	ret

000028c2 <setphaseCorrectPWM>:


void setphaseCorrectPWM(uint8 duty)
{
    28c2:	df 93       	push	r29
    28c4:	cf 93       	push	r28
    28c6:	0f 92       	push	r0
    28c8:	cd b7       	in	r28, 0x3d	; 61
    28ca:	de b7       	in	r29, 0x3e	; 62
    28cc:	89 83       	std	Y+1, r24	; 0x01


	Timer0_BASE->OCR0_Reg.Reg  = (duty*255)/100;
    28ce:	e2 e5       	ldi	r30, 0x52	; 82
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	89 81       	ldd	r24, Y+1	; 0x01
    28d4:	48 2f       	mov	r20, r24
    28d6:	50 e0       	ldi	r21, 0x00	; 0
    28d8:	ca 01       	movw	r24, r20
    28da:	9c 01       	movw	r18, r24
    28dc:	22 0f       	add	r18, r18
    28de:	33 1f       	adc	r19, r19
    28e0:	c9 01       	movw	r24, r18
    28e2:	96 95       	lsr	r25
    28e4:	98 2f       	mov	r25, r24
    28e6:	88 27       	eor	r24, r24
    28e8:	97 95       	ror	r25
    28ea:	87 95       	ror	r24
    28ec:	82 1b       	sub	r24, r18
    28ee:	93 0b       	sbc	r25, r19
    28f0:	84 0f       	add	r24, r20
    28f2:	95 1f       	adc	r25, r21
    28f4:	24 e6       	ldi	r18, 0x64	; 100
    28f6:	30 e0       	ldi	r19, 0x00	; 0
    28f8:	b9 01       	movw	r22, r18
    28fa:	0e 94 4f 3d 	call	0x7a9e	; 0x7a9e <__divmodhi4>
    28fe:	cb 01       	movw	r24, r22
    2900:	82 87       	std	Z+10, r24	; 0x0a

}
    2902:	0f 90       	pop	r0
    2904:	cf 91       	pop	r28
    2906:	df 91       	pop	r29
    2908:	08 95       	ret

0000290a <Timer_setDelayTimeMilliSec>:


void Timer_setDelayTimeMilliSec(uint16 milliseconds,Timer_Config *Config_ptr)
{
    290a:	df 93       	push	r29
    290c:	cf 93       	push	r28
    290e:	00 d0       	rcall	.+0      	; 0x2910 <Timer_setDelayTimeMilliSec+0x6>
    2910:	00 d0       	rcall	.+0      	; 0x2912 <Timer_setDelayTimeMilliSec+0x8>
    2912:	00 d0       	rcall	.+0      	; 0x2914 <Timer_setDelayTimeMilliSec+0xa>
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
    2918:	9c 83       	std	Y+4, r25	; 0x04
    291a:	8b 83       	std	Y+3, r24	; 0x03
    291c:	7e 83       	std	Y+6, r23	; 0x06
    291e:	6d 83       	std	Y+5, r22	; 0x05
	// Calculate the number of timer counts required for the delay
	uint16 counts = (uint16)((milliseconds * 1000) / Config_ptr->prescalar);
    2920:	2b 81       	ldd	r18, Y+3	; 0x03
    2922:	3c 81       	ldd	r19, Y+4	; 0x04
    2924:	88 ee       	ldi	r24, 0xE8	; 232
    2926:	93 e0       	ldi	r25, 0x03	; 3
    2928:	28 9f       	mul	r18, r24
    292a:	a0 01       	movw	r20, r0
    292c:	29 9f       	mul	r18, r25
    292e:	50 0d       	add	r21, r0
    2930:	38 9f       	mul	r19, r24
    2932:	50 0d       	add	r21, r0
    2934:	11 24       	eor	r1, r1
    2936:	ed 81       	ldd	r30, Y+5	; 0x05
    2938:	fe 81       	ldd	r31, Y+6	; 0x06
    293a:	81 81       	ldd	r24, Z+1	; 0x01
    293c:	28 2f       	mov	r18, r24
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	ca 01       	movw	r24, r20
    2942:	b9 01       	movw	r22, r18
    2944:	0e 94 3b 3d 	call	0x7a76	; 0x7a76 <__udivmodhi4>
    2948:	cb 01       	movw	r24, r22
    294a:	9a 83       	std	Y+2, r25	; 0x02
    294c:	89 83       	std	Y+1, r24	; 0x01

	// Set the compare value
	Timer0_BASE->OCR0_Reg.Reg = counts - 1;
    294e:	e2 e5       	ldi	r30, 0x52	; 82
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	89 81       	ldd	r24, Y+1	; 0x01
    2954:	81 50       	subi	r24, 0x01	; 1
    2956:	82 87       	std	Z+10, r24	; 0x0a

	// Clear the timer counter
	Timer0_BASE->TCNT0_Reg.Reg  = 0;
    2958:	e2 e5       	ldi	r30, 0x52	; 82
    295a:	f0 e0       	ldi	r31, 0x00	; 0
    295c:	10 82       	st	Z, r1

	// Wait until the compare match flag is set
	while (!(Timer0_BASE->TIFR_Reg.Reg & (1 << OCF0)));
    295e:	e2 e5       	ldi	r30, 0x52	; 82
    2960:	f0 e0       	ldi	r31, 0x00	; 0
    2962:	86 81       	ldd	r24, Z+6	; 0x06
    2964:	88 2f       	mov	r24, r24
    2966:	90 e0       	ldi	r25, 0x00	; 0
    2968:	82 70       	andi	r24, 0x02	; 2
    296a:	90 70       	andi	r25, 0x00	; 0
    296c:	00 97       	sbiw	r24, 0x00	; 0
    296e:	b9 f3       	breq	.-18     	; 0x295e <Timer_setDelayTimeMilliSec+0x54>

	// Clear the compare match flag by writing a 1 to it
	Timer0_BASE->TIFR_Reg.Reg |= (1 << OCF0);
    2970:	a2 e5       	ldi	r26, 0x52	; 82
    2972:	b0 e0       	ldi	r27, 0x00	; 0
    2974:	e2 e5       	ldi	r30, 0x52	; 82
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	86 81       	ldd	r24, Z+6	; 0x06
    297a:	82 60       	ori	r24, 0x02	; 2
    297c:	16 96       	adiw	r26, 0x06	; 6
    297e:	8c 93       	st	X, r24
    2980:	16 97       	sbiw	r26, 0x06	; 6
}
    2982:	26 96       	adiw	r28, 0x06	; 6
    2984:	0f b6       	in	r0, 0x3f	; 63
    2986:	f8 94       	cli
    2988:	de bf       	out	0x3e, r29	; 62
    298a:	0f be       	out	0x3f, r0	; 63
    298c:	cd bf       	out	0x3d, r28	; 61
    298e:	cf 91       	pop	r28
    2990:	df 91       	pop	r29
    2992:	08 95       	ret

00002994 <Timer0_setCallBack>:




void Timer0_setCallBack(void(*a_ptr)(void))
{
    2994:	df 93       	push	r29
    2996:	cf 93       	push	r28
    2998:	00 d0       	rcall	.+0      	; 0x299a <Timer0_setCallBack+0x6>
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
    299e:	9a 83       	std	Y+2, r25	; 0x02
    29a0:	89 83       	std	Y+1, r24	; 0x01
	gTimer0_Call_BackPOINTER = a_ptr;
    29a2:	89 81       	ldd	r24, Y+1	; 0x01
    29a4:	9a 81       	ldd	r25, Y+2	; 0x02
    29a6:	90 93 e3 01 	sts	0x01E3, r25
    29aa:	80 93 e2 01 	sts	0x01E2, r24
}
    29ae:	0f 90       	pop	r0
    29b0:	0f 90       	pop	r0
    29b2:	cf 91       	pop	r28
    29b4:	df 91       	pop	r29
    29b6:	08 95       	ret

000029b8 <__vector_13>:
void (*Uart_CallBack) (uint8 data) = NULL_PTR;



ISR(USART_RXC_vect)
{
    29b8:	1f 92       	push	r1
    29ba:	0f 92       	push	r0
    29bc:	0f b6       	in	r0, 0x3f	; 63
    29be:	0f 92       	push	r0
    29c0:	11 24       	eor	r1, r1
    29c2:	2f 93       	push	r18
    29c4:	3f 93       	push	r19
    29c6:	4f 93       	push	r20
    29c8:	5f 93       	push	r21
    29ca:	6f 93       	push	r22
    29cc:	7f 93       	push	r23
    29ce:	8f 93       	push	r24
    29d0:	9f 93       	push	r25
    29d2:	af 93       	push	r26
    29d4:	bf 93       	push	r27
    29d6:	ef 93       	push	r30
    29d8:	ff 93       	push	r31
    29da:	df 93       	push	r29
    29dc:	cf 93       	push	r28
    29de:	cd b7       	in	r28, 0x3d	; 61
    29e0:	de b7       	in	r29, 0x3e	; 62
	if(Uart_CallBack != NULL_PTR)
    29e2:	80 91 e4 01 	lds	r24, 0x01E4
    29e6:	90 91 e5 01 	lds	r25, 0x01E5
    29ea:	00 97       	sbiw	r24, 0x00	; 0
    29ec:	a1 f0       	breq	.+40     	; 0x2a16 <__vector_13+0x5e>
	{
		SET_BIT(UART_BASE->UCSRB_t.Reg,RXCIE);
    29ee:	a9 e2       	ldi	r26, 0x29	; 41
    29f0:	b0 e0       	ldi	r27, 0x00	; 0
    29f2:	e9 e2       	ldi	r30, 0x29	; 41
    29f4:	f0 e0       	ldi	r31, 0x00	; 0
    29f6:	81 81       	ldd	r24, Z+1	; 0x01
    29f8:	80 68       	ori	r24, 0x80	; 128
    29fa:	11 96       	adiw	r26, 0x01	; 1
    29fc:	8c 93       	st	X, r24
		Uart_CallBack(UART_BASE->UDR_t.Reg);
    29fe:	20 91 e4 01 	lds	r18, 0x01E4
    2a02:	30 91 e5 01 	lds	r19, 0x01E5
    2a06:	e9 e2       	ldi	r30, 0x29	; 41
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	83 81       	ldd	r24, Z+3	; 0x03
    2a0c:	f9 01       	movw	r30, r18
    2a0e:	09 95       	icall
		UART_BASE->UDR_t.Reg = 0;
    2a10:	e9 e2       	ldi	r30, 0x29	; 41
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	13 82       	std	Z+3, r1	; 0x03
	}
}
    2a16:	cf 91       	pop	r28
    2a18:	df 91       	pop	r29
    2a1a:	ff 91       	pop	r31
    2a1c:	ef 91       	pop	r30
    2a1e:	bf 91       	pop	r27
    2a20:	af 91       	pop	r26
    2a22:	9f 91       	pop	r25
    2a24:	8f 91       	pop	r24
    2a26:	7f 91       	pop	r23
    2a28:	6f 91       	pop	r22
    2a2a:	5f 91       	pop	r21
    2a2c:	4f 91       	pop	r20
    2a2e:	3f 91       	pop	r19
    2a30:	2f 91       	pop	r18
    2a32:	0f 90       	pop	r0
    2a34:	0f be       	out	0x3f, r0	; 63
    2a36:	0f 90       	pop	r0
    2a38:	1f 90       	pop	r1
    2a3a:	18 95       	reti

00002a3c <MCAL_UART_init>:



void MCAL_UART_init(uint32 baud_rate, const UART_Config *config_ptr)
{
    2a3c:	df 93       	push	r29
    2a3e:	cf 93       	push	r28
    2a40:	cd b7       	in	r28, 0x3d	; 61
    2a42:	de b7       	in	r29, 0x3e	; 62
    2a44:	28 97       	sbiw	r28, 0x08	; 8
    2a46:	0f b6       	in	r0, 0x3f	; 63
    2a48:	f8 94       	cli
    2a4a:	de bf       	out	0x3e, r29	; 62
    2a4c:	0f be       	out	0x3f, r0	; 63
    2a4e:	cd bf       	out	0x3d, r28	; 61
    2a50:	6b 83       	std	Y+3, r22	; 0x03
    2a52:	7c 83       	std	Y+4, r23	; 0x04
    2a54:	8d 83       	std	Y+5, r24	; 0x05
    2a56:	9e 83       	std	Y+6, r25	; 0x06
    2a58:	58 87       	std	Y+8, r21	; 0x08
    2a5a:	4f 83       	std	Y+7, r20	; 0x07
	uint16 ubrr_value = 0;
    2a5c:	1a 82       	std	Y+2, r1	; 0x02
    2a5e:	19 82       	std	Y+1, r1	; 0x01
	/*Write this bit one to double the transfer rate for asynchronous communication */
	UART_BASE->UCSRA_t.Reg |= ((config_ptr->Double_Speed)<<U2X);
    2a60:	a9 e2       	ldi	r26, 0x29	; 41
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	e9 e2       	ldi	r30, 0x29	; 41
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	82 81       	ldd	r24, Z+2	; 0x02
    2a6a:	28 2f       	mov	r18, r24
    2a6c:	ef 81       	ldd	r30, Y+7	; 0x07
    2a6e:	f8 85       	ldd	r31, Y+8	; 0x08
    2a70:	84 81       	ldd	r24, Z+4	; 0x04
    2a72:	88 2f       	mov	r24, r24
    2a74:	90 e0       	ldi	r25, 0x00	; 0
    2a76:	88 0f       	add	r24, r24
    2a78:	99 1f       	adc	r25, r25
    2a7a:	82 2b       	or	r24, r18
    2a7c:	12 96       	adiw	r26, 0x02	; 2
    2a7e:	8c 93       	st	X, r24


	//Enable Rx & Tx
	UART_BASE->UCSRB_t.Reg = (1<<RXEN) | (1<<TXEN);
    2a80:	e9 e2       	ldi	r30, 0x29	; 41
    2a82:	f0 e0       	ldi	r31, 0x00	; 0
    2a84:	88 e1       	ldi	r24, 0x18	; 24
    2a86:	81 83       	std	Z+1, r24	; 0x01


	UCSRC_t = (1<<URSEL);
    2a88:	e0 e4       	ldi	r30, 0x40	; 64
    2a8a:	f0 e0       	ldi	r31, 0x00	; 0
    2a8c:	80 e8       	ldi	r24, 0x80	; 128
    2a8e:	80 83       	st	Z, r24
	UCSRC_t = ( UCSRC_t & Mask_Parity ) | ((config_ptr -> parity_mode ) <<UPM0);
    2a90:	a0 e4       	ldi	r26, 0x40	; 64
    2a92:	b0 e0       	ldi	r27, 0x00	; 0
    2a94:	e0 e4       	ldi	r30, 0x40	; 64
    2a96:	f0 e0       	ldi	r31, 0x00	; 0
    2a98:	80 81       	ld	r24, Z
    2a9a:	28 2f       	mov	r18, r24
    2a9c:	2f 7c       	andi	r18, 0xCF	; 207
    2a9e:	ef 81       	ldd	r30, Y+7	; 0x07
    2aa0:	f8 85       	ldd	r31, Y+8	; 0x08
    2aa2:	82 81       	ldd	r24, Z+2	; 0x02
    2aa4:	88 2f       	mov	r24, r24
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	82 95       	swap	r24
    2aaa:	92 95       	swap	r25
    2aac:	90 7f       	andi	r25, 0xF0	; 240
    2aae:	98 27       	eor	r25, r24
    2ab0:	80 7f       	andi	r24, 0xF0	; 240
    2ab2:	98 27       	eor	r25, r24
    2ab4:	82 2b       	or	r24, r18
    2ab6:	8c 93       	st	X, r24
	UCSRC_t = ( UCSRC_t & StopBit_Mask ) | ((config_ptr -> stop_bit ) <<USBS);
    2ab8:	a0 e4       	ldi	r26, 0x40	; 64
    2aba:	b0 e0       	ldi	r27, 0x00	; 0
    2abc:	e0 e4       	ldi	r30, 0x40	; 64
    2abe:	f0 e0       	ldi	r31, 0x00	; 0
    2ac0:	80 81       	ld	r24, Z
    2ac2:	28 2f       	mov	r18, r24
    2ac4:	27 7f       	andi	r18, 0xF7	; 247
    2ac6:	ef 81       	ldd	r30, Y+7	; 0x07
    2ac8:	f8 85       	ldd	r31, Y+8	; 0x08
    2aca:	80 81       	ld	r24, Z
    2acc:	88 2f       	mov	r24, r24
    2ace:	90 e0       	ldi	r25, 0x00	; 0
    2ad0:	88 0f       	add	r24, r24
    2ad2:	99 1f       	adc	r25, r25
    2ad4:	88 0f       	add	r24, r24
    2ad6:	99 1f       	adc	r25, r25
    2ad8:	88 0f       	add	r24, r24
    2ada:	99 1f       	adc	r25, r25
    2adc:	82 2b       	or	r24, r18
    2ade:	8c 93       	st	X, r24
	UCSRC_t = ( UCSRC_t & CharacterSize_Mask ) | ((config_ptr -> size ) <<UCSZ0);
    2ae0:	a0 e4       	ldi	r26, 0x40	; 64
    2ae2:	b0 e0       	ldi	r27, 0x00	; 0
    2ae4:	e0 e4       	ldi	r30, 0x40	; 64
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	80 81       	ld	r24, Z
    2aea:	28 2f       	mov	r18, r24
    2aec:	29 7f       	andi	r18, 0xF9	; 249
    2aee:	ef 81       	ldd	r30, Y+7	; 0x07
    2af0:	f8 85       	ldd	r31, Y+8	; 0x08
    2af2:	81 81       	ldd	r24, Z+1	; 0x01
    2af4:	88 2f       	mov	r24, r24
    2af6:	90 e0       	ldi	r25, 0x00	; 0
    2af8:	88 0f       	add	r24, r24
    2afa:	99 1f       	adc	r25, r25
    2afc:	82 2b       	or	r24, r18
    2afe:	8c 93       	st	X, r24




	//	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((8000000 / (baud_rate * 8UL))) - 1);
    2b00:	8b 81       	ldd	r24, Y+3	; 0x03
    2b02:	9c 81       	ldd	r25, Y+4	; 0x04
    2b04:	ad 81       	ldd	r26, Y+5	; 0x05
    2b06:	be 81       	ldd	r27, Y+6	; 0x06
    2b08:	88 0f       	add	r24, r24
    2b0a:	99 1f       	adc	r25, r25
    2b0c:	aa 1f       	adc	r26, r26
    2b0e:	bb 1f       	adc	r27, r27
    2b10:	88 0f       	add	r24, r24
    2b12:	99 1f       	adc	r25, r25
    2b14:	aa 1f       	adc	r26, r26
    2b16:	bb 1f       	adc	r27, r27
    2b18:	88 0f       	add	r24, r24
    2b1a:	99 1f       	adc	r25, r25
    2b1c:	aa 1f       	adc	r26, r26
    2b1e:	bb 1f       	adc	r27, r27
    2b20:	9c 01       	movw	r18, r24
    2b22:	ad 01       	movw	r20, r26
    2b24:	80 e0       	ldi	r24, 0x00	; 0
    2b26:	92 e1       	ldi	r25, 0x12	; 18
    2b28:	aa e7       	ldi	r26, 0x7A	; 122
    2b2a:	b0 e0       	ldi	r27, 0x00	; 0
    2b2c:	bc 01       	movw	r22, r24
    2b2e:	cd 01       	movw	r24, r26
    2b30:	0e 94 62 3d 	call	0x7ac4	; 0x7ac4 <__udivmodsi4>
    2b34:	da 01       	movw	r26, r20
    2b36:	c9 01       	movw	r24, r18
    2b38:	01 97       	sbiw	r24, 0x01	; 1
    2b3a:	9a 83       	std	Y+2, r25	; 0x02
    2b3c:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH_t = ubrr_value>>8;
    2b3e:	e0 e4       	ldi	r30, 0x40	; 64
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	89 81       	ldd	r24, Y+1	; 0x01
    2b44:	9a 81       	ldd	r25, Y+2	; 0x02
    2b46:	89 2f       	mov	r24, r25
    2b48:	99 27       	eor	r25, r25
    2b4a:	80 83       	st	Z, r24
	UART_BASE->UBRRL_t.Reg = ubrr_value;
    2b4c:	e9 e2       	ldi	r30, 0x29	; 41
    2b4e:	f0 e0       	ldi	r31, 0x00	; 0
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	80 83       	st	Z, r24


}
    2b54:	28 96       	adiw	r28, 0x08	; 8
    2b56:	0f b6       	in	r0, 0x3f	; 63
    2b58:	f8 94       	cli
    2b5a:	de bf       	out	0x3e, r29	; 62
    2b5c:	0f be       	out	0x3f, r0	; 63
    2b5e:	cd bf       	out	0x3d, r28	; 61
    2b60:	cf 91       	pop	r28
    2b62:	df 91       	pop	r29
    2b64:	08 95       	ret

00002b66 <MCAL_UART_sendByte_Blocking>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void MCAL_UART_sendByte_Blocking(const uint8 data)
{
    2b66:	df 93       	push	r29
    2b68:	cf 93       	push	r28
    2b6a:	0f 92       	push	r0
    2b6c:	cd b7       	in	r28, 0x3d	; 61
    2b6e:	de b7       	in	r29, 0x3e	; 62
    2b70:	89 83       	std	Y+1, r24	; 0x01
	UART_BASE->UDR_t.Reg = data;
    2b72:	e9 e2       	ldi	r30, 0x29	; 41
    2b74:	f0 e0       	ldi	r31, 0x00	; 0
    2b76:	89 81       	ldd	r24, Y+1	; 0x01
    2b78:	83 83       	std	Z+3, r24	; 0x03

	while(BIT_IS_CLEAR(UART_BASE->UCSRA_t.Reg,TXC)){} // Wait until the transmission is complete TXC = 1
    2b7a:	e9 e2       	ldi	r30, 0x29	; 41
    2b7c:	f0 e0       	ldi	r31, 0x00	; 0
    2b7e:	82 81       	ldd	r24, Z+2	; 0x02
    2b80:	88 2f       	mov	r24, r24
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	80 74       	andi	r24, 0x40	; 64
    2b86:	90 70       	andi	r25, 0x00	; 0
    2b88:	00 97       	sbiw	r24, 0x00	; 0
    2b8a:	b9 f3       	breq	.-18     	; 0x2b7a <MCAL_UART_sendByte_Blocking+0x14>
	SET_BIT(UART_BASE->UCSRA_t.Reg,TXC); // Clear the TXC flag
    2b8c:	a9 e2       	ldi	r26, 0x29	; 41
    2b8e:	b0 e0       	ldi	r27, 0x00	; 0
    2b90:	e9 e2       	ldi	r30, 0x29	; 41
    2b92:	f0 e0       	ldi	r31, 0x00	; 0
    2b94:	82 81       	ldd	r24, Z+2	; 0x02
    2b96:	80 64       	ori	r24, 0x40	; 64
    2b98:	12 96       	adiw	r26, 0x02	; 2
    2b9a:	8c 93       	st	X, r24
    2b9c:	12 97       	sbiw	r26, 0x02	; 2
}
    2b9e:	0f 90       	pop	r0
    2ba0:	cf 91       	pop	r28
    2ba2:	df 91       	pop	r29
    2ba4:	08 95       	ret

00002ba6 <MCAL_UART_sendString_Blocking>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void MCAL_UART_sendString_Blocking(const char *str)
{
    2ba6:	df 93       	push	r29
    2ba8:	cf 93       	push	r28
    2baa:	00 d0       	rcall	.+0      	; 0x2bac <MCAL_UART_sendString_Blocking+0x6>
    2bac:	0f 92       	push	r0
    2bae:	cd b7       	in	r28, 0x3d	; 61
    2bb0:	de b7       	in	r29, 0x3e	; 62
    2bb2:	9b 83       	std	Y+3, r25	; 0x03
    2bb4:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2bb6:	19 82       	std	Y+1, r1	; 0x01
    2bb8:	0e c0       	rjmp	.+28     	; 0x2bd6 <MCAL_UART_sendString_Blocking+0x30>
	while(str[i] != 0)
	{
		MCAL_UART_sendByte_Blocking(str[i]);
    2bba:	89 81       	ldd	r24, Y+1	; 0x01
    2bbc:	28 2f       	mov	r18, r24
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc2:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc4:	fc 01       	movw	r30, r24
    2bc6:	e2 0f       	add	r30, r18
    2bc8:	f3 1f       	adc	r31, r19
    2bca:	80 81       	ld	r24, Z
    2bcc:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <MCAL_UART_sendByte_Blocking>
		i++;
    2bd0:	89 81       	ldd	r24, Y+1	; 0x01
    2bd2:	8f 5f       	subi	r24, 0xFF	; 255
    2bd4:	89 83       	std	Y+1, r24	; 0x01
 * Send the required string through UART to the other UART device.
 */
void MCAL_UART_sendString_Blocking(const char *str)
{
	uint8 i = 0;
	while(str[i] != 0)
    2bd6:	89 81       	ldd	r24, Y+1	; 0x01
    2bd8:	28 2f       	mov	r18, r24
    2bda:	30 e0       	ldi	r19, 0x00	; 0
    2bdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bde:	9b 81       	ldd	r25, Y+3	; 0x03
    2be0:	fc 01       	movw	r30, r24
    2be2:	e2 0f       	add	r30, r18
    2be4:	f3 1f       	adc	r31, r19
    2be6:	80 81       	ld	r24, Z
    2be8:	88 23       	and	r24, r24
    2bea:	39 f7       	brne	.-50     	; 0x2bba <MCAL_UART_sendString_Blocking+0x14>
	{
		MCAL_UART_sendByte_Blocking(str[i]);
		i++;
	}

}
    2bec:	0f 90       	pop	r0
    2bee:	0f 90       	pop	r0
    2bf0:	0f 90       	pop	r0
    2bf2:	cf 91       	pop	r28
    2bf4:	df 91       	pop	r29
    2bf6:	08 95       	ret

00002bf8 <MCAL_UART_recieveByte_Blocking>:
 * Functional responsible for receive byte from another UART device.
 */


uint8 MCAL_UART_recieveByte_Blocking(void)
{
    2bf8:	df 93       	push	r29
    2bfa:	cf 93       	push	r28
    2bfc:	cd b7       	in	r28, 0x3d	; 61
    2bfe:	de b7       	in	r29, 0x3e	; 62
	while(BIT_IS_CLEAR(UART_BASE->UCSRA_t.Reg,RXC)); /* RXC flag is set when the UART receive data so wait until this flag is set to one */
    2c00:	e9 e2       	ldi	r30, 0x29	; 41
    2c02:	f0 e0       	ldi	r31, 0x00	; 0
    2c04:	82 81       	ldd	r24, Z+2	; 0x02
    2c06:	88 23       	and	r24, r24
    2c08:	dc f7       	brge	.-10     	; 0x2c00 <MCAL_UART_recieveByte_Blocking+0x8>
	SET_BIT(UART_BASE->UCSRA_t.Reg,RXC); /* Clear the TXC flag*/
    2c0a:	a9 e2       	ldi	r26, 0x29	; 41
    2c0c:	b0 e0       	ldi	r27, 0x00	; 0
    2c0e:	e9 e2       	ldi	r30, 0x29	; 41
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	82 81       	ldd	r24, Z+2	; 0x02
    2c14:	80 68       	ori	r24, 0x80	; 128
    2c16:	12 96       	adiw	r26, 0x02	; 2
    2c18:	8c 93       	st	X, r24
    2c1a:	12 97       	sbiw	r26, 0x02	; 2
	return  UART_BASE->UDR_t.Reg;   /*Read the received data from the Rx buffer (UDR)*/
    2c1c:	e9 e2       	ldi	r30, 0x29	; 41
    2c1e:	f0 e0       	ldi	r31, 0x00	; 0
    2c20:	83 81       	ldd	r24, Z+3	; 0x03


}
    2c22:	cf 91       	pop	r28
    2c24:	df 91       	pop	r29
    2c26:	08 95       	ret

00002c28 <MCAL_UART_recieveByte_Non_Blocking>:


uint8 MCAL_UART_recieveByte_Non_Blocking(void)
{
    2c28:	df 93       	push	r29
    2c2a:	cf 93       	push	r28
    2c2c:	0f 92       	push	r0
    2c2e:	cd b7       	in	r28, 0x3d	; 61
    2c30:	de b7       	in	r29, 0x3e	; 62

	if(BIT_IS_CLEAR(UART_BASE->UCSRA_t.Reg,RXC))
    2c32:	e9 e2       	ldi	r30, 0x29	; 41
    2c34:	f0 e0       	ldi	r31, 0x00	; 0
    2c36:	82 81       	ldd	r24, Z+2	; 0x02
    2c38:	88 23       	and	r24, r24
    2c3a:	74 f0       	brlt	.+28     	; 0x2c58 <MCAL_UART_recieveByte_Non_Blocking+0x30>
	{
		SET_BIT(UART_BASE->UCSRA_t.Reg,RXC);
    2c3c:	a9 e2       	ldi	r26, 0x29	; 41
    2c3e:	b0 e0       	ldi	r27, 0x00	; 0
    2c40:	e9 e2       	ldi	r30, 0x29	; 41
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	82 81       	ldd	r24, Z+2	; 0x02
    2c46:	80 68       	ori	r24, 0x80	; 128
    2c48:	12 96       	adiw	r26, 0x02	; 2
    2c4a:	8c 93       	st	X, r24
    2c4c:	12 97       	sbiw	r26, 0x02	; 2
		return UART_BASE->UDR_t.Reg;   /*Read the received data from the Rx buffer (UDR)*/
    2c4e:	e9 e2       	ldi	r30, 0x29	; 41
    2c50:	f0 e0       	ldi	r31, 0x00	; 0
    2c52:	83 81       	ldd	r24, Z+3	; 0x03
    2c54:	89 83       	std	Y+1, r24	; 0x01
    2c56:	02 c0       	rjmp	.+4      	; 0x2c5c <MCAL_UART_recieveByte_Non_Blocking+0x34>

	}
	/*
	 * Return a special value (e.g., 0xFF) to indicate no data available
	 */
	return  0xFF;
    2c58:	8f ef       	ldi	r24, 0xFF	; 255
    2c5a:	89 83       	std	Y+1, r24	; 0x01
    2c5c:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c5e:	0f 90       	pop	r0
    2c60:	cf 91       	pop	r28
    2c62:	df 91       	pop	r29
    2c64:	08 95       	ret

00002c66 <MCAL_UART_receiveString_Non_Block>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void MCAL_UART_receiveString_Non_Block(uint8 *str)
{
    2c66:	0f 93       	push	r16
    2c68:	1f 93       	push	r17
    2c6a:	df 93       	push	r29
    2c6c:	cf 93       	push	r28
    2c6e:	00 d0       	rcall	.+0      	; 0x2c70 <MCAL_UART_receiveString_Non_Block+0xa>
    2c70:	0f 92       	push	r0
    2c72:	cd b7       	in	r28, 0x3d	; 61
    2c74:	de b7       	in	r29, 0x3e	; 62
    2c76:	9b 83       	std	Y+3, r25	; 0x03
    2c78:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c7a:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	str[i] = MCAL_UART_recieveByte_Blocking();
    2c7c:	89 81       	ldd	r24, Y+1	; 0x01
    2c7e:	28 2f       	mov	r18, r24
    2c80:	30 e0       	ldi	r19, 0x00	; 0
    2c82:	8a 81       	ldd	r24, Y+2	; 0x02
    2c84:	9b 81       	ldd	r25, Y+3	; 0x03
    2c86:	8c 01       	movw	r16, r24
    2c88:	02 0f       	add	r16, r18
    2c8a:	13 1f       	adc	r17, r19
    2c8c:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <MCAL_UART_recieveByte_Blocking>
    2c90:	f8 01       	movw	r30, r16
    2c92:	80 83       	st	Z, r24
    2c94:	0f c0       	rjmp	.+30     	; 0x2cb4 <MCAL_UART_receiveString_Non_Block+0x4e>

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
	{
		i++;
    2c96:	89 81       	ldd	r24, Y+1	; 0x01
    2c98:	8f 5f       	subi	r24, 0xFF	; 255
    2c9a:	89 83       	std	Y+1, r24	; 0x01
		str[i] = MCAL_UART_recieveByte_Blocking();
    2c9c:	89 81       	ldd	r24, Y+1	; 0x01
    2c9e:	28 2f       	mov	r18, r24
    2ca0:	30 e0       	ldi	r19, 0x00	; 0
    2ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ca4:	9b 81       	ldd	r25, Y+3	; 0x03
    2ca6:	8c 01       	movw	r16, r24
    2ca8:	02 0f       	add	r16, r18
    2caa:	13 1f       	adc	r17, r19
    2cac:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <MCAL_UART_recieveByte_Blocking>
    2cb0:	f8 01       	movw	r30, r16
    2cb2:	80 83       	st	Z, r24

	/* Receive the first byte */
	str[i] = MCAL_UART_recieveByte_Blocking();

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
    2cb4:	89 81       	ldd	r24, Y+1	; 0x01
    2cb6:	28 2f       	mov	r18, r24
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	8a 81       	ldd	r24, Y+2	; 0x02
    2cbc:	9b 81       	ldd	r25, Y+3	; 0x03
    2cbe:	fc 01       	movw	r30, r24
    2cc0:	e2 0f       	add	r30, r18
    2cc2:	f3 1f       	adc	r31, r19
    2cc4:	80 81       	ld	r24, Z
    2cc6:	83 32       	cpi	r24, 0x23	; 35
    2cc8:	31 f7       	brne	.-52     	; 0x2c96 <MCAL_UART_receiveString_Non_Block+0x30>
		i++;
		str[i] = MCAL_UART_recieveByte_Blocking();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	str[i] = '\0';
    2cca:	89 81       	ldd	r24, Y+1	; 0x01
    2ccc:	28 2f       	mov	r18, r24
    2cce:	30 e0       	ldi	r19, 0x00	; 0
    2cd0:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd2:	9b 81       	ldd	r25, Y+3	; 0x03
    2cd4:	fc 01       	movw	r30, r24
    2cd6:	e2 0f       	add	r30, r18
    2cd8:	f3 1f       	adc	r31, r19
    2cda:	10 82       	st	Z, r1

}
    2cdc:	0f 90       	pop	r0
    2cde:	0f 90       	pop	r0
    2ce0:	0f 90       	pop	r0
    2ce2:	cf 91       	pop	r28
    2ce4:	df 91       	pop	r29
    2ce6:	1f 91       	pop	r17
    2ce8:	0f 91       	pop	r16
    2cea:	08 95       	ret

00002cec <MCAL_UART_receiveString_Polling>:


void MCAL_UART_receiveString_Polling(uint8 *str)
{
    2cec:	0f 93       	push	r16
    2cee:	1f 93       	push	r17
    2cf0:	df 93       	push	r29
    2cf2:	cf 93       	push	r28
    2cf4:	00 d0       	rcall	.+0      	; 0x2cf6 <MCAL_UART_receiveString_Polling+0xa>
    2cf6:	0f 92       	push	r0
    2cf8:	cd b7       	in	r28, 0x3d	; 61
    2cfa:	de b7       	in	r29, 0x3e	; 62
    2cfc:	9b 83       	std	Y+3, r25	; 0x03
    2cfe:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2d00:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	str[i] = MCAL_UART_recieveByte_Blocking();
    2d02:	89 81       	ldd	r24, Y+1	; 0x01
    2d04:	28 2f       	mov	r18, r24
    2d06:	30 e0       	ldi	r19, 0x00	; 0
    2d08:	8a 81       	ldd	r24, Y+2	; 0x02
    2d0a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d0c:	8c 01       	movw	r16, r24
    2d0e:	02 0f       	add	r16, r18
    2d10:	13 1f       	adc	r17, r19
    2d12:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <MCAL_UART_recieveByte_Blocking>
    2d16:	f8 01       	movw	r30, r16
    2d18:	80 83       	st	Z, r24
    2d1a:	0f c0       	rjmp	.+30     	; 0x2d3a <MCAL_UART_receiveString_Polling+0x4e>

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
	{
		i++;
    2d1c:	89 81       	ldd	r24, Y+1	; 0x01
    2d1e:	8f 5f       	subi	r24, 0xFF	; 255
    2d20:	89 83       	std	Y+1, r24	; 0x01
		str[i] = MCAL_UART_recieveByte_Blocking();
    2d22:	89 81       	ldd	r24, Y+1	; 0x01
    2d24:	28 2f       	mov	r18, r24
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	8a 81       	ldd	r24, Y+2	; 0x02
    2d2a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d2c:	8c 01       	movw	r16, r24
    2d2e:	02 0f       	add	r16, r18
    2d30:	13 1f       	adc	r17, r19
    2d32:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <MCAL_UART_recieveByte_Blocking>
    2d36:	f8 01       	movw	r30, r16
    2d38:	80 83       	st	Z, r24

	/* Receive the first byte */
	str[i] = MCAL_UART_recieveByte_Blocking();

	/* Receive the whole string until the '#' */
	while(str[i] != '#')
    2d3a:	89 81       	ldd	r24, Y+1	; 0x01
    2d3c:	28 2f       	mov	r18, r24
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	8a 81       	ldd	r24, Y+2	; 0x02
    2d42:	9b 81       	ldd	r25, Y+3	; 0x03
    2d44:	fc 01       	movw	r30, r24
    2d46:	e2 0f       	add	r30, r18
    2d48:	f3 1f       	adc	r31, r19
    2d4a:	80 81       	ld	r24, Z
    2d4c:	83 32       	cpi	r24, 0x23	; 35
    2d4e:	31 f7       	brne	.-52     	; 0x2d1c <MCAL_UART_receiveString_Polling+0x30>
		i++;
		str[i] = MCAL_UART_recieveByte_Blocking();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	str[i] = '\0';
    2d50:	89 81       	ldd	r24, Y+1	; 0x01
    2d52:	28 2f       	mov	r18, r24
    2d54:	30 e0       	ldi	r19, 0x00	; 0
    2d56:	8a 81       	ldd	r24, Y+2	; 0x02
    2d58:	9b 81       	ldd	r25, Y+3	; 0x03
    2d5a:	fc 01       	movw	r30, r24
    2d5c:	e2 0f       	add	r30, r18
    2d5e:	f3 1f       	adc	r31, r19
    2d60:	10 82       	st	Z, r1


}
    2d62:	0f 90       	pop	r0
    2d64:	0f 90       	pop	r0
    2d66:	0f 90       	pop	r0
    2d68:	cf 91       	pop	r28
    2d6a:	df 91       	pop	r29
    2d6c:	1f 91       	pop	r17
    2d6e:	0f 91       	pop	r16
    2d70:	08 95       	ret

00002d72 <MCAL_UART_receiveByteAsynchCallBack>:




void MCAL_UART_receiveByteAsynchCallBack(void(*fnptr)(uint8 data))
{
    2d72:	df 93       	push	r29
    2d74:	cf 93       	push	r28
    2d76:	00 d0       	rcall	.+0      	; 0x2d78 <MCAL_UART_receiveByteAsynchCallBack+0x6>
    2d78:	cd b7       	in	r28, 0x3d	; 61
    2d7a:	de b7       	in	r29, 0x3e	; 62
    2d7c:	9a 83       	std	Y+2, r25	; 0x02
    2d7e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UART_BASE->UCSRB_t.Reg,RXCIE);
    2d80:	a9 e2       	ldi	r26, 0x29	; 41
    2d82:	b0 e0       	ldi	r27, 0x00	; 0
    2d84:	e9 e2       	ldi	r30, 0x29	; 41
    2d86:	f0 e0       	ldi	r31, 0x00	; 0
    2d88:	81 81       	ldd	r24, Z+1	; 0x01
    2d8a:	80 68       	ori	r24, 0x80	; 128
    2d8c:	11 96       	adiw	r26, 0x01	; 1
    2d8e:	8c 93       	st	X, r24
    2d90:	11 97       	sbiw	r26, 0x01	; 1
	Uart_CallBack = fnptr;
    2d92:	89 81       	ldd	r24, Y+1	; 0x01
    2d94:	9a 81       	ldd	r25, Y+2	; 0x02
    2d96:	90 93 e5 01 	sts	0x01E5, r25
    2d9a:	80 93 e4 01 	sts	0x01E4, r24

}
    2d9e:	0f 90       	pop	r0
    2da0:	0f 90       	pop	r0
    2da2:	cf 91       	pop	r28
    2da4:	df 91       	pop	r29
    2da6:	08 95       	ret

00002da8 <WDT_Enable>:

#include "WDT_Private.h"
#include "WDT_Interface.h"

void WDT_Enable(void)
{
    2da8:	df 93       	push	r29
    2daa:	cf 93       	push	r28
    2dac:	cd b7       	in	r28, 0x3d	; 61
    2dae:	de b7       	in	r29, 0x3e	; 62
	/* Write logical one to WDTOE and WDE */
	WDTCR_REG = (1<<WDTOE) | (1<<WDE);
    2db0:	e1 e4       	ldi	r30, 0x41	; 65
    2db2:	f0 e0       	ldi	r31, 0x00	; 0
    2db4:	88 e1       	ldi	r24, 0x18	; 24
    2db6:	80 83       	st	Z, r24

}
    2db8:	cf 91       	pop	r28
    2dba:	df 91       	pop	r29
    2dbc:	08 95       	ret

00002dbe <WDT_Disable>:
void WDT_Disable()
{
    2dbe:	df 93       	push	r29
    2dc0:	cf 93       	push	r28
    2dc2:	cd b7       	in	r28, 0x3d	; 61
    2dc4:	de b7       	in	r29, 0x3e	; 62
	/* Write logical one to WDTOE and WDE */
	WDTCR_REG |= (1<<WDTOE) | (1<<WDE);
    2dc6:	a1 e4       	ldi	r26, 0x41	; 65
    2dc8:	b0 e0       	ldi	r27, 0x00	; 0
    2dca:	e1 e4       	ldi	r30, 0x41	; 65
    2dcc:	f0 e0       	ldi	r31, 0x00	; 0
    2dce:	80 81       	ld	r24, Z
    2dd0:	88 61       	ori	r24, 0x18	; 24
    2dd2:	8c 93       	st	X, r24
	/* Turn off WDT */
	WDTCR_REG = 0x00;
    2dd4:	e1 e4       	ldi	r30, 0x41	; 65
    2dd6:	f0 e0       	ldi	r31, 0x00	; 0
    2dd8:	10 82       	st	Z, r1
}
    2dda:	cf 91       	pop	r28
    2ddc:	df 91       	pop	r29
    2dde:	08 95       	ret

00002de0 <WDT_sleep>:

void WDT_sleep(Time_out sleepTime)
{
    2de0:	df 93       	push	r29
    2de2:	cf 93       	push	r28
    2de4:	0f 92       	push	r0
    2de6:	cd b7       	in	r28, 0x3d	; 61
    2de8:	de b7       	in	r29, 0x3e	; 62
    2dea:	89 83       	std	Y+1, r24	; 0x01
	WDTCR_REG |= sleepTime;
    2dec:	a1 e4       	ldi	r26, 0x41	; 65
    2dee:	b0 e0       	ldi	r27, 0x00	; 0
    2df0:	e1 e4       	ldi	r30, 0x41	; 65
    2df2:	f0 e0       	ldi	r31, 0x00	; 0
    2df4:	90 81       	ld	r25, Z
    2df6:	89 81       	ldd	r24, Y+1	; 0x01
    2df8:	89 2b       	or	r24, r25
    2dfa:	8c 93       	st	X, r24
}
    2dfc:	0f 90       	pop	r0
    2dfe:	cf 91       	pop	r28
    2e00:	df 91       	pop	r29
    2e02:	08 95       	ret

00002e04 <WDT_refresh>:
void WDT_refresh()
{
    2e04:	df 93       	push	r29
    2e06:	cf 93       	push	r28
    2e08:	cd b7       	in	r28, 0x3d	; 61
    2e0a:	de b7       	in	r29, 0x3e	; 62
	asm("WDR");
    2e0c:	a8 95       	wdr
}
    2e0e:	cf 91       	pop	r28
    2e10:	df 91       	pop	r29
    2e12:	08 95       	ret

00002e14 <Button_Init>:




void Button_Init(Port_Def* GPIOx,Pin_ID_t pin)
{
    2e14:	df 93       	push	r29
    2e16:	cf 93       	push	r28
    2e18:	00 d0       	rcall	.+0      	; 0x2e1a <Button_Init+0x6>
    2e1a:	0f 92       	push	r0
    2e1c:	cd b7       	in	r28, 0x3d	; 61
    2e1e:	de b7       	in	r29, 0x3e	; 62
    2e20:	9a 83       	std	Y+2, r25	; 0x02
    2e22:	89 83       	std	Y+1, r24	; 0x01
    2e24:	6b 83       	std	Y+3, r22	; 0x03
	DIO_voidSetPinDirection(GPIOx, pin, PIN_INPUT);
    2e26:	89 81       	ldd	r24, Y+1	; 0x01
    2e28:	9a 81       	ldd	r25, Y+2	; 0x02
    2e2a:	6b 81       	ldd	r22, Y+3	; 0x03
    2e2c:	40 e0       	ldi	r20, 0x00	; 0
    2e2e:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>
}
    2e32:	0f 90       	pop	r0
    2e34:	0f 90       	pop	r0
    2e36:	0f 90       	pop	r0
    2e38:	cf 91       	pop	r28
    2e3a:	df 91       	pop	r29
    2e3c:	08 95       	ret

00002e3e <Single_press>:



Key_status Single_press(Port_Def* GPIOx, Pin_ID_t pin)
{
    2e3e:	df 93       	push	r29
    2e40:	cf 93       	push	r28
    2e42:	cd b7       	in	r28, 0x3d	; 61
    2e44:	de b7       	in	r29, 0x3e	; 62
    2e46:	62 97       	sbiw	r28, 0x12	; 18
    2e48:	0f b6       	in	r0, 0x3f	; 63
    2e4a:	f8 94       	cli
    2e4c:	de bf       	out	0x3e, r29	; 62
    2e4e:	0f be       	out	0x3f, r0	; 63
    2e50:	cd bf       	out	0x3d, r28	; 61
    2e52:	98 8b       	std	Y+16, r25	; 0x10
    2e54:	8f 87       	std	Y+15, r24	; 0x0f
    2e56:	69 8b       	std	Y+17, r22	; 0x11
	DIO_voidSetPinDirection(GPIOx, pin, PIN_INPUT);
    2e58:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e5a:	98 89       	ldd	r25, Y+16	; 0x10
    2e5c:	69 89       	ldd	r22, Y+17	; 0x11
    2e5e:	40 e0       	ldi	r20, 0x00	; 0
    2e60:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>
	static uint8 flag ;
	if(!DIO_voidGetPinValue(GPIOx, pin))
    2e64:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e66:	98 89       	ldd	r25, Y+16	; 0x10
    2e68:	69 89       	ldd	r22, Y+17	; 0x11
    2e6a:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_voidGetPinValue>
    2e6e:	88 23       	and	r24, r24
    2e70:	09 f0       	breq	.+2      	; 0x2e74 <Single_press+0x36>
    2e72:	83 c0       	rjmp	.+262    	; 0x2f7a <Single_press+0x13c>
    2e74:	80 e0       	ldi	r24, 0x00	; 0
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	a8 e4       	ldi	r26, 0x48	; 72
    2e7a:	b2 e4       	ldi	r27, 0x42	; 66
    2e7c:	8b 87       	std	Y+11, r24	; 0x0b
    2e7e:	9c 87       	std	Y+12, r25	; 0x0c
    2e80:	ad 87       	std	Y+13, r26	; 0x0d
    2e82:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e84:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e86:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e88:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e8a:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e8c:	20 e0       	ldi	r18, 0x00	; 0
    2e8e:	30 e0       	ldi	r19, 0x00	; 0
    2e90:	4a e7       	ldi	r20, 0x7A	; 122
    2e92:	55 e4       	ldi	r21, 0x45	; 69
    2e94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e98:	dc 01       	movw	r26, r24
    2e9a:	cb 01       	movw	r24, r22
    2e9c:	8f 83       	std	Y+7, r24	; 0x07
    2e9e:	98 87       	std	Y+8, r25	; 0x08
    2ea0:	a9 87       	std	Y+9, r26	; 0x09
    2ea2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ea4:	6f 81       	ldd	r22, Y+7	; 0x07
    2ea6:	78 85       	ldd	r23, Y+8	; 0x08
    2ea8:	89 85       	ldd	r24, Y+9	; 0x09
    2eaa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2eac:	20 e0       	ldi	r18, 0x00	; 0
    2eae:	30 e0       	ldi	r19, 0x00	; 0
    2eb0:	40 e8       	ldi	r20, 0x80	; 128
    2eb2:	5f e3       	ldi	r21, 0x3F	; 63
    2eb4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eb8:	88 23       	and	r24, r24
    2eba:	2c f4       	brge	.+10     	; 0x2ec6 <Single_press+0x88>
		__ticks = 1;
    2ebc:	81 e0       	ldi	r24, 0x01	; 1
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	9e 83       	std	Y+6, r25	; 0x06
    2ec2:	8d 83       	std	Y+5, r24	; 0x05
    2ec4:	3f c0       	rjmp	.+126    	; 0x2f44 <Single_press+0x106>
	else if (__tmp > 65535)
    2ec6:	6f 81       	ldd	r22, Y+7	; 0x07
    2ec8:	78 85       	ldd	r23, Y+8	; 0x08
    2eca:	89 85       	ldd	r24, Y+9	; 0x09
    2ecc:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ece:	20 e0       	ldi	r18, 0x00	; 0
    2ed0:	3f ef       	ldi	r19, 0xFF	; 255
    2ed2:	4f e7       	ldi	r20, 0x7F	; 127
    2ed4:	57 e4       	ldi	r21, 0x47	; 71
    2ed6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2eda:	18 16       	cp	r1, r24
    2edc:	4c f5       	brge	.+82     	; 0x2f30 <Single_press+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ede:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ee0:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ee2:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ee4:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ee6:	20 e0       	ldi	r18, 0x00	; 0
    2ee8:	30 e0       	ldi	r19, 0x00	; 0
    2eea:	40 e2       	ldi	r20, 0x20	; 32
    2eec:	51 e4       	ldi	r21, 0x41	; 65
    2eee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	bc 01       	movw	r22, r24
    2ef8:	cd 01       	movw	r24, r26
    2efa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2efe:	dc 01       	movw	r26, r24
    2f00:	cb 01       	movw	r24, r22
    2f02:	9e 83       	std	Y+6, r25	; 0x06
    2f04:	8d 83       	std	Y+5, r24	; 0x05
    2f06:	0f c0       	rjmp	.+30     	; 0x2f26 <Single_press+0xe8>
    2f08:	80 e9       	ldi	r24, 0x90	; 144
    2f0a:	91 e0       	ldi	r25, 0x01	; 1
    2f0c:	9c 83       	std	Y+4, r25	; 0x04
    2f0e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f10:	8b 81       	ldd	r24, Y+3	; 0x03
    2f12:	9c 81       	ldd	r25, Y+4	; 0x04
    2f14:	01 97       	sbiw	r24, 0x01	; 1
    2f16:	f1 f7       	brne	.-4      	; 0x2f14 <Single_press+0xd6>
    2f18:	9c 83       	std	Y+4, r25	; 0x04
    2f1a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f1c:	8d 81       	ldd	r24, Y+5	; 0x05
    2f1e:	9e 81       	ldd	r25, Y+6	; 0x06
    2f20:	01 97       	sbiw	r24, 0x01	; 1
    2f22:	9e 83       	std	Y+6, r25	; 0x06
    2f24:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f26:	8d 81       	ldd	r24, Y+5	; 0x05
    2f28:	9e 81       	ldd	r25, Y+6	; 0x06
    2f2a:	00 97       	sbiw	r24, 0x00	; 0
    2f2c:	69 f7       	brne	.-38     	; 0x2f08 <Single_press+0xca>
    2f2e:	14 c0       	rjmp	.+40     	; 0x2f58 <Single_press+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f30:	6f 81       	ldd	r22, Y+7	; 0x07
    2f32:	78 85       	ldd	r23, Y+8	; 0x08
    2f34:	89 85       	ldd	r24, Y+9	; 0x09
    2f36:	9a 85       	ldd	r25, Y+10	; 0x0a
    2f38:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f3c:	dc 01       	movw	r26, r24
    2f3e:	cb 01       	movw	r24, r22
    2f40:	9e 83       	std	Y+6, r25	; 0x06
    2f42:	8d 83       	std	Y+5, r24	; 0x05
    2f44:	8d 81       	ldd	r24, Y+5	; 0x05
    2f46:	9e 81       	ldd	r25, Y+6	; 0x06
    2f48:	9a 83       	std	Y+2, r25	; 0x02
    2f4a:	89 83       	std	Y+1, r24	; 0x01
    2f4c:	89 81       	ldd	r24, Y+1	; 0x01
    2f4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f50:	01 97       	sbiw	r24, 0x01	; 1
    2f52:	f1 f7       	brne	.-4      	; 0x2f50 <Single_press+0x112>
    2f54:	9a 83       	std	Y+2, r25	; 0x02
    2f56:	89 83       	std	Y+1, r24	; 0x01
	{

		_delay_ms(50);
		if(!DIO_voidGetPinValue(GPIOx, pin))
    2f58:	8f 85       	ldd	r24, Y+15	; 0x0f
    2f5a:	98 89       	ldd	r25, Y+16	; 0x10
    2f5c:	69 89       	ldd	r22, Y+17	; 0x11
    2f5e:	0e 94 b3 09 	call	0x1366	; 0x1366 <DIO_voidGetPinValue>
    2f62:	88 23       	and	r24, r24
    2f64:	61 f4       	brne	.+24     	; 0x2f7e <Single_press+0x140>
		{
			if(flag == 0)
    2f66:	80 91 e6 01 	lds	r24, 0x01E6
    2f6a:	88 23       	and	r24, r24
    2f6c:	41 f4       	brne	.+16     	; 0x2f7e <Single_press+0x140>
			{
				flag = 1;
    2f6e:	81 e0       	ldi	r24, 0x01	; 1
    2f70:	80 93 e6 01 	sts	0x01E6, r24
				return pressed;
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	8a 8b       	std	Y+18, r24	; 0x12
    2f78:	03 c0       	rjmp	.+6      	; 0x2f80 <Single_press+0x142>
		}

	}
	else
	{
		flag = 0;
    2f7a:	10 92 e6 01 	sts	0x01E6, r1
	}

	return released;
    2f7e:	1a 8a       	std	Y+18, r1	; 0x12
    2f80:	8a 89       	ldd	r24, Y+18	; 0x12
}
    2f82:	62 96       	adiw	r28, 0x12	; 18
    2f84:	0f b6       	in	r0, 0x3f	; 63
    2f86:	f8 94       	cli
    2f88:	de bf       	out	0x3e, r29	; 62
    2f8a:	0f be       	out	0x3f, r0	; 63
    2f8c:	cd bf       	out	0x3d, r28	; 61
    2f8e:	cf 91       	pop	r28
    2f90:	df 91       	pop	r29
    2f92:	08 95       	ret

00002f94 <DcMotor_Init>:
/*******************************************************************************
 *                         Function Definitions                                *
 *******************************************************************************/

void DcMotor_Init(void)
{
    2f94:	df 93       	push	r29
    2f96:	cf 93       	push	r28
    2f98:	cd b7       	in	r28, 0x3d	; 61
    2f9a:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPinDirection(DC_MOTOR_PORT_ID, DC_MOTOR_PIN_IN1, Pin_OUTPUT);
    2f9c:	89 e3       	ldi	r24, 0x39	; 57
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	65 e0       	ldi	r22, 0x05	; 5
    2fa2:	41 e0       	ldi	r20, 0x01	; 1
    2fa4:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(DC_MOTOR_PORT_ID ,DC_MOTOR_PIN_IN2 ,Pin_OUTPUT);
    2fa8:	89 e3       	ldi	r24, 0x39	; 57
    2faa:	90 e0       	ldi	r25, 0x00	; 0
    2fac:	66 e0       	ldi	r22, 0x06	; 6
    2fae:	41 e0       	ldi	r20, 0x01	; 1
    2fb0:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(DC_MOTOR_PORT_ID ,DC_MOTOR_PIN_IN1,LOGIC_LOW);
    2fb4:	89 e3       	ldi	r24, 0x39	; 57
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	65 e0       	ldi	r22, 0x05	; 5
    2fba:	40 e0       	ldi	r20, 0x00	; 0
    2fbc:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(DC_MOTOR_PORT_ID ,DC_MOTOR_PIN_IN2 ,LOGIC_LOW);
    2fc0:	89 e3       	ldi	r24, 0x39	; 57
    2fc2:	90 e0       	ldi	r25, 0x00	; 0
    2fc4:	66 e0       	ldi	r22, 0x06	; 6
    2fc6:	40 e0       	ldi	r20, 0x00	; 0
    2fc8:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
}
    2fcc:	cf 91       	pop	r28
    2fce:	df 91       	pop	r29
    2fd0:	08 95       	ret

00002fd2 <DcMotor_Rotate>:

void DcMotor_Rotate(DcMotor_State state,uint8 DUTY)
{
    2fd2:	df 93       	push	r29
    2fd4:	cf 93       	push	r28
    2fd6:	cd b7       	in	r28, 0x3d	; 61
    2fd8:	de b7       	in	r29, 0x3e	; 62
    2fda:	2b 97       	sbiw	r28, 0x0b	; 11
    2fdc:	0f b6       	in	r0, 0x3f	; 63
    2fde:	f8 94       	cli
    2fe0:	de bf       	out	0x3e, r29	; 62
    2fe2:	0f be       	out	0x3f, r0	; 63
    2fe4:	cd bf       	out	0x3d, r28	; 61
    2fe6:	88 87       	std	Y+8, r24	; 0x08
    2fe8:	69 87       	std	Y+9, r22	; 0x09
	Timer_Config timer = {TIMER0_FAST_PWM,F_CPU_1024_,Inverting};
    2fea:	87 e0       	ldi	r24, 0x07	; 7
    2fec:	fe 01       	movw	r30, r28
    2fee:	31 96       	adiw	r30, 0x01	; 1
    2ff0:	df 01       	movw	r26, r30
    2ff2:	28 2f       	mov	r18, r24
    2ff4:	1d 92       	st	X+, r1
    2ff6:	2a 95       	dec	r18
    2ff8:	e9 f7       	brne	.-6      	; 0x2ff4 <DcMotor_Rotate+0x22>
    2ffa:	83 e0       	ldi	r24, 0x03	; 3
    2ffc:	89 83       	std	Y+1, r24	; 0x01
    2ffe:	85 e0       	ldi	r24, 0x05	; 5
    3000:	8a 83       	std	Y+2, r24	; 0x02
    3002:	83 e0       	ldi	r24, 0x03	; 3
    3004:	8b 83       	std	Y+3, r24	; 0x03
	Timer_Init(&timer);
    3006:	ce 01       	movw	r24, r28
    3008:	01 96       	adiw	r24, 0x01	; 1
    300a:	0e 94 63 12 	call	0x24c6	; 0x24c6 <Timer_Init>

	DIO_voidSetPinDirection(GPIOB_BASE,PIN3_ID,Pin_OUTPUT);
    300e:	86 e3       	ldi	r24, 0x36	; 54
    3010:	90 e0       	ldi	r25, 0x00	; 0
    3012:	63 e0       	ldi	r22, 0x03	; 3
    3014:	41 e0       	ldi	r20, 0x01	; 1
    3016:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>

	setFastPWM(DUTY,Inverting);
    301a:	89 85       	ldd	r24, Y+9	; 0x09
    301c:	63 e0       	ldi	r22, 0x03	; 3
    301e:	0e 94 f3 13 	call	0x27e6	; 0x27e6 <setFastPWM>
//	setphaseCorrectPWM(DUTY);

	switch(state)
    3022:	88 85       	ldd	r24, Y+8	; 0x08
    3024:	a8 2f       	mov	r26, r24
    3026:	b0 e0       	ldi	r27, 0x00	; 0
    3028:	bb 87       	std	Y+11, r27	; 0x0b
    302a:	aa 87       	std	Y+10, r26	; 0x0a
    302c:	2a 85       	ldd	r18, Y+10	; 0x0a
    302e:	3b 85       	ldd	r19, Y+11	; 0x0b
    3030:	21 30       	cpi	r18, 0x01	; 1
    3032:	31 05       	cpc	r19, r1
    3034:	b1 f0       	breq	.+44     	; 0x3062 <DcMotor_Rotate+0x90>
    3036:	8a 85       	ldd	r24, Y+10	; 0x0a
    3038:	9b 85       	ldd	r25, Y+11	; 0x0b
    303a:	82 30       	cpi	r24, 0x02	; 2
    303c:	91 05       	cpc	r25, r1
    303e:	f1 f0       	breq	.+60     	; 0x307c <DcMotor_Rotate+0xaa>
    3040:	aa 85       	ldd	r26, Y+10	; 0x0a
    3042:	bb 85       	ldd	r27, Y+11	; 0x0b
    3044:	10 97       	sbiw	r26, 0x00	; 0
    3046:	31 f5       	brne	.+76     	; 0x3094 <DcMotor_Rotate+0xc2>
	{
	case Stop:
		// Stop the motor
		DIO_voidSetPinValue(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN1,LOGIC_LOW);
    3048:	89 e3       	ldi	r24, 0x39	; 57
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	65 e0       	ldi	r22, 0x05	; 5
    304e:	40 e0       	ldi	r20, 0x00	; 0
    3050:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN2,LOGIC_LOW);
    3054:	89 e3       	ldi	r24, 0x39	; 57
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	66 e0       	ldi	r22, 0x06	; 6
    305a:	40 e0       	ldi	r20, 0x00	; 0
    305c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    3060:	19 c0       	rjmp	.+50     	; 0x3094 <DcMotor_Rotate+0xc2>
		break;
	case CW:
		// Rotate the motor --> clock wise
		DIO_voidSetPinValue(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN1,LOGIC_HIGH);
    3062:	89 e3       	ldi	r24, 0x39	; 57
    3064:	90 e0       	ldi	r25, 0x00	; 0
    3066:	65 e0       	ldi	r22, 0x05	; 5
    3068:	41 e0       	ldi	r20, 0x01	; 1
    306a:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN2,LOGIC_LOW);
    306e:	89 e3       	ldi	r24, 0x39	; 57
    3070:	90 e0       	ldi	r25, 0x00	; 0
    3072:	66 e0       	ldi	r22, 0x06	; 6
    3074:	40 e0       	ldi	r20, 0x00	; 0
    3076:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    307a:	0c c0       	rjmp	.+24     	; 0x3094 <DcMotor_Rotate+0xc2>
		break;
	case CCW:
		// Rotate the motor --> anti-clock wise
		DIO_voidSetPinValue(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN1,LOGIC_LOW);
    307c:	89 e3       	ldi	r24, 0x39	; 57
    307e:	90 e0       	ldi	r25, 0x00	; 0
    3080:	65 e0       	ldi	r22, 0x05	; 5
    3082:	40 e0       	ldi	r20, 0x00	; 0
    3084:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(DC_MOTOR_PORT_ID,DC_MOTOR_PIN_IN2,LOGIC_HIGH);
    3088:	89 e3       	ldi	r24, 0x39	; 57
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	66 e0       	ldi	r22, 0x06	; 6
    308e:	41 e0       	ldi	r20, 0x01	; 1
    3090:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		break;
	}
}
    3094:	2b 96       	adiw	r28, 0x0b	; 11
    3096:	0f b6       	in	r0, 0x3f	; 63
    3098:	f8 94       	cli
    309a:	de bf       	out	0x3e, r29	; 62
    309c:	0f be       	out	0x3f, r0	; 63
    309e:	cd bf       	out	0x3d, r28	; 61
    30a0:	cf 91       	pop	r28
    30a2:	df 91       	pop	r29
    30a4:	08 95       	ret

000030a6 <FUNC_RX>:
#include "FingerPrint_Private.h"
volatile uint8 Frame_Received[60];
volatile static uint8 index= 0;

static void FUNC_RX(void)
{
    30a6:	0f 93       	push	r16
    30a8:	1f 93       	push	r17
    30aa:	df 93       	push	r29
    30ac:	cf 93       	push	r28
    30ae:	cd b7       	in	r28, 0x3d	; 61
    30b0:	de b7       	in	r29, 0x3e	; 62
	Frame_Received[index] = MCAL_UART_recieveByte_Blocking();
    30b2:	80 91 e7 01 	lds	r24, 0x01E7
    30b6:	08 2f       	mov	r16, r24
    30b8:	10 e0       	ldi	r17, 0x00	; 0
    30ba:	0e 94 fc 15 	call	0x2bf8	; 0x2bf8 <MCAL_UART_recieveByte_Blocking>
    30be:	f8 01       	movw	r30, r16
    30c0:	ed 5f       	subi	r30, 0xFD	; 253
    30c2:	fd 4f       	sbci	r31, 0xFD	; 253
    30c4:	80 83       	st	Z, r24
	index++;
    30c6:	80 91 e7 01 	lds	r24, 0x01E7
    30ca:	8f 5f       	subi	r24, 0xFF	; 255
    30cc:	80 93 e7 01 	sts	0x01E7, r24
}
    30d0:	cf 91       	pop	r28
    30d2:	df 91       	pop	r29
    30d4:	1f 91       	pop	r17
    30d6:	0f 91       	pop	r16
    30d8:	08 95       	ret

000030da <FingerPS_Init>:

Error_FingerPS_t FingerPS_Init(void)
{
    30da:	df 93       	push	r29
    30dc:	cf 93       	push	r28
    30de:	0f 92       	push	r0
    30e0:	cd b7       	in	r28, 0x3d	; 61
    30e2:	de b7       	in	r29, 0x3e	; 62
	Error_FingerPS_t ret= FAILED_TO_OPERATE_COMM_PORT;
    30e4:	8d e1       	ldi	r24, 0x1D	; 29
    30e6:	89 83       	std	Y+1, r24	; 0x01
	MCAL_UART_receiveByteAsynchCallBack(FUNC_RX);
    30e8:	83 e5       	ldi	r24, 0x53	; 83
    30ea:	98 e1       	ldi	r25, 0x18	; 24
    30ec:	0e 94 b9 16 	call	0x2d72	; 0x2d72 <MCAL_UART_receiveByteAsynchCallBack>

	return ret;
    30f0:	89 81       	ldd	r24, Y+1	; 0x01
}
    30f2:	0f 90       	pop	r0
    30f4:	cf 91       	pop	r28
    30f6:	df 91       	pop	r29
    30f8:	08 95       	ret

000030fa <FingerPS_AuraLedControl>:


Error_FingerPS_t FingerPS_AuraLedControl(AuraLightControl_t l_code, uint8 l_speed, AuraColorControl_t l_color, uint8 l_count)
{
    30fa:	df 93       	push	r29
    30fc:	cf 93       	push	r28
    30fe:	cd b7       	in	r28, 0x3d	; 61
    3100:	de b7       	in	r29, 0x3e	; 62
    3102:	68 97       	sbiw	r28, 0x18	; 24
    3104:	0f b6       	in	r0, 0x3f	; 63
    3106:	f8 94       	cli
    3108:	de bf       	out	0x3e, r29	; 62
    310a:	0f be       	out	0x3f, r0	; 63
    310c:	cd bf       	out	0x3d, r28	; 61
    310e:	8d 8b       	std	Y+21, r24	; 0x15
    3110:	6e 8b       	std	Y+22, r22	; 0x16
    3112:	4f 8b       	std	Y+23, r20	; 0x17
    3114:	28 8f       	std	Y+24, r18	; 0x18
	Error_FingerPS_t ret= FAILED_TO_OPERATE_COMM_PORT;
    3116:	8d e1       	ldi	r24, 0x1D	; 29
    3118:	8c 83       	std	Y+4, r24	; 0x04

	uint8 i;
	uint8 Frame_TX[16]= {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x07, 0x35, l_code, l_speed, l_color, l_count, 0x00, 0x00};
    311a:	8f ee       	ldi	r24, 0xEF	; 239
    311c:	8d 83       	std	Y+5, r24	; 0x05
    311e:	81 e0       	ldi	r24, 0x01	; 1
    3120:	8e 83       	std	Y+6, r24	; 0x06
    3122:	8f ef       	ldi	r24, 0xFF	; 255
    3124:	8f 83       	std	Y+7, r24	; 0x07
    3126:	8f ef       	ldi	r24, 0xFF	; 255
    3128:	88 87       	std	Y+8, r24	; 0x08
    312a:	8f ef       	ldi	r24, 0xFF	; 255
    312c:	89 87       	std	Y+9, r24	; 0x09
    312e:	8f ef       	ldi	r24, 0xFF	; 255
    3130:	8a 87       	std	Y+10, r24	; 0x0a
    3132:	81 e0       	ldi	r24, 0x01	; 1
    3134:	8b 87       	std	Y+11, r24	; 0x0b
    3136:	1c 86       	std	Y+12, r1	; 0x0c
    3138:	87 e0       	ldi	r24, 0x07	; 7
    313a:	8d 87       	std	Y+13, r24	; 0x0d
    313c:	85 e3       	ldi	r24, 0x35	; 53
    313e:	8e 87       	std	Y+14, r24	; 0x0e
    3140:	8d 89       	ldd	r24, Y+21	; 0x15
    3142:	8f 87       	std	Y+15, r24	; 0x0f
    3144:	8e 89       	ldd	r24, Y+22	; 0x16
    3146:	88 8b       	std	Y+16, r24	; 0x10
    3148:	8f 89       	ldd	r24, Y+23	; 0x17
    314a:	89 8b       	std	Y+17, r24	; 0x11
    314c:	88 8d       	ldd	r24, Y+24	; 0x18
    314e:	8a 8b       	std	Y+18, r24	; 0x12
    3150:	1b 8a       	std	Y+19, r1	; 0x13
    3152:	1c 8a       	std	Y+20, r1	; 0x14
	uint16 sum= 0;
    3154:	1a 82       	std	Y+2, r1	; 0x02
    3156:	19 82       	std	Y+1, r1	; 0x01

	sum= FingerPS_CalculateCheckSum(Frame_TX, 16);
    3158:	ce 01       	movw	r24, r28
    315a:	05 96       	adiw	r24, 0x05	; 5
    315c:	60 e1       	ldi	r22, 0x10	; 16
    315e:	0e 94 bf 1b 	call	0x377e	; 0x377e <FingerPS_CalculateCheckSum>
    3162:	9a 83       	std	Y+2, r25	; 0x02
    3164:	89 83       	std	Y+1, r24	; 0x01
	Frame_TX[14]= (uint8)(sum >> 8);
    3166:	89 81       	ldd	r24, Y+1	; 0x01
    3168:	9a 81       	ldd	r25, Y+2	; 0x02
    316a:	89 2f       	mov	r24, r25
    316c:	99 27       	eor	r25, r25
    316e:	8b 8b       	std	Y+19, r24	; 0x13
	Frame_TX[15]= (uint8)(sum & 0x00FF);
    3170:	89 81       	ldd	r24, Y+1	; 0x01
    3172:	8c 8b       	std	Y+20, r24	; 0x14

	/* Send Command Frame using UART Sync */
	for(i= 0; i<16; i++)
    3174:	1b 82       	std	Y+3, r1	; 0x03
    3176:	0e c0       	rjmp	.+28     	; 0x3194 <FingerPS_AuraLedControl+0x9a>
	{
		MCAL_UART_sendByte_Blocking(Frame_TX[i]);
    3178:	8b 81       	ldd	r24, Y+3	; 0x03
    317a:	28 2f       	mov	r18, r24
    317c:	30 e0       	ldi	r19, 0x00	; 0
    317e:	ce 01       	movw	r24, r28
    3180:	05 96       	adiw	r24, 0x05	; 5
    3182:	fc 01       	movw	r30, r24
    3184:	e2 0f       	add	r30, r18
    3186:	f3 1f       	adc	r31, r19
    3188:	80 81       	ld	r24, Z
    318a:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <MCAL_UART_sendByte_Blocking>
	sum= FingerPS_CalculateCheckSum(Frame_TX, 16);
	Frame_TX[14]= (uint8)(sum >> 8);
	Frame_TX[15]= (uint8)(sum & 0x00FF);

	/* Send Command Frame using UART Sync */
	for(i= 0; i<16; i++)
    318e:	8b 81       	ldd	r24, Y+3	; 0x03
    3190:	8f 5f       	subi	r24, 0xFF	; 255
    3192:	8b 83       	std	Y+3, r24	; 0x03
    3194:	8b 81       	ldd	r24, Y+3	; 0x03
    3196:	80 31       	cpi	r24, 0x10	; 16
    3198:	78 f3       	brcs	.-34     	; 0x3178 <FingerPS_AuraLedControl+0x7e>
	{
		MCAL_UART_sendByte_Blocking(Frame_TX[i]);
	}

	/* Wait till Receive ACK Frame (Using RX Interrupt) */
	while(index < 12);
    319a:	80 91 e7 01 	lds	r24, 0x01E7
    319e:	8c 30       	cpi	r24, 0x0C	; 12
    31a0:	e0 f3       	brcs	.-8      	; 0x319a <FingerPS_AuraLedControl+0xa0>
	ret= Frame_Received[9];
    31a2:	80 91 0c 02 	lds	r24, 0x020C
    31a6:	8c 83       	std	Y+4, r24	; 0x04
	index= 0;
    31a8:	10 92 e7 01 	sts	0x01E7, r1

	return ret;
    31ac:	8c 81       	ldd	r24, Y+4	; 0x04
}
    31ae:	68 96       	adiw	r28, 0x18	; 24
    31b0:	0f b6       	in	r0, 0x3f	; 63
    31b2:	f8 94       	cli
    31b4:	de bf       	out	0x3e, r29	; 62
    31b6:	0f be       	out	0x3f, r0	; 63
    31b8:	cd bf       	out	0x3d, r28	; 61
    31ba:	cf 91       	pop	r28
    31bc:	df 91       	pop	r29
    31be:	08 95       	ret

000031c0 <FingerPS_HandShake>:


Error_FingerPS_t FingerPS_HandShake(void)
{
    31c0:	df 93       	push	r29
    31c2:	cf 93       	push	r28
    31c4:	cd b7       	in	r28, 0x3d	; 61
    31c6:	de b7       	in	r29, 0x3e	; 62
    31c8:	63 97       	sbiw	r28, 0x13	; 19
    31ca:	0f b6       	in	r0, 0x3f	; 63
    31cc:	f8 94       	cli
    31ce:	de bf       	out	0x3e, r29	; 62
    31d0:	0f be       	out	0x3f, r0	; 63
    31d2:	cd bf       	out	0x3d, r28	; 61
	Error_FingerPS_t ret= FAILED_TO_OPERATE_COMM_PORT;
    31d4:	8d e1       	ldi	r24, 0x1D	; 29
    31d6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	uint8 Frame_TX[12]= {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x40, 0x00, 0x44};
    31d8:	ce 01       	movw	r24, r28
    31da:	03 96       	adiw	r24, 0x03	; 3
    31dc:	98 8b       	std	Y+16, r25	; 0x10
    31de:	8f 87       	std	Y+15, r24	; 0x0f
    31e0:	e1 e8       	ldi	r30, 0x81	; 129
    31e2:	f1 e0       	ldi	r31, 0x01	; 1
    31e4:	fa 8b       	std	Y+18, r31	; 0x12
    31e6:	e9 8b       	std	Y+17, r30	; 0x11
    31e8:	fc e0       	ldi	r31, 0x0C	; 12
    31ea:	fb 8b       	std	Y+19, r31	; 0x13
    31ec:	e9 89       	ldd	r30, Y+17	; 0x11
    31ee:	fa 89       	ldd	r31, Y+18	; 0x12
    31f0:	00 80       	ld	r0, Z
    31f2:	89 89       	ldd	r24, Y+17	; 0x11
    31f4:	9a 89       	ldd	r25, Y+18	; 0x12
    31f6:	01 96       	adiw	r24, 0x01	; 1
    31f8:	9a 8b       	std	Y+18, r25	; 0x12
    31fa:	89 8b       	std	Y+17, r24	; 0x11
    31fc:	ef 85       	ldd	r30, Y+15	; 0x0f
    31fe:	f8 89       	ldd	r31, Y+16	; 0x10
    3200:	00 82       	st	Z, r0
    3202:	8f 85       	ldd	r24, Y+15	; 0x0f
    3204:	98 89       	ldd	r25, Y+16	; 0x10
    3206:	01 96       	adiw	r24, 0x01	; 1
    3208:	98 8b       	std	Y+16, r25	; 0x10
    320a:	8f 87       	std	Y+15, r24	; 0x0f
    320c:	9b 89       	ldd	r25, Y+19	; 0x13
    320e:	91 50       	subi	r25, 0x01	; 1
    3210:	9b 8b       	std	Y+19, r25	; 0x13
    3212:	eb 89       	ldd	r30, Y+19	; 0x13
    3214:	ee 23       	and	r30, r30
    3216:	51 f7       	brne	.-44     	; 0x31ec <FingerPS_HandShake+0x2c>

	/* Send Command Frame using UART Sync */
	for(i= 0; i<12; i++)
    3218:	19 82       	std	Y+1, r1	; 0x01
    321a:	0e c0       	rjmp	.+28     	; 0x3238 <FingerPS_HandShake+0x78>
	{
		MCAL_UART_sendByte_Blocking(Frame_TX[i]);
    321c:	89 81       	ldd	r24, Y+1	; 0x01
    321e:	28 2f       	mov	r18, r24
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	ce 01       	movw	r24, r28
    3224:	03 96       	adiw	r24, 0x03	; 3
    3226:	fc 01       	movw	r30, r24
    3228:	e2 0f       	add	r30, r18
    322a:	f3 1f       	adc	r31, r19
    322c:	80 81       	ld	r24, Z
    322e:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <MCAL_UART_sendByte_Blocking>
	Error_FingerPS_t ret= FAILED_TO_OPERATE_COMM_PORT;
	uint8 i;
	uint8 Frame_TX[12]= {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x40, 0x00, 0x44};

	/* Send Command Frame using UART Sync */
	for(i= 0; i<12; i++)
    3232:	89 81       	ldd	r24, Y+1	; 0x01
    3234:	8f 5f       	subi	r24, 0xFF	; 255
    3236:	89 83       	std	Y+1, r24	; 0x01
    3238:	89 81       	ldd	r24, Y+1	; 0x01
    323a:	8c 30       	cpi	r24, 0x0C	; 12
    323c:	78 f3       	brcs	.-34     	; 0x321c <FingerPS_HandShake+0x5c>
	{
		MCAL_UART_sendByte_Blocking(Frame_TX[i]);
	}

	/* Wait till Receive ACK Frame (Using RX Interrupt) */
	while(index < 12);
    323e:	80 91 e7 01 	lds	r24, 0x01E7
    3242:	8c 30       	cpi	r24, 0x0C	; 12
    3244:	e0 f3       	brcs	.-8      	; 0x323e <FingerPS_HandShake+0x7e>
	ret= Frame_Received[9];
    3246:	80 91 0c 02 	lds	r24, 0x020C
    324a:	8a 83       	std	Y+2, r24	; 0x02
	index= 0;
    324c:	10 92 e7 01 	sts	0x01E7, r1

	return ret;
    3250:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3252:	63 96       	adiw	r28, 0x13	; 19
    3254:	0f b6       	in	r0, 0x3f	; 63
    3256:	f8 94       	cli
    3258:	de bf       	out	0x3e, r29	; 62
    325a:	0f be       	out	0x3f, r0	; 63
    325c:	cd bf       	out	0x3d, r28	; 61
    325e:	cf 91       	pop	r28
    3260:	df 91       	pop	r29
    3262:	08 95       	ret

00003264 <FingerPS_GenImage>:


Error_FingerPS_t FingerPS_GenImage(void)
{
    3264:	df 93       	push	r29
    3266:	cf 93       	push	r28
    3268:	cd b7       	in	r28, 0x3d	; 61
    326a:	de b7       	in	r29, 0x3e	; 62
    326c:	63 97       	sbiw	r28, 0x13	; 19
    326e:	0f b6       	in	r0, 0x3f	; 63
    3270:	f8 94       	cli
    3272:	de bf       	out	0x3e, r29	; 62
    3274:	0f be       	out	0x3f, r0	; 63
    3276:	cd bf       	out	0x3d, r28	; 61
	Error_FingerPS_t ret= FAILED_TO_OPERATE_COMM_PORT;
    3278:	8d e1       	ldi	r24, 0x1D	; 29
    327a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	uint8 Frame_TX[12]= {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x01, 0x00, 0x05};
    327c:	ce 01       	movw	r24, r28
    327e:	03 96       	adiw	r24, 0x03	; 3
    3280:	98 8b       	std	Y+16, r25	; 0x10
    3282:	8f 87       	std	Y+15, r24	; 0x0f
    3284:	ed e8       	ldi	r30, 0x8D	; 141
    3286:	f1 e0       	ldi	r31, 0x01	; 1
    3288:	fa 8b       	std	Y+18, r31	; 0x12
    328a:	e9 8b       	std	Y+17, r30	; 0x11
    328c:	fc e0       	ldi	r31, 0x0C	; 12
    328e:	fb 8b       	std	Y+19, r31	; 0x13
    3290:	e9 89       	ldd	r30, Y+17	; 0x11
    3292:	fa 89       	ldd	r31, Y+18	; 0x12
    3294:	00 80       	ld	r0, Z
    3296:	89 89       	ldd	r24, Y+17	; 0x11
    3298:	9a 89       	ldd	r25, Y+18	; 0x12
    329a:	01 96       	adiw	r24, 0x01	; 1
    329c:	9a 8b       	std	Y+18, r25	; 0x12
    329e:	89 8b       	std	Y+17, r24	; 0x11
    32a0:	ef 85       	ldd	r30, Y+15	; 0x0f
    32a2:	f8 89       	ldd	r31, Y+16	; 0x10
    32a4:	00 82       	st	Z, r0
    32a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    32a8:	98 89       	ldd	r25, Y+16	; 0x10
    32aa:	01 96       	adiw	r24, 0x01	; 1
    32ac:	98 8b       	std	Y+16, r25	; 0x10
    32ae:	8f 87       	std	Y+15, r24	; 0x0f
    32b0:	9b 89       	ldd	r25, Y+19	; 0x13
    32b2:	91 50       	subi	r25, 0x01	; 1
    32b4:	9b 8b       	std	Y+19, r25	; 0x13
    32b6:	eb 89       	ldd	r30, Y+19	; 0x13
    32b8:	ee 23       	and	r30, r30
    32ba:	51 f7       	brne	.-44     	; 0x3290 <FingerPS_GenImage+0x2c>

	for(i= 0; i<12; i++)
    32bc:	19 82       	std	Y+1, r1	; 0x01
    32be:	0e c0       	rjmp	.+28     	; 0x32dc <FingerPS_GenImage+0x78>
	{
		MCAL_UART_sendByte_Blocking(Frame_TX[i]);
    32c0:	89 81       	ldd	r24, Y+1	; 0x01
    32c2:	28 2f       	mov	r18, r24
    32c4:	30 e0       	ldi	r19, 0x00	; 0
    32c6:	ce 01       	movw	r24, r28
    32c8:	03 96       	adiw	r24, 0x03	; 3
    32ca:	fc 01       	movw	r30, r24
    32cc:	e2 0f       	add	r30, r18
    32ce:	f3 1f       	adc	r31, r19
    32d0:	80 81       	ld	r24, Z
    32d2:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <MCAL_UART_sendByte_Blocking>
{
	Error_FingerPS_t ret= FAILED_TO_OPERATE_COMM_PORT;
	uint8 i;
	uint8 Frame_TX[12]= {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x01, 0x00, 0x05};

	for(i= 0; i<12; i++)
    32d6:	89 81       	ldd	r24, Y+1	; 0x01
    32d8:	8f 5f       	subi	r24, 0xFF	; 255
    32da:	89 83       	std	Y+1, r24	; 0x01
    32dc:	89 81       	ldd	r24, Y+1	; 0x01
    32de:	8c 30       	cpi	r24, 0x0C	; 12
    32e0:	78 f3       	brcs	.-34     	; 0x32c0 <FingerPS_GenImage+0x5c>
	{
		MCAL_UART_sendByte_Blocking(Frame_TX[i]);
	}

	while(index < 12);
    32e2:	80 91 e7 01 	lds	r24, 0x01E7
    32e6:	8c 30       	cpi	r24, 0x0C	; 12
    32e8:	e0 f3       	brcs	.-8      	; 0x32e2 <FingerPS_GenImage+0x7e>
	ret= Frame_Received[9];
    32ea:	80 91 0c 02 	lds	r24, 0x020C
    32ee:	8a 83       	std	Y+2, r24	; 0x02
	index= 0;
    32f0:	10 92 e7 01 	sts	0x01E7, r1
	return ret;
    32f4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    32f6:	63 96       	adiw	r28, 0x13	; 19
    32f8:	0f b6       	in	r0, 0x3f	; 63
    32fa:	f8 94       	cli
    32fc:	de bf       	out	0x3e, r29	; 62
    32fe:	0f be       	out	0x3f, r0	; 63
    3300:	cd bf       	out	0x3d, r28	; 61
    3302:	cf 91       	pop	r28
    3304:	df 91       	pop	r29
    3306:	08 95       	ret

00003308 <FingerPS_ConvertImageToCharFile>:


Error_FingerPS_t FingerPS_ConvertImageToCharFile(Template_Buffer_t l_bufferID)
{
    3308:	df 93       	push	r29
    330a:	cf 93       	push	r28
    330c:	cd b7       	in	r28, 0x3d	; 61
    330e:	de b7       	in	r29, 0x3e	; 62
    3310:	62 97       	sbiw	r28, 0x12	; 18
    3312:	0f b6       	in	r0, 0x3f	; 63
    3314:	f8 94       	cli
    3316:	de bf       	out	0x3e, r29	; 62
    3318:	0f be       	out	0x3f, r0	; 63
    331a:	cd bf       	out	0x3d, r28	; 61
    331c:	8a 8b       	std	Y+18, r24	; 0x12
	Error_FingerPS_t ret= FAILED_TO_OPERATE_COMM_PORT;
    331e:	8d e1       	ldi	r24, 0x1D	; 29
    3320:	8c 83       	std	Y+4, r24	; 0x04
	uint8 i;
	uint8 Frame_TX[13]= {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x04, 0x02, l_bufferID, 0x00, 0x00};
    3322:	8f ee       	ldi	r24, 0xEF	; 239
    3324:	8d 83       	std	Y+5, r24	; 0x05
    3326:	81 e0       	ldi	r24, 0x01	; 1
    3328:	8e 83       	std	Y+6, r24	; 0x06
    332a:	8f ef       	ldi	r24, 0xFF	; 255
    332c:	8f 83       	std	Y+7, r24	; 0x07
    332e:	8f ef       	ldi	r24, 0xFF	; 255
    3330:	88 87       	std	Y+8, r24	; 0x08
    3332:	8f ef       	ldi	r24, 0xFF	; 255
    3334:	89 87       	std	Y+9, r24	; 0x09
    3336:	8f ef       	ldi	r24, 0xFF	; 255
    3338:	8a 87       	std	Y+10, r24	; 0x0a
    333a:	81 e0       	ldi	r24, 0x01	; 1
    333c:	8b 87       	std	Y+11, r24	; 0x0b
    333e:	1c 86       	std	Y+12, r1	; 0x0c
    3340:	84 e0       	ldi	r24, 0x04	; 4
    3342:	8d 87       	std	Y+13, r24	; 0x0d
    3344:	82 e0       	ldi	r24, 0x02	; 2
    3346:	8e 87       	std	Y+14, r24	; 0x0e
    3348:	8a 89       	ldd	r24, Y+18	; 0x12
    334a:	8f 87       	std	Y+15, r24	; 0x0f
    334c:	18 8a       	std	Y+16, r1	; 0x10
    334e:	19 8a       	std	Y+17, r1	; 0x11
	uint16 sum= 0;
    3350:	1a 82       	std	Y+2, r1	; 0x02
    3352:	19 82       	std	Y+1, r1	; 0x01

	sum= FingerPS_CalculateCheckSum(Frame_TX, 13);
    3354:	ce 01       	movw	r24, r28
    3356:	05 96       	adiw	r24, 0x05	; 5
    3358:	6d e0       	ldi	r22, 0x0D	; 13
    335a:	0e 94 bf 1b 	call	0x377e	; 0x377e <FingerPS_CalculateCheckSum>
    335e:	9a 83       	std	Y+2, r25	; 0x02
    3360:	89 83       	std	Y+1, r24	; 0x01
	Frame_TX[11]= (uint8)(sum >> 8);
    3362:	89 81       	ldd	r24, Y+1	; 0x01
    3364:	9a 81       	ldd	r25, Y+2	; 0x02
    3366:	89 2f       	mov	r24, r25
    3368:	99 27       	eor	r25, r25
    336a:	88 8b       	std	Y+16, r24	; 0x10
	Frame_TX[12]= (uint8)(sum & 0x00FF);
    336c:	89 81       	ldd	r24, Y+1	; 0x01
    336e:	89 8b       	std	Y+17, r24	; 0x11

	for(i= 0; i<13; i++)
    3370:	1b 82       	std	Y+3, r1	; 0x03
    3372:	0e c0       	rjmp	.+28     	; 0x3390 <FingerPS_ConvertImageToCharFile+0x88>
	{
		MCAL_UART_sendByte_Blocking(Frame_TX[i]);
    3374:	8b 81       	ldd	r24, Y+3	; 0x03
    3376:	28 2f       	mov	r18, r24
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	ce 01       	movw	r24, r28
    337c:	05 96       	adiw	r24, 0x05	; 5
    337e:	fc 01       	movw	r30, r24
    3380:	e2 0f       	add	r30, r18
    3382:	f3 1f       	adc	r31, r19
    3384:	80 81       	ld	r24, Z
    3386:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <MCAL_UART_sendByte_Blocking>

	sum= FingerPS_CalculateCheckSum(Frame_TX, 13);
	Frame_TX[11]= (uint8)(sum >> 8);
	Frame_TX[12]= (uint8)(sum & 0x00FF);

	for(i= 0; i<13; i++)
    338a:	8b 81       	ldd	r24, Y+3	; 0x03
    338c:	8f 5f       	subi	r24, 0xFF	; 255
    338e:	8b 83       	std	Y+3, r24	; 0x03
    3390:	8b 81       	ldd	r24, Y+3	; 0x03
    3392:	8d 30       	cpi	r24, 0x0D	; 13
    3394:	78 f3       	brcs	.-34     	; 0x3374 <FingerPS_ConvertImageToCharFile+0x6c>
	{
		MCAL_UART_sendByte_Blocking(Frame_TX[i]);
	}

	while(index < 12);
    3396:	80 91 e7 01 	lds	r24, 0x01E7
    339a:	8c 30       	cpi	r24, 0x0C	; 12
    339c:	e0 f3       	brcs	.-8      	; 0x3396 <FingerPS_ConvertImageToCharFile+0x8e>
	ret= Frame_Received[9];
    339e:	80 91 0c 02 	lds	r24, 0x020C
    33a2:	8c 83       	std	Y+4, r24	; 0x04
	index= 0;
    33a4:	10 92 e7 01 	sts	0x01E7, r1
	return ret;
    33a8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    33aa:	62 96       	adiw	r28, 0x12	; 18
    33ac:	0f b6       	in	r0, 0x3f	; 63
    33ae:	f8 94       	cli
    33b0:	de bf       	out	0x3e, r29	; 62
    33b2:	0f be       	out	0x3f, r0	; 63
    33b4:	cd bf       	out	0x3d, r28	; 61
    33b6:	cf 91       	pop	r28
    33b8:	df 91       	pop	r29
    33ba:	08 95       	ret

000033bc <FingerPS_GenTemplate>:


Error_FingerPS_t FingerPS_GenTemplate(void)
{
    33bc:	df 93       	push	r29
    33be:	cf 93       	push	r28
    33c0:	cd b7       	in	r28, 0x3d	; 61
    33c2:	de b7       	in	r29, 0x3e	; 62
    33c4:	63 97       	sbiw	r28, 0x13	; 19
    33c6:	0f b6       	in	r0, 0x3f	; 63
    33c8:	f8 94       	cli
    33ca:	de bf       	out	0x3e, r29	; 62
    33cc:	0f be       	out	0x3f, r0	; 63
    33ce:	cd bf       	out	0x3d, r28	; 61
	Error_FingerPS_t ret= FAILED_TO_OPERATE_COMM_PORT;
    33d0:	8d e1       	ldi	r24, 0x1D	; 29
    33d2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	uint8 Frame_TX[12]= {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x05, 0x00, 0x09};
    33d4:	ce 01       	movw	r24, r28
    33d6:	03 96       	adiw	r24, 0x03	; 3
    33d8:	98 8b       	std	Y+16, r25	; 0x10
    33da:	8f 87       	std	Y+15, r24	; 0x0f
    33dc:	e9 e9       	ldi	r30, 0x99	; 153
    33de:	f1 e0       	ldi	r31, 0x01	; 1
    33e0:	fa 8b       	std	Y+18, r31	; 0x12
    33e2:	e9 8b       	std	Y+17, r30	; 0x11
    33e4:	fc e0       	ldi	r31, 0x0C	; 12
    33e6:	fb 8b       	std	Y+19, r31	; 0x13
    33e8:	e9 89       	ldd	r30, Y+17	; 0x11
    33ea:	fa 89       	ldd	r31, Y+18	; 0x12
    33ec:	00 80       	ld	r0, Z
    33ee:	89 89       	ldd	r24, Y+17	; 0x11
    33f0:	9a 89       	ldd	r25, Y+18	; 0x12
    33f2:	01 96       	adiw	r24, 0x01	; 1
    33f4:	9a 8b       	std	Y+18, r25	; 0x12
    33f6:	89 8b       	std	Y+17, r24	; 0x11
    33f8:	ef 85       	ldd	r30, Y+15	; 0x0f
    33fa:	f8 89       	ldd	r31, Y+16	; 0x10
    33fc:	00 82       	st	Z, r0
    33fe:	8f 85       	ldd	r24, Y+15	; 0x0f
    3400:	98 89       	ldd	r25, Y+16	; 0x10
    3402:	01 96       	adiw	r24, 0x01	; 1
    3404:	98 8b       	std	Y+16, r25	; 0x10
    3406:	8f 87       	std	Y+15, r24	; 0x0f
    3408:	9b 89       	ldd	r25, Y+19	; 0x13
    340a:	91 50       	subi	r25, 0x01	; 1
    340c:	9b 8b       	std	Y+19, r25	; 0x13
    340e:	eb 89       	ldd	r30, Y+19	; 0x13
    3410:	ee 23       	and	r30, r30
    3412:	51 f7       	brne	.-44     	; 0x33e8 <FingerPS_GenTemplate+0x2c>

	for(i= 0; i<12; i++)
    3414:	19 82       	std	Y+1, r1	; 0x01
    3416:	0e c0       	rjmp	.+28     	; 0x3434 <FingerPS_GenTemplate+0x78>
	{
		MCAL_UART_sendByte_Blocking(Frame_TX[i]);
    3418:	89 81       	ldd	r24, Y+1	; 0x01
    341a:	28 2f       	mov	r18, r24
    341c:	30 e0       	ldi	r19, 0x00	; 0
    341e:	ce 01       	movw	r24, r28
    3420:	03 96       	adiw	r24, 0x03	; 3
    3422:	fc 01       	movw	r30, r24
    3424:	e2 0f       	add	r30, r18
    3426:	f3 1f       	adc	r31, r19
    3428:	80 81       	ld	r24, Z
    342a:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <MCAL_UART_sendByte_Blocking>
{
	Error_FingerPS_t ret= FAILED_TO_OPERATE_COMM_PORT;
	uint8 i;
	uint8 Frame_TX[12]= {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x05, 0x00, 0x09};

	for(i= 0; i<12; i++)
    342e:	89 81       	ldd	r24, Y+1	; 0x01
    3430:	8f 5f       	subi	r24, 0xFF	; 255
    3432:	89 83       	std	Y+1, r24	; 0x01
    3434:	89 81       	ldd	r24, Y+1	; 0x01
    3436:	8c 30       	cpi	r24, 0x0C	; 12
    3438:	78 f3       	brcs	.-34     	; 0x3418 <FingerPS_GenTemplate+0x5c>
	{
		MCAL_UART_sendByte_Blocking(Frame_TX[i]);
	}

	while(index < 12);
    343a:	80 91 e7 01 	lds	r24, 0x01E7
    343e:	8c 30       	cpi	r24, 0x0C	; 12
    3440:	e0 f3       	brcs	.-8      	; 0x343a <FingerPS_GenTemplate+0x7e>
	ret= Frame_Received[9];
    3442:	80 91 0c 02 	lds	r24, 0x020C
    3446:	8a 83       	std	Y+2, r24	; 0x02
	index= 0;
    3448:	10 92 e7 01 	sts	0x01E7, r1
	return ret;
    344c:	8a 81       	ldd	r24, Y+2	; 0x02
}
    344e:	63 96       	adiw	r28, 0x13	; 19
    3450:	0f b6       	in	r0, 0x3f	; 63
    3452:	f8 94       	cli
    3454:	de bf       	out	0x3e, r29	; 62
    3456:	0f be       	out	0x3f, r0	; 63
    3458:	cd bf       	out	0x3d, r28	; 61
    345a:	cf 91       	pop	r28
    345c:	df 91       	pop	r29
    345e:	08 95       	ret

00003460 <FingerPS_StrTemplate>:


Error_FingerPS_t FingerPS_StrTemplate(Template_Buffer_t l_bufferID, uint16 l_pageID)
{
    3460:	df 93       	push	r29
    3462:	cf 93       	push	r28
    3464:	cd b7       	in	r28, 0x3d	; 61
    3466:	de b7       	in	r29, 0x3e	; 62
    3468:	66 97       	sbiw	r28, 0x16	; 22
    346a:	0f b6       	in	r0, 0x3f	; 63
    346c:	f8 94       	cli
    346e:	de bf       	out	0x3e, r29	; 62
    3470:	0f be       	out	0x3f, r0	; 63
    3472:	cd bf       	out	0x3d, r28	; 61
    3474:	8c 8b       	std	Y+20, r24	; 0x14
    3476:	7e 8b       	std	Y+22, r23	; 0x16
    3478:	6d 8b       	std	Y+21, r22	; 0x15
	Error_FingerPS_t ret= FAILED_TO_OPERATE_COMM_PORT;
    347a:	8d e1       	ldi	r24, 0x1D	; 29
    347c:	8c 83       	std	Y+4, r24	; 0x04
	uint8 i;
	uint8 Frame_TX[15]= {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x06, 0x06, l_bufferID, (l_pageID>>8), (l_pageID&0x00FF), 0x00, 0x00};
    347e:	8d 89       	ldd	r24, Y+21	; 0x15
    3480:	9e 89       	ldd	r25, Y+22	; 0x16
    3482:	89 2f       	mov	r24, r25
    3484:	99 27       	eor	r25, r25
    3486:	98 2f       	mov	r25, r24
    3488:	2d 89       	ldd	r18, Y+21	; 0x15
    348a:	8f ee       	ldi	r24, 0xEF	; 239
    348c:	8d 83       	std	Y+5, r24	; 0x05
    348e:	81 e0       	ldi	r24, 0x01	; 1
    3490:	8e 83       	std	Y+6, r24	; 0x06
    3492:	8f ef       	ldi	r24, 0xFF	; 255
    3494:	8f 83       	std	Y+7, r24	; 0x07
    3496:	8f ef       	ldi	r24, 0xFF	; 255
    3498:	88 87       	std	Y+8, r24	; 0x08
    349a:	8f ef       	ldi	r24, 0xFF	; 255
    349c:	89 87       	std	Y+9, r24	; 0x09
    349e:	8f ef       	ldi	r24, 0xFF	; 255
    34a0:	8a 87       	std	Y+10, r24	; 0x0a
    34a2:	81 e0       	ldi	r24, 0x01	; 1
    34a4:	8b 87       	std	Y+11, r24	; 0x0b
    34a6:	1c 86       	std	Y+12, r1	; 0x0c
    34a8:	86 e0       	ldi	r24, 0x06	; 6
    34aa:	8d 87       	std	Y+13, r24	; 0x0d
    34ac:	86 e0       	ldi	r24, 0x06	; 6
    34ae:	8e 87       	std	Y+14, r24	; 0x0e
    34b0:	8c 89       	ldd	r24, Y+20	; 0x14
    34b2:	8f 87       	std	Y+15, r24	; 0x0f
    34b4:	98 8b       	std	Y+16, r25	; 0x10
    34b6:	29 8b       	std	Y+17, r18	; 0x11
    34b8:	1a 8a       	std	Y+18, r1	; 0x12
    34ba:	1b 8a       	std	Y+19, r1	; 0x13
	uint16 sum= 0;
    34bc:	1a 82       	std	Y+2, r1	; 0x02
    34be:	19 82       	std	Y+1, r1	; 0x01

	sum= FingerPS_CalculateCheckSum(Frame_TX, 15);
    34c0:	ce 01       	movw	r24, r28
    34c2:	05 96       	adiw	r24, 0x05	; 5
    34c4:	6f e0       	ldi	r22, 0x0F	; 15
    34c6:	0e 94 bf 1b 	call	0x377e	; 0x377e <FingerPS_CalculateCheckSum>
    34ca:	9a 83       	std	Y+2, r25	; 0x02
    34cc:	89 83       	std	Y+1, r24	; 0x01
	Frame_TX[13]= (uint8)(sum >> 8);
    34ce:	89 81       	ldd	r24, Y+1	; 0x01
    34d0:	9a 81       	ldd	r25, Y+2	; 0x02
    34d2:	89 2f       	mov	r24, r25
    34d4:	99 27       	eor	r25, r25
    34d6:	8a 8b       	std	Y+18, r24	; 0x12
	Frame_TX[14]= (uint8)(sum & 0x00FF);
    34d8:	89 81       	ldd	r24, Y+1	; 0x01
    34da:	8b 8b       	std	Y+19, r24	; 0x13

	for(i= 0; i<15; i++)
    34dc:	1b 82       	std	Y+3, r1	; 0x03
    34de:	0e c0       	rjmp	.+28     	; 0x34fc <FingerPS_StrTemplate+0x9c>
	{
		MCAL_UART_sendByte_Blocking(Frame_TX[i]);
    34e0:	8b 81       	ldd	r24, Y+3	; 0x03
    34e2:	28 2f       	mov	r18, r24
    34e4:	30 e0       	ldi	r19, 0x00	; 0
    34e6:	ce 01       	movw	r24, r28
    34e8:	05 96       	adiw	r24, 0x05	; 5
    34ea:	fc 01       	movw	r30, r24
    34ec:	e2 0f       	add	r30, r18
    34ee:	f3 1f       	adc	r31, r19
    34f0:	80 81       	ld	r24, Z
    34f2:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <MCAL_UART_sendByte_Blocking>

	sum= FingerPS_CalculateCheckSum(Frame_TX, 15);
	Frame_TX[13]= (uint8)(sum >> 8);
	Frame_TX[14]= (uint8)(sum & 0x00FF);

	for(i= 0; i<15; i++)
    34f6:	8b 81       	ldd	r24, Y+3	; 0x03
    34f8:	8f 5f       	subi	r24, 0xFF	; 255
    34fa:	8b 83       	std	Y+3, r24	; 0x03
    34fc:	8b 81       	ldd	r24, Y+3	; 0x03
    34fe:	8f 30       	cpi	r24, 0x0F	; 15
    3500:	78 f3       	brcs	.-34     	; 0x34e0 <FingerPS_StrTemplate+0x80>
	{
		MCAL_UART_sendByte_Blocking(Frame_TX[i]);
	}

	while(index < 12);
    3502:	80 91 e7 01 	lds	r24, 0x01E7
    3506:	8c 30       	cpi	r24, 0x0C	; 12
    3508:	e0 f3       	brcs	.-8      	; 0x3502 <FingerPS_StrTemplate+0xa2>
	ret= Frame_Received[9];
    350a:	80 91 0c 02 	lds	r24, 0x020C
    350e:	8c 83       	std	Y+4, r24	; 0x04
	index= 0;
    3510:	10 92 e7 01 	sts	0x01E7, r1

	return ret;
    3514:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3516:	66 96       	adiw	r28, 0x16	; 22
    3518:	0f b6       	in	r0, 0x3f	; 63
    351a:	f8 94       	cli
    351c:	de bf       	out	0x3e, r29	; 62
    351e:	0f be       	out	0x3f, r0	; 63
    3520:	cd bf       	out	0x3d, r28	; 61
    3522:	cf 91       	pop	r28
    3524:	df 91       	pop	r29
    3526:	08 95       	ret

00003528 <FingerPS_SearchFinger>:


Error_FingerPS_t FingerPS_SearchFinger(Template_Buffer_t l_bufferID, uint16 l_startPage, uint16 l_pageNum)
{
    3528:	df 93       	push	r29
    352a:	cf 93       	push	r28
    352c:	cd b7       	in	r28, 0x3d	; 61
    352e:	de b7       	in	r29, 0x3e	; 62
    3530:	6a 97       	sbiw	r28, 0x1a	; 26
    3532:	0f b6       	in	r0, 0x3f	; 63
    3534:	f8 94       	cli
    3536:	de bf       	out	0x3e, r29	; 62
    3538:	0f be       	out	0x3f, r0	; 63
    353a:	cd bf       	out	0x3d, r28	; 61
    353c:	8e 8b       	std	Y+22, r24	; 0x16
    353e:	78 8f       	std	Y+24, r23	; 0x18
    3540:	6f 8b       	std	Y+23, r22	; 0x17
    3542:	5a 8f       	std	Y+26, r21	; 0x1a
    3544:	49 8f       	std	Y+25, r20	; 0x19
	Error_FingerPS_t ret= FAILED_TO_OPERATE_COMM_PORT;
    3546:	8d e1       	ldi	r24, 0x1D	; 29
    3548:	8c 83       	std	Y+4, r24	; 0x04
	uint8 i;
	uint8 Frame_TX[17]= {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x08, 0x04, l_bufferID, (l_startPage>>8), (l_startPage&0x00FF), (l_pageNum>>8), (l_pageNum&0x00FF), 0x00, 0x00};
    354a:	8f 89       	ldd	r24, Y+23	; 0x17
    354c:	98 8d       	ldd	r25, Y+24	; 0x18
    354e:	89 2f       	mov	r24, r25
    3550:	99 27       	eor	r25, r25
    3552:	28 2f       	mov	r18, r24
    3554:	3f 89       	ldd	r19, Y+23	; 0x17
    3556:	89 8d       	ldd	r24, Y+25	; 0x19
    3558:	9a 8d       	ldd	r25, Y+26	; 0x1a
    355a:	89 2f       	mov	r24, r25
    355c:	99 27       	eor	r25, r25
    355e:	98 2f       	mov	r25, r24
    3560:	49 8d       	ldd	r20, Y+25	; 0x19
    3562:	8f ee       	ldi	r24, 0xEF	; 239
    3564:	8d 83       	std	Y+5, r24	; 0x05
    3566:	81 e0       	ldi	r24, 0x01	; 1
    3568:	8e 83       	std	Y+6, r24	; 0x06
    356a:	8f ef       	ldi	r24, 0xFF	; 255
    356c:	8f 83       	std	Y+7, r24	; 0x07
    356e:	8f ef       	ldi	r24, 0xFF	; 255
    3570:	88 87       	std	Y+8, r24	; 0x08
    3572:	8f ef       	ldi	r24, 0xFF	; 255
    3574:	89 87       	std	Y+9, r24	; 0x09
    3576:	8f ef       	ldi	r24, 0xFF	; 255
    3578:	8a 87       	std	Y+10, r24	; 0x0a
    357a:	81 e0       	ldi	r24, 0x01	; 1
    357c:	8b 87       	std	Y+11, r24	; 0x0b
    357e:	1c 86       	std	Y+12, r1	; 0x0c
    3580:	88 e0       	ldi	r24, 0x08	; 8
    3582:	8d 87       	std	Y+13, r24	; 0x0d
    3584:	84 e0       	ldi	r24, 0x04	; 4
    3586:	8e 87       	std	Y+14, r24	; 0x0e
    3588:	8e 89       	ldd	r24, Y+22	; 0x16
    358a:	8f 87       	std	Y+15, r24	; 0x0f
    358c:	28 8b       	std	Y+16, r18	; 0x10
    358e:	39 8b       	std	Y+17, r19	; 0x11
    3590:	9a 8b       	std	Y+18, r25	; 0x12
    3592:	4b 8b       	std	Y+19, r20	; 0x13
    3594:	1c 8a       	std	Y+20, r1	; 0x14
    3596:	1d 8a       	std	Y+21, r1	; 0x15
	uint16 sum= 0;
    3598:	1a 82       	std	Y+2, r1	; 0x02
    359a:	19 82       	std	Y+1, r1	; 0x01

	sum= FingerPS_CalculateCheckSum(Frame_TX, 17);
    359c:	ce 01       	movw	r24, r28
    359e:	05 96       	adiw	r24, 0x05	; 5
    35a0:	61 e1       	ldi	r22, 0x11	; 17
    35a2:	0e 94 bf 1b 	call	0x377e	; 0x377e <FingerPS_CalculateCheckSum>
    35a6:	9a 83       	std	Y+2, r25	; 0x02
    35a8:	89 83       	std	Y+1, r24	; 0x01
	Frame_TX[15]= (uint8)(sum >> 8);
    35aa:	89 81       	ldd	r24, Y+1	; 0x01
    35ac:	9a 81       	ldd	r25, Y+2	; 0x02
    35ae:	89 2f       	mov	r24, r25
    35b0:	99 27       	eor	r25, r25
    35b2:	8c 8b       	std	Y+20, r24	; 0x14
	Frame_TX[16]= (uint8)(sum & 0x00FF);
    35b4:	89 81       	ldd	r24, Y+1	; 0x01
    35b6:	8d 8b       	std	Y+21, r24	; 0x15

	for(i= 0; i<17; i++)
    35b8:	1b 82       	std	Y+3, r1	; 0x03
    35ba:	0e c0       	rjmp	.+28     	; 0x35d8 <FingerPS_SearchFinger+0xb0>
	{
		MCAL_UART_sendByte_Blocking(Frame_TX[i]);
    35bc:	8b 81       	ldd	r24, Y+3	; 0x03
    35be:	28 2f       	mov	r18, r24
    35c0:	30 e0       	ldi	r19, 0x00	; 0
    35c2:	ce 01       	movw	r24, r28
    35c4:	05 96       	adiw	r24, 0x05	; 5
    35c6:	fc 01       	movw	r30, r24
    35c8:	e2 0f       	add	r30, r18
    35ca:	f3 1f       	adc	r31, r19
    35cc:	80 81       	ld	r24, Z
    35ce:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <MCAL_UART_sendByte_Blocking>

	sum= FingerPS_CalculateCheckSum(Frame_TX, 17);
	Frame_TX[15]= (uint8)(sum >> 8);
	Frame_TX[16]= (uint8)(sum & 0x00FF);

	for(i= 0; i<17; i++)
    35d2:	8b 81       	ldd	r24, Y+3	; 0x03
    35d4:	8f 5f       	subi	r24, 0xFF	; 255
    35d6:	8b 83       	std	Y+3, r24	; 0x03
    35d8:	8b 81       	ldd	r24, Y+3	; 0x03
    35da:	81 31       	cpi	r24, 0x11	; 17
    35dc:	78 f3       	brcs	.-34     	; 0x35bc <FingerPS_SearchFinger+0x94>
	{
		MCAL_UART_sendByte_Blocking(Frame_TX[i]);
	}

	while(index < 16);
    35de:	80 91 e7 01 	lds	r24, 0x01E7
    35e2:	80 31       	cpi	r24, 0x10	; 16
    35e4:	e0 f3       	brcs	.-8      	; 0x35de <FingerPS_SearchFinger+0xb6>
	ret= Frame_Received[9];
    35e6:	80 91 0c 02 	lds	r24, 0x020C
    35ea:	8c 83       	std	Y+4, r24	; 0x04
	index= 0;
    35ec:	10 92 e7 01 	sts	0x01E7, r1
	// need return pageID, matchScore
	return ret;
    35f0:	8c 81       	ldd	r24, Y+4	; 0x04
}
    35f2:	6a 96       	adiw	r28, 0x1a	; 26
    35f4:	0f b6       	in	r0, 0x3f	; 63
    35f6:	f8 94       	cli
    35f8:	de bf       	out	0x3e, r29	; 62
    35fa:	0f be       	out	0x3f, r0	; 63
    35fc:	cd bf       	out	0x3d, r28	; 61
    35fe:	cf 91       	pop	r28
    3600:	df 91       	pop	r29
    3602:	08 95       	ret

00003604 <FingerPS_DeleteFinger>:


Error_FingerPS_t FingerPS_DeleteFinger(uint16 l_startPage, uint16 l_numOfTemp)
{
    3604:	df 93       	push	r29
    3606:	cf 93       	push	r28
    3608:	cd b7       	in	r28, 0x3d	; 61
    360a:	de b7       	in	r29, 0x3e	; 62
    360c:	68 97       	sbiw	r28, 0x18	; 24
    360e:	0f b6       	in	r0, 0x3f	; 63
    3610:	f8 94       	cli
    3612:	de bf       	out	0x3e, r29	; 62
    3614:	0f be       	out	0x3f, r0	; 63
    3616:	cd bf       	out	0x3d, r28	; 61
    3618:	9e 8b       	std	Y+22, r25	; 0x16
    361a:	8d 8b       	std	Y+21, r24	; 0x15
    361c:	78 8f       	std	Y+24, r23	; 0x18
    361e:	6f 8b       	std	Y+23, r22	; 0x17
	Error_FingerPS_t ret= FAILED_TO_OPERATE_COMM_PORT;
    3620:	8d e1       	ldi	r24, 0x1D	; 29
    3622:	8c 83       	std	Y+4, r24	; 0x04
	uint8 i;
	uint8 Frame_TX[16]= {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x07, 0x0C, (l_startPage>>8), (l_startPage&0x00FF), (l_numOfTemp>>8), (l_numOfTemp&0x00FF), 0x00, 0x00};
    3624:	8d 89       	ldd	r24, Y+21	; 0x15
    3626:	9e 89       	ldd	r25, Y+22	; 0x16
    3628:	89 2f       	mov	r24, r25
    362a:	99 27       	eor	r25, r25
    362c:	28 2f       	mov	r18, r24
    362e:	3d 89       	ldd	r19, Y+21	; 0x15
    3630:	8f 89       	ldd	r24, Y+23	; 0x17
    3632:	98 8d       	ldd	r25, Y+24	; 0x18
    3634:	89 2f       	mov	r24, r25
    3636:	99 27       	eor	r25, r25
    3638:	98 2f       	mov	r25, r24
    363a:	4f 89       	ldd	r20, Y+23	; 0x17
    363c:	8f ee       	ldi	r24, 0xEF	; 239
    363e:	8d 83       	std	Y+5, r24	; 0x05
    3640:	81 e0       	ldi	r24, 0x01	; 1
    3642:	8e 83       	std	Y+6, r24	; 0x06
    3644:	8f ef       	ldi	r24, 0xFF	; 255
    3646:	8f 83       	std	Y+7, r24	; 0x07
    3648:	8f ef       	ldi	r24, 0xFF	; 255
    364a:	88 87       	std	Y+8, r24	; 0x08
    364c:	8f ef       	ldi	r24, 0xFF	; 255
    364e:	89 87       	std	Y+9, r24	; 0x09
    3650:	8f ef       	ldi	r24, 0xFF	; 255
    3652:	8a 87       	std	Y+10, r24	; 0x0a
    3654:	81 e0       	ldi	r24, 0x01	; 1
    3656:	8b 87       	std	Y+11, r24	; 0x0b
    3658:	1c 86       	std	Y+12, r1	; 0x0c
    365a:	87 e0       	ldi	r24, 0x07	; 7
    365c:	8d 87       	std	Y+13, r24	; 0x0d
    365e:	8c e0       	ldi	r24, 0x0C	; 12
    3660:	8e 87       	std	Y+14, r24	; 0x0e
    3662:	2f 87       	std	Y+15, r18	; 0x0f
    3664:	38 8b       	std	Y+16, r19	; 0x10
    3666:	99 8b       	std	Y+17, r25	; 0x11
    3668:	4a 8b       	std	Y+18, r20	; 0x12
    366a:	1b 8a       	std	Y+19, r1	; 0x13
    366c:	1c 8a       	std	Y+20, r1	; 0x14
	uint16 sum= 0;
    366e:	1a 82       	std	Y+2, r1	; 0x02
    3670:	19 82       	std	Y+1, r1	; 0x01

	sum= FingerPS_CalculateCheckSum(Frame_TX, 16);
    3672:	ce 01       	movw	r24, r28
    3674:	05 96       	adiw	r24, 0x05	; 5
    3676:	60 e1       	ldi	r22, 0x10	; 16
    3678:	0e 94 bf 1b 	call	0x377e	; 0x377e <FingerPS_CalculateCheckSum>
    367c:	9a 83       	std	Y+2, r25	; 0x02
    367e:	89 83       	std	Y+1, r24	; 0x01
	Frame_TX[14]= (uint8)(sum >> 8);
    3680:	89 81       	ldd	r24, Y+1	; 0x01
    3682:	9a 81       	ldd	r25, Y+2	; 0x02
    3684:	89 2f       	mov	r24, r25
    3686:	99 27       	eor	r25, r25
    3688:	8b 8b       	std	Y+19, r24	; 0x13
	Frame_TX[15]= (uint8)(sum & 0x00FF);
    368a:	89 81       	ldd	r24, Y+1	; 0x01
    368c:	8c 8b       	std	Y+20, r24	; 0x14

	for(i= 0; i<12; i++)
    368e:	1b 82       	std	Y+3, r1	; 0x03
    3690:	0e c0       	rjmp	.+28     	; 0x36ae <FingerPS_DeleteFinger+0xaa>
	{
		MCAL_UART_sendByte_Blocking(Frame_TX[i]);
    3692:	8b 81       	ldd	r24, Y+3	; 0x03
    3694:	28 2f       	mov	r18, r24
    3696:	30 e0       	ldi	r19, 0x00	; 0
    3698:	ce 01       	movw	r24, r28
    369a:	05 96       	adiw	r24, 0x05	; 5
    369c:	fc 01       	movw	r30, r24
    369e:	e2 0f       	add	r30, r18
    36a0:	f3 1f       	adc	r31, r19
    36a2:	80 81       	ld	r24, Z
    36a4:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <MCAL_UART_sendByte_Blocking>

	sum= FingerPS_CalculateCheckSum(Frame_TX, 16);
	Frame_TX[14]= (uint8)(sum >> 8);
	Frame_TX[15]= (uint8)(sum & 0x00FF);

	for(i= 0; i<12; i++)
    36a8:	8b 81       	ldd	r24, Y+3	; 0x03
    36aa:	8f 5f       	subi	r24, 0xFF	; 255
    36ac:	8b 83       	std	Y+3, r24	; 0x03
    36ae:	8b 81       	ldd	r24, Y+3	; 0x03
    36b0:	8c 30       	cpi	r24, 0x0C	; 12
    36b2:	78 f3       	brcs	.-34     	; 0x3692 <FingerPS_DeleteFinger+0x8e>
	{
		MCAL_UART_sendByte_Blocking(Frame_TX[i]);
	}

	while(index < 12);
    36b4:	80 91 e7 01 	lds	r24, 0x01E7
    36b8:	8c 30       	cpi	r24, 0x0C	; 12
    36ba:	e0 f3       	brcs	.-8      	; 0x36b4 <FingerPS_DeleteFinger+0xb0>
	ret= Frame_Received[9];
    36bc:	80 91 0c 02 	lds	r24, 0x020C
    36c0:	8c 83       	std	Y+4, r24	; 0x04
	index= 0;
    36c2:	10 92 e7 01 	sts	0x01E7, r1

	return ret;
    36c6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    36c8:	68 96       	adiw	r28, 0x18	; 24
    36ca:	0f b6       	in	r0, 0x3f	; 63
    36cc:	f8 94       	cli
    36ce:	de bf       	out	0x3e, r29	; 62
    36d0:	0f be       	out	0x3f, r0	; 63
    36d2:	cd bf       	out	0x3d, r28	; 61
    36d4:	cf 91       	pop	r28
    36d6:	df 91       	pop	r29
    36d8:	08 95       	ret

000036da <FingerPS_EmptyLibrary>:


Error_FingerPS_t FingerPS_EmptyLibrary(void)
{
    36da:	df 93       	push	r29
    36dc:	cf 93       	push	r28
    36de:	cd b7       	in	r28, 0x3d	; 61
    36e0:	de b7       	in	r29, 0x3e	; 62
    36e2:	63 97       	sbiw	r28, 0x13	; 19
    36e4:	0f b6       	in	r0, 0x3f	; 63
    36e6:	f8 94       	cli
    36e8:	de bf       	out	0x3e, r29	; 62
    36ea:	0f be       	out	0x3f, r0	; 63
    36ec:	cd bf       	out	0x3d, r28	; 61
	Error_FingerPS_t ret= FAILED_TO_OPERATE_COMM_PORT;
    36ee:	8d e1       	ldi	r24, 0x1D	; 29
    36f0:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	uint8 Frame_TX[12]= {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x0D, 0x00, 0x11};
    36f2:	ce 01       	movw	r24, r28
    36f4:	03 96       	adiw	r24, 0x03	; 3
    36f6:	98 8b       	std	Y+16, r25	; 0x10
    36f8:	8f 87       	std	Y+15, r24	; 0x0f
    36fa:	e5 ea       	ldi	r30, 0xA5	; 165
    36fc:	f1 e0       	ldi	r31, 0x01	; 1
    36fe:	fa 8b       	std	Y+18, r31	; 0x12
    3700:	e9 8b       	std	Y+17, r30	; 0x11
    3702:	fc e0       	ldi	r31, 0x0C	; 12
    3704:	fb 8b       	std	Y+19, r31	; 0x13
    3706:	e9 89       	ldd	r30, Y+17	; 0x11
    3708:	fa 89       	ldd	r31, Y+18	; 0x12
    370a:	00 80       	ld	r0, Z
    370c:	89 89       	ldd	r24, Y+17	; 0x11
    370e:	9a 89       	ldd	r25, Y+18	; 0x12
    3710:	01 96       	adiw	r24, 0x01	; 1
    3712:	9a 8b       	std	Y+18, r25	; 0x12
    3714:	89 8b       	std	Y+17, r24	; 0x11
    3716:	ef 85       	ldd	r30, Y+15	; 0x0f
    3718:	f8 89       	ldd	r31, Y+16	; 0x10
    371a:	00 82       	st	Z, r0
    371c:	8f 85       	ldd	r24, Y+15	; 0x0f
    371e:	98 89       	ldd	r25, Y+16	; 0x10
    3720:	01 96       	adiw	r24, 0x01	; 1
    3722:	98 8b       	std	Y+16, r25	; 0x10
    3724:	8f 87       	std	Y+15, r24	; 0x0f
    3726:	9b 89       	ldd	r25, Y+19	; 0x13
    3728:	91 50       	subi	r25, 0x01	; 1
    372a:	9b 8b       	std	Y+19, r25	; 0x13
    372c:	eb 89       	ldd	r30, Y+19	; 0x13
    372e:	ee 23       	and	r30, r30
    3730:	51 f7       	brne	.-44     	; 0x3706 <FingerPS_EmptyLibrary+0x2c>

	for(i= 0; i<12; i++)
    3732:	19 82       	std	Y+1, r1	; 0x01
    3734:	0e c0       	rjmp	.+28     	; 0x3752 <FingerPS_EmptyLibrary+0x78>
	{
		MCAL_UART_sendByte_Blocking(Frame_TX[i]);
    3736:	89 81       	ldd	r24, Y+1	; 0x01
    3738:	28 2f       	mov	r18, r24
    373a:	30 e0       	ldi	r19, 0x00	; 0
    373c:	ce 01       	movw	r24, r28
    373e:	03 96       	adiw	r24, 0x03	; 3
    3740:	fc 01       	movw	r30, r24
    3742:	e2 0f       	add	r30, r18
    3744:	f3 1f       	adc	r31, r19
    3746:	80 81       	ld	r24, Z
    3748:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <MCAL_UART_sendByte_Blocking>
{
	Error_FingerPS_t ret= FAILED_TO_OPERATE_COMM_PORT;
	uint8 i;
	uint8 Frame_TX[12]= {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x0D, 0x00, 0x11};

	for(i= 0; i<12; i++)
    374c:	89 81       	ldd	r24, Y+1	; 0x01
    374e:	8f 5f       	subi	r24, 0xFF	; 255
    3750:	89 83       	std	Y+1, r24	; 0x01
    3752:	89 81       	ldd	r24, Y+1	; 0x01
    3754:	8c 30       	cpi	r24, 0x0C	; 12
    3756:	78 f3       	brcs	.-34     	; 0x3736 <FingerPS_EmptyLibrary+0x5c>
	{
		MCAL_UART_sendByte_Blocking(Frame_TX[i]);
	}

	while(index < 12);
    3758:	80 91 e7 01 	lds	r24, 0x01E7
    375c:	8c 30       	cpi	r24, 0x0C	; 12
    375e:	e0 f3       	brcs	.-8      	; 0x3758 <FingerPS_EmptyLibrary+0x7e>
	ret= Frame_Received[9];
    3760:	80 91 0c 02 	lds	r24, 0x020C
    3764:	8a 83       	std	Y+2, r24	; 0x02
	index= 0;
    3766:	10 92 e7 01 	sts	0x01E7, r1
	return ret;
    376a:	8a 81       	ldd	r24, Y+2	; 0x02
}
    376c:	63 96       	adiw	r28, 0x13	; 19
    376e:	0f b6       	in	r0, 0x3f	; 63
    3770:	f8 94       	cli
    3772:	de bf       	out	0x3e, r29	; 62
    3774:	0f be       	out	0x3f, r0	; 63
    3776:	cd bf       	out	0x3d, r28	; 61
    3778:	cf 91       	pop	r28
    377a:	df 91       	pop	r29
    377c:	08 95       	ret

0000377e <FingerPS_CalculateCheckSum>:


static uint16 FingerPS_CalculateCheckSum(uint8 *pArr, uint8 size)
{
    377e:	df 93       	push	r29
    3780:	cf 93       	push	r28
    3782:	cd b7       	in	r28, 0x3d	; 61
    3784:	de b7       	in	r29, 0x3e	; 62
    3786:	27 97       	sbiw	r28, 0x07	; 7
    3788:	0f b6       	in	r0, 0x3f	; 63
    378a:	f8 94       	cli
    378c:	de bf       	out	0x3e, r29	; 62
    378e:	0f be       	out	0x3f, r0	; 63
    3790:	cd bf       	out	0x3d, r28	; 61
    3792:	9e 83       	std	Y+6, r25	; 0x06
    3794:	8d 83       	std	Y+5, r24	; 0x05
    3796:	6f 83       	std	Y+7, r22	; 0x07
	uint16 sum= 0;
    3798:	1c 82       	std	Y+4, r1	; 0x04
    379a:	1b 82       	std	Y+3, r1	; 0x03

	if(pArr == NULL_PTR)
    379c:	8d 81       	ldd	r24, Y+5	; 0x05
    379e:	9e 81       	ldd	r25, Y+6	; 0x06
    37a0:	00 97       	sbiw	r24, 0x00	; 0
    37a2:	29 f1       	breq	.+74     	; 0x37ee <FingerPS_CalculateCheckSum+0x70>
	{
		/* return error */
	}
	else
	{
		for(int i= 6; i< (size-2); i++)
    37a4:	86 e0       	ldi	r24, 0x06	; 6
    37a6:	90 e0       	ldi	r25, 0x00	; 0
    37a8:	9a 83       	std	Y+2, r25	; 0x02
    37aa:	89 83       	std	Y+1, r24	; 0x01
    37ac:	15 c0       	rjmp	.+42     	; 0x37d8 <FingerPS_CalculateCheckSum+0x5a>
		{
			sum+= pArr[i];
    37ae:	29 81       	ldd	r18, Y+1	; 0x01
    37b0:	3a 81       	ldd	r19, Y+2	; 0x02
    37b2:	8d 81       	ldd	r24, Y+5	; 0x05
    37b4:	9e 81       	ldd	r25, Y+6	; 0x06
    37b6:	fc 01       	movw	r30, r24
    37b8:	e2 0f       	add	r30, r18
    37ba:	f3 1f       	adc	r31, r19
    37bc:	80 81       	ld	r24, Z
    37be:	28 2f       	mov	r18, r24
    37c0:	30 e0       	ldi	r19, 0x00	; 0
    37c2:	8b 81       	ldd	r24, Y+3	; 0x03
    37c4:	9c 81       	ldd	r25, Y+4	; 0x04
    37c6:	82 0f       	add	r24, r18
    37c8:	93 1f       	adc	r25, r19
    37ca:	9c 83       	std	Y+4, r25	; 0x04
    37cc:	8b 83       	std	Y+3, r24	; 0x03
	{
		/* return error */
	}
	else
	{
		for(int i= 6; i< (size-2); i++)
    37ce:	89 81       	ldd	r24, Y+1	; 0x01
    37d0:	9a 81       	ldd	r25, Y+2	; 0x02
    37d2:	01 96       	adiw	r24, 0x01	; 1
    37d4:	9a 83       	std	Y+2, r25	; 0x02
    37d6:	89 83       	std	Y+1, r24	; 0x01
    37d8:	8f 81       	ldd	r24, Y+7	; 0x07
    37da:	88 2f       	mov	r24, r24
    37dc:	90 e0       	ldi	r25, 0x00	; 0
    37de:	9c 01       	movw	r18, r24
    37e0:	22 50       	subi	r18, 0x02	; 2
    37e2:	30 40       	sbci	r19, 0x00	; 0
    37e4:	89 81       	ldd	r24, Y+1	; 0x01
    37e6:	9a 81       	ldd	r25, Y+2	; 0x02
    37e8:	82 17       	cp	r24, r18
    37ea:	93 07       	cpc	r25, r19
    37ec:	04 f3       	brlt	.-64     	; 0x37ae <FingerPS_CalculateCheckSum+0x30>
		{
			sum+= pArr[i];
		}
	}
	return sum;
    37ee:	8b 81       	ldd	r24, Y+3	; 0x03
    37f0:	9c 81       	ldd	r25, Y+4	; 0x04
}
    37f2:	27 96       	adiw	r28, 0x07	; 7
    37f4:	0f b6       	in	r0, 0x3f	; 63
    37f6:	f8 94       	cli
    37f8:	de bf       	out	0x3e, r29	; 62
    37fa:	0f be       	out	0x3f, r0	; 63
    37fc:	cd bf       	out	0x3d, r28	; 61
    37fe:	cf 91       	pop	r28
    3800:	df 91       	pop	r29
    3802:	08 95       	ret

00003804 <FingerPS_LoadCharFile>:


Error_FingerPS_t FingerPS_LoadCharFile(Template_Buffer_t l_bufferID)
{
    3804:	df 93       	push	r29
    3806:	cf 93       	push	r28
    3808:	cd b7       	in	r28, 0x3d	; 61
    380a:	de b7       	in	r29, 0x3e	; 62
    380c:	62 97       	sbiw	r28, 0x12	; 18
    380e:	0f b6       	in	r0, 0x3f	; 63
    3810:	f8 94       	cli
    3812:	de bf       	out	0x3e, r29	; 62
    3814:	0f be       	out	0x3f, r0	; 63
    3816:	cd bf       	out	0x3d, r28	; 61
    3818:	8a 8b       	std	Y+18, r24	; 0x12
	Error_FingerPS_t ret= FAILED_TO_OPERATE_COMM_PORT;
    381a:	8d e1       	ldi	r24, 0x1D	; 29
    381c:	8c 83       	std	Y+4, r24	; 0x04
	uint8 i;
	uint8 Frame_TX[13]= {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x04, 0x08, l_bufferID, 0x00, 0x00};
    381e:	8f ee       	ldi	r24, 0xEF	; 239
    3820:	8d 83       	std	Y+5, r24	; 0x05
    3822:	81 e0       	ldi	r24, 0x01	; 1
    3824:	8e 83       	std	Y+6, r24	; 0x06
    3826:	8f ef       	ldi	r24, 0xFF	; 255
    3828:	8f 83       	std	Y+7, r24	; 0x07
    382a:	8f ef       	ldi	r24, 0xFF	; 255
    382c:	88 87       	std	Y+8, r24	; 0x08
    382e:	8f ef       	ldi	r24, 0xFF	; 255
    3830:	89 87       	std	Y+9, r24	; 0x09
    3832:	8f ef       	ldi	r24, 0xFF	; 255
    3834:	8a 87       	std	Y+10, r24	; 0x0a
    3836:	81 e0       	ldi	r24, 0x01	; 1
    3838:	8b 87       	std	Y+11, r24	; 0x0b
    383a:	1c 86       	std	Y+12, r1	; 0x0c
    383c:	84 e0       	ldi	r24, 0x04	; 4
    383e:	8d 87       	std	Y+13, r24	; 0x0d
    3840:	88 e0       	ldi	r24, 0x08	; 8
    3842:	8e 87       	std	Y+14, r24	; 0x0e
    3844:	8a 89       	ldd	r24, Y+18	; 0x12
    3846:	8f 87       	std	Y+15, r24	; 0x0f
    3848:	18 8a       	std	Y+16, r1	; 0x10
    384a:	19 8a       	std	Y+17, r1	; 0x11

	uint16 sum= 0;
    384c:	1a 82       	std	Y+2, r1	; 0x02
    384e:	19 82       	std	Y+1, r1	; 0x01

	sum= FingerPS_CalculateCheckSum(Frame_TX, 13);
    3850:	ce 01       	movw	r24, r28
    3852:	05 96       	adiw	r24, 0x05	; 5
    3854:	6d e0       	ldi	r22, 0x0D	; 13
    3856:	0e 94 bf 1b 	call	0x377e	; 0x377e <FingerPS_CalculateCheckSum>
    385a:	9a 83       	std	Y+2, r25	; 0x02
    385c:	89 83       	std	Y+1, r24	; 0x01
	Frame_TX[11]= (uint8)(sum >> 8);
    385e:	89 81       	ldd	r24, Y+1	; 0x01
    3860:	9a 81       	ldd	r25, Y+2	; 0x02
    3862:	89 2f       	mov	r24, r25
    3864:	99 27       	eor	r25, r25
    3866:	88 8b       	std	Y+16, r24	; 0x10
	Frame_TX[12]= (uint8)(sum & 0x00FF);
    3868:	89 81       	ldd	r24, Y+1	; 0x01
    386a:	89 8b       	std	Y+17, r24	; 0x11

	for(i= 0; i<13; i++)
    386c:	1b 82       	std	Y+3, r1	; 0x03
    386e:	0e c0       	rjmp	.+28     	; 0x388c <FingerPS_LoadCharFile+0x88>
	{
		MCAL_UART_sendByte_Blocking(Frame_TX[i]);
    3870:	8b 81       	ldd	r24, Y+3	; 0x03
    3872:	28 2f       	mov	r18, r24
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	ce 01       	movw	r24, r28
    3878:	05 96       	adiw	r24, 0x05	; 5
    387a:	fc 01       	movw	r30, r24
    387c:	e2 0f       	add	r30, r18
    387e:	f3 1f       	adc	r31, r19
    3880:	80 81       	ld	r24, Z
    3882:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <MCAL_UART_sendByte_Blocking>

	sum= FingerPS_CalculateCheckSum(Frame_TX, 13);
	Frame_TX[11]= (uint8)(sum >> 8);
	Frame_TX[12]= (uint8)(sum & 0x00FF);

	for(i= 0; i<13; i++)
    3886:	8b 81       	ldd	r24, Y+3	; 0x03
    3888:	8f 5f       	subi	r24, 0xFF	; 255
    388a:	8b 83       	std	Y+3, r24	; 0x03
    388c:	8b 81       	ldd	r24, Y+3	; 0x03
    388e:	8d 30       	cpi	r24, 0x0D	; 13
    3890:	78 f3       	brcs	.-34     	; 0x3870 <FingerPS_LoadCharFile+0x6c>
	{
		MCAL_UART_sendByte_Blocking(Frame_TX[i]);
	}

	while(index < 12);
    3892:	80 91 e7 01 	lds	r24, 0x01E7
    3896:	8c 30       	cpi	r24, 0x0C	; 12
    3898:	e0 f3       	brcs	.-8      	; 0x3892 <FingerPS_LoadCharFile+0x8e>
	ret= Frame_Received[9];
    389a:	80 91 0c 02 	lds	r24, 0x020C
    389e:	8c 83       	std	Y+4, r24	; 0x04
	index= 0;
    38a0:	10 92 e7 01 	sts	0x01E7, r1
	return ret;
    38a4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    38a6:	62 96       	adiw	r28, 0x12	; 18
    38a8:	0f b6       	in	r0, 0x3f	; 63
    38aa:	f8 94       	cli
    38ac:	de bf       	out	0x3e, r29	; 62
    38ae:	0f be       	out	0x3f, r0	; 63
    38b0:	cd bf       	out	0x3d, r28	; 61
    38b2:	cf 91       	pop	r28
    38b4:	df 91       	pop	r29
    38b6:	08 95       	ret

000038b8 <FingerPS_ReadTemplateFromFlash>:


Error_FingerPS_t FingerPS_ReadTemplateFromFlash(Template_Buffer_t l_bufferID, uint16 l_pageID)
{
    38b8:	df 93       	push	r29
    38ba:	cf 93       	push	r28
    38bc:	cd b7       	in	r28, 0x3d	; 61
    38be:	de b7       	in	r29, 0x3e	; 62
    38c0:	66 97       	sbiw	r28, 0x16	; 22
    38c2:	0f b6       	in	r0, 0x3f	; 63
    38c4:	f8 94       	cli
    38c6:	de bf       	out	0x3e, r29	; 62
    38c8:	0f be       	out	0x3f, r0	; 63
    38ca:	cd bf       	out	0x3d, r28	; 61
    38cc:	8c 8b       	std	Y+20, r24	; 0x14
    38ce:	7e 8b       	std	Y+22, r23	; 0x16
    38d0:	6d 8b       	std	Y+21, r22	; 0x15
	Error_FingerPS_t ret= FAILED_TO_OPERATE_COMM_PORT;
    38d2:	8d e1       	ldi	r24, 0x1D	; 29
    38d4:	8c 83       	std	Y+4, r24	; 0x04
	uint8 i;
	uint8 Frame_TX[15]= {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x06, 0x07, l_bufferID, (l_pageID>>8), (l_pageID&0x00FF), 0x00, 0x00};
    38d6:	8d 89       	ldd	r24, Y+21	; 0x15
    38d8:	9e 89       	ldd	r25, Y+22	; 0x16
    38da:	89 2f       	mov	r24, r25
    38dc:	99 27       	eor	r25, r25
    38de:	98 2f       	mov	r25, r24
    38e0:	2d 89       	ldd	r18, Y+21	; 0x15
    38e2:	8f ee       	ldi	r24, 0xEF	; 239
    38e4:	8d 83       	std	Y+5, r24	; 0x05
    38e6:	81 e0       	ldi	r24, 0x01	; 1
    38e8:	8e 83       	std	Y+6, r24	; 0x06
    38ea:	8f ef       	ldi	r24, 0xFF	; 255
    38ec:	8f 83       	std	Y+7, r24	; 0x07
    38ee:	8f ef       	ldi	r24, 0xFF	; 255
    38f0:	88 87       	std	Y+8, r24	; 0x08
    38f2:	8f ef       	ldi	r24, 0xFF	; 255
    38f4:	89 87       	std	Y+9, r24	; 0x09
    38f6:	8f ef       	ldi	r24, 0xFF	; 255
    38f8:	8a 87       	std	Y+10, r24	; 0x0a
    38fa:	81 e0       	ldi	r24, 0x01	; 1
    38fc:	8b 87       	std	Y+11, r24	; 0x0b
    38fe:	1c 86       	std	Y+12, r1	; 0x0c
    3900:	86 e0       	ldi	r24, 0x06	; 6
    3902:	8d 87       	std	Y+13, r24	; 0x0d
    3904:	87 e0       	ldi	r24, 0x07	; 7
    3906:	8e 87       	std	Y+14, r24	; 0x0e
    3908:	8c 89       	ldd	r24, Y+20	; 0x14
    390a:	8f 87       	std	Y+15, r24	; 0x0f
    390c:	98 8b       	std	Y+16, r25	; 0x10
    390e:	29 8b       	std	Y+17, r18	; 0x11
    3910:	1a 8a       	std	Y+18, r1	; 0x12
    3912:	1b 8a       	std	Y+19, r1	; 0x13

	uint16 sum= 0;
    3914:	1a 82       	std	Y+2, r1	; 0x02
    3916:	19 82       	std	Y+1, r1	; 0x01

	sum= FingerPS_CalculateCheckSum(Frame_TX, 15);
    3918:	ce 01       	movw	r24, r28
    391a:	05 96       	adiw	r24, 0x05	; 5
    391c:	6f e0       	ldi	r22, 0x0F	; 15
    391e:	0e 94 bf 1b 	call	0x377e	; 0x377e <FingerPS_CalculateCheckSum>
    3922:	9a 83       	std	Y+2, r25	; 0x02
    3924:	89 83       	std	Y+1, r24	; 0x01
	Frame_TX[13]= (uint8)(sum >> 8);
    3926:	89 81       	ldd	r24, Y+1	; 0x01
    3928:	9a 81       	ldd	r25, Y+2	; 0x02
    392a:	89 2f       	mov	r24, r25
    392c:	99 27       	eor	r25, r25
    392e:	8a 8b       	std	Y+18, r24	; 0x12
	Frame_TX[14]= (uint8)(sum & 0x00FF);
    3930:	89 81       	ldd	r24, Y+1	; 0x01
    3932:	8b 8b       	std	Y+19, r24	; 0x13

	for(i= 0; i<15; i++)
    3934:	1b 82       	std	Y+3, r1	; 0x03
    3936:	0e c0       	rjmp	.+28     	; 0x3954 <FingerPS_ReadTemplateFromFlash+0x9c>
	{
		MCAL_UART_sendByte_Blocking(Frame_TX[i]);
    3938:	8b 81       	ldd	r24, Y+3	; 0x03
    393a:	28 2f       	mov	r18, r24
    393c:	30 e0       	ldi	r19, 0x00	; 0
    393e:	ce 01       	movw	r24, r28
    3940:	05 96       	adiw	r24, 0x05	; 5
    3942:	fc 01       	movw	r30, r24
    3944:	e2 0f       	add	r30, r18
    3946:	f3 1f       	adc	r31, r19
    3948:	80 81       	ld	r24, Z
    394a:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <MCAL_UART_sendByte_Blocking>

	sum= FingerPS_CalculateCheckSum(Frame_TX, 15);
	Frame_TX[13]= (uint8)(sum >> 8);
	Frame_TX[14]= (uint8)(sum & 0x00FF);

	for(i= 0; i<15; i++)
    394e:	8b 81       	ldd	r24, Y+3	; 0x03
    3950:	8f 5f       	subi	r24, 0xFF	; 255
    3952:	8b 83       	std	Y+3, r24	; 0x03
    3954:	8b 81       	ldd	r24, Y+3	; 0x03
    3956:	8f 30       	cpi	r24, 0x0F	; 15
    3958:	78 f3       	brcs	.-34     	; 0x3938 <FingerPS_ReadTemplateFromFlash+0x80>
	{
		MCAL_UART_sendByte_Blocking(Frame_TX[i]);
	}

	while(index < 12);
    395a:	80 91 e7 01 	lds	r24, 0x01E7
    395e:	8c 30       	cpi	r24, 0x0C	; 12
    3960:	e0 f3       	brcs	.-8      	; 0x395a <FingerPS_ReadTemplateFromFlash+0xa2>
	ret= Frame_Received[9];
    3962:	80 91 0c 02 	lds	r24, 0x020C
    3966:	8c 83       	std	Y+4, r24	; 0x04
	index= 0;
    3968:	10 92 e7 01 	sts	0x01E7, r1
	return ret;
    396c:	8c 81       	ldd	r24, Y+4	; 0x04
}
    396e:	66 96       	adiw	r28, 0x16	; 22
    3970:	0f b6       	in	r0, 0x3f	; 63
    3972:	f8 94       	cli
    3974:	de bf       	out	0x3e, r29	; 62
    3976:	0f be       	out	0x3f, r0	; 63
    3978:	cd bf       	out	0x3d, r28	; 61
    397a:	cf 91       	pop	r28
    397c:	df 91       	pop	r29
    397e:	08 95       	ret

00003980 <FingerPS_FingerPrintMatch>:

Error_FingerPS_t FingerPS_FingerPrintMatch(void)
{
    3980:	df 93       	push	r29
    3982:	cf 93       	push	r28
    3984:	cd b7       	in	r28, 0x3d	; 61
    3986:	de b7       	in	r29, 0x3e	; 62
    3988:	63 97       	sbiw	r28, 0x13	; 19
    398a:	0f b6       	in	r0, 0x3f	; 63
    398c:	f8 94       	cli
    398e:	de bf       	out	0x3e, r29	; 62
    3990:	0f be       	out	0x3f, r0	; 63
    3992:	cd bf       	out	0x3d, r28	; 61
	Error_FingerPS_t ret= FAILED_TO_OPERATE_COMM_PORT;
    3994:	8d e1       	ldi	r24, 0x1D	; 29
    3996:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	uint8 Frame_TX[12]= {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x03, 0x00, 0x07};
    3998:	ce 01       	movw	r24, r28
    399a:	03 96       	adiw	r24, 0x03	; 3
    399c:	98 8b       	std	Y+16, r25	; 0x10
    399e:	8f 87       	std	Y+15, r24	; 0x0f
    39a0:	e1 eb       	ldi	r30, 0xB1	; 177
    39a2:	f1 e0       	ldi	r31, 0x01	; 1
    39a4:	fa 8b       	std	Y+18, r31	; 0x12
    39a6:	e9 8b       	std	Y+17, r30	; 0x11
    39a8:	fc e0       	ldi	r31, 0x0C	; 12
    39aa:	fb 8b       	std	Y+19, r31	; 0x13
    39ac:	e9 89       	ldd	r30, Y+17	; 0x11
    39ae:	fa 89       	ldd	r31, Y+18	; 0x12
    39b0:	00 80       	ld	r0, Z
    39b2:	89 89       	ldd	r24, Y+17	; 0x11
    39b4:	9a 89       	ldd	r25, Y+18	; 0x12
    39b6:	01 96       	adiw	r24, 0x01	; 1
    39b8:	9a 8b       	std	Y+18, r25	; 0x12
    39ba:	89 8b       	std	Y+17, r24	; 0x11
    39bc:	ef 85       	ldd	r30, Y+15	; 0x0f
    39be:	f8 89       	ldd	r31, Y+16	; 0x10
    39c0:	00 82       	st	Z, r0
    39c2:	8f 85       	ldd	r24, Y+15	; 0x0f
    39c4:	98 89       	ldd	r25, Y+16	; 0x10
    39c6:	01 96       	adiw	r24, 0x01	; 1
    39c8:	98 8b       	std	Y+16, r25	; 0x10
    39ca:	8f 87       	std	Y+15, r24	; 0x0f
    39cc:	9b 89       	ldd	r25, Y+19	; 0x13
    39ce:	91 50       	subi	r25, 0x01	; 1
    39d0:	9b 8b       	std	Y+19, r25	; 0x13
    39d2:	eb 89       	ldd	r30, Y+19	; 0x13
    39d4:	ee 23       	and	r30, r30
    39d6:	51 f7       	brne	.-44     	; 0x39ac <FingerPS_FingerPrintMatch+0x2c>

	for(i= 0; i<12; i++)
    39d8:	19 82       	std	Y+1, r1	; 0x01
    39da:	0e c0       	rjmp	.+28     	; 0x39f8 <FingerPS_FingerPrintMatch+0x78>
	{
		MCAL_UART_sendByte_Blocking(Frame_TX[i]);
    39dc:	89 81       	ldd	r24, Y+1	; 0x01
    39de:	28 2f       	mov	r18, r24
    39e0:	30 e0       	ldi	r19, 0x00	; 0
    39e2:	ce 01       	movw	r24, r28
    39e4:	03 96       	adiw	r24, 0x03	; 3
    39e6:	fc 01       	movw	r30, r24
    39e8:	e2 0f       	add	r30, r18
    39ea:	f3 1f       	adc	r31, r19
    39ec:	80 81       	ld	r24, Z
    39ee:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <MCAL_UART_sendByte_Blocking>
{
	Error_FingerPS_t ret= FAILED_TO_OPERATE_COMM_PORT;
	uint8 i;
	uint8 Frame_TX[12]= {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x03, 0x00, 0x07};

	for(i= 0; i<12; i++)
    39f2:	89 81       	ldd	r24, Y+1	; 0x01
    39f4:	8f 5f       	subi	r24, 0xFF	; 255
    39f6:	89 83       	std	Y+1, r24	; 0x01
    39f8:	89 81       	ldd	r24, Y+1	; 0x01
    39fa:	8c 30       	cpi	r24, 0x0C	; 12
    39fc:	78 f3       	brcs	.-34     	; 0x39dc <FingerPS_FingerPrintMatch+0x5c>
	{
		MCAL_UART_sendByte_Blocking(Frame_TX[i]);
	}

	while(index < 12);
    39fe:	80 91 e7 01 	lds	r24, 0x01E7
    3a02:	8c 30       	cpi	r24, 0x0C	; 12
    3a04:	e0 f3       	brcs	.-8      	; 0x39fe <FingerPS_FingerPrintMatch+0x7e>
	ret= Frame_Received[9];
    3a06:	80 91 0c 02 	lds	r24, 0x020C
    3a0a:	8a 83       	std	Y+2, r24	; 0x02
	index= 0;
    3a0c:	10 92 e7 01 	sts	0x01E7, r1
	return ret;
    3a10:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3a12:	63 96       	adiw	r28, 0x13	; 19
    3a14:	0f b6       	in	r0, 0x3f	; 63
    3a16:	f8 94       	cli
    3a18:	de bf       	out	0x3e, r29	; 62
    3a1a:	0f be       	out	0x3f, r0	; 63
    3a1c:	cd bf       	out	0x3d, r28	; 61
    3a1e:	cf 91       	pop	r28
    3a20:	df 91       	pop	r29
    3a22:	08 95       	ret

00003a24 <FingerPS_ReadProductInfo>:


Error_FingerPS_t FingerPS_ReadProductInfo(void)
{
    3a24:	df 93       	push	r29
    3a26:	cf 93       	push	r28
    3a28:	cd b7       	in	r28, 0x3d	; 61
    3a2a:	de b7       	in	r29, 0x3e	; 62
    3a2c:	63 97       	sbiw	r28, 0x13	; 19
    3a2e:	0f b6       	in	r0, 0x3f	; 63
    3a30:	f8 94       	cli
    3a32:	de bf       	out	0x3e, r29	; 62
    3a34:	0f be       	out	0x3f, r0	; 63
    3a36:	cd bf       	out	0x3d, r28	; 61
	Error_FingerPS_t ret= FAILED_TO_OPERATE_COMM_PORT;
    3a38:	8d e1       	ldi	r24, 0x1D	; 29
    3a3a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i;
	uint8 Frame_TX[12]= {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x3C, 0x00, 0x40};
    3a3c:	ce 01       	movw	r24, r28
    3a3e:	03 96       	adiw	r24, 0x03	; 3
    3a40:	98 8b       	std	Y+16, r25	; 0x10
    3a42:	8f 87       	std	Y+15, r24	; 0x0f
    3a44:	ed eb       	ldi	r30, 0xBD	; 189
    3a46:	f1 e0       	ldi	r31, 0x01	; 1
    3a48:	fa 8b       	std	Y+18, r31	; 0x12
    3a4a:	e9 8b       	std	Y+17, r30	; 0x11
    3a4c:	fc e0       	ldi	r31, 0x0C	; 12
    3a4e:	fb 8b       	std	Y+19, r31	; 0x13
    3a50:	e9 89       	ldd	r30, Y+17	; 0x11
    3a52:	fa 89       	ldd	r31, Y+18	; 0x12
    3a54:	00 80       	ld	r0, Z
    3a56:	89 89       	ldd	r24, Y+17	; 0x11
    3a58:	9a 89       	ldd	r25, Y+18	; 0x12
    3a5a:	01 96       	adiw	r24, 0x01	; 1
    3a5c:	9a 8b       	std	Y+18, r25	; 0x12
    3a5e:	89 8b       	std	Y+17, r24	; 0x11
    3a60:	ef 85       	ldd	r30, Y+15	; 0x0f
    3a62:	f8 89       	ldd	r31, Y+16	; 0x10
    3a64:	00 82       	st	Z, r0
    3a66:	8f 85       	ldd	r24, Y+15	; 0x0f
    3a68:	98 89       	ldd	r25, Y+16	; 0x10
    3a6a:	01 96       	adiw	r24, 0x01	; 1
    3a6c:	98 8b       	std	Y+16, r25	; 0x10
    3a6e:	8f 87       	std	Y+15, r24	; 0x0f
    3a70:	9b 89       	ldd	r25, Y+19	; 0x13
    3a72:	91 50       	subi	r25, 0x01	; 1
    3a74:	9b 8b       	std	Y+19, r25	; 0x13
    3a76:	eb 89       	ldd	r30, Y+19	; 0x13
    3a78:	ee 23       	and	r30, r30
    3a7a:	51 f7       	brne	.-44     	; 0x3a50 <FingerPS_ReadProductInfo+0x2c>

	for(i= 0; i<12; i++)
    3a7c:	19 82       	std	Y+1, r1	; 0x01
    3a7e:	0e c0       	rjmp	.+28     	; 0x3a9c <FingerPS_ReadProductInfo+0x78>
	{
		MCAL_UART_sendByte_Blocking(Frame_TX[i]);
    3a80:	89 81       	ldd	r24, Y+1	; 0x01
    3a82:	28 2f       	mov	r18, r24
    3a84:	30 e0       	ldi	r19, 0x00	; 0
    3a86:	ce 01       	movw	r24, r28
    3a88:	03 96       	adiw	r24, 0x03	; 3
    3a8a:	fc 01       	movw	r30, r24
    3a8c:	e2 0f       	add	r30, r18
    3a8e:	f3 1f       	adc	r31, r19
    3a90:	80 81       	ld	r24, Z
    3a92:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <MCAL_UART_sendByte_Blocking>
{
	Error_FingerPS_t ret= FAILED_TO_OPERATE_COMM_PORT;
	uint8 i;
	uint8 Frame_TX[12]= {0xEF, 0x01, 0xFF, 0xFF, 0xFF, 0xFF, 0x01, 0x00, 0x03, 0x3C, 0x00, 0x40};

	for(i= 0; i<12; i++)
    3a96:	89 81       	ldd	r24, Y+1	; 0x01
    3a98:	8f 5f       	subi	r24, 0xFF	; 255
    3a9a:	89 83       	std	Y+1, r24	; 0x01
    3a9c:	89 81       	ldd	r24, Y+1	; 0x01
    3a9e:	8c 30       	cpi	r24, 0x0C	; 12
    3aa0:	78 f3       	brcs	.-34     	; 0x3a80 <FingerPS_ReadProductInfo+0x5c>
	{
		MCAL_UART_sendByte_Blocking(Frame_TX[i]);
	}

	while(index < 58);
    3aa2:	80 91 e7 01 	lds	r24, 0x01E7
    3aa6:	8a 33       	cpi	r24, 0x3A	; 58
    3aa8:	e0 f3       	brcs	.-8      	; 0x3aa2 <FingerPS_ReadProductInfo+0x7e>
	ret= Frame_Received[9];
    3aaa:	80 91 0c 02 	lds	r24, 0x020C
    3aae:	8a 83       	std	Y+2, r24	; 0x02
	index= 0;
    3ab0:	10 92 e7 01 	sts	0x01E7, r1
	return ret;
    3ab4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3ab6:	63 96       	adiw	r28, 0x13	; 19
    3ab8:	0f b6       	in	r0, 0x3f	; 63
    3aba:	f8 94       	cli
    3abc:	de bf       	out	0x3e, r29	; 62
    3abe:	0f be       	out	0x3f, r0	; 63
    3ac0:	cd bf       	out	0x3d, r28	; 61
    3ac2:	cf 91       	pop	r28
    3ac4:	df 91       	pop	r29
    3ac6:	08 95       	ret

00003ac8 <KEYPAD_INIT>:
 * @param [in] 			-none
 * @retval 				-ERROR_STATUS if the Intilization is Successed or not (E_OK, E_NOK)
 * Note					-none
 */
ErrorState_t KEYPAD_INIT()
{
    3ac8:	df 93       	push	r29
    3aca:	cf 93       	push	r28
    3acc:	cd b7       	in	r28, 0x3d	; 61
    3ace:	de b7       	in	r29, 0x3e	; 62

	DIO_voidSetPinDirection(COL_PORT, C1_PIN, PIN_INPUT);
    3ad0:	80 e3       	ldi	r24, 0x30	; 48
    3ad2:	90 e0       	ldi	r25, 0x00	; 0
    3ad4:	67 e0       	ldi	r22, 0x07	; 7
    3ad6:	40 e0       	ldi	r20, 0x00	; 0
    3ad8:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(COL_PORT, C2_PIN, PIN_INPUT);
    3adc:	80 e3       	ldi	r24, 0x30	; 48
    3ade:	90 e0       	ldi	r25, 0x00	; 0
    3ae0:	66 e0       	ldi	r22, 0x06	; 6
    3ae2:	40 e0       	ldi	r20, 0x00	; 0
    3ae4:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(COL_PORT, C3_PIN, PIN_INPUT);
    3ae8:	80 e3       	ldi	r24, 0x30	; 48
    3aea:	90 e0       	ldi	r25, 0x00	; 0
    3aec:	65 e0       	ldi	r22, 0x05	; 5
    3aee:	40 e0       	ldi	r20, 0x00	; 0
    3af0:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(COL_PORT, C4_PIN, PIN_INPUT);
    3af4:	80 e3       	ldi	r24, 0x30	; 48
    3af6:	90 e0       	ldi	r25, 0x00	; 0
    3af8:	63 e0       	ldi	r22, 0x03	; 3
    3afa:	40 e0       	ldi	r20, 0x00	; 0
    3afc:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(ROW_PORT, R4_PIN, Pin_OUTPUT);
    3b00:	83 e3       	ldi	r24, 0x33	; 51
    3b02:	90 e0       	ldi	r25, 0x00	; 0
    3b04:	62 e0       	ldi	r22, 0x02	; 2
    3b06:	41 e0       	ldi	r20, 0x01	; 1
    3b08:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ROW_PORT, R3_PIN, Pin_OUTPUT);
    3b0c:	83 e3       	ldi	r24, 0x33	; 51
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	63 e0       	ldi	r22, 0x03	; 3
    3b12:	41 e0       	ldi	r20, 0x01	; 1
    3b14:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ROW_PORT, R2_PIN, Pin_OUTPUT);
    3b18:	83 e3       	ldi	r24, 0x33	; 51
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	64 e0       	ldi	r22, 0x04	; 4
    3b1e:	41 e0       	ldi	r20, 0x01	; 1
    3b20:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(ROW_PORT, R1_PIN, Pin_OUTPUT);
    3b24:	83 e3       	ldi	r24, 0x33	; 51
    3b26:	90 e0       	ldi	r25, 0x00	; 0
    3b28:	65 e0       	ldi	r22, 0x05	; 5
    3b2a:	41 e0       	ldi	r20, 0x01	; 1
    3b2c:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>



	return E_OK;
    3b30:	80 e0       	ldi	r24, 0x00	; 0
}
    3b32:	cf 91       	pop	r28
    3b34:	df 91       	pop	r29
    3b36:	08 95       	ret

00003b38 <KEYPAD_Get_Pressed_Key>:
 * @retval 				-The Key Pressed (uint8_t)
 * Note					-This Function Use the Single press api to avoid debouncing also make sure
 * 						 that the press is a single press
 */
uint8_t KEYPAD_Get_Pressed_Key(void)
{
    3b38:	df 93       	push	r29
    3b3a:	cf 93       	push	r28
    3b3c:	cd b7       	in	r28, 0x3d	; 61
    3b3e:	de b7       	in	r29, 0x3e	; 62
    3b40:	af 97       	sbiw	r28, 0x2f	; 47
    3b42:	0f b6       	in	r0, 0x3f	; 63
    3b44:	f8 94       	cli
    3b46:	de bf       	out	0x3e, r29	; 62
    3b48:	0f be       	out	0x3f, r0	; 63
    3b4a:	cd bf       	out	0x3d, r28	; 61
	uint8_t  i,j;
	uint8_t rows[]={R4_PIN,R3_PIN,R2_PIN,R1_PIN};
    3b4c:	82 e0       	ldi	r24, 0x02	; 2
    3b4e:	8b 8b       	std	Y+19, r24	; 0x13
    3b50:	83 e0       	ldi	r24, 0x03	; 3
    3b52:	8c 8b       	std	Y+20, r24	; 0x14
    3b54:	84 e0       	ldi	r24, 0x04	; 4
    3b56:	8d 8b       	std	Y+21, r24	; 0x15
    3b58:	85 e0       	ldi	r24, 0x05	; 5
    3b5a:	8e 8b       	std	Y+22, r24	; 0x16
	uint8_t cols[]={C1_PIN,C2_PIN,C3_PIN,C4_PIN};
    3b5c:	87 e0       	ldi	r24, 0x07	; 7
    3b5e:	8f 8b       	std	Y+23, r24	; 0x17
    3b60:	86 e0       	ldi	r24, 0x06	; 6
    3b62:	88 8f       	std	Y+24, r24	; 0x18
    3b64:	85 e0       	ldi	r24, 0x05	; 5
    3b66:	89 8f       	std	Y+25, r24	; 0x19
    3b68:	83 e0       	ldi	r24, 0x03	; 3
    3b6a:	8a 8f       	std	Y+26, r24	; 0x1a

	uint8_t KEYPAD_ARR[4][4] = KEYPAD;
    3b6c:	ce 01       	movw	r24, r28
    3b6e:	4b 96       	adiw	r24, 0x1b	; 27
    3b70:	9c a7       	std	Y+44, r25	; 0x2c
    3b72:	8b a7       	std	Y+43, r24	; 0x2b
    3b74:	e9 ec       	ldi	r30, 0xC9	; 201
    3b76:	f1 e0       	ldi	r31, 0x01	; 1
    3b78:	fe a7       	std	Y+46, r31	; 0x2e
    3b7a:	ed a7       	std	Y+45, r30	; 0x2d
    3b7c:	f0 e1       	ldi	r31, 0x10	; 16
    3b7e:	ff a7       	std	Y+47, r31	; 0x2f
    3b80:	ed a5       	ldd	r30, Y+45	; 0x2d
    3b82:	fe a5       	ldd	r31, Y+46	; 0x2e
    3b84:	00 80       	ld	r0, Z
    3b86:	8d a5       	ldd	r24, Y+45	; 0x2d
    3b88:	9e a5       	ldd	r25, Y+46	; 0x2e
    3b8a:	01 96       	adiw	r24, 0x01	; 1
    3b8c:	9e a7       	std	Y+46, r25	; 0x2e
    3b8e:	8d a7       	std	Y+45, r24	; 0x2d
    3b90:	eb a5       	ldd	r30, Y+43	; 0x2b
    3b92:	fc a5       	ldd	r31, Y+44	; 0x2c
    3b94:	00 82       	st	Z, r0
    3b96:	8b a5       	ldd	r24, Y+43	; 0x2b
    3b98:	9c a5       	ldd	r25, Y+44	; 0x2c
    3b9a:	01 96       	adiw	r24, 0x01	; 1
    3b9c:	9c a7       	std	Y+44, r25	; 0x2c
    3b9e:	8b a7       	std	Y+43, r24	; 0x2b
    3ba0:	9f a5       	ldd	r25, Y+47	; 0x2f
    3ba2:	91 50       	subi	r25, 0x01	; 1
    3ba4:	9f a7       	std	Y+47, r25	; 0x2f
    3ba6:	ef a5       	ldd	r30, Y+47	; 0x2f
    3ba8:	ee 23       	and	r30, r30
    3baa:	51 f7       	brne	.-44     	; 0x3b80 <KEYPAD_Get_Pressed_Key+0x48>
	uint8_t key = 0;
    3bac:	18 8a       	std	Y+16, r1	; 0x10

	uint8_t flag;
	while(1)
	{
		for(i = 0; i <=4; i++)
    3bae:	1a 8a       	std	Y+18, r1	; 0x12
    3bb0:	cb c0       	rjmp	.+406    	; 0x3d48 <KEYPAD_Get_Pressed_Key+0x210>
		{
			DIO_voidSetPinValue(ROW_PORT, rows[i], LOW);
    3bb2:	8a 89       	ldd	r24, Y+18	; 0x12
    3bb4:	28 2f       	mov	r18, r24
    3bb6:	30 e0       	ldi	r19, 0x00	; 0
    3bb8:	ce 01       	movw	r24, r28
    3bba:	43 96       	adiw	r24, 0x13	; 19
    3bbc:	fc 01       	movw	r30, r24
    3bbe:	e2 0f       	add	r30, r18
    3bc0:	f3 1f       	adc	r31, r19
    3bc2:	20 81       	ld	r18, Z
    3bc4:	83 e3       	ldi	r24, 0x33	; 51
    3bc6:	90 e0       	ldi	r25, 0x00	; 0
    3bc8:	62 2f       	mov	r22, r18
    3bca:	40 e0       	ldi	r20, 0x00	; 0
    3bcc:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>

			for(j = 0; j <=4; j++)
    3bd0:	19 8a       	std	Y+17, r1	; 0x11
    3bd2:	33 c0       	rjmp	.+102    	; 0x3c3a <KEYPAD_Get_Pressed_Key+0x102>
			{
				flag = Single_press(COL_PORT, cols[j]);
    3bd4:	89 89       	ldd	r24, Y+17	; 0x11
    3bd6:	28 2f       	mov	r18, r24
    3bd8:	30 e0       	ldi	r19, 0x00	; 0
    3bda:	ce 01       	movw	r24, r28
    3bdc:	47 96       	adiw	r24, 0x17	; 23
    3bde:	fc 01       	movw	r30, r24
    3be0:	e2 0f       	add	r30, r18
    3be2:	f3 1f       	adc	r31, r19
    3be4:	20 81       	ld	r18, Z
    3be6:	80 e3       	ldi	r24, 0x30	; 48
    3be8:	90 e0       	ldi	r25, 0x00	; 0
    3bea:	62 2f       	mov	r22, r18
    3bec:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <Single_press>
    3bf0:	8f 87       	std	Y+15, r24	; 0x0f
				if(flag == pressed)
    3bf2:	8f 85       	ldd	r24, Y+15	; 0x0f
    3bf4:	81 30       	cpi	r24, 0x01	; 1
    3bf6:	f1 f4       	brne	.+60     	; 0x3c34 <KEYPAD_Get_Pressed_Key+0xfc>
				{
					key = KEYPAD_ARR[i][j];
    3bf8:	8a 89       	ldd	r24, Y+18	; 0x12
    3bfa:	28 2f       	mov	r18, r24
    3bfc:	30 e0       	ldi	r19, 0x00	; 0
    3bfe:	89 89       	ldd	r24, Y+17	; 0x11
    3c00:	48 2f       	mov	r20, r24
    3c02:	50 e0       	ldi	r21, 0x00	; 0
    3c04:	22 0f       	add	r18, r18
    3c06:	33 1f       	adc	r19, r19
    3c08:	22 0f       	add	r18, r18
    3c0a:	33 1f       	adc	r19, r19
    3c0c:	ce 01       	movw	r24, r28
    3c0e:	01 96       	adiw	r24, 0x01	; 1
    3c10:	82 0f       	add	r24, r18
    3c12:	93 1f       	adc	r25, r19
    3c14:	84 0f       	add	r24, r20
    3c16:	95 1f       	adc	r25, r21
    3c18:	fc 01       	movw	r30, r24
    3c1a:	7a 96       	adiw	r30, 0x1a	; 26
    3c1c:	80 81       	ld	r24, Z
    3c1e:	88 8b       	std	Y+16, r24	; 0x10
					return key;
    3c20:	88 89       	ldd	r24, Y+16	; 0x10


		}
		//return key;
	}
}
    3c22:	af 96       	adiw	r28, 0x2f	; 47
    3c24:	0f b6       	in	r0, 0x3f	; 63
    3c26:	f8 94       	cli
    3c28:	de bf       	out	0x3e, r29	; 62
    3c2a:	0f be       	out	0x3f, r0	; 63
    3c2c:	cd bf       	out	0x3d, r28	; 61
    3c2e:	cf 91       	pop	r28
    3c30:	df 91       	pop	r29
    3c32:	08 95       	ret
	{
		for(i = 0; i <=4; i++)
		{
			DIO_voidSetPinValue(ROW_PORT, rows[i], LOW);

			for(j = 0; j <=4; j++)
    3c34:	89 89       	ldd	r24, Y+17	; 0x11
    3c36:	8f 5f       	subi	r24, 0xFF	; 255
    3c38:	89 8b       	std	Y+17, r24	; 0x11
    3c3a:	89 89       	ldd	r24, Y+17	; 0x11
    3c3c:	85 30       	cpi	r24, 0x05	; 5
    3c3e:	50 f2       	brcs	.-108    	; 0x3bd4 <KEYPAD_Get_Pressed_Key+0x9c>
					return key;

				}

			}
			DIO_voidSetPinValue(ROW_PORT, rows[i], HIGH);
    3c40:	8a 89       	ldd	r24, Y+18	; 0x12
    3c42:	28 2f       	mov	r18, r24
    3c44:	30 e0       	ldi	r19, 0x00	; 0
    3c46:	ce 01       	movw	r24, r28
    3c48:	43 96       	adiw	r24, 0x13	; 19
    3c4a:	fc 01       	movw	r30, r24
    3c4c:	e2 0f       	add	r30, r18
    3c4e:	f3 1f       	adc	r31, r19
    3c50:	20 81       	ld	r18, Z
    3c52:	83 e3       	ldi	r24, 0x33	; 51
    3c54:	90 e0       	ldi	r25, 0x00	; 0
    3c56:	62 2f       	mov	r22, r18
    3c58:	41 e0       	ldi	r20, 0x01	; 1
    3c5a:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    3c5e:	80 e0       	ldi	r24, 0x00	; 0
    3c60:	90 e0       	ldi	r25, 0x00	; 0
    3c62:	a0 e2       	ldi	r26, 0x20	; 32
    3c64:	b1 e4       	ldi	r27, 0x41	; 65
    3c66:	8b 87       	std	Y+11, r24	; 0x0b
    3c68:	9c 87       	std	Y+12, r25	; 0x0c
    3c6a:	ad 87       	std	Y+13, r26	; 0x0d
    3c6c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c6e:	6b 85       	ldd	r22, Y+11	; 0x0b
    3c70:	7c 85       	ldd	r23, Y+12	; 0x0c
    3c72:	8d 85       	ldd	r24, Y+13	; 0x0d
    3c74:	9e 85       	ldd	r25, Y+14	; 0x0e
    3c76:	20 e0       	ldi	r18, 0x00	; 0
    3c78:	30 e0       	ldi	r19, 0x00	; 0
    3c7a:	4a e7       	ldi	r20, 0x7A	; 122
    3c7c:	55 e4       	ldi	r21, 0x45	; 69
    3c7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c82:	dc 01       	movw	r26, r24
    3c84:	cb 01       	movw	r24, r22
    3c86:	8f 83       	std	Y+7, r24	; 0x07
    3c88:	98 87       	std	Y+8, r25	; 0x08
    3c8a:	a9 87       	std	Y+9, r26	; 0x09
    3c8c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3c8e:	6f 81       	ldd	r22, Y+7	; 0x07
    3c90:	78 85       	ldd	r23, Y+8	; 0x08
    3c92:	89 85       	ldd	r24, Y+9	; 0x09
    3c94:	9a 85       	ldd	r25, Y+10	; 0x0a
    3c96:	20 e0       	ldi	r18, 0x00	; 0
    3c98:	30 e0       	ldi	r19, 0x00	; 0
    3c9a:	40 e8       	ldi	r20, 0x80	; 128
    3c9c:	5f e3       	ldi	r21, 0x3F	; 63
    3c9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ca2:	88 23       	and	r24, r24
    3ca4:	2c f4       	brge	.+10     	; 0x3cb0 <KEYPAD_Get_Pressed_Key+0x178>
		__ticks = 1;
    3ca6:	81 e0       	ldi	r24, 0x01	; 1
    3ca8:	90 e0       	ldi	r25, 0x00	; 0
    3caa:	9e 83       	std	Y+6, r25	; 0x06
    3cac:	8d 83       	std	Y+5, r24	; 0x05
    3cae:	3f c0       	rjmp	.+126    	; 0x3d2e <KEYPAD_Get_Pressed_Key+0x1f6>
	else if (__tmp > 65535)
    3cb0:	6f 81       	ldd	r22, Y+7	; 0x07
    3cb2:	78 85       	ldd	r23, Y+8	; 0x08
    3cb4:	89 85       	ldd	r24, Y+9	; 0x09
    3cb6:	9a 85       	ldd	r25, Y+10	; 0x0a
    3cb8:	20 e0       	ldi	r18, 0x00	; 0
    3cba:	3f ef       	ldi	r19, 0xFF	; 255
    3cbc:	4f e7       	ldi	r20, 0x7F	; 127
    3cbe:	57 e4       	ldi	r21, 0x47	; 71
    3cc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3cc4:	18 16       	cp	r1, r24
    3cc6:	4c f5       	brge	.+82     	; 0x3d1a <KEYPAD_Get_Pressed_Key+0x1e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cc8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3cca:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ccc:	8d 85       	ldd	r24, Y+13	; 0x0d
    3cce:	9e 85       	ldd	r25, Y+14	; 0x0e
    3cd0:	20 e0       	ldi	r18, 0x00	; 0
    3cd2:	30 e0       	ldi	r19, 0x00	; 0
    3cd4:	40 e2       	ldi	r20, 0x20	; 32
    3cd6:	51 e4       	ldi	r21, 0x41	; 65
    3cd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3cdc:	dc 01       	movw	r26, r24
    3cde:	cb 01       	movw	r24, r22
    3ce0:	bc 01       	movw	r22, r24
    3ce2:	cd 01       	movw	r24, r26
    3ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ce8:	dc 01       	movw	r26, r24
    3cea:	cb 01       	movw	r24, r22
    3cec:	9e 83       	std	Y+6, r25	; 0x06
    3cee:	8d 83       	std	Y+5, r24	; 0x05
    3cf0:	0f c0       	rjmp	.+30     	; 0x3d10 <KEYPAD_Get_Pressed_Key+0x1d8>
    3cf2:	80 e9       	ldi	r24, 0x90	; 144
    3cf4:	91 e0       	ldi	r25, 0x01	; 1
    3cf6:	9c 83       	std	Y+4, r25	; 0x04
    3cf8:	8b 83       	std	Y+3, r24	; 0x03
    3cfa:	8b 81       	ldd	r24, Y+3	; 0x03
    3cfc:	9c 81       	ldd	r25, Y+4	; 0x04
    3cfe:	01 97       	sbiw	r24, 0x01	; 1
    3d00:	f1 f7       	brne	.-4      	; 0x3cfe <KEYPAD_Get_Pressed_Key+0x1c6>
    3d02:	9c 83       	std	Y+4, r25	; 0x04
    3d04:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d06:	8d 81       	ldd	r24, Y+5	; 0x05
    3d08:	9e 81       	ldd	r25, Y+6	; 0x06
    3d0a:	01 97       	sbiw	r24, 0x01	; 1
    3d0c:	9e 83       	std	Y+6, r25	; 0x06
    3d0e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d10:	8d 81       	ldd	r24, Y+5	; 0x05
    3d12:	9e 81       	ldd	r25, Y+6	; 0x06
    3d14:	00 97       	sbiw	r24, 0x00	; 0
    3d16:	69 f7       	brne	.-38     	; 0x3cf2 <KEYPAD_Get_Pressed_Key+0x1ba>
    3d18:	14 c0       	rjmp	.+40     	; 0x3d42 <KEYPAD_Get_Pressed_Key+0x20a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d1a:	6f 81       	ldd	r22, Y+7	; 0x07
    3d1c:	78 85       	ldd	r23, Y+8	; 0x08
    3d1e:	89 85       	ldd	r24, Y+9	; 0x09
    3d20:	9a 85       	ldd	r25, Y+10	; 0x0a
    3d22:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d26:	dc 01       	movw	r26, r24
    3d28:	cb 01       	movw	r24, r22
    3d2a:	9e 83       	std	Y+6, r25	; 0x06
    3d2c:	8d 83       	std	Y+5, r24	; 0x05
    3d2e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d30:	9e 81       	ldd	r25, Y+6	; 0x06
    3d32:	9a 83       	std	Y+2, r25	; 0x02
    3d34:	89 83       	std	Y+1, r24	; 0x01
    3d36:	89 81       	ldd	r24, Y+1	; 0x01
    3d38:	9a 81       	ldd	r25, Y+2	; 0x02
    3d3a:	01 97       	sbiw	r24, 0x01	; 1
    3d3c:	f1 f7       	brne	.-4      	; 0x3d3a <KEYPAD_Get_Pressed_Key+0x202>
    3d3e:	9a 83       	std	Y+2, r25	; 0x02
    3d40:	89 83       	std	Y+1, r24	; 0x01
	uint8_t key = 0;

	uint8_t flag;
	while(1)
	{
		for(i = 0; i <=4; i++)
    3d42:	8a 89       	ldd	r24, Y+18	; 0x12
    3d44:	8f 5f       	subi	r24, 0xFF	; 255
    3d46:	8a 8b       	std	Y+18, r24	; 0x12
    3d48:	8a 89       	ldd	r24, Y+18	; 0x12
    3d4a:	85 30       	cpi	r24, 0x05	; 5
    3d4c:	08 f4       	brcc	.+2      	; 0x3d50 <KEYPAD_Get_Pressed_Key+0x218>
    3d4e:	31 cf       	rjmp	.-414    	; 0x3bb2 <KEYPAD_Get_Pressed_Key+0x7a>
    3d50:	2e cf       	rjmp	.-420    	; 0x3bae <KEYPAD_Get_Pressed_Key+0x76>

00003d52 <TURN_ON_OFF_LED>:


#include "LED_INTERFACING.h"

void TURN_ON_OFF_LED(Port_Def* GPIOx ,LED_Status_t state,Pin_ID_t pin )
{
    3d52:	df 93       	push	r29
    3d54:	cf 93       	push	r28
    3d56:	00 d0       	rcall	.+0      	; 0x3d58 <TURN_ON_OFF_LED+0x6>
    3d58:	00 d0       	rcall	.+0      	; 0x3d5a <TURN_ON_OFF_LED+0x8>
    3d5a:	00 d0       	rcall	.+0      	; 0x3d5c <TURN_ON_OFF_LED+0xa>
    3d5c:	cd b7       	in	r28, 0x3d	; 61
    3d5e:	de b7       	in	r29, 0x3e	; 62
    3d60:	9a 83       	std	Y+2, r25	; 0x02
    3d62:	89 83       	std	Y+1, r24	; 0x01
    3d64:	6b 83       	std	Y+3, r22	; 0x03
    3d66:	4c 83       	std	Y+4, r20	; 0x04
	DIO_voidSetPinDirection(GPIOx, pin, Pin_OUTPUT);
    3d68:	89 81       	ldd	r24, Y+1	; 0x01
    3d6a:	9a 81       	ldd	r25, Y+2	; 0x02
    3d6c:	6c 81       	ldd	r22, Y+4	; 0x04
    3d6e:	41 e0       	ldi	r20, 0x01	; 1
    3d70:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>

	switch(state)
    3d74:	8b 81       	ldd	r24, Y+3	; 0x03
    3d76:	28 2f       	mov	r18, r24
    3d78:	30 e0       	ldi	r19, 0x00	; 0
    3d7a:	3e 83       	std	Y+6, r19	; 0x06
    3d7c:	2d 83       	std	Y+5, r18	; 0x05
    3d7e:	8d 81       	ldd	r24, Y+5	; 0x05
    3d80:	9e 81       	ldd	r25, Y+6	; 0x06
    3d82:	00 97       	sbiw	r24, 0x00	; 0
    3d84:	61 f0       	breq	.+24     	; 0x3d9e <TURN_ON_OFF_LED+0x4c>
    3d86:	2d 81       	ldd	r18, Y+5	; 0x05
    3d88:	3e 81       	ldd	r19, Y+6	; 0x06
    3d8a:	21 30       	cpi	r18, 0x01	; 1
    3d8c:	31 05       	cpc	r19, r1
    3d8e:	69 f4       	brne	.+26     	; 0x3daa <TURN_ON_OFF_LED+0x58>
	{
	case ACTIVE_HIGH:
		DIO_voidSetPinValue(GPIOx, pin, HIGH);
    3d90:	89 81       	ldd	r24, Y+1	; 0x01
    3d92:	9a 81       	ldd	r25, Y+2	; 0x02
    3d94:	6c 81       	ldd	r22, Y+4	; 0x04
    3d96:	41 e0       	ldi	r20, 0x01	; 1
    3d98:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    3d9c:	06 c0       	rjmp	.+12     	; 0x3daa <TURN_ON_OFF_LED+0x58>
		break;
	case ACTIVE_LOW:
		DIO_voidSetPinValue(GPIOx, pin, LOW);
    3d9e:	89 81       	ldd	r24, Y+1	; 0x01
    3da0:	9a 81       	ldd	r25, Y+2	; 0x02
    3da2:	6c 81       	ldd	r22, Y+4	; 0x04
    3da4:	40 e0       	ldi	r20, 0x00	; 0
    3da6:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		break;

	}
}
    3daa:	26 96       	adiw	r28, 0x06	; 6
    3dac:	0f b6       	in	r0, 0x3f	; 63
    3dae:	f8 94       	cli
    3db0:	de bf       	out	0x3e, r29	; 62
    3db2:	0f be       	out	0x3f, r0	; 63
    3db4:	cd bf       	out	0x3d, r28	; 61
    3db6:	cf 91       	pop	r28
    3db8:	df 91       	pop	r29
    3dba:	08 95       	ret

00003dbc <LM35_read_temperature>:

/*
 * Description :
 * Function responsible for calculate the temperature from the ADC digital value.
 */
uint16 LM35_read_temperature() {
    3dbc:	df 93       	push	r29
    3dbe:	cf 93       	push	r28
    3dc0:	00 d0       	rcall	.+0      	; 0x3dc2 <LM35_read_temperature+0x6>
    3dc2:	0f 92       	push	r0
    3dc4:	cd b7       	in	r28, 0x3d	; 61
    3dc6:	de b7       	in	r29, 0x3e	; 62


	uint8 temp_value = 0;
    3dc8:	1b 82       	std	Y+3, r1	; 0x03

	uint16 adc_value = 0;
    3dca:	1a 82       	std	Y+2, r1	; 0x02
    3dcc:	19 82       	std	Y+1, r1	; 0x01

	/* Read ADC channel where the temperature sensor is connected */
	adc_value = ADC_getDigitalValueSynchNonBlocking(ADC0);
    3dce:	80 e0       	ldi	r24, 0x00	; 0
    3dd0:	0e 94 df 07 	call	0xfbe	; 0xfbe <ADC_getDigitalValueSynchNonBlocking>
    3dd4:	9a 83       	std	Y+2, r25	; 0x02
    3dd6:	89 83       	std	Y+1, r24	; 0x01

	/* Calculate the temperature from the ADC value*/
	temp_value = (uint8)(((uint32)adc_value*SENSOR_MAX_TEMPERATURE*ADC_REF_VOLT_VALUE)/(ADC_MAXIMUM_VALUE*SENSOR_MAX_VOLT_VALUE));
    3dd8:	89 81       	ldd	r24, Y+1	; 0x01
    3dda:	9a 81       	ldd	r25, Y+2	; 0x02
    3ddc:	cc 01       	movw	r24, r24
    3dde:	a0 e0       	ldi	r26, 0x00	; 0
    3de0:	b0 e0       	ldi	r27, 0x00	; 0
    3de2:	26 e9       	ldi	r18, 0x96	; 150
    3de4:	30 e0       	ldi	r19, 0x00	; 0
    3de6:	40 e0       	ldi	r20, 0x00	; 0
    3de8:	50 e0       	ldi	r21, 0x00	; 0
    3dea:	bc 01       	movw	r22, r24
    3dec:	cd 01       	movw	r24, r26
    3dee:	0e 94 10 3d 	call	0x7a20	; 0x7a20 <__mulsi3>
    3df2:	dc 01       	movw	r26, r24
    3df4:	cb 01       	movw	r24, r22
    3df6:	bc 01       	movw	r22, r24
    3df8:	cd 01       	movw	r24, r26
    3dfa:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    3dfe:	dc 01       	movw	r26, r24
    3e00:	cb 01       	movw	r24, r22
    3e02:	bc 01       	movw	r22, r24
    3e04:	cd 01       	movw	r24, r26
    3e06:	2a e0       	ldi	r18, 0x0A	; 10
    3e08:	37 ed       	ldi	r19, 0xD7	; 215
    3e0a:	43 e2       	ldi	r20, 0x23	; 35
    3e0c:	50 e4       	ldi	r21, 0x40	; 64
    3e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e12:	dc 01       	movw	r26, r24
    3e14:	cb 01       	movw	r24, r22
    3e16:	bc 01       	movw	r22, r24
    3e18:	cd 01       	movw	r24, r26
    3e1a:	20 e0       	ldi	r18, 0x00	; 0
    3e1c:	30 ed       	ldi	r19, 0xD0	; 208
    3e1e:	4f eb       	ldi	r20, 0xBF	; 191
    3e20:	54 e4       	ldi	r21, 0x44	; 68
    3e22:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    3e26:	dc 01       	movw	r26, r24
    3e28:	cb 01       	movw	r24, r22
    3e2a:	bc 01       	movw	r22, r24
    3e2c:	cd 01       	movw	r24, r26
    3e2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e32:	dc 01       	movw	r26, r24
    3e34:	cb 01       	movw	r24, r22
    3e36:	8b 83       	std	Y+3, r24	; 0x03

	return temp_value;
    3e38:	8b 81       	ldd	r24, Y+3	; 0x03
    3e3a:	88 2f       	mov	r24, r24
    3e3c:	90 e0       	ldi	r25, 0x00	; 0

}
    3e3e:	0f 90       	pop	r0
    3e40:	0f 90       	pop	r0
    3e42:	0f 90       	pop	r0
    3e44:	cf 91       	pop	r28
    3e46:	df 91       	pop	r29
    3e48:	08 95       	ret

00003e4a <latchbyte>:
#include "LCD_Private.h"
#include "stdlib.h"


static void latchbyte(uint8_t copy_u8Byte)
{
    3e4a:	0f 93       	push	r16
    3e4c:	1f 93       	push	r17
    3e4e:	df 93       	push	r29
    3e50:	cf 93       	push	r28
    3e52:	cd b7       	in	r28, 0x3d	; 61
    3e54:	de b7       	in	r29, 0x3e	; 62
    3e56:	c7 54       	subi	r28, 0x47	; 71
    3e58:	d0 40       	sbci	r29, 0x00	; 0
    3e5a:	0f b6       	in	r0, 0x3f	; 63
    3e5c:	f8 94       	cli
    3e5e:	de bf       	out	0x3e, r29	; 62
    3e60:	0f be       	out	0x3f, r0	; 63
    3e62:	cd bf       	out	0x3d, r28	; 61
    3e64:	fe 01       	movw	r30, r28
    3e66:	e9 5b       	subi	r30, 0xB9	; 185
    3e68:	ff 4f       	sbci	r31, 0xFF	; 255
    3e6a:	80 83       	st	Z, r24

	}
#elif(MODE == _4_BIT_MODE)
	{

		DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, LOW);
    3e6c:	89 e3       	ldi	r24, 0x39	; 57
    3e6e:	90 e0       	ldi	r25, 0x00	; 0
    3e70:	62 e0       	ldi	r22, 0x02	; 2
    3e72:	40 e0       	ldi	r20, 0x00	; 0
    3e74:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    3e78:	fe 01       	movw	r30, r28
    3e7a:	ed 5b       	subi	r30, 0xBD	; 189
    3e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7e:	80 e0       	ldi	r24, 0x00	; 0
    3e80:	90 e0       	ldi	r25, 0x00	; 0
    3e82:	a0 e2       	ldi	r26, 0x20	; 32
    3e84:	b1 e4       	ldi	r27, 0x41	; 65
    3e86:	80 83       	st	Z, r24
    3e88:	91 83       	std	Z+1, r25	; 0x01
    3e8a:	a2 83       	std	Z+2, r26	; 0x02
    3e8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e8e:	8e 01       	movw	r16, r28
    3e90:	01 5c       	subi	r16, 0xC1	; 193
    3e92:	1f 4f       	sbci	r17, 0xFF	; 255
    3e94:	fe 01       	movw	r30, r28
    3e96:	ed 5b       	subi	r30, 0xBD	; 189
    3e98:	ff 4f       	sbci	r31, 0xFF	; 255
    3e9a:	60 81       	ld	r22, Z
    3e9c:	71 81       	ldd	r23, Z+1	; 0x01
    3e9e:	82 81       	ldd	r24, Z+2	; 0x02
    3ea0:	93 81       	ldd	r25, Z+3	; 0x03
    3ea2:	20 e0       	ldi	r18, 0x00	; 0
    3ea4:	30 e0       	ldi	r19, 0x00	; 0
    3ea6:	4a e7       	ldi	r20, 0x7A	; 122
    3ea8:	55 e4       	ldi	r21, 0x45	; 69
    3eaa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eae:	dc 01       	movw	r26, r24
    3eb0:	cb 01       	movw	r24, r22
    3eb2:	f8 01       	movw	r30, r16
    3eb4:	80 83       	st	Z, r24
    3eb6:	91 83       	std	Z+1, r25	; 0x01
    3eb8:	a2 83       	std	Z+2, r26	; 0x02
    3eba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ebc:	fe 01       	movw	r30, r28
    3ebe:	ff 96       	adiw	r30, 0x3f	; 63
    3ec0:	60 81       	ld	r22, Z
    3ec2:	71 81       	ldd	r23, Z+1	; 0x01
    3ec4:	82 81       	ldd	r24, Z+2	; 0x02
    3ec6:	93 81       	ldd	r25, Z+3	; 0x03
    3ec8:	20 e0       	ldi	r18, 0x00	; 0
    3eca:	30 e0       	ldi	r19, 0x00	; 0
    3ecc:	40 e8       	ldi	r20, 0x80	; 128
    3ece:	5f e3       	ldi	r21, 0x3F	; 63
    3ed0:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3ed4:	88 23       	and	r24, r24
    3ed6:	2c f4       	brge	.+10     	; 0x3ee2 <latchbyte+0x98>
		__ticks = 1;
    3ed8:	81 e0       	ldi	r24, 0x01	; 1
    3eda:	90 e0       	ldi	r25, 0x00	; 0
    3edc:	9e af       	std	Y+62, r25	; 0x3e
    3ede:	8d af       	std	Y+61, r24	; 0x3d
    3ee0:	46 c0       	rjmp	.+140    	; 0x3f6e <latchbyte+0x124>
	else if (__tmp > 65535)
    3ee2:	fe 01       	movw	r30, r28
    3ee4:	ff 96       	adiw	r30, 0x3f	; 63
    3ee6:	60 81       	ld	r22, Z
    3ee8:	71 81       	ldd	r23, Z+1	; 0x01
    3eea:	82 81       	ldd	r24, Z+2	; 0x02
    3eec:	93 81       	ldd	r25, Z+3	; 0x03
    3eee:	20 e0       	ldi	r18, 0x00	; 0
    3ef0:	3f ef       	ldi	r19, 0xFF	; 255
    3ef2:	4f e7       	ldi	r20, 0x7F	; 127
    3ef4:	57 e4       	ldi	r21, 0x47	; 71
    3ef6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3efa:	18 16       	cp	r1, r24
    3efc:	64 f5       	brge	.+88     	; 0x3f56 <latchbyte+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3efe:	fe 01       	movw	r30, r28
    3f00:	ed 5b       	subi	r30, 0xBD	; 189
    3f02:	ff 4f       	sbci	r31, 0xFF	; 255
    3f04:	60 81       	ld	r22, Z
    3f06:	71 81       	ldd	r23, Z+1	; 0x01
    3f08:	82 81       	ldd	r24, Z+2	; 0x02
    3f0a:	93 81       	ldd	r25, Z+3	; 0x03
    3f0c:	20 e0       	ldi	r18, 0x00	; 0
    3f0e:	30 e0       	ldi	r19, 0x00	; 0
    3f10:	40 e2       	ldi	r20, 0x20	; 32
    3f12:	51 e4       	ldi	r21, 0x41	; 65
    3f14:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f18:	dc 01       	movw	r26, r24
    3f1a:	cb 01       	movw	r24, r22
    3f1c:	bc 01       	movw	r22, r24
    3f1e:	cd 01       	movw	r24, r26
    3f20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f24:	dc 01       	movw	r26, r24
    3f26:	cb 01       	movw	r24, r22
    3f28:	9e af       	std	Y+62, r25	; 0x3e
    3f2a:	8d af       	std	Y+61, r24	; 0x3d
    3f2c:	0f c0       	rjmp	.+30     	; 0x3f4c <latchbyte+0x102>
    3f2e:	80 e9       	ldi	r24, 0x90	; 144
    3f30:	91 e0       	ldi	r25, 0x01	; 1
    3f32:	9c af       	std	Y+60, r25	; 0x3c
    3f34:	8b af       	std	Y+59, r24	; 0x3b
    3f36:	8b ad       	ldd	r24, Y+59	; 0x3b
    3f38:	9c ad       	ldd	r25, Y+60	; 0x3c
    3f3a:	01 97       	sbiw	r24, 0x01	; 1
    3f3c:	f1 f7       	brne	.-4      	; 0x3f3a <latchbyte+0xf0>
    3f3e:	9c af       	std	Y+60, r25	; 0x3c
    3f40:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f42:	8d ad       	ldd	r24, Y+61	; 0x3d
    3f44:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f46:	01 97       	sbiw	r24, 0x01	; 1
    3f48:	9e af       	std	Y+62, r25	; 0x3e
    3f4a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    3f4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f50:	00 97       	sbiw	r24, 0x00	; 0
    3f52:	69 f7       	brne	.-38     	; 0x3f2e <latchbyte+0xe4>
    3f54:	16 c0       	rjmp	.+44     	; 0x3f82 <latchbyte+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f56:	fe 01       	movw	r30, r28
    3f58:	ff 96       	adiw	r30, 0x3f	; 63
    3f5a:	60 81       	ld	r22, Z
    3f5c:	71 81       	ldd	r23, Z+1	; 0x01
    3f5e:	82 81       	ldd	r24, Z+2	; 0x02
    3f60:	93 81       	ldd	r25, Z+3	; 0x03
    3f62:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f66:	dc 01       	movw	r26, r24
    3f68:	cb 01       	movw	r24, r22
    3f6a:	9e af       	std	Y+62, r25	; 0x3e
    3f6c:	8d af       	std	Y+61, r24	; 0x3d
    3f6e:	8d ad       	ldd	r24, Y+61	; 0x3d
    3f70:	9e ad       	ldd	r25, Y+62	; 0x3e
    3f72:	9a af       	std	Y+58, r25	; 0x3a
    3f74:	89 af       	std	Y+57, r24	; 0x39
    3f76:	89 ad       	ldd	r24, Y+57	; 0x39
    3f78:	9a ad       	ldd	r25, Y+58	; 0x3a
    3f7a:	01 97       	sbiw	r24, 0x01	; 1
    3f7c:	f1 f7       	brne	.-4      	; 0x3f7a <latchbyte+0x130>
    3f7e:	9a af       	std	Y+58, r25	; 0x3a
    3f80:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(10);
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(copy_u8Byte,4));
    3f82:	fe 01       	movw	r30, r28
    3f84:	e9 5b       	subi	r30, 0xB9	; 185
    3f86:	ff 4f       	sbci	r31, 0xFF	; 255
    3f88:	80 81       	ld	r24, Z
    3f8a:	88 2f       	mov	r24, r24
    3f8c:	90 e0       	ldi	r25, 0x00	; 0
    3f8e:	80 71       	andi	r24, 0x10	; 16
    3f90:	90 70       	andi	r25, 0x00	; 0
    3f92:	95 95       	asr	r25
    3f94:	87 95       	ror	r24
    3f96:	95 95       	asr	r25
    3f98:	87 95       	ror	r24
    3f9a:	95 95       	asr	r25
    3f9c:	87 95       	ror	r24
    3f9e:	95 95       	asr	r25
    3fa0:	87 95       	ror	r24
    3fa2:	28 2f       	mov	r18, r24
    3fa4:	86 e3       	ldi	r24, 0x36	; 54
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	60 e0       	ldi	r22, 0x00	; 0
    3faa:	42 2f       	mov	r20, r18
    3fac:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(copy_u8Byte,5));
    3fb0:	fe 01       	movw	r30, r28
    3fb2:	e9 5b       	subi	r30, 0xB9	; 185
    3fb4:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb6:	80 81       	ld	r24, Z
    3fb8:	88 2f       	mov	r24, r24
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	80 72       	andi	r24, 0x20	; 32
    3fbe:	90 70       	andi	r25, 0x00	; 0
    3fc0:	95 95       	asr	r25
    3fc2:	87 95       	ror	r24
    3fc4:	95 95       	asr	r25
    3fc6:	87 95       	ror	r24
    3fc8:	95 95       	asr	r25
    3fca:	87 95       	ror	r24
    3fcc:	95 95       	asr	r25
    3fce:	87 95       	ror	r24
    3fd0:	95 95       	asr	r25
    3fd2:	87 95       	ror	r24
    3fd4:	28 2f       	mov	r18, r24
    3fd6:	86 e3       	ldi	r24, 0x36	; 54
    3fd8:	90 e0       	ldi	r25, 0x00	; 0
    3fda:	61 e0       	ldi	r22, 0x01	; 1
    3fdc:	42 2f       	mov	r20, r18
    3fde:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(copy_u8Byte,6));
    3fe2:	fe 01       	movw	r30, r28
    3fe4:	e9 5b       	subi	r30, 0xB9	; 185
    3fe6:	ff 4f       	sbci	r31, 0xFF	; 255
    3fe8:	80 81       	ld	r24, Z
    3fea:	88 2f       	mov	r24, r24
    3fec:	90 e0       	ldi	r25, 0x00	; 0
    3fee:	80 74       	andi	r24, 0x40	; 64
    3ff0:	90 70       	andi	r25, 0x00	; 0
    3ff2:	08 2e       	mov	r0, r24
    3ff4:	89 2f       	mov	r24, r25
    3ff6:	00 0c       	add	r0, r0
    3ff8:	88 1f       	adc	r24, r24
    3ffa:	99 0b       	sbc	r25, r25
    3ffc:	00 0c       	add	r0, r0
    3ffe:	88 1f       	adc	r24, r24
    4000:	99 1f       	adc	r25, r25
    4002:	28 2f       	mov	r18, r24
    4004:	86 e3       	ldi	r24, 0x36	; 54
    4006:	90 e0       	ldi	r25, 0x00	; 0
    4008:	62 e0       	ldi	r22, 0x02	; 2
    400a:	42 2f       	mov	r20, r18
    400c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(copy_u8Byte,7));
    4010:	fe 01       	movw	r30, r28
    4012:	e9 5b       	subi	r30, 0xB9	; 185
    4014:	ff 4f       	sbci	r31, 0xFF	; 255
    4016:	80 81       	ld	r24, Z
    4018:	28 2f       	mov	r18, r24
    401a:	22 1f       	adc	r18, r18
    401c:	22 27       	eor	r18, r18
    401e:	22 1f       	adc	r18, r18
    4020:	86 e3       	ldi	r24, 0x36	; 54
    4022:	90 e0       	ldi	r25, 0x00	; 0
    4024:	64 e0       	ldi	r22, 0x04	; 4
    4026:	42 2f       	mov	r20, r18
    4028:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, HIGH);
    402c:	89 e3       	ldi	r24, 0x39	; 57
    402e:	90 e0       	ldi	r25, 0x00	; 0
    4030:	62 e0       	ldi	r22, 0x02	; 2
    4032:	41 e0       	ldi	r20, 0x01	; 1
    4034:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    4038:	80 e0       	ldi	r24, 0x00	; 0
    403a:	90 e0       	ldi	r25, 0x00	; 0
    403c:	a0 e2       	ldi	r26, 0x20	; 32
    403e:	b1 e4       	ldi	r27, 0x41	; 65
    4040:	8d ab       	std	Y+53, r24	; 0x35
    4042:	9e ab       	std	Y+54, r25	; 0x36
    4044:	af ab       	std	Y+55, r26	; 0x37
    4046:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4048:	6d a9       	ldd	r22, Y+53	; 0x35
    404a:	7e a9       	ldd	r23, Y+54	; 0x36
    404c:	8f a9       	ldd	r24, Y+55	; 0x37
    404e:	98 ad       	ldd	r25, Y+56	; 0x38
    4050:	20 e0       	ldi	r18, 0x00	; 0
    4052:	30 e0       	ldi	r19, 0x00	; 0
    4054:	4a e7       	ldi	r20, 0x7A	; 122
    4056:	55 e4       	ldi	r21, 0x45	; 69
    4058:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    405c:	dc 01       	movw	r26, r24
    405e:	cb 01       	movw	r24, r22
    4060:	89 ab       	std	Y+49, r24	; 0x31
    4062:	9a ab       	std	Y+50, r25	; 0x32
    4064:	ab ab       	std	Y+51, r26	; 0x33
    4066:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4068:	69 a9       	ldd	r22, Y+49	; 0x31
    406a:	7a a9       	ldd	r23, Y+50	; 0x32
    406c:	8b a9       	ldd	r24, Y+51	; 0x33
    406e:	9c a9       	ldd	r25, Y+52	; 0x34
    4070:	20 e0       	ldi	r18, 0x00	; 0
    4072:	30 e0       	ldi	r19, 0x00	; 0
    4074:	40 e8       	ldi	r20, 0x80	; 128
    4076:	5f e3       	ldi	r21, 0x3F	; 63
    4078:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    407c:	88 23       	and	r24, r24
    407e:	2c f4       	brge	.+10     	; 0x408a <latchbyte+0x240>
		__ticks = 1;
    4080:	81 e0       	ldi	r24, 0x01	; 1
    4082:	90 e0       	ldi	r25, 0x00	; 0
    4084:	98 ab       	std	Y+48, r25	; 0x30
    4086:	8f a7       	std	Y+47, r24	; 0x2f
    4088:	3f c0       	rjmp	.+126    	; 0x4108 <latchbyte+0x2be>
	else if (__tmp > 65535)
    408a:	69 a9       	ldd	r22, Y+49	; 0x31
    408c:	7a a9       	ldd	r23, Y+50	; 0x32
    408e:	8b a9       	ldd	r24, Y+51	; 0x33
    4090:	9c a9       	ldd	r25, Y+52	; 0x34
    4092:	20 e0       	ldi	r18, 0x00	; 0
    4094:	3f ef       	ldi	r19, 0xFF	; 255
    4096:	4f e7       	ldi	r20, 0x7F	; 127
    4098:	57 e4       	ldi	r21, 0x47	; 71
    409a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    409e:	18 16       	cp	r1, r24
    40a0:	4c f5       	brge	.+82     	; 0x40f4 <latchbyte+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40a2:	6d a9       	ldd	r22, Y+53	; 0x35
    40a4:	7e a9       	ldd	r23, Y+54	; 0x36
    40a6:	8f a9       	ldd	r24, Y+55	; 0x37
    40a8:	98 ad       	ldd	r25, Y+56	; 0x38
    40aa:	20 e0       	ldi	r18, 0x00	; 0
    40ac:	30 e0       	ldi	r19, 0x00	; 0
    40ae:	40 e2       	ldi	r20, 0x20	; 32
    40b0:	51 e4       	ldi	r21, 0x41	; 65
    40b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40b6:	dc 01       	movw	r26, r24
    40b8:	cb 01       	movw	r24, r22
    40ba:	bc 01       	movw	r22, r24
    40bc:	cd 01       	movw	r24, r26
    40be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40c2:	dc 01       	movw	r26, r24
    40c4:	cb 01       	movw	r24, r22
    40c6:	98 ab       	std	Y+48, r25	; 0x30
    40c8:	8f a7       	std	Y+47, r24	; 0x2f
    40ca:	0f c0       	rjmp	.+30     	; 0x40ea <latchbyte+0x2a0>
    40cc:	80 e9       	ldi	r24, 0x90	; 144
    40ce:	91 e0       	ldi	r25, 0x01	; 1
    40d0:	9e a7       	std	Y+46, r25	; 0x2e
    40d2:	8d a7       	std	Y+45, r24	; 0x2d
    40d4:	8d a5       	ldd	r24, Y+45	; 0x2d
    40d6:	9e a5       	ldd	r25, Y+46	; 0x2e
    40d8:	01 97       	sbiw	r24, 0x01	; 1
    40da:	f1 f7       	brne	.-4      	; 0x40d8 <latchbyte+0x28e>
    40dc:	9e a7       	std	Y+46, r25	; 0x2e
    40de:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40e0:	8f a5       	ldd	r24, Y+47	; 0x2f
    40e2:	98 a9       	ldd	r25, Y+48	; 0x30
    40e4:	01 97       	sbiw	r24, 0x01	; 1
    40e6:	98 ab       	std	Y+48, r25	; 0x30
    40e8:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40ea:	8f a5       	ldd	r24, Y+47	; 0x2f
    40ec:	98 a9       	ldd	r25, Y+48	; 0x30
    40ee:	00 97       	sbiw	r24, 0x00	; 0
    40f0:	69 f7       	brne	.-38     	; 0x40cc <latchbyte+0x282>
    40f2:	14 c0       	rjmp	.+40     	; 0x411c <latchbyte+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40f4:	69 a9       	ldd	r22, Y+49	; 0x31
    40f6:	7a a9       	ldd	r23, Y+50	; 0x32
    40f8:	8b a9       	ldd	r24, Y+51	; 0x33
    40fa:	9c a9       	ldd	r25, Y+52	; 0x34
    40fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4100:	dc 01       	movw	r26, r24
    4102:	cb 01       	movw	r24, r22
    4104:	98 ab       	std	Y+48, r25	; 0x30
    4106:	8f a7       	std	Y+47, r24	; 0x2f
    4108:	8f a5       	ldd	r24, Y+47	; 0x2f
    410a:	98 a9       	ldd	r25, Y+48	; 0x30
    410c:	9c a7       	std	Y+44, r25	; 0x2c
    410e:	8b a7       	std	Y+43, r24	; 0x2b
    4110:	8b a5       	ldd	r24, Y+43	; 0x2b
    4112:	9c a5       	ldd	r25, Y+44	; 0x2c
    4114:	01 97       	sbiw	r24, 0x01	; 1
    4116:	f1 f7       	brne	.-4      	; 0x4114 <latchbyte+0x2ca>
    4118:	9c a7       	std	Y+44, r25	; 0x2c
    411a:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10);
		DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, LOW);
    411c:	89 e3       	ldi	r24, 0x39	; 57
    411e:	90 e0       	ldi	r25, 0x00	; 0
    4120:	62 e0       	ldi	r22, 0x02	; 2
    4122:	40 e0       	ldi	r20, 0x00	; 0
    4124:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    4128:	80 e0       	ldi	r24, 0x00	; 0
    412a:	90 e0       	ldi	r25, 0x00	; 0
    412c:	a0 e2       	ldi	r26, 0x20	; 32
    412e:	b1 e4       	ldi	r27, 0x41	; 65
    4130:	8f a3       	std	Y+39, r24	; 0x27
    4132:	98 a7       	std	Y+40, r25	; 0x28
    4134:	a9 a7       	std	Y+41, r26	; 0x29
    4136:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4138:	6f a1       	ldd	r22, Y+39	; 0x27
    413a:	78 a5       	ldd	r23, Y+40	; 0x28
    413c:	89 a5       	ldd	r24, Y+41	; 0x29
    413e:	9a a5       	ldd	r25, Y+42	; 0x2a
    4140:	20 e0       	ldi	r18, 0x00	; 0
    4142:	30 e0       	ldi	r19, 0x00	; 0
    4144:	4a e7       	ldi	r20, 0x7A	; 122
    4146:	55 e4       	ldi	r21, 0x45	; 69
    4148:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    414c:	dc 01       	movw	r26, r24
    414e:	cb 01       	movw	r24, r22
    4150:	8b a3       	std	Y+35, r24	; 0x23
    4152:	9c a3       	std	Y+36, r25	; 0x24
    4154:	ad a3       	std	Y+37, r26	; 0x25
    4156:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4158:	6b a1       	ldd	r22, Y+35	; 0x23
    415a:	7c a1       	ldd	r23, Y+36	; 0x24
    415c:	8d a1       	ldd	r24, Y+37	; 0x25
    415e:	9e a1       	ldd	r25, Y+38	; 0x26
    4160:	20 e0       	ldi	r18, 0x00	; 0
    4162:	30 e0       	ldi	r19, 0x00	; 0
    4164:	40 e8       	ldi	r20, 0x80	; 128
    4166:	5f e3       	ldi	r21, 0x3F	; 63
    4168:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    416c:	88 23       	and	r24, r24
    416e:	2c f4       	brge	.+10     	; 0x417a <latchbyte+0x330>
		__ticks = 1;
    4170:	81 e0       	ldi	r24, 0x01	; 1
    4172:	90 e0       	ldi	r25, 0x00	; 0
    4174:	9a a3       	std	Y+34, r25	; 0x22
    4176:	89 a3       	std	Y+33, r24	; 0x21
    4178:	3f c0       	rjmp	.+126    	; 0x41f8 <latchbyte+0x3ae>
	else if (__tmp > 65535)
    417a:	6b a1       	ldd	r22, Y+35	; 0x23
    417c:	7c a1       	ldd	r23, Y+36	; 0x24
    417e:	8d a1       	ldd	r24, Y+37	; 0x25
    4180:	9e a1       	ldd	r25, Y+38	; 0x26
    4182:	20 e0       	ldi	r18, 0x00	; 0
    4184:	3f ef       	ldi	r19, 0xFF	; 255
    4186:	4f e7       	ldi	r20, 0x7F	; 127
    4188:	57 e4       	ldi	r21, 0x47	; 71
    418a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    418e:	18 16       	cp	r1, r24
    4190:	4c f5       	brge	.+82     	; 0x41e4 <latchbyte+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4192:	6f a1       	ldd	r22, Y+39	; 0x27
    4194:	78 a5       	ldd	r23, Y+40	; 0x28
    4196:	89 a5       	ldd	r24, Y+41	; 0x29
    4198:	9a a5       	ldd	r25, Y+42	; 0x2a
    419a:	20 e0       	ldi	r18, 0x00	; 0
    419c:	30 e0       	ldi	r19, 0x00	; 0
    419e:	40 e2       	ldi	r20, 0x20	; 32
    41a0:	51 e4       	ldi	r21, 0x41	; 65
    41a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41a6:	dc 01       	movw	r26, r24
    41a8:	cb 01       	movw	r24, r22
    41aa:	bc 01       	movw	r22, r24
    41ac:	cd 01       	movw	r24, r26
    41ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41b2:	dc 01       	movw	r26, r24
    41b4:	cb 01       	movw	r24, r22
    41b6:	9a a3       	std	Y+34, r25	; 0x22
    41b8:	89 a3       	std	Y+33, r24	; 0x21
    41ba:	0f c0       	rjmp	.+30     	; 0x41da <latchbyte+0x390>
    41bc:	80 e9       	ldi	r24, 0x90	; 144
    41be:	91 e0       	ldi	r25, 0x01	; 1
    41c0:	98 a3       	std	Y+32, r25	; 0x20
    41c2:	8f 8f       	std	Y+31, r24	; 0x1f
    41c4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    41c6:	98 a1       	ldd	r25, Y+32	; 0x20
    41c8:	01 97       	sbiw	r24, 0x01	; 1
    41ca:	f1 f7       	brne	.-4      	; 0x41c8 <latchbyte+0x37e>
    41cc:	98 a3       	std	Y+32, r25	; 0x20
    41ce:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41d0:	89 a1       	ldd	r24, Y+33	; 0x21
    41d2:	9a a1       	ldd	r25, Y+34	; 0x22
    41d4:	01 97       	sbiw	r24, 0x01	; 1
    41d6:	9a a3       	std	Y+34, r25	; 0x22
    41d8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41da:	89 a1       	ldd	r24, Y+33	; 0x21
    41dc:	9a a1       	ldd	r25, Y+34	; 0x22
    41de:	00 97       	sbiw	r24, 0x00	; 0
    41e0:	69 f7       	brne	.-38     	; 0x41bc <latchbyte+0x372>
    41e2:	14 c0       	rjmp	.+40     	; 0x420c <latchbyte+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41e4:	6b a1       	ldd	r22, Y+35	; 0x23
    41e6:	7c a1       	ldd	r23, Y+36	; 0x24
    41e8:	8d a1       	ldd	r24, Y+37	; 0x25
    41ea:	9e a1       	ldd	r25, Y+38	; 0x26
    41ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41f0:	dc 01       	movw	r26, r24
    41f2:	cb 01       	movw	r24, r22
    41f4:	9a a3       	std	Y+34, r25	; 0x22
    41f6:	89 a3       	std	Y+33, r24	; 0x21
    41f8:	89 a1       	ldd	r24, Y+33	; 0x21
    41fa:	9a a1       	ldd	r25, Y+34	; 0x22
    41fc:	9e 8f       	std	Y+30, r25	; 0x1e
    41fe:	8d 8f       	std	Y+29, r24	; 0x1d
    4200:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4202:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4204:	01 97       	sbiw	r24, 0x01	; 1
    4206:	f1 f7       	brne	.-4      	; 0x4204 <latchbyte+0x3ba>
    4208:	9e 8f       	std	Y+30, r25	; 0x1e
    420a:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(copy_u8Byte,0));
    420c:	fe 01       	movw	r30, r28
    420e:	e9 5b       	subi	r30, 0xB9	; 185
    4210:	ff 4f       	sbci	r31, 0xFF	; 255
    4212:	80 81       	ld	r24, Z
    4214:	28 2f       	mov	r18, r24
    4216:	21 70       	andi	r18, 0x01	; 1
    4218:	86 e3       	ldi	r24, 0x36	; 54
    421a:	90 e0       	ldi	r25, 0x00	; 0
    421c:	60 e0       	ldi	r22, 0x00	; 0
    421e:	42 2f       	mov	r20, r18
    4220:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(copy_u8Byte,1));
    4224:	fe 01       	movw	r30, r28
    4226:	e9 5b       	subi	r30, 0xB9	; 185
    4228:	ff 4f       	sbci	r31, 0xFF	; 255
    422a:	80 81       	ld	r24, Z
    422c:	88 2f       	mov	r24, r24
    422e:	90 e0       	ldi	r25, 0x00	; 0
    4230:	82 70       	andi	r24, 0x02	; 2
    4232:	90 70       	andi	r25, 0x00	; 0
    4234:	95 95       	asr	r25
    4236:	87 95       	ror	r24
    4238:	28 2f       	mov	r18, r24
    423a:	86 e3       	ldi	r24, 0x36	; 54
    423c:	90 e0       	ldi	r25, 0x00	; 0
    423e:	61 e0       	ldi	r22, 0x01	; 1
    4240:	42 2f       	mov	r20, r18
    4242:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(copy_u8Byte,2));
    4246:	fe 01       	movw	r30, r28
    4248:	e9 5b       	subi	r30, 0xB9	; 185
    424a:	ff 4f       	sbci	r31, 0xFF	; 255
    424c:	80 81       	ld	r24, Z
    424e:	88 2f       	mov	r24, r24
    4250:	90 e0       	ldi	r25, 0x00	; 0
    4252:	84 70       	andi	r24, 0x04	; 4
    4254:	90 70       	andi	r25, 0x00	; 0
    4256:	95 95       	asr	r25
    4258:	87 95       	ror	r24
    425a:	95 95       	asr	r25
    425c:	87 95       	ror	r24
    425e:	28 2f       	mov	r18, r24
    4260:	86 e3       	ldi	r24, 0x36	; 54
    4262:	90 e0       	ldi	r25, 0x00	; 0
    4264:	62 e0       	ldi	r22, 0x02	; 2
    4266:	42 2f       	mov	r20, r18
    4268:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(copy_u8Byte,3));
    426c:	fe 01       	movw	r30, r28
    426e:	e9 5b       	subi	r30, 0xB9	; 185
    4270:	ff 4f       	sbci	r31, 0xFF	; 255
    4272:	80 81       	ld	r24, Z
    4274:	88 2f       	mov	r24, r24
    4276:	90 e0       	ldi	r25, 0x00	; 0
    4278:	88 70       	andi	r24, 0x08	; 8
    427a:	90 70       	andi	r25, 0x00	; 0
    427c:	95 95       	asr	r25
    427e:	87 95       	ror	r24
    4280:	95 95       	asr	r25
    4282:	87 95       	ror	r24
    4284:	95 95       	asr	r25
    4286:	87 95       	ror	r24
    4288:	28 2f       	mov	r18, r24
    428a:	86 e3       	ldi	r24, 0x36	; 54
    428c:	90 e0       	ldi	r25, 0x00	; 0
    428e:	64 e0       	ldi	r22, 0x04	; 4
    4290:	42 2f       	mov	r20, r18
    4292:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, HIGH);
    4296:	89 e3       	ldi	r24, 0x39	; 57
    4298:	90 e0       	ldi	r25, 0x00	; 0
    429a:	62 e0       	ldi	r22, 0x02	; 2
    429c:	41 e0       	ldi	r20, 0x01	; 1
    429e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    42a2:	80 e0       	ldi	r24, 0x00	; 0
    42a4:	90 e0       	ldi	r25, 0x00	; 0
    42a6:	a0 e2       	ldi	r26, 0x20	; 32
    42a8:	b1 e4       	ldi	r27, 0x41	; 65
    42aa:	89 8f       	std	Y+25, r24	; 0x19
    42ac:	9a 8f       	std	Y+26, r25	; 0x1a
    42ae:	ab 8f       	std	Y+27, r26	; 0x1b
    42b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    42b2:	69 8d       	ldd	r22, Y+25	; 0x19
    42b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    42b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    42b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    42ba:	20 e0       	ldi	r18, 0x00	; 0
    42bc:	30 e0       	ldi	r19, 0x00	; 0
    42be:	4a e7       	ldi	r20, 0x7A	; 122
    42c0:	55 e4       	ldi	r21, 0x45	; 69
    42c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    42c6:	dc 01       	movw	r26, r24
    42c8:	cb 01       	movw	r24, r22
    42ca:	8d 8b       	std	Y+21, r24	; 0x15
    42cc:	9e 8b       	std	Y+22, r25	; 0x16
    42ce:	af 8b       	std	Y+23, r26	; 0x17
    42d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    42d2:	6d 89       	ldd	r22, Y+21	; 0x15
    42d4:	7e 89       	ldd	r23, Y+22	; 0x16
    42d6:	8f 89       	ldd	r24, Y+23	; 0x17
    42d8:	98 8d       	ldd	r25, Y+24	; 0x18
    42da:	20 e0       	ldi	r18, 0x00	; 0
    42dc:	30 e0       	ldi	r19, 0x00	; 0
    42de:	40 e8       	ldi	r20, 0x80	; 128
    42e0:	5f e3       	ldi	r21, 0x3F	; 63
    42e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    42e6:	88 23       	and	r24, r24
    42e8:	2c f4       	brge	.+10     	; 0x42f4 <latchbyte+0x4aa>
		__ticks = 1;
    42ea:	81 e0       	ldi	r24, 0x01	; 1
    42ec:	90 e0       	ldi	r25, 0x00	; 0
    42ee:	9c 8b       	std	Y+20, r25	; 0x14
    42f0:	8b 8b       	std	Y+19, r24	; 0x13
    42f2:	3f c0       	rjmp	.+126    	; 0x4372 <latchbyte+0x528>
	else if (__tmp > 65535)
    42f4:	6d 89       	ldd	r22, Y+21	; 0x15
    42f6:	7e 89       	ldd	r23, Y+22	; 0x16
    42f8:	8f 89       	ldd	r24, Y+23	; 0x17
    42fa:	98 8d       	ldd	r25, Y+24	; 0x18
    42fc:	20 e0       	ldi	r18, 0x00	; 0
    42fe:	3f ef       	ldi	r19, 0xFF	; 255
    4300:	4f e7       	ldi	r20, 0x7F	; 127
    4302:	57 e4       	ldi	r21, 0x47	; 71
    4304:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4308:	18 16       	cp	r1, r24
    430a:	4c f5       	brge	.+82     	; 0x435e <latchbyte+0x514>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    430c:	69 8d       	ldd	r22, Y+25	; 0x19
    430e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4310:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4312:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4314:	20 e0       	ldi	r18, 0x00	; 0
    4316:	30 e0       	ldi	r19, 0x00	; 0
    4318:	40 e2       	ldi	r20, 0x20	; 32
    431a:	51 e4       	ldi	r21, 0x41	; 65
    431c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4320:	dc 01       	movw	r26, r24
    4322:	cb 01       	movw	r24, r22
    4324:	bc 01       	movw	r22, r24
    4326:	cd 01       	movw	r24, r26
    4328:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    432c:	dc 01       	movw	r26, r24
    432e:	cb 01       	movw	r24, r22
    4330:	9c 8b       	std	Y+20, r25	; 0x14
    4332:	8b 8b       	std	Y+19, r24	; 0x13
    4334:	0f c0       	rjmp	.+30     	; 0x4354 <latchbyte+0x50a>
    4336:	80 e9       	ldi	r24, 0x90	; 144
    4338:	91 e0       	ldi	r25, 0x01	; 1
    433a:	9a 8b       	std	Y+18, r25	; 0x12
    433c:	89 8b       	std	Y+17, r24	; 0x11
    433e:	89 89       	ldd	r24, Y+17	; 0x11
    4340:	9a 89       	ldd	r25, Y+18	; 0x12
    4342:	01 97       	sbiw	r24, 0x01	; 1
    4344:	f1 f7       	brne	.-4      	; 0x4342 <latchbyte+0x4f8>
    4346:	9a 8b       	std	Y+18, r25	; 0x12
    4348:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    434a:	8b 89       	ldd	r24, Y+19	; 0x13
    434c:	9c 89       	ldd	r25, Y+20	; 0x14
    434e:	01 97       	sbiw	r24, 0x01	; 1
    4350:	9c 8b       	std	Y+20, r25	; 0x14
    4352:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4354:	8b 89       	ldd	r24, Y+19	; 0x13
    4356:	9c 89       	ldd	r25, Y+20	; 0x14
    4358:	00 97       	sbiw	r24, 0x00	; 0
    435a:	69 f7       	brne	.-38     	; 0x4336 <latchbyte+0x4ec>
    435c:	14 c0       	rjmp	.+40     	; 0x4386 <latchbyte+0x53c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    435e:	6d 89       	ldd	r22, Y+21	; 0x15
    4360:	7e 89       	ldd	r23, Y+22	; 0x16
    4362:	8f 89       	ldd	r24, Y+23	; 0x17
    4364:	98 8d       	ldd	r25, Y+24	; 0x18
    4366:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    436a:	dc 01       	movw	r26, r24
    436c:	cb 01       	movw	r24, r22
    436e:	9c 8b       	std	Y+20, r25	; 0x14
    4370:	8b 8b       	std	Y+19, r24	; 0x13
    4372:	8b 89       	ldd	r24, Y+19	; 0x13
    4374:	9c 89       	ldd	r25, Y+20	; 0x14
    4376:	98 8b       	std	Y+16, r25	; 0x10
    4378:	8f 87       	std	Y+15, r24	; 0x0f
    437a:	8f 85       	ldd	r24, Y+15	; 0x0f
    437c:	98 89       	ldd	r25, Y+16	; 0x10
    437e:	01 97       	sbiw	r24, 0x01	; 1
    4380:	f1 f7       	brne	.-4      	; 0x437e <latchbyte+0x534>
    4382:	98 8b       	std	Y+16, r25	; 0x10
    4384:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, LOW);
    4386:	89 e3       	ldi	r24, 0x39	; 57
    4388:	90 e0       	ldi	r25, 0x00	; 0
    438a:	62 e0       	ldi	r22, 0x02	; 2
    438c:	40 e0       	ldi	r20, 0x00	; 0
    438e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    4392:	80 e0       	ldi	r24, 0x00	; 0
    4394:	90 e0       	ldi	r25, 0x00	; 0
    4396:	a8 e4       	ldi	r26, 0x48	; 72
    4398:	b2 e4       	ldi	r27, 0x42	; 66
    439a:	8b 87       	std	Y+11, r24	; 0x0b
    439c:	9c 87       	std	Y+12, r25	; 0x0c
    439e:	ad 87       	std	Y+13, r26	; 0x0d
    43a0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    43a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    43a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    43a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    43a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    43aa:	20 e0       	ldi	r18, 0x00	; 0
    43ac:	30 e0       	ldi	r19, 0x00	; 0
    43ae:	4a e7       	ldi	r20, 0x7A	; 122
    43b0:	55 e4       	ldi	r21, 0x45	; 69
    43b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    43b6:	dc 01       	movw	r26, r24
    43b8:	cb 01       	movw	r24, r22
    43ba:	8f 83       	std	Y+7, r24	; 0x07
    43bc:	98 87       	std	Y+8, r25	; 0x08
    43be:	a9 87       	std	Y+9, r26	; 0x09
    43c0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    43c2:	6f 81       	ldd	r22, Y+7	; 0x07
    43c4:	78 85       	ldd	r23, Y+8	; 0x08
    43c6:	89 85       	ldd	r24, Y+9	; 0x09
    43c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    43ca:	20 e0       	ldi	r18, 0x00	; 0
    43cc:	30 e0       	ldi	r19, 0x00	; 0
    43ce:	40 e8       	ldi	r20, 0x80	; 128
    43d0:	5f e3       	ldi	r21, 0x3F	; 63
    43d2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    43d6:	88 23       	and	r24, r24
    43d8:	2c f4       	brge	.+10     	; 0x43e4 <latchbyte+0x59a>
		__ticks = 1;
    43da:	81 e0       	ldi	r24, 0x01	; 1
    43dc:	90 e0       	ldi	r25, 0x00	; 0
    43de:	9e 83       	std	Y+6, r25	; 0x06
    43e0:	8d 83       	std	Y+5, r24	; 0x05
    43e2:	3f c0       	rjmp	.+126    	; 0x4462 <latchbyte+0x618>
	else if (__tmp > 65535)
    43e4:	6f 81       	ldd	r22, Y+7	; 0x07
    43e6:	78 85       	ldd	r23, Y+8	; 0x08
    43e8:	89 85       	ldd	r24, Y+9	; 0x09
    43ea:	9a 85       	ldd	r25, Y+10	; 0x0a
    43ec:	20 e0       	ldi	r18, 0x00	; 0
    43ee:	3f ef       	ldi	r19, 0xFF	; 255
    43f0:	4f e7       	ldi	r20, 0x7F	; 127
    43f2:	57 e4       	ldi	r21, 0x47	; 71
    43f4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    43f8:	18 16       	cp	r1, r24
    43fa:	4c f5       	brge	.+82     	; 0x444e <latchbyte+0x604>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    43fc:	6b 85       	ldd	r22, Y+11	; 0x0b
    43fe:	7c 85       	ldd	r23, Y+12	; 0x0c
    4400:	8d 85       	ldd	r24, Y+13	; 0x0d
    4402:	9e 85       	ldd	r25, Y+14	; 0x0e
    4404:	20 e0       	ldi	r18, 0x00	; 0
    4406:	30 e0       	ldi	r19, 0x00	; 0
    4408:	40 e2       	ldi	r20, 0x20	; 32
    440a:	51 e4       	ldi	r21, 0x41	; 65
    440c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4410:	dc 01       	movw	r26, r24
    4412:	cb 01       	movw	r24, r22
    4414:	bc 01       	movw	r22, r24
    4416:	cd 01       	movw	r24, r26
    4418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    441c:	dc 01       	movw	r26, r24
    441e:	cb 01       	movw	r24, r22
    4420:	9e 83       	std	Y+6, r25	; 0x06
    4422:	8d 83       	std	Y+5, r24	; 0x05
    4424:	0f c0       	rjmp	.+30     	; 0x4444 <latchbyte+0x5fa>
    4426:	80 e9       	ldi	r24, 0x90	; 144
    4428:	91 e0       	ldi	r25, 0x01	; 1
    442a:	9c 83       	std	Y+4, r25	; 0x04
    442c:	8b 83       	std	Y+3, r24	; 0x03
    442e:	8b 81       	ldd	r24, Y+3	; 0x03
    4430:	9c 81       	ldd	r25, Y+4	; 0x04
    4432:	01 97       	sbiw	r24, 0x01	; 1
    4434:	f1 f7       	brne	.-4      	; 0x4432 <latchbyte+0x5e8>
    4436:	9c 83       	std	Y+4, r25	; 0x04
    4438:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    443a:	8d 81       	ldd	r24, Y+5	; 0x05
    443c:	9e 81       	ldd	r25, Y+6	; 0x06
    443e:	01 97       	sbiw	r24, 0x01	; 1
    4440:	9e 83       	std	Y+6, r25	; 0x06
    4442:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4444:	8d 81       	ldd	r24, Y+5	; 0x05
    4446:	9e 81       	ldd	r25, Y+6	; 0x06
    4448:	00 97       	sbiw	r24, 0x00	; 0
    444a:	69 f7       	brne	.-38     	; 0x4426 <latchbyte+0x5dc>
    444c:	14 c0       	rjmp	.+40     	; 0x4476 <latchbyte+0x62c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    444e:	6f 81       	ldd	r22, Y+7	; 0x07
    4450:	78 85       	ldd	r23, Y+8	; 0x08
    4452:	89 85       	ldd	r24, Y+9	; 0x09
    4454:	9a 85       	ldd	r25, Y+10	; 0x0a
    4456:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    445a:	dc 01       	movw	r26, r24
    445c:	cb 01       	movw	r24, r22
    445e:	9e 83       	std	Y+6, r25	; 0x06
    4460:	8d 83       	std	Y+5, r24	; 0x05
    4462:	8d 81       	ldd	r24, Y+5	; 0x05
    4464:	9e 81       	ldd	r25, Y+6	; 0x06
    4466:	9a 83       	std	Y+2, r25	; 0x02
    4468:	89 83       	std	Y+1, r24	; 0x01
    446a:	89 81       	ldd	r24, Y+1	; 0x01
    446c:	9a 81       	ldd	r25, Y+2	; 0x02
    446e:	01 97       	sbiw	r24, 0x01	; 1
    4470:	f1 f7       	brne	.-4      	; 0x446e <latchbyte+0x624>
    4472:	9a 83       	std	Y+2, r25	; 0x02
    4474:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);

	}
#endif
}
    4476:	c9 5b       	subi	r28, 0xB9	; 185
    4478:	df 4f       	sbci	r29, 0xFF	; 255
    447a:	0f b6       	in	r0, 0x3f	; 63
    447c:	f8 94       	cli
    447e:	de bf       	out	0x3e, r29	; 62
    4480:	0f be       	out	0x3f, r0	; 63
    4482:	cd bf       	out	0x3d, r28	; 61
    4484:	cf 91       	pop	r28
    4486:	df 91       	pop	r29
    4488:	1f 91       	pop	r17
    448a:	0f 91       	pop	r16
    448c:	08 95       	ret

0000448e <H_LCD_void_IniT>:



/*Initialization of LCD with the required mode and configuration*/
void H_LCD_void_IniT (void)
{
    448e:	df 93       	push	r29
    4490:	cf 93       	push	r28
    4492:	cd b7       	in	r28, 0x3d	; 61
    4494:	de b7       	in	r29, 0x3e	; 62
    4496:	6c 97       	sbiw	r28, 0x1c	; 28
    4498:	0f b6       	in	r0, 0x3f	; 63
    449a:	f8 94       	cli
    449c:	de bf       	out	0x3e, r29	; 62
    449e:	0f be       	out	0x3f, r0	; 63
    44a0:	cd bf       	out	0x3d, r28	; 61
    44a2:	80 e0       	ldi	r24, 0x00	; 0
    44a4:	90 e0       	ldi	r25, 0x00	; 0
    44a6:	a0 ef       	ldi	r26, 0xF0	; 240
    44a8:	b1 e4       	ldi	r27, 0x41	; 65
    44aa:	89 8f       	std	Y+25, r24	; 0x19
    44ac:	9a 8f       	std	Y+26, r25	; 0x1a
    44ae:	ab 8f       	std	Y+27, r26	; 0x1b
    44b0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    44b2:	69 8d       	ldd	r22, Y+25	; 0x19
    44b4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    44b6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    44b8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    44ba:	20 e0       	ldi	r18, 0x00	; 0
    44bc:	30 e0       	ldi	r19, 0x00	; 0
    44be:	4a e7       	ldi	r20, 0x7A	; 122
    44c0:	55 e4       	ldi	r21, 0x45	; 69
    44c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    44c6:	dc 01       	movw	r26, r24
    44c8:	cb 01       	movw	r24, r22
    44ca:	8d 8b       	std	Y+21, r24	; 0x15
    44cc:	9e 8b       	std	Y+22, r25	; 0x16
    44ce:	af 8b       	std	Y+23, r26	; 0x17
    44d0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    44d2:	6d 89       	ldd	r22, Y+21	; 0x15
    44d4:	7e 89       	ldd	r23, Y+22	; 0x16
    44d6:	8f 89       	ldd	r24, Y+23	; 0x17
    44d8:	98 8d       	ldd	r25, Y+24	; 0x18
    44da:	20 e0       	ldi	r18, 0x00	; 0
    44dc:	30 e0       	ldi	r19, 0x00	; 0
    44de:	40 e8       	ldi	r20, 0x80	; 128
    44e0:	5f e3       	ldi	r21, 0x3F	; 63
    44e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    44e6:	88 23       	and	r24, r24
    44e8:	2c f4       	brge	.+10     	; 0x44f4 <H_LCD_void_IniT+0x66>
		__ticks = 1;
    44ea:	81 e0       	ldi	r24, 0x01	; 1
    44ec:	90 e0       	ldi	r25, 0x00	; 0
    44ee:	9c 8b       	std	Y+20, r25	; 0x14
    44f0:	8b 8b       	std	Y+19, r24	; 0x13
    44f2:	3f c0       	rjmp	.+126    	; 0x4572 <H_LCD_void_IniT+0xe4>
	else if (__tmp > 65535)
    44f4:	6d 89       	ldd	r22, Y+21	; 0x15
    44f6:	7e 89       	ldd	r23, Y+22	; 0x16
    44f8:	8f 89       	ldd	r24, Y+23	; 0x17
    44fa:	98 8d       	ldd	r25, Y+24	; 0x18
    44fc:	20 e0       	ldi	r18, 0x00	; 0
    44fe:	3f ef       	ldi	r19, 0xFF	; 255
    4500:	4f e7       	ldi	r20, 0x7F	; 127
    4502:	57 e4       	ldi	r21, 0x47	; 71
    4504:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4508:	18 16       	cp	r1, r24
    450a:	4c f5       	brge	.+82     	; 0x455e <H_LCD_void_IniT+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    450c:	69 8d       	ldd	r22, Y+25	; 0x19
    450e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4510:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4512:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4514:	20 e0       	ldi	r18, 0x00	; 0
    4516:	30 e0       	ldi	r19, 0x00	; 0
    4518:	40 e2       	ldi	r20, 0x20	; 32
    451a:	51 e4       	ldi	r21, 0x41	; 65
    451c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4520:	dc 01       	movw	r26, r24
    4522:	cb 01       	movw	r24, r22
    4524:	bc 01       	movw	r22, r24
    4526:	cd 01       	movw	r24, r26
    4528:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    452c:	dc 01       	movw	r26, r24
    452e:	cb 01       	movw	r24, r22
    4530:	9c 8b       	std	Y+20, r25	; 0x14
    4532:	8b 8b       	std	Y+19, r24	; 0x13
    4534:	0f c0       	rjmp	.+30     	; 0x4554 <H_LCD_void_IniT+0xc6>
    4536:	80 e9       	ldi	r24, 0x90	; 144
    4538:	91 e0       	ldi	r25, 0x01	; 1
    453a:	9a 8b       	std	Y+18, r25	; 0x12
    453c:	89 8b       	std	Y+17, r24	; 0x11
    453e:	89 89       	ldd	r24, Y+17	; 0x11
    4540:	9a 89       	ldd	r25, Y+18	; 0x12
    4542:	01 97       	sbiw	r24, 0x01	; 1
    4544:	f1 f7       	brne	.-4      	; 0x4542 <H_LCD_void_IniT+0xb4>
    4546:	9a 8b       	std	Y+18, r25	; 0x12
    4548:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    454a:	8b 89       	ldd	r24, Y+19	; 0x13
    454c:	9c 89       	ldd	r25, Y+20	; 0x14
    454e:	01 97       	sbiw	r24, 0x01	; 1
    4550:	9c 8b       	std	Y+20, r25	; 0x14
    4552:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4554:	8b 89       	ldd	r24, Y+19	; 0x13
    4556:	9c 89       	ldd	r25, Y+20	; 0x14
    4558:	00 97       	sbiw	r24, 0x00	; 0
    455a:	69 f7       	brne	.-38     	; 0x4536 <H_LCD_void_IniT+0xa8>
    455c:	14 c0       	rjmp	.+40     	; 0x4586 <H_LCD_void_IniT+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    455e:	6d 89       	ldd	r22, Y+21	; 0x15
    4560:	7e 89       	ldd	r23, Y+22	; 0x16
    4562:	8f 89       	ldd	r24, Y+23	; 0x17
    4564:	98 8d       	ldd	r25, Y+24	; 0x18
    4566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    456a:	dc 01       	movw	r26, r24
    456c:	cb 01       	movw	r24, r22
    456e:	9c 8b       	std	Y+20, r25	; 0x14
    4570:	8b 8b       	std	Y+19, r24	; 0x13
    4572:	8b 89       	ldd	r24, Y+19	; 0x13
    4574:	9c 89       	ldd	r25, Y+20	; 0x14
    4576:	98 8b       	std	Y+16, r25	; 0x10
    4578:	8f 87       	std	Y+15, r24	; 0x0f
    457a:	8f 85       	ldd	r24, Y+15	; 0x0f
    457c:	98 89       	ldd	r25, Y+16	; 0x10
    457e:	01 97       	sbiw	r24, 0x01	; 1
    4580:	f1 f7       	brne	.-4      	; 0x457e <H_LCD_void_IniT+0xf0>
    4582:	98 8b       	std	Y+16, r25	; 0x10
    4584:	8f 87       	std	Y+15, r24	; 0x0f
	/*Configure the direction of RS and E pins as o/p pins*/
	_delay_ms(30);
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, LCD_RS_PIN, Pin_OUTPUT);
    4586:	89 e3       	ldi	r24, 0x39	; 57
    4588:	90 e0       	ldi	r25, 0x00	; 0
    458a:	64 e0       	ldi	r22, 0x04	; 4
    458c:	41 e0       	ldi	r20, 0x01	; 1
    458e:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, LCD_EN_PIN, Pin_OUTPUT);
    4592:	89 e3       	ldi	r24, 0x39	; 57
    4594:	90 e0       	ldi	r25, 0x00	; 0
    4596:	62 e0       	ldi	r22, 0x02	; 2
    4598:	41 e0       	ldi	r20, 0x01	; 1
    459a:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>
    459e:	80 e0       	ldi	r24, 0x00	; 0
    45a0:	90 e0       	ldi	r25, 0x00	; 0
    45a2:	a0 ea       	ldi	r26, 0xA0	; 160
    45a4:	b1 e4       	ldi	r27, 0x41	; 65
    45a6:	8b 87       	std	Y+11, r24	; 0x0b
    45a8:	9c 87       	std	Y+12, r25	; 0x0c
    45aa:	ad 87       	std	Y+13, r26	; 0x0d
    45ac:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    45ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    45b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    45b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    45b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    45b6:	20 e0       	ldi	r18, 0x00	; 0
    45b8:	30 e0       	ldi	r19, 0x00	; 0
    45ba:	4a e7       	ldi	r20, 0x7A	; 122
    45bc:	55 e4       	ldi	r21, 0x45	; 69
    45be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    45c2:	dc 01       	movw	r26, r24
    45c4:	cb 01       	movw	r24, r22
    45c6:	8f 83       	std	Y+7, r24	; 0x07
    45c8:	98 87       	std	Y+8, r25	; 0x08
    45ca:	a9 87       	std	Y+9, r26	; 0x09
    45cc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    45ce:	6f 81       	ldd	r22, Y+7	; 0x07
    45d0:	78 85       	ldd	r23, Y+8	; 0x08
    45d2:	89 85       	ldd	r24, Y+9	; 0x09
    45d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    45d6:	20 e0       	ldi	r18, 0x00	; 0
    45d8:	30 e0       	ldi	r19, 0x00	; 0
    45da:	40 e8       	ldi	r20, 0x80	; 128
    45dc:	5f e3       	ldi	r21, 0x3F	; 63
    45de:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    45e2:	88 23       	and	r24, r24
    45e4:	2c f4       	brge	.+10     	; 0x45f0 <H_LCD_void_IniT+0x162>
		__ticks = 1;
    45e6:	81 e0       	ldi	r24, 0x01	; 1
    45e8:	90 e0       	ldi	r25, 0x00	; 0
    45ea:	9e 83       	std	Y+6, r25	; 0x06
    45ec:	8d 83       	std	Y+5, r24	; 0x05
    45ee:	3f c0       	rjmp	.+126    	; 0x466e <H_LCD_void_IniT+0x1e0>
	else if (__tmp > 65535)
    45f0:	6f 81       	ldd	r22, Y+7	; 0x07
    45f2:	78 85       	ldd	r23, Y+8	; 0x08
    45f4:	89 85       	ldd	r24, Y+9	; 0x09
    45f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    45f8:	20 e0       	ldi	r18, 0x00	; 0
    45fa:	3f ef       	ldi	r19, 0xFF	; 255
    45fc:	4f e7       	ldi	r20, 0x7F	; 127
    45fe:	57 e4       	ldi	r21, 0x47	; 71
    4600:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    4604:	18 16       	cp	r1, r24
    4606:	4c f5       	brge	.+82     	; 0x465a <H_LCD_void_IniT+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4608:	6b 85       	ldd	r22, Y+11	; 0x0b
    460a:	7c 85       	ldd	r23, Y+12	; 0x0c
    460c:	8d 85       	ldd	r24, Y+13	; 0x0d
    460e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4610:	20 e0       	ldi	r18, 0x00	; 0
    4612:	30 e0       	ldi	r19, 0x00	; 0
    4614:	40 e2       	ldi	r20, 0x20	; 32
    4616:	51 e4       	ldi	r21, 0x41	; 65
    4618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    461c:	dc 01       	movw	r26, r24
    461e:	cb 01       	movw	r24, r22
    4620:	bc 01       	movw	r22, r24
    4622:	cd 01       	movw	r24, r26
    4624:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4628:	dc 01       	movw	r26, r24
    462a:	cb 01       	movw	r24, r22
    462c:	9e 83       	std	Y+6, r25	; 0x06
    462e:	8d 83       	std	Y+5, r24	; 0x05
    4630:	0f c0       	rjmp	.+30     	; 0x4650 <H_LCD_void_IniT+0x1c2>
    4632:	80 e9       	ldi	r24, 0x90	; 144
    4634:	91 e0       	ldi	r25, 0x01	; 1
    4636:	9c 83       	std	Y+4, r25	; 0x04
    4638:	8b 83       	std	Y+3, r24	; 0x03
    463a:	8b 81       	ldd	r24, Y+3	; 0x03
    463c:	9c 81       	ldd	r25, Y+4	; 0x04
    463e:	01 97       	sbiw	r24, 0x01	; 1
    4640:	f1 f7       	brne	.-4      	; 0x463e <H_LCD_void_IniT+0x1b0>
    4642:	9c 83       	std	Y+4, r25	; 0x04
    4644:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4646:	8d 81       	ldd	r24, Y+5	; 0x05
    4648:	9e 81       	ldd	r25, Y+6	; 0x06
    464a:	01 97       	sbiw	r24, 0x01	; 1
    464c:	9e 83       	std	Y+6, r25	; 0x06
    464e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4650:	8d 81       	ldd	r24, Y+5	; 0x05
    4652:	9e 81       	ldd	r25, Y+6	; 0x06
    4654:	00 97       	sbiw	r24, 0x00	; 0
    4656:	69 f7       	brne	.-38     	; 0x4632 <H_LCD_void_IniT+0x1a4>
    4658:	14 c0       	rjmp	.+40     	; 0x4682 <H_LCD_void_IniT+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    465a:	6f 81       	ldd	r22, Y+7	; 0x07
    465c:	78 85       	ldd	r23, Y+8	; 0x08
    465e:	89 85       	ldd	r24, Y+9	; 0x09
    4660:	9a 85       	ldd	r25, Y+10	; 0x0a
    4662:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4666:	dc 01       	movw	r26, r24
    4668:	cb 01       	movw	r24, r22
    466a:	9e 83       	std	Y+6, r25	; 0x06
    466c:	8d 83       	std	Y+5, r24	; 0x05
    466e:	8d 81       	ldd	r24, Y+5	; 0x05
    4670:	9e 81       	ldd	r25, Y+6	; 0x06
    4672:	9a 83       	std	Y+2, r25	; 0x02
    4674:	89 83       	std	Y+1, r24	; 0x01
    4676:	89 81       	ldd	r24, Y+1	; 0x01
    4678:	9a 81       	ldd	r25, Y+2	; 0x02
    467a:	01 97       	sbiw	r24, 0x01	; 1
    467c:	f1 f7       	brne	.-4      	; 0x467a <H_LCD_void_IniT+0x1ec>
    467e:	9a 83       	std	Y+2, r25	; 0x02
    4680:	89 83       	std	Y+1, r24	; 0x01

	/*LCD power ON delay is always 15 ms*/
	_delay_ms(20);
#if(MODE == _4_BIT_MODE)
	{
		DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D4_PIN, Pin_OUTPUT);
    4682:	86 e3       	ldi	r24, 0x36	; 54
    4684:	90 e0       	ldi	r25, 0x00	; 0
    4686:	60 e0       	ldi	r22, 0x00	; 0
    4688:	41 e0       	ldi	r20, 0x01	; 1
    468a:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D5_PIN, Pin_OUTPUT);
    468e:	86 e3       	ldi	r24, 0x36	; 54
    4690:	90 e0       	ldi	r25, 0x00	; 0
    4692:	61 e0       	ldi	r22, 0x01	; 1
    4694:	41 e0       	ldi	r20, 0x01	; 1
    4696:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D6_PIN, Pin_OUTPUT);
    469a:	86 e3       	ldi	r24, 0x36	; 54
    469c:	90 e0       	ldi	r25, 0x00	; 0
    469e:	62 e0       	ldi	r22, 0x02	; 2
    46a0:	41 e0       	ldi	r20, 0x01	; 1
    46a2:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D7_PIN, Pin_OUTPUT);
    46a6:	86 e3       	ldi	r24, 0x36	; 54
    46a8:	90 e0       	ldi	r25, 0x00	; 0
    46aa:	64 e0       	ldi	r22, 0x04	; 4
    46ac:	41 e0       	ldi	r20, 0x01	; 1
    46ae:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>
		/*Send initialization commands for 4 bit mode*/
		H_LCD_void_sendCommand(LCD_MODE_2LINES_4BITS_INIT1);
    46b2:	83 e3       	ldi	r24, 0x33	; 51
    46b4:	0e 94 71 23 	call	0x46e2	; 0x46e2 <H_LCD_void_sendCommand>
		H_LCD_void_sendCommand(LCD_MODE_2LINES_4BITS_INIT2);
    46b8:	82 e3       	ldi	r24, 0x32	; 50
    46ba:	0e 94 71 23 	call	0x46e2	; 0x46e2 <H_LCD_void_sendCommand>

		/*choose the mode of operation of LCD*/
		H_LCD_void_sendCommand(LCD_MODE_2LINES_4BITS);
    46be:	88 e2       	ldi	r24, 0x28	; 40
    46c0:	0e 94 71 23 	call	0x46e2	; 0x46e2 <H_LCD_void_sendCommand>
		H_LCD_void_sendCommand(LCD_MODE_2LINES_8BITS);
	}
#endif

		/*Send initialization display commands*/
	H_LCD_void_sendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    46c4:	8c e0       	ldi	r24, 0x0C	; 12
    46c6:	0e 94 71 23 	call	0x46e2	; 0x46e2 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_CLEAR_DISPLAY_SCREEN);
    46ca:	81 e0       	ldi	r24, 0x01	; 1
    46cc:	0e 94 71 23 	call	0x46e2	; 0x46e2 <H_LCD_void_sendCommand>
	}
    46d0:	6c 96       	adiw	r28, 0x1c	; 28
    46d2:	0f b6       	in	r0, 0x3f	; 63
    46d4:	f8 94       	cli
    46d6:	de bf       	out	0x3e, r29	; 62
    46d8:	0f be       	out	0x3f, r0	; 63
    46da:	cd bf       	out	0x3d, r28	; 61
    46dc:	cf 91       	pop	r28
    46de:	df 91       	pop	r29
    46e0:	08 95       	ret

000046e2 <H_LCD_void_sendCommand>:



/*Send the required command to the LCD*/
void H_LCD_void_sendCommand (uint8_t copy_u8command)
{
    46e2:	df 93       	push	r29
    46e4:	cf 93       	push	r28
    46e6:	cd b7       	in	r28, 0x3d	; 61
    46e8:	de b7       	in	r29, 0x3e	; 62
    46ea:	2f 97       	sbiw	r28, 0x0f	; 15
    46ec:	0f b6       	in	r0, 0x3f	; 63
    46ee:	f8 94       	cli
    46f0:	de bf       	out	0x3e, r29	; 62
    46f2:	0f be       	out	0x3f, r0	; 63
    46f4:	cd bf       	out	0x3d, r28	; 61
    46f6:	8f 87       	std	Y+15, r24	; 0x0f
	/*RS = 0 for sending command*/
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, LOW);
    46f8:	89 e3       	ldi	r24, 0x39	; 57
    46fa:	90 e0       	ldi	r25, 0x00	; 0
    46fc:	64 e0       	ldi	r22, 0x04	; 4
    46fe:	40 e0       	ldi	r20, 0x00	; 0
    4700:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    4704:	80 e0       	ldi	r24, 0x00	; 0
    4706:	90 e0       	ldi	r25, 0x00	; 0
    4708:	a0 e8       	ldi	r26, 0x80	; 128
    470a:	bf e3       	ldi	r27, 0x3F	; 63
    470c:	8b 87       	std	Y+11, r24	; 0x0b
    470e:	9c 87       	std	Y+12, r25	; 0x0c
    4710:	ad 87       	std	Y+13, r26	; 0x0d
    4712:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4714:	6b 85       	ldd	r22, Y+11	; 0x0b
    4716:	7c 85       	ldd	r23, Y+12	; 0x0c
    4718:	8d 85       	ldd	r24, Y+13	; 0x0d
    471a:	9e 85       	ldd	r25, Y+14	; 0x0e
    471c:	20 e0       	ldi	r18, 0x00	; 0
    471e:	30 e0       	ldi	r19, 0x00	; 0
    4720:	4a e7       	ldi	r20, 0x7A	; 122
    4722:	55 e4       	ldi	r21, 0x45	; 69
    4724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4728:	dc 01       	movw	r26, r24
    472a:	cb 01       	movw	r24, r22
    472c:	8f 83       	std	Y+7, r24	; 0x07
    472e:	98 87       	std	Y+8, r25	; 0x08
    4730:	a9 87       	std	Y+9, r26	; 0x09
    4732:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    4734:	6f 81       	ldd	r22, Y+7	; 0x07
    4736:	78 85       	ldd	r23, Y+8	; 0x08
    4738:	89 85       	ldd	r24, Y+9	; 0x09
    473a:	9a 85       	ldd	r25, Y+10	; 0x0a
    473c:	20 e0       	ldi	r18, 0x00	; 0
    473e:	30 e0       	ldi	r19, 0x00	; 0
    4740:	40 e8       	ldi	r20, 0x80	; 128
    4742:	5f e3       	ldi	r21, 0x3F	; 63
    4744:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    4748:	88 23       	and	r24, r24
    474a:	2c f4       	brge	.+10     	; 0x4756 <H_LCD_void_sendCommand+0x74>
		__ticks = 1;
    474c:	81 e0       	ldi	r24, 0x01	; 1
    474e:	90 e0       	ldi	r25, 0x00	; 0
    4750:	9e 83       	std	Y+6, r25	; 0x06
    4752:	8d 83       	std	Y+5, r24	; 0x05
    4754:	3f c0       	rjmp	.+126    	; 0x47d4 <H_LCD_void_sendCommand+0xf2>
	else if (__tmp > 65535)
    4756:	6f 81       	ldd	r22, Y+7	; 0x07
    4758:	78 85       	ldd	r23, Y+8	; 0x08
    475a:	89 85       	ldd	r24, Y+9	; 0x09
    475c:	9a 85       	ldd	r25, Y+10	; 0x0a
    475e:	20 e0       	ldi	r18, 0x00	; 0
    4760:	3f ef       	ldi	r19, 0xFF	; 255
    4762:	4f e7       	ldi	r20, 0x7F	; 127
    4764:	57 e4       	ldi	r21, 0x47	; 71
    4766:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    476a:	18 16       	cp	r1, r24
    476c:	4c f5       	brge	.+82     	; 0x47c0 <H_LCD_void_sendCommand+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    476e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4770:	7c 85       	ldd	r23, Y+12	; 0x0c
    4772:	8d 85       	ldd	r24, Y+13	; 0x0d
    4774:	9e 85       	ldd	r25, Y+14	; 0x0e
    4776:	20 e0       	ldi	r18, 0x00	; 0
    4778:	30 e0       	ldi	r19, 0x00	; 0
    477a:	40 e2       	ldi	r20, 0x20	; 32
    477c:	51 e4       	ldi	r21, 0x41	; 65
    477e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4782:	dc 01       	movw	r26, r24
    4784:	cb 01       	movw	r24, r22
    4786:	bc 01       	movw	r22, r24
    4788:	cd 01       	movw	r24, r26
    478a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    478e:	dc 01       	movw	r26, r24
    4790:	cb 01       	movw	r24, r22
    4792:	9e 83       	std	Y+6, r25	; 0x06
    4794:	8d 83       	std	Y+5, r24	; 0x05
    4796:	0f c0       	rjmp	.+30     	; 0x47b6 <H_LCD_void_sendCommand+0xd4>
    4798:	80 e9       	ldi	r24, 0x90	; 144
    479a:	91 e0       	ldi	r25, 0x01	; 1
    479c:	9c 83       	std	Y+4, r25	; 0x04
    479e:	8b 83       	std	Y+3, r24	; 0x03
    47a0:	8b 81       	ldd	r24, Y+3	; 0x03
    47a2:	9c 81       	ldd	r25, Y+4	; 0x04
    47a4:	01 97       	sbiw	r24, 0x01	; 1
    47a6:	f1 f7       	brne	.-4      	; 0x47a4 <H_LCD_void_sendCommand+0xc2>
    47a8:	9c 83       	std	Y+4, r25	; 0x04
    47aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    47ac:	8d 81       	ldd	r24, Y+5	; 0x05
    47ae:	9e 81       	ldd	r25, Y+6	; 0x06
    47b0:	01 97       	sbiw	r24, 0x01	; 1
    47b2:	9e 83       	std	Y+6, r25	; 0x06
    47b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    47b6:	8d 81       	ldd	r24, Y+5	; 0x05
    47b8:	9e 81       	ldd	r25, Y+6	; 0x06
    47ba:	00 97       	sbiw	r24, 0x00	; 0
    47bc:	69 f7       	brne	.-38     	; 0x4798 <H_LCD_void_sendCommand+0xb6>
    47be:	14 c0       	rjmp	.+40     	; 0x47e8 <H_LCD_void_sendCommand+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    47c0:	6f 81       	ldd	r22, Y+7	; 0x07
    47c2:	78 85       	ldd	r23, Y+8	; 0x08
    47c4:	89 85       	ldd	r24, Y+9	; 0x09
    47c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    47c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    47cc:	dc 01       	movw	r26, r24
    47ce:	cb 01       	movw	r24, r22
    47d0:	9e 83       	std	Y+6, r25	; 0x06
    47d2:	8d 83       	std	Y+5, r24	; 0x05
    47d4:	8d 81       	ldd	r24, Y+5	; 0x05
    47d6:	9e 81       	ldd	r25, Y+6	; 0x06
    47d8:	9a 83       	std	Y+2, r25	; 0x02
    47da:	89 83       	std	Y+1, r24	; 0x01
    47dc:	89 81       	ldd	r24, Y+1	; 0x01
    47de:	9a 81       	ldd	r25, Y+2	; 0x02
    47e0:	01 97       	sbiw	r24, 0x01	; 1
    47e2:	f1 f7       	brne	.-4      	; 0x47e0 <H_LCD_void_sendCommand+0xfe>
    47e4:	9a 83       	std	Y+2, r25	; 0x02
    47e6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	latchbyte(copy_u8command);
    47e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    47ea:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <latchbyte>
}
    47ee:	2f 96       	adiw	r28, 0x0f	; 15
    47f0:	0f b6       	in	r0, 0x3f	; 63
    47f2:	f8 94       	cli
    47f4:	de bf       	out	0x3e, r29	; 62
    47f6:	0f be       	out	0x3f, r0	; 63
    47f8:	cd bf       	out	0x3d, r28	; 61
    47fa:	cf 91       	pop	r28
    47fc:	df 91       	pop	r29
    47fe:	08 95       	ret

00004800 <H_LCD_void_sendData>:


/*Display the required character on the LCD*/
void H_LCD_void_sendData(uint8_t copy_u8data)
{
    4800:	df 93       	push	r29
    4802:	cf 93       	push	r28
    4804:	0f 92       	push	r0
    4806:	cd b7       	in	r28, 0x3d	; 61
    4808:	de b7       	in	r29, 0x3e	; 62
    480a:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, HIGH);
    480c:	89 e3       	ldi	r24, 0x39	; 57
    480e:	90 e0       	ldi	r25, 0x00	; 0
    4810:	64 e0       	ldi	r22, 0x04	; 4
    4812:	41 e0       	ldi	r20, 0x01	; 1
    4814:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
	latchbyte(copy_u8data);
    4818:	89 81       	ldd	r24, Y+1	; 0x01
    481a:	0e 94 25 1f 	call	0x3e4a	; 0x3e4a <latchbyte>

}
    481e:	0f 90       	pop	r0
    4820:	cf 91       	pop	r28
    4822:	df 91       	pop	r29
    4824:	08 95       	ret

00004826 <H_LCD_void_sendString>:

/*Display the required string on the lCD*/
void H_LCD_void_sendString(const uint8_t *pstr)
{
    4826:	df 93       	push	r29
    4828:	cf 93       	push	r28
    482a:	00 d0       	rcall	.+0      	; 0x482c <H_LCD_void_sendString+0x6>
    482c:	cd b7       	in	r28, 0x3d	; 61
    482e:	de b7       	in	r29, 0x3e	; 62
    4830:	9a 83       	std	Y+2, r25	; 0x02
    4832:	89 83       	std	Y+1, r24	; 0x01
    4834:	0a c0       	rjmp	.+20     	; 0x484a <H_LCD_void_sendString+0x24>
	while (*(pstr)!= NULL)
	{
		H_LCD_void_sendData(*pstr);
    4836:	e9 81       	ldd	r30, Y+1	; 0x01
    4838:	fa 81       	ldd	r31, Y+2	; 0x02
    483a:	80 81       	ld	r24, Z
    483c:	0e 94 00 24 	call	0x4800	; 0x4800 <H_LCD_void_sendData>
		pstr++;
    4840:	89 81       	ldd	r24, Y+1	; 0x01
    4842:	9a 81       	ldd	r25, Y+2	; 0x02
    4844:	01 96       	adiw	r24, 0x01	; 1
    4846:	9a 83       	std	Y+2, r25	; 0x02
    4848:	89 83       	std	Y+1, r24	; 0x01
}

/*Display the required string on the lCD*/
void H_LCD_void_sendString(const uint8_t *pstr)
{
	while (*(pstr)!= NULL)
    484a:	e9 81       	ldd	r30, Y+1	; 0x01
    484c:	fa 81       	ldd	r31, Y+2	; 0x02
    484e:	80 81       	ld	r24, Z
    4850:	88 2f       	mov	r24, r24
    4852:	90 e0       	ldi	r25, 0x00	; 0
    4854:	00 97       	sbiw	r24, 0x00	; 0
    4856:	79 f7       	brne	.-34     	; 0x4836 <H_LCD_void_sendString+0x10>
	{
		H_LCD_void_sendData(*pstr);
		pstr++;
	}
}
    4858:	0f 90       	pop	r0
    485a:	0f 90       	pop	r0
    485c:	cf 91       	pop	r28
    485e:	df 91       	pop	r29
    4860:	08 95       	ret

00004862 <H_LCD_int_to_string>:


void H_LCD_int_to_string(int data)
{
    4862:	df 93       	push	r29
    4864:	cf 93       	push	r28
    4866:	cd b7       	in	r28, 0x3d	; 61
    4868:	de b7       	in	r29, 0x3e	; 62
    486a:	62 97       	sbiw	r28, 0x12	; 18
    486c:	0f b6       	in	r0, 0x3f	; 63
    486e:	f8 94       	cli
    4870:	de bf       	out	0x3e, r29	; 62
    4872:	0f be       	out	0x3f, r0	; 63
    4874:	cd bf       	out	0x3d, r28	; 61
    4876:	9a 8b       	std	Y+18, r25	; 0x12
    4878:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /*array to hold the ASCII result of each number*/
		itoa(data,buff,10); /*itoa c function to convert the integer data to corresponding ASCII vale, 10 --> base 10 for decimal*/
    487a:	89 89       	ldd	r24, Y+17	; 0x11
    487c:	9a 89       	ldd	r25, Y+18	; 0x12
    487e:	9e 01       	movw	r18, r28
    4880:	2f 5f       	subi	r18, 0xFF	; 255
    4882:	3f 4f       	sbci	r19, 0xFF	; 255
    4884:	b9 01       	movw	r22, r18
    4886:	4a e0       	ldi	r20, 0x0A	; 10
    4888:	50 e0       	ldi	r21, 0x00	; 0
    488a:	0e 94 d6 3d 	call	0x7bac	; 0x7bac <itoa>
		H_LCD_void_sendString(buff);
    488e:	ce 01       	movw	r24, r28
    4890:	01 96       	adiw	r24, 0x01	; 1
    4892:	0e 94 13 24 	call	0x4826	; 0x4826 <H_LCD_void_sendString>
}
    4896:	62 96       	adiw	r28, 0x12	; 18
    4898:	0f b6       	in	r0, 0x3f	; 63
    489a:	f8 94       	cli
    489c:	de bf       	out	0x3e, r29	; 62
    489e:	0f be       	out	0x3f, r0	; 63
    48a0:	cd bf       	out	0x3d, r28	; 61
    48a2:	cf 91       	pop	r28
    48a4:	df 91       	pop	r29
    48a6:	08 95       	ret

000048a8 <H_LCD_void_gotoXY>:

void H_LCD_void_gotoXY(uint8_t copy_u8Row, uint8_t copy_u8Col)
{
    48a8:	df 93       	push	r29
    48aa:	cf 93       	push	r28
    48ac:	00 d0       	rcall	.+0      	; 0x48ae <H_LCD_void_gotoXY+0x6>
    48ae:	00 d0       	rcall	.+0      	; 0x48b0 <H_LCD_void_gotoXY+0x8>
    48b0:	00 d0       	rcall	.+0      	; 0x48b2 <H_LCD_void_gotoXY+0xa>
    48b2:	cd b7       	in	r28, 0x3d	; 61
    48b4:	de b7       	in	r29, 0x3e	; 62
    48b6:	8d 83       	std	Y+5, r24	; 0x05
    48b8:	6e 83       	std	Y+6, r22	; 0x06
	uint8_t Local_U8_Arr [4] = {LCD_R0_COMMAND , LCD_R1_COMMAND , LCD_R2_COMMAND , LCD_R3_COMMAND};
    48ba:	80 e8       	ldi	r24, 0x80	; 128
    48bc:	89 83       	std	Y+1, r24	; 0x01
    48be:	80 ec       	ldi	r24, 0xC0	; 192
    48c0:	8a 83       	std	Y+2, r24	; 0x02
    48c2:	84 e9       	ldi	r24, 0x94	; 148
    48c4:	8b 83       	std	Y+3, r24	; 0x03
    48c6:	84 ed       	ldi	r24, 0xD4	; 212
    48c8:	8c 83       	std	Y+4, r24	; 0x04
	H_LCD_void_sendCommand(Local_U8_Arr[copy_u8Row] + copy_u8Col);
    48ca:	8d 81       	ldd	r24, Y+5	; 0x05
    48cc:	28 2f       	mov	r18, r24
    48ce:	30 e0       	ldi	r19, 0x00	; 0
    48d0:	ce 01       	movw	r24, r28
    48d2:	01 96       	adiw	r24, 0x01	; 1
    48d4:	fc 01       	movw	r30, r24
    48d6:	e2 0f       	add	r30, r18
    48d8:	f3 1f       	adc	r31, r19
    48da:	90 81       	ld	r25, Z
    48dc:	8e 81       	ldd	r24, Y+6	; 0x06
    48de:	89 0f       	add	r24, r25
    48e0:	0e 94 71 23 	call	0x46e2	; 0x46e2 <H_LCD_void_sendCommand>
}
    48e4:	26 96       	adiw	r28, 0x06	; 6
    48e6:	0f b6       	in	r0, 0x3f	; 63
    48e8:	f8 94       	cli
    48ea:	de bf       	out	0x3e, r29	; 62
    48ec:	0f be       	out	0x3f, r0	; 63
    48ee:	cd bf       	out	0x3d, r28	; 61
    48f0:	cf 91       	pop	r28
    48f2:	df 91       	pop	r29
    48f4:	08 95       	ret

000048f6 <H_Lcd_Void_Clear>:


void H_Lcd_Void_Clear()
{
    48f6:	df 93       	push	r29
    48f8:	cf 93       	push	r28
    48fa:	cd b7       	in	r28, 0x3d	; 61
    48fc:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_sendCommand(LCD_CLEAR_DISPLAY_SCREEN);
    48fe:	81 e0       	ldi	r24, 0x01	; 1
    4900:	0e 94 71 23 	call	0x46e2	; 0x46e2 <H_LCD_void_sendCommand>
}
    4904:	cf 91       	pop	r28
    4906:	df 91       	pop	r29
    4908:	08 95       	ret

0000490a <LCD_displayStringRowColumn>:

void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    490a:	df 93       	push	r29
    490c:	cf 93       	push	r28
    490e:	00 d0       	rcall	.+0      	; 0x4910 <LCD_displayStringRowColumn+0x6>
    4910:	00 d0       	rcall	.+0      	; 0x4912 <LCD_displayStringRowColumn+0x8>
    4912:	cd b7       	in	r28, 0x3d	; 61
    4914:	de b7       	in	r29, 0x3e	; 62
    4916:	89 83       	std	Y+1, r24	; 0x01
    4918:	6a 83       	std	Y+2, r22	; 0x02
    491a:	5c 83       	std	Y+4, r21	; 0x04
    491c:	4b 83       	std	Y+3, r20	; 0x03
	H_LCD_void_gotoXY(row,col); /* go to to the required LCD position */
    491e:	89 81       	ldd	r24, Y+1	; 0x01
    4920:	6a 81       	ldd	r22, Y+2	; 0x02
    4922:	0e 94 54 24 	call	0x48a8	; 0x48a8 <H_LCD_void_gotoXY>
	H_LCD_void_sendString(Str); /* display the string */
    4926:	8b 81       	ldd	r24, Y+3	; 0x03
    4928:	9c 81       	ldd	r25, Y+4	; 0x04
    492a:	0e 94 13 24 	call	0x4826	; 0x4826 <H_LCD_void_sendString>
}
    492e:	0f 90       	pop	r0
    4930:	0f 90       	pop	r0
    4932:	0f 90       	pop	r0
    4934:	0f 90       	pop	r0
    4936:	cf 91       	pop	r28
    4938:	df 91       	pop	r29
    493a:	08 95       	ret

0000493c <RTC_Init>:

#include "util/delay.h"
#include "LED_INTERFACING.h"
year_t date_res;
void RTC_Init(void)
{
    493c:	df 93       	push	r29
    493e:	cf 93       	push	r28
    4940:	00 d0       	rcall	.+0      	; 0x4942 <RTC_Init+0x6>
    4942:	cd b7       	in	r28, 0x3d	; 61
    4944:	de b7       	in	r29, 0x3e	; 62
	TWIconfig twi = {PRE_1,FREQ_100};
    4946:	19 82       	std	Y+1, r1	; 0x01
    4948:	88 e4       	ldi	r24, 0x48	; 72
    494a:	8a 83       	std	Y+2, r24	; 0x02

	TWI_init(&twi);
    494c:	ce 01       	movw	r24, r28
    494e:	01 96       	adiw	r24, 0x01	; 1
    4950:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <TWI_init>
}
    4954:	0f 90       	pop	r0
    4956:	0f 90       	pop	r0
    4958:	cf 91       	pop	r28
    495a:	df 91       	pop	r29
    495c:	08 95       	ret

0000495e <RTC_dateFormat>:


static uint8 RTC_dateFormat(uint8 copy_year_date){
    495e:	df 93       	push	r29
    4960:	cf 93       	push	r28
    4962:	00 d0       	rcall	.+0      	; 0x4964 <RTC_dateFormat+0x6>
    4964:	00 d0       	rcall	.+0      	; 0x4966 <RTC_dateFormat+0x8>
    4966:	00 d0       	rcall	.+0      	; 0x4968 <RTC_dateFormat+0xa>
    4968:	cd b7       	in	r28, 0x3d	; 61
    496a:	de b7       	in	r29, 0x3e	; 62
    496c:	8e 83       	std	Y+6, r24	; 0x06

	uint8 local_date =0;
    496e:	1b 82       	std	Y+3, r1	; 0x03

	uint8 date_format[2];

	uint8 temp = copy_year_date;
    4970:	8e 81       	ldd	r24, Y+6	; 0x06
    4972:	8a 83       	std	Y+2, r24	; 0x02

	for(uint8 i=0;i<2;i++){
    4974:	19 82       	std	Y+1, r1	; 0x01
    4976:	19 c0       	rjmp	.+50     	; 0x49aa <RTC_dateFormat+0x4c>

		date_format[i] = temp % 10;
    4978:	89 81       	ldd	r24, Y+1	; 0x01
    497a:	48 2f       	mov	r20, r24
    497c:	50 e0       	ldi	r21, 0x00	; 0
    497e:	8a 81       	ldd	r24, Y+2	; 0x02
    4980:	9a e0       	ldi	r25, 0x0A	; 10
    4982:	69 2f       	mov	r22, r25
    4984:	0e 94 2f 3d 	call	0x7a5e	; 0x7a5e <__udivmodqi4>
    4988:	89 2f       	mov	r24, r25
    498a:	28 2f       	mov	r18, r24
    498c:	ce 01       	movw	r24, r28
    498e:	04 96       	adiw	r24, 0x04	; 4
    4990:	fc 01       	movw	r30, r24
    4992:	e4 0f       	add	r30, r20
    4994:	f5 1f       	adc	r31, r21
    4996:	20 83       	st	Z, r18

		temp = temp / 10;
    4998:	8a 81       	ldd	r24, Y+2	; 0x02
    499a:	9a e0       	ldi	r25, 0x0A	; 10
    499c:	69 2f       	mov	r22, r25
    499e:	0e 94 2f 3d 	call	0x7a5e	; 0x7a5e <__udivmodqi4>
    49a2:	8a 83       	std	Y+2, r24	; 0x02

	uint8 date_format[2];

	uint8 temp = copy_year_date;

	for(uint8 i=0;i<2;i++){
    49a4:	89 81       	ldd	r24, Y+1	; 0x01
    49a6:	8f 5f       	subi	r24, 0xFF	; 255
    49a8:	89 83       	std	Y+1, r24	; 0x01
    49aa:	89 81       	ldd	r24, Y+1	; 0x01
    49ac:	82 30       	cpi	r24, 0x02	; 2
    49ae:	20 f3       	brcs	.-56     	; 0x4978 <RTC_dateFormat+0x1a>

		temp = temp / 10;

	}

	local_date = date_format[0] | (date_format[1]<<4);
    49b0:	8c 81       	ldd	r24, Y+4	; 0x04
    49b2:	28 2f       	mov	r18, r24
    49b4:	8d 81       	ldd	r24, Y+5	; 0x05
    49b6:	88 2f       	mov	r24, r24
    49b8:	90 e0       	ldi	r25, 0x00	; 0
    49ba:	82 95       	swap	r24
    49bc:	92 95       	swap	r25
    49be:	90 7f       	andi	r25, 0xF0	; 240
    49c0:	98 27       	eor	r25, r24
    49c2:	80 7f       	andi	r24, 0xF0	; 240
    49c4:	98 27       	eor	r25, r24
    49c6:	82 2b       	or	r24, r18
    49c8:	8b 83       	std	Y+3, r24	; 0x03

	return local_date;
    49ca:	8b 81       	ldd	r24, Y+3	; 0x03
}
    49cc:	26 96       	adiw	r28, 0x06	; 6
    49ce:	0f b6       	in	r0, 0x3f	; 63
    49d0:	f8 94       	cli
    49d2:	de bf       	out	0x3e, r29	; 62
    49d4:	0f be       	out	0x3f, r0	; 63
    49d6:	cd bf       	out	0x3d, r28	; 61
    49d8:	cf 91       	pop	r28
    49da:	df 91       	pop	r29
    49dc:	08 95       	ret

000049de <RTC_dayFormat>:

static uint8 RTC_dayFormat(uint8 copy_year_day){
    49de:	df 93       	push	r29
    49e0:	cf 93       	push	r28
    49e2:	00 d0       	rcall	.+0      	; 0x49e4 <RTC_dayFormat+0x6>
    49e4:	cd b7       	in	r28, 0x3d	; 61
    49e6:	de b7       	in	r29, 0x3e	; 62
    49e8:	8a 83       	std	Y+2, r24	; 0x02

	uint8 local_day = copy_year_day;
    49ea:	8a 81       	ldd	r24, Y+2	; 0x02
    49ec:	89 83       	std	Y+1, r24	; 0x01

	return local_day;
    49ee:	89 81       	ldd	r24, Y+1	; 0x01
}
    49f0:	0f 90       	pop	r0
    49f2:	0f 90       	pop	r0
    49f4:	cf 91       	pop	r28
    49f6:	df 91       	pop	r29
    49f8:	08 95       	ret

000049fa <RTC_MonthFormat>:


static uint8 RTC_MonthFormat(uint8 copy_year_month){
    49fa:	df 93       	push	r29
    49fc:	cf 93       	push	r28
    49fe:	00 d0       	rcall	.+0      	; 0x4a00 <RTC_MonthFormat+0x6>
    4a00:	00 d0       	rcall	.+0      	; 0x4a02 <RTC_MonthFormat+0x8>
    4a02:	00 d0       	rcall	.+0      	; 0x4a04 <RTC_MonthFormat+0xa>
    4a04:	cd b7       	in	r28, 0x3d	; 61
    4a06:	de b7       	in	r29, 0x3e	; 62
    4a08:	8e 83       	std	Y+6, r24	; 0x06

	uint8 month_format[2];

	uint8 temp = copy_year_month;
    4a0a:	8e 81       	ldd	r24, Y+6	; 0x06
    4a0c:	8b 83       	std	Y+3, r24	; 0x03

	for(uint8 i=0;i<2;i++){
    4a0e:	19 82       	std	Y+1, r1	; 0x01
    4a10:	19 c0       	rjmp	.+50     	; 0x4a44 <RTC_MonthFormat+0x4a>

		month_format[i] = temp % 10;
    4a12:	89 81       	ldd	r24, Y+1	; 0x01
    4a14:	48 2f       	mov	r20, r24
    4a16:	50 e0       	ldi	r21, 0x00	; 0
    4a18:	8b 81       	ldd	r24, Y+3	; 0x03
    4a1a:	9a e0       	ldi	r25, 0x0A	; 10
    4a1c:	69 2f       	mov	r22, r25
    4a1e:	0e 94 2f 3d 	call	0x7a5e	; 0x7a5e <__udivmodqi4>
    4a22:	89 2f       	mov	r24, r25
    4a24:	28 2f       	mov	r18, r24
    4a26:	ce 01       	movw	r24, r28
    4a28:	04 96       	adiw	r24, 0x04	; 4
    4a2a:	fc 01       	movw	r30, r24
    4a2c:	e4 0f       	add	r30, r20
    4a2e:	f5 1f       	adc	r31, r21
    4a30:	20 83       	st	Z, r18

		temp = temp / 10;
    4a32:	8b 81       	ldd	r24, Y+3	; 0x03
    4a34:	9a e0       	ldi	r25, 0x0A	; 10
    4a36:	69 2f       	mov	r22, r25
    4a38:	0e 94 2f 3d 	call	0x7a5e	; 0x7a5e <__udivmodqi4>
    4a3c:	8b 83       	std	Y+3, r24	; 0x03

	uint8 month_format[2];

	uint8 temp = copy_year_month;

	for(uint8 i=0;i<2;i++){
    4a3e:	89 81       	ldd	r24, Y+1	; 0x01
    4a40:	8f 5f       	subi	r24, 0xFF	; 255
    4a42:	89 83       	std	Y+1, r24	; 0x01
    4a44:	89 81       	ldd	r24, Y+1	; 0x01
    4a46:	82 30       	cpi	r24, 0x02	; 2
    4a48:	20 f3       	brcs	.-56     	; 0x4a12 <RTC_MonthFormat+0x18>

		temp = temp / 10;

	}

	uint8 local_month = month_format[0] | (month_format[1] << 4);
    4a4a:	8c 81       	ldd	r24, Y+4	; 0x04
    4a4c:	28 2f       	mov	r18, r24
    4a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    4a50:	88 2f       	mov	r24, r24
    4a52:	90 e0       	ldi	r25, 0x00	; 0
    4a54:	82 95       	swap	r24
    4a56:	92 95       	swap	r25
    4a58:	90 7f       	andi	r25, 0xF0	; 240
    4a5a:	98 27       	eor	r25, r24
    4a5c:	80 7f       	andi	r24, 0xF0	; 240
    4a5e:	98 27       	eor	r25, r24
    4a60:	82 2b       	or	r24, r18
    4a62:	8a 83       	std	Y+2, r24	; 0x02

	return local_month;
    4a64:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4a66:	26 96       	adiw	r28, 0x06	; 6
    4a68:	0f b6       	in	r0, 0x3f	; 63
    4a6a:	f8 94       	cli
    4a6c:	de bf       	out	0x3e, r29	; 62
    4a6e:	0f be       	out	0x3f, r0	; 63
    4a70:	cd bf       	out	0x3d, r28	; 61
    4a72:	cf 91       	pop	r28
    4a74:	df 91       	pop	r29
    4a76:	08 95       	ret

00004a78 <RTC_yearFormat>:

static uint8 RTC_yearFormat(uint8 copy_year){
    4a78:	df 93       	push	r29
    4a7a:	cf 93       	push	r28
    4a7c:	00 d0       	rcall	.+0      	; 0x4a7e <RTC_yearFormat+0x6>
    4a7e:	00 d0       	rcall	.+0      	; 0x4a80 <RTC_yearFormat+0x8>
    4a80:	00 d0       	rcall	.+0      	; 0x4a82 <RTC_yearFormat+0xa>
    4a82:	cd b7       	in	r28, 0x3d	; 61
    4a84:	de b7       	in	r29, 0x3e	; 62
    4a86:	8e 83       	std	Y+6, r24	; 0x06

	uint8 year_format[2];

	uint8 temp = copy_year;
    4a88:	8e 81       	ldd	r24, Y+6	; 0x06
    4a8a:	8b 83       	std	Y+3, r24	; 0x03

	for(uint8 i=0;i<2;i++){
    4a8c:	19 82       	std	Y+1, r1	; 0x01
    4a8e:	19 c0       	rjmp	.+50     	; 0x4ac2 <RTC_yearFormat+0x4a>

		year_format[i] = temp % 10;
    4a90:	89 81       	ldd	r24, Y+1	; 0x01
    4a92:	48 2f       	mov	r20, r24
    4a94:	50 e0       	ldi	r21, 0x00	; 0
    4a96:	8b 81       	ldd	r24, Y+3	; 0x03
    4a98:	9a e0       	ldi	r25, 0x0A	; 10
    4a9a:	69 2f       	mov	r22, r25
    4a9c:	0e 94 2f 3d 	call	0x7a5e	; 0x7a5e <__udivmodqi4>
    4aa0:	89 2f       	mov	r24, r25
    4aa2:	28 2f       	mov	r18, r24
    4aa4:	ce 01       	movw	r24, r28
    4aa6:	04 96       	adiw	r24, 0x04	; 4
    4aa8:	fc 01       	movw	r30, r24
    4aaa:	e4 0f       	add	r30, r20
    4aac:	f5 1f       	adc	r31, r21
    4aae:	20 83       	st	Z, r18

		temp = temp / 10;
    4ab0:	8b 81       	ldd	r24, Y+3	; 0x03
    4ab2:	9a e0       	ldi	r25, 0x0A	; 10
    4ab4:	69 2f       	mov	r22, r25
    4ab6:	0e 94 2f 3d 	call	0x7a5e	; 0x7a5e <__udivmodqi4>
    4aba:	8b 83       	std	Y+3, r24	; 0x03

	uint8 year_format[2];

	uint8 temp = copy_year;

	for(uint8 i=0;i<2;i++){
    4abc:	89 81       	ldd	r24, Y+1	; 0x01
    4abe:	8f 5f       	subi	r24, 0xFF	; 255
    4ac0:	89 83       	std	Y+1, r24	; 0x01
    4ac2:	89 81       	ldd	r24, Y+1	; 0x01
    4ac4:	82 30       	cpi	r24, 0x02	; 2
    4ac6:	20 f3       	brcs	.-56     	; 0x4a90 <RTC_yearFormat+0x18>

		temp = temp / 10;

	}

	uint8 local_year = year_format[0] | (year_format[1] << 4);
    4ac8:	8c 81       	ldd	r24, Y+4	; 0x04
    4aca:	28 2f       	mov	r18, r24
    4acc:	8d 81       	ldd	r24, Y+5	; 0x05
    4ace:	88 2f       	mov	r24, r24
    4ad0:	90 e0       	ldi	r25, 0x00	; 0
    4ad2:	82 95       	swap	r24
    4ad4:	92 95       	swap	r25
    4ad6:	90 7f       	andi	r25, 0xF0	; 240
    4ad8:	98 27       	eor	r25, r24
    4ada:	80 7f       	andi	r24, 0xF0	; 240
    4adc:	98 27       	eor	r25, r24
    4ade:	82 2b       	or	r24, r18
    4ae0:	8a 83       	std	Y+2, r24	; 0x02

	return local_year;
    4ae2:	8a 81       	ldd	r24, Y+2	; 0x02
}
    4ae4:	26 96       	adiw	r28, 0x06	; 6
    4ae6:	0f b6       	in	r0, 0x3f	; 63
    4ae8:	f8 94       	cli
    4aea:	de bf       	out	0x3e, r29	; 62
    4aec:	0f be       	out	0x3f, r0	; 63
    4aee:	cd bf       	out	0x3d, r28	; 61
    4af0:	cf 91       	pop	r28
    4af2:	df 91       	pop	r29
    4af4:	08 95       	ret

00004af6 <RTC_TimeHrFormat>:


static uint8 RTC_TimeHrFormat(uint8 copy_time_HR , uint8 copy_time_format, uint8 copy_time_mode){
    4af6:	df 93       	push	r29
    4af8:	cf 93       	push	r28
    4afa:	cd b7       	in	r28, 0x3d	; 61
    4afc:	de b7       	in	r29, 0x3e	; 62
    4afe:	2c 97       	sbiw	r28, 0x0c	; 12
    4b00:	0f b6       	in	r0, 0x3f	; 63
    4b02:	f8 94       	cli
    4b04:	de bf       	out	0x3e, r29	; 62
    4b06:	0f be       	out	0x3f, r0	; 63
    4b08:	cd bf       	out	0x3d, r28	; 61
    4b0a:	8e 83       	std	Y+6, r24	; 0x06
    4b0c:	6f 83       	std	Y+7, r22	; 0x07
    4b0e:	48 87       	std	Y+8, r20	; 0x08

	uint8 local_HR_time =0;
    4b10:	1b 82       	std	Y+3, r1	; 0x03

	CLR_BIT(local_HR_time,7);
    4b12:	8b 81       	ldd	r24, Y+3	; 0x03
    4b14:	8f 77       	andi	r24, 0x7F	; 127
    4b16:	8b 83       	std	Y+3, r24	; 0x03

	uint8 HR_format[2];

	uint8 temp = copy_time_HR;
    4b18:	8e 81       	ldd	r24, Y+6	; 0x06
    4b1a:	8a 83       	std	Y+2, r24	; 0x02

	for(uint8 i=0;i<2;i++){
    4b1c:	19 82       	std	Y+1, r1	; 0x01
    4b1e:	19 c0       	rjmp	.+50     	; 0x4b52 <RTC_TimeHrFormat+0x5c>

		HR_format[i] = temp % 10;
    4b20:	89 81       	ldd	r24, Y+1	; 0x01
    4b22:	48 2f       	mov	r20, r24
    4b24:	50 e0       	ldi	r21, 0x00	; 0
    4b26:	8a 81       	ldd	r24, Y+2	; 0x02
    4b28:	9a e0       	ldi	r25, 0x0A	; 10
    4b2a:	69 2f       	mov	r22, r25
    4b2c:	0e 94 2f 3d 	call	0x7a5e	; 0x7a5e <__udivmodqi4>
    4b30:	89 2f       	mov	r24, r25
    4b32:	28 2f       	mov	r18, r24
    4b34:	ce 01       	movw	r24, r28
    4b36:	04 96       	adiw	r24, 0x04	; 4
    4b38:	fc 01       	movw	r30, r24
    4b3a:	e4 0f       	add	r30, r20
    4b3c:	f5 1f       	adc	r31, r21
    4b3e:	20 83       	st	Z, r18

		temp = temp / 10;
    4b40:	8a 81       	ldd	r24, Y+2	; 0x02
    4b42:	9a e0       	ldi	r25, 0x0A	; 10
    4b44:	69 2f       	mov	r22, r25
    4b46:	0e 94 2f 3d 	call	0x7a5e	; 0x7a5e <__udivmodqi4>
    4b4a:	8a 83       	std	Y+2, r24	; 0x02

	uint8 HR_format[2];

	uint8 temp = copy_time_HR;

	for(uint8 i=0;i<2;i++){
    4b4c:	89 81       	ldd	r24, Y+1	; 0x01
    4b4e:	8f 5f       	subi	r24, 0xFF	; 255
    4b50:	89 83       	std	Y+1, r24	; 0x01
    4b52:	89 81       	ldd	r24, Y+1	; 0x01
    4b54:	82 30       	cpi	r24, 0x02	; 2
    4b56:	20 f3       	brcs	.-56     	; 0x4b20 <RTC_TimeHrFormat+0x2a>
		HR_format[i] = temp % 10;

		temp = temp / 10;
	}

	switch(copy_time_format){
    4b58:	8f 81       	ldd	r24, Y+7	; 0x07
    4b5a:	28 2f       	mov	r18, r24
    4b5c:	30 e0       	ldi	r19, 0x00	; 0
    4b5e:	3c 87       	std	Y+12, r19	; 0x0c
    4b60:	2b 87       	std	Y+11, r18	; 0x0b
    4b62:	8b 85       	ldd	r24, Y+11	; 0x0b
    4b64:	9c 85       	ldd	r25, Y+12	; 0x0c
    4b66:	00 97       	sbiw	r24, 0x00	; 0
    4b68:	99 f1       	breq	.+102    	; 0x4bd0 <RTC_TimeHrFormat+0xda>
    4b6a:	2b 85       	ldd	r18, Y+11	; 0x0b
    4b6c:	3c 85       	ldd	r19, Y+12	; 0x0c
    4b6e:	21 30       	cpi	r18, 0x01	; 1
    4b70:	31 05       	cpc	r19, r1
    4b72:	09 f0       	breq	.+2      	; 0x4b76 <RTC_TimeHrFormat+0x80>
    4b74:	46 c0       	rjmp	.+140    	; 0x4c02 <RTC_TimeHrFormat+0x10c>

	case time_format_12:

		SET_BIT(local_HR_time,6);
    4b76:	8b 81       	ldd	r24, Y+3	; 0x03
    4b78:	80 64       	ori	r24, 0x40	; 64
    4b7a:	8b 83       	std	Y+3, r24	; 0x03

		switch(copy_time_mode){
    4b7c:	88 85       	ldd	r24, Y+8	; 0x08
    4b7e:	28 2f       	mov	r18, r24
    4b80:	30 e0       	ldi	r19, 0x00	; 0
    4b82:	3a 87       	std	Y+10, r19	; 0x0a
    4b84:	29 87       	std	Y+9, r18	; 0x09
    4b86:	89 85       	ldd	r24, Y+9	; 0x09
    4b88:	9a 85       	ldd	r25, Y+10	; 0x0a
    4b8a:	00 97       	sbiw	r24, 0x00	; 0
    4b8c:	31 f0       	breq	.+12     	; 0x4b9a <RTC_TimeHrFormat+0xa4>
    4b8e:	29 85       	ldd	r18, Y+9	; 0x09
    4b90:	3a 85       	ldd	r19, Y+10	; 0x0a
    4b92:	21 30       	cpi	r18, 0x01	; 1
    4b94:	31 05       	cpc	r19, r1
    4b96:	29 f0       	breq	.+10     	; 0x4ba2 <RTC_TimeHrFormat+0xac>
    4b98:	07 c0       	rjmp	.+14     	; 0x4ba8 <RTC_TimeHrFormat+0xb2>
		case AM:
			CLR_BIT(local_HR_time,5);
    4b9a:	8b 81       	ldd	r24, Y+3	; 0x03
    4b9c:	8f 7d       	andi	r24, 0xDF	; 223
    4b9e:	8b 83       	std	Y+3, r24	; 0x03
    4ba0:	03 c0       	rjmp	.+6      	; 0x4ba8 <RTC_TimeHrFormat+0xb2>

			break;
		case PM:
			SET_BIT(local_HR_time,5);
    4ba2:	8b 81       	ldd	r24, Y+3	; 0x03
    4ba4:	80 62       	ori	r24, 0x20	; 32
    4ba6:	8b 83       	std	Y+3, r24	; 0x03
			break;
		}

		local_HR_time |= ( HR_format[0] | ( HR_format[1] <<4)) ;
    4ba8:	8c 81       	ldd	r24, Y+4	; 0x04
    4baa:	28 2f       	mov	r18, r24
    4bac:	8d 81       	ldd	r24, Y+5	; 0x05
    4bae:	88 2f       	mov	r24, r24
    4bb0:	90 e0       	ldi	r25, 0x00	; 0
    4bb2:	82 95       	swap	r24
    4bb4:	92 95       	swap	r25
    4bb6:	90 7f       	andi	r25, 0xF0	; 240
    4bb8:	98 27       	eor	r25, r24
    4bba:	80 7f       	andi	r24, 0xF0	; 240
    4bbc:	98 27       	eor	r25, r24
    4bbe:	92 2f       	mov	r25, r18
    4bc0:	98 2b       	or	r25, r24
    4bc2:	8b 81       	ldd	r24, Y+3	; 0x03
    4bc4:	89 2b       	or	r24, r25
    4bc6:	8b 83       	std	Y+3, r24	; 0x03

		local_HR_time &= 0b00011111;
    4bc8:	8b 81       	ldd	r24, Y+3	; 0x03
    4bca:	8f 71       	andi	r24, 0x1F	; 31
    4bcc:	8b 83       	std	Y+3, r24	; 0x03
    4bce:	19 c0       	rjmp	.+50     	; 0x4c02 <RTC_TimeHrFormat+0x10c>
		break;

		case time_format_24:

			CLR_BIT(local_HR_time,6);
    4bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    4bd2:	8f 7b       	andi	r24, 0xBF	; 191
    4bd4:	8b 83       	std	Y+3, r24	; 0x03
			CLR_BIT(local_HR_time,5);
    4bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    4bd8:	8f 7d       	andi	r24, 0xDF	; 223
    4bda:	8b 83       	std	Y+3, r24	; 0x03
			local_HR_time |= ( HR_format[0] | ( HR_format[1] <<4)) ;
    4bdc:	8c 81       	ldd	r24, Y+4	; 0x04
    4bde:	28 2f       	mov	r18, r24
    4be0:	8d 81       	ldd	r24, Y+5	; 0x05
    4be2:	88 2f       	mov	r24, r24
    4be4:	90 e0       	ldi	r25, 0x00	; 0
    4be6:	82 95       	swap	r24
    4be8:	92 95       	swap	r25
    4bea:	90 7f       	andi	r25, 0xF0	; 240
    4bec:	98 27       	eor	r25, r24
    4bee:	80 7f       	andi	r24, 0xF0	; 240
    4bf0:	98 27       	eor	r25, r24
    4bf2:	92 2f       	mov	r25, r18
    4bf4:	98 2b       	or	r25, r24
    4bf6:	8b 81       	ldd	r24, Y+3	; 0x03
    4bf8:	89 2b       	or	r24, r25
    4bfa:	8b 83       	std	Y+3, r24	; 0x03

			local_HR_time &= 0b00111111;
    4bfc:	8b 81       	ldd	r24, Y+3	; 0x03
    4bfe:	8f 73       	andi	r24, 0x3F	; 63
    4c00:	8b 83       	std	Y+3, r24	; 0x03



	//	local_HR_time |= ( HR_format[0] | ( HR_format[1] <<4)) ;

	return local_HR_time;
    4c02:	8b 81       	ldd	r24, Y+3	; 0x03

}
    4c04:	2c 96       	adiw	r28, 0x0c	; 12
    4c06:	0f b6       	in	r0, 0x3f	; 63
    4c08:	f8 94       	cli
    4c0a:	de bf       	out	0x3e, r29	; 62
    4c0c:	0f be       	out	0x3f, r0	; 63
    4c0e:	cd bf       	out	0x3d, r28	; 61
    4c10:	cf 91       	pop	r28
    4c12:	df 91       	pop	r29
    4c14:	08 95       	ret

00004c16 <RTC_ADJUSTSecMin>:



static uint8 RTC_ADJUSTSecMin(uint8 data)
{
    4c16:	df 93       	push	r29
    4c18:	cf 93       	push	r28
    4c1a:	00 d0       	rcall	.+0      	; 0x4c1c <RTC_ADJUSTSecMin+0x6>
    4c1c:	00 d0       	rcall	.+0      	; 0x4c1e <RTC_ADJUSTSecMin+0x8>
    4c1e:	00 d0       	rcall	.+0      	; 0x4c20 <RTC_ADJUSTSecMin+0xa>
    4c20:	cd b7       	in	r28, 0x3d	; 61
    4c22:	de b7       	in	r29, 0x3e	; 62
    4c24:	8e 83       	std	Y+6, r24	; 0x06
	uint8 local_sec_time = 0;
    4c26:	1b 82       	std	Y+3, r1	; 0x03

	CLR_BIT(local_sec_time,7);
    4c28:	8b 81       	ldd	r24, Y+3	; 0x03
    4c2a:	8f 77       	andi	r24, 0x7F	; 127
    4c2c:	8b 83       	std	Y+3, r24	; 0x03

	uint8 Sec_format[2];

	uint8 temp = data;
    4c2e:	8e 81       	ldd	r24, Y+6	; 0x06
    4c30:	8a 83       	std	Y+2, r24	; 0x02

	for(uint8 i=0;i<2;i++){
    4c32:	19 82       	std	Y+1, r1	; 0x01
    4c34:	19 c0       	rjmp	.+50     	; 0x4c68 <RTC_ADJUSTSecMin+0x52>

		Sec_format[i] = temp % 10;
    4c36:	89 81       	ldd	r24, Y+1	; 0x01
    4c38:	48 2f       	mov	r20, r24
    4c3a:	50 e0       	ldi	r21, 0x00	; 0
    4c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    4c3e:	9a e0       	ldi	r25, 0x0A	; 10
    4c40:	69 2f       	mov	r22, r25
    4c42:	0e 94 2f 3d 	call	0x7a5e	; 0x7a5e <__udivmodqi4>
    4c46:	89 2f       	mov	r24, r25
    4c48:	28 2f       	mov	r18, r24
    4c4a:	ce 01       	movw	r24, r28
    4c4c:	04 96       	adiw	r24, 0x04	; 4
    4c4e:	fc 01       	movw	r30, r24
    4c50:	e4 0f       	add	r30, r20
    4c52:	f5 1f       	adc	r31, r21
    4c54:	20 83       	st	Z, r18

		temp = temp / 10;
    4c56:	8a 81       	ldd	r24, Y+2	; 0x02
    4c58:	9a e0       	ldi	r25, 0x0A	; 10
    4c5a:	69 2f       	mov	r22, r25
    4c5c:	0e 94 2f 3d 	call	0x7a5e	; 0x7a5e <__udivmodqi4>
    4c60:	8a 83       	std	Y+2, r24	; 0x02

	uint8 Sec_format[2];

	uint8 temp = data;

	for(uint8 i=0;i<2;i++){
    4c62:	89 81       	ldd	r24, Y+1	; 0x01
    4c64:	8f 5f       	subi	r24, 0xFF	; 255
    4c66:	89 83       	std	Y+1, r24	; 0x01
    4c68:	89 81       	ldd	r24, Y+1	; 0x01
    4c6a:	82 30       	cpi	r24, 0x02	; 2
    4c6c:	20 f3       	brcs	.-56     	; 0x4c36 <RTC_ADJUSTSecMin+0x20>

		temp = temp / 10;

	}

	local_sec_time |=  Sec_format[0]  | ( Sec_format[1]<<4);
    4c6e:	8c 81       	ldd	r24, Y+4	; 0x04
    4c70:	28 2f       	mov	r18, r24
    4c72:	8d 81       	ldd	r24, Y+5	; 0x05
    4c74:	88 2f       	mov	r24, r24
    4c76:	90 e0       	ldi	r25, 0x00	; 0
    4c78:	82 95       	swap	r24
    4c7a:	92 95       	swap	r25
    4c7c:	90 7f       	andi	r25, 0xF0	; 240
    4c7e:	98 27       	eor	r25, r24
    4c80:	80 7f       	andi	r24, 0xF0	; 240
    4c82:	98 27       	eor	r25, r24
    4c84:	92 2f       	mov	r25, r18
    4c86:	98 2b       	or	r25, r24
    4c88:	8b 81       	ldd	r24, Y+3	; 0x03
    4c8a:	89 2b       	or	r24, r25
    4c8c:	8b 83       	std	Y+3, r24	; 0x03

	return local_sec_time;
    4c8e:	8b 81       	ldd	r24, Y+3	; 0x03
}
    4c90:	26 96       	adiw	r28, 0x06	; 6
    4c92:	0f b6       	in	r0, 0x3f	; 63
    4c94:	f8 94       	cli
    4c96:	de bf       	out	0x3e, r29	; 62
    4c98:	0f be       	out	0x3f, r0	; 63
    4c9a:	cd bf       	out	0x3d, r28	; 61
    4c9c:	cf 91       	pop	r28
    4c9e:	df 91       	pop	r29
    4ca0:	08 95       	ret

00004ca2 <RTC_setTime>:



uint8 RTC_setTime(time_t* time)
{
    4ca2:	df 93       	push	r29
    4ca4:	cf 93       	push	r28
    4ca6:	00 d0       	rcall	.+0      	; 0x4ca8 <RTC_setTime+0x6>
    4ca8:	cd b7       	in	r28, 0x3d	; 61
    4caa:	de b7       	in	r29, 0x3e	; 62
    4cac:	9a 83       	std	Y+2, r25	; 0x02
    4cae:	89 83       	std	Y+1, r24	; 0x01


	//Start Condtion
	TWI_start();
    4cb0:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <TWI_start>
	//	if (TWI_getStatus() != MT_MODE_START)
	//		return 0;

	//Send the slave address
	TWI_writeByte(0xD0);
    4cb4:	80 ed       	ldi	r24, 0xD0	; 208
    4cb6:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <TWI_writeByte>
	//	if (TWI_getStatus() != MT_MODE_SLAVE_WRITE_ACK)
	//		return 0;

	//Send the Write is 0
	TWI_writeByte(0x00);
    4cba:	80 e0       	ldi	r24, 0x00	; 0
    4cbc:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <TWI_writeByte>
	//	if (TWI_getStatus() != MT_MODE_SLAVE_WRITE_ACK)
	//		return 0;


	//Sending sec and minutes and hours
	TWI_writeByte(RTC_ADJUSTSecMin(time->second));
    4cc0:	e9 81       	ldd	r30, Y+1	; 0x01
    4cc2:	fa 81       	ldd	r31, Y+2	; 0x02
    4cc4:	82 81       	ldd	r24, Z+2	; 0x02
    4cc6:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <RTC_ADJUSTSecMin>
    4cca:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <TWI_writeByte>
	//	if (TWI_getStatus() != MT_MODE_SLAVE_WRITE_ACK)
	//		return 0;

	TWI_writeByte(RTC_ADJUSTSecMin(time->minute));
    4cce:	e9 81       	ldd	r30, Y+1	; 0x01
    4cd0:	fa 81       	ldd	r31, Y+2	; 0x02
    4cd2:	81 81       	ldd	r24, Z+1	; 0x01
    4cd4:	0e 94 0b 26 	call	0x4c16	; 0x4c16 <RTC_ADJUSTSecMin>
    4cd8:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <TWI_writeByte>
	//	if (TWI_getStatus() != MT_MODE_SLAVE_WRITE_ACK)
	//		return 0;

	TWI_writeByte(RTC_TimeHrFormat(time->hour,time->time_format,time->time_mode));
    4cdc:	e9 81       	ldd	r30, Y+1	; 0x01
    4cde:	fa 81       	ldd	r31, Y+2	; 0x02
    4ce0:	80 81       	ld	r24, Z
    4ce2:	e9 81       	ldd	r30, Y+1	; 0x01
    4ce4:	fa 81       	ldd	r31, Y+2	; 0x02
    4ce6:	23 81       	ldd	r18, Z+3	; 0x03
    4ce8:	e9 81       	ldd	r30, Y+1	; 0x01
    4cea:	fa 81       	ldd	r31, Y+2	; 0x02
    4cec:	94 81       	ldd	r25, Z+4	; 0x04
    4cee:	62 2f       	mov	r22, r18
    4cf0:	49 2f       	mov	r20, r25
    4cf2:	0e 94 7b 25 	call	0x4af6	; 0x4af6 <RTC_TimeHrFormat>
    4cf6:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <TWI_writeByte>
	//	if (TWI_getStatus() != MT_MODE_SLAVE_WRITE_ACK)
	//		return 0;

	TWI_stop();
    4cfa:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <TWI_stop>


	return 1;
    4cfe:	81 e0       	ldi	r24, 0x01	; 1

}
    4d00:	0f 90       	pop	r0
    4d02:	0f 90       	pop	r0
    4d04:	cf 91       	pop	r28
    4d06:	df 91       	pop	r29
    4d08:	08 95       	ret

00004d0a <RTC_getTime>:


uint8 RTC_getTime(time_t* ptr_time)
{
    4d0a:	df 93       	push	r29
    4d0c:	cf 93       	push	r28
    4d0e:	cd b7       	in	r28, 0x3d	; 61
    4d10:	de b7       	in	r29, 0x3e	; 62
    4d12:	28 97       	sbiw	r28, 0x08	; 8
    4d14:	0f b6       	in	r0, 0x3f	; 63
    4d16:	f8 94       	cli
    4d18:	de bf       	out	0x3e, r29	; 62
    4d1a:	0f be       	out	0x3f, r0	; 63
    4d1c:	cd bf       	out	0x3d, r28	; 61
    4d1e:	9f 83       	std	Y+7, r25	; 0x07
    4d20:	8e 83       	std	Y+6, r24	; 0x06
	//Start Condtion
	TWI_start();
    4d22:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <TWI_start>
	//	if (TWI_getStatus() != MT_MODE_START)
	//		return 0;

	//Send the slave address
	TWI_writeByte(0xD0);
    4d26:	80 ed       	ldi	r24, 0xD0	; 208
    4d28:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <TWI_writeByte>
	//	if (TWI_getStatus() != MT_MODE_SLAVE_WRITE_ACK)
	//		return 0;

	//Send the write is 1
	TWI_writeByte(0x00);
    4d2c:	80 e0       	ldi	r24, 0x00	; 0
    4d2e:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <TWI_writeByte>
	if (TWI_getStatus() != MT_MODE_DATA_TRANSMITTED_ACK)
    4d32:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <TWI_getStatus>
    4d36:	88 32       	cpi	r24, 0x28	; 40
    4d38:	11 f0       	breq	.+4      	; 0x4d3e <RTC_getTime+0x34>
		return 0;
    4d3a:	18 86       	std	Y+8, r1	; 0x08
    4d3c:	d1 c0       	rjmp	.+418    	; 0x4ee0 <RTC_getTime+0x1d6>


	//Repeated start Start Condtion
	TWI_start();
    4d3e:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <TWI_start>
	if (TWI_getStatus() != MT_MODE_REP_START)
    4d42:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <TWI_getStatus>
    4d46:	80 31       	cpi	r24, 0x10	; 16
    4d48:	11 f0       	breq	.+4      	; 0x4d4e <RTC_getTime+0x44>
		return 0;
    4d4a:	18 86       	std	Y+8, r1	; 0x08
    4d4c:	c9 c0       	rjmp	.+402    	; 0x4ee0 <RTC_getTime+0x1d6>

	//Send the Read is 1
	TWI_writeByte(0xD1);
    4d4e:	81 ed       	ldi	r24, 0xD1	; 209
    4d50:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <TWI_writeByte>
	if (TWI_getStatus() != MR_MODE_SLAVE_READ_ACK)
    4d54:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <TWI_getStatus>
    4d58:	80 34       	cpi	r24, 0x40	; 64
    4d5a:	11 f0       	breq	.+4      	; 0x4d60 <RTC_getTime+0x56>
		return 0;
    4d5c:	18 86       	std	Y+8, r1	; 0x08
    4d5e:	c0 c0       	rjmp	.+384    	; 0x4ee0 <RTC_getTime+0x1d6>
	uint8 min;
	uint8 hr;


	uint8 ptr_time_receive;
	TWI_readByteWithACK(&ptr_time_receive);
    4d60:	ce 01       	movw	r24, r28
    4d62:	05 96       	adiw	r24, 0x05	; 5
    4d64:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <TWI_readByteWithACK>
	sec = ptr_time_receive;
    4d68:	8d 81       	ldd	r24, Y+5	; 0x05
    4d6a:	8c 83       	std	Y+4, r24	; 0x04

	TWI_readByteWithACK(&ptr_time_receive);
    4d6c:	ce 01       	movw	r24, r28
    4d6e:	05 96       	adiw	r24, 0x05	; 5
    4d70:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <TWI_readByteWithACK>
	min = ptr_time_receive;
    4d74:	8d 81       	ldd	r24, Y+5	; 0x05
    4d76:	8b 83       	std	Y+3, r24	; 0x03
	TWI_readByteWithNACK(&ptr_time_receive);
    4d78:	ce 01       	movw	r24, r28
    4d7a:	05 96       	adiw	r24, 0x05	; 5
    4d7c:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <TWI_readByteWithNACK>
	hr = ptr_time_receive;
    4d80:	8d 81       	ldd	r24, Y+5	; 0x05
    4d82:	8a 83       	std	Y+2, r24	; 0x02
	TWI_stop();
    4d84:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <TWI_stop>


	uint8 temp= sec >> 4;
    4d88:	8c 81       	ldd	r24, Y+4	; 0x04
    4d8a:	82 95       	swap	r24
    4d8c:	8f 70       	andi	r24, 0x0F	; 15
    4d8e:	89 83       	std	Y+1, r24	; 0x01
	temp*= 10;
    4d90:	89 81       	ldd	r24, Y+1	; 0x01
    4d92:	88 2f       	mov	r24, r24
    4d94:	90 e0       	ldi	r25, 0x00	; 0
    4d96:	9c 01       	movw	r18, r24
    4d98:	22 0f       	add	r18, r18
    4d9a:	33 1f       	adc	r19, r19
    4d9c:	c9 01       	movw	r24, r18
    4d9e:	88 0f       	add	r24, r24
    4da0:	99 1f       	adc	r25, r25
    4da2:	88 0f       	add	r24, r24
    4da4:	99 1f       	adc	r25, r25
    4da6:	82 0f       	add	r24, r18
    4da8:	93 1f       	adc	r25, r19
    4daa:	89 83       	std	Y+1, r24	; 0x01
	sec= (sec & 0x0f) + temp;
    4dac:	8c 81       	ldd	r24, Y+4	; 0x04
    4dae:	98 2f       	mov	r25, r24
    4db0:	9f 70       	andi	r25, 0x0F	; 15
    4db2:	89 81       	ldd	r24, Y+1	; 0x01
    4db4:	89 0f       	add	r24, r25
    4db6:	8c 83       	std	Y+4, r24	; 0x04

	temp= min >> 4;
    4db8:	8b 81       	ldd	r24, Y+3	; 0x03
    4dba:	82 95       	swap	r24
    4dbc:	8f 70       	andi	r24, 0x0F	; 15
    4dbe:	89 83       	std	Y+1, r24	; 0x01
	temp*= 10;
    4dc0:	89 81       	ldd	r24, Y+1	; 0x01
    4dc2:	88 2f       	mov	r24, r24
    4dc4:	90 e0       	ldi	r25, 0x00	; 0
    4dc6:	9c 01       	movw	r18, r24
    4dc8:	22 0f       	add	r18, r18
    4dca:	33 1f       	adc	r19, r19
    4dcc:	c9 01       	movw	r24, r18
    4dce:	88 0f       	add	r24, r24
    4dd0:	99 1f       	adc	r25, r25
    4dd2:	88 0f       	add	r24, r24
    4dd4:	99 1f       	adc	r25, r25
    4dd6:	82 0f       	add	r24, r18
    4dd8:	93 1f       	adc	r25, r19
    4dda:	89 83       	std	Y+1, r24	; 0x01
	min= (min & 0x0f) + temp;
    4ddc:	8b 81       	ldd	r24, Y+3	; 0x03
    4dde:	98 2f       	mov	r25, r24
    4de0:	9f 70       	andi	r25, 0x0F	; 15
    4de2:	89 81       	ldd	r24, Y+1	; 0x01
    4de4:	89 0f       	add	r24, r25
    4de6:	8b 83       	std	Y+3, r24	; 0x03

	temp= hr >> 4;
    4de8:	8a 81       	ldd	r24, Y+2	; 0x02
    4dea:	82 95       	swap	r24
    4dec:	8f 70       	andi	r24, 0x0F	; 15
    4dee:	89 83       	std	Y+1, r24	; 0x01
	temp*= 10;
    4df0:	89 81       	ldd	r24, Y+1	; 0x01
    4df2:	88 2f       	mov	r24, r24
    4df4:	90 e0       	ldi	r25, 0x00	; 0
    4df6:	9c 01       	movw	r18, r24
    4df8:	22 0f       	add	r18, r18
    4dfa:	33 1f       	adc	r19, r19
    4dfc:	c9 01       	movw	r24, r18
    4dfe:	88 0f       	add	r24, r24
    4e00:	99 1f       	adc	r25, r25
    4e02:	88 0f       	add	r24, r24
    4e04:	99 1f       	adc	r25, r25
    4e06:	82 0f       	add	r24, r18
    4e08:	93 1f       	adc	r25, r19
    4e0a:	89 83       	std	Y+1, r24	; 0x01
	hr= (hr & 0x0f) + temp;
    4e0c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e0e:	98 2f       	mov	r25, r24
    4e10:	9f 70       	andi	r25, 0x0F	; 15
    4e12:	89 81       	ldd	r24, Y+1	; 0x01
    4e14:	89 0f       	add	r24, r25
    4e16:	8a 83       	std	Y+2, r24	; 0x02

	ptr_time->second = sec;
    4e18:	ee 81       	ldd	r30, Y+6	; 0x06
    4e1a:	ff 81       	ldd	r31, Y+7	; 0x07
    4e1c:	8c 81       	ldd	r24, Y+4	; 0x04
    4e1e:	82 83       	std	Z+2, r24	; 0x02

	ptr_time->minute = min;
    4e20:	ee 81       	ldd	r30, Y+6	; 0x06
    4e22:	ff 81       	ldd	r31, Y+7	; 0x07
    4e24:	8b 81       	ldd	r24, Y+3	; 0x03
    4e26:	81 83       	std	Z+1, r24	; 0x01

	ptr_time->hour = hr;
    4e28:	ee 81       	ldd	r30, Y+6	; 0x06
    4e2a:	ff 81       	ldd	r31, Y+7	; 0x07
    4e2c:	8a 81       	ldd	r24, Y+2	; 0x02
    4e2e:	80 83       	st	Z, r24

	if( (GET_BIT(hr,6) == 1) ){
    4e30:	8a 81       	ldd	r24, Y+2	; 0x02
    4e32:	88 2f       	mov	r24, r24
    4e34:	90 e0       	ldi	r25, 0x00	; 0
    4e36:	80 74       	andi	r24, 0x40	; 64
    4e38:	90 70       	andi	r25, 0x00	; 0
    4e3a:	08 2e       	mov	r0, r24
    4e3c:	89 2f       	mov	r24, r25
    4e3e:	00 0c       	add	r0, r0
    4e40:	88 1f       	adc	r24, r24
    4e42:	99 0b       	sbc	r25, r25
    4e44:	00 0c       	add	r0, r0
    4e46:	88 1f       	adc	r24, r24
    4e48:	99 1f       	adc	r25, r25
    4e4a:	81 30       	cpi	r24, 0x01	; 1
    4e4c:	91 05       	cpc	r25, r1
    4e4e:	81 f5       	brne	.+96     	; 0x4eb0 <RTC_getTime+0x1a6>

		ptr_time->time_format = time_format_12;
    4e50:	ee 81       	ldd	r30, Y+6	; 0x06
    4e52:	ff 81       	ldd	r31, Y+7	; 0x07
    4e54:	81 e0       	ldi	r24, 0x01	; 1
    4e56:	83 83       	std	Z+3, r24	; 0x03

		if( (GET_BIT(hr,5) == 1) ){
    4e58:	8a 81       	ldd	r24, Y+2	; 0x02
    4e5a:	88 2f       	mov	r24, r24
    4e5c:	90 e0       	ldi	r25, 0x00	; 0
    4e5e:	80 72       	andi	r24, 0x20	; 32
    4e60:	90 70       	andi	r25, 0x00	; 0
    4e62:	95 95       	asr	r25
    4e64:	87 95       	ror	r24
    4e66:	95 95       	asr	r25
    4e68:	87 95       	ror	r24
    4e6a:	95 95       	asr	r25
    4e6c:	87 95       	ror	r24
    4e6e:	95 95       	asr	r25
    4e70:	87 95       	ror	r24
    4e72:	95 95       	asr	r25
    4e74:	87 95       	ror	r24
    4e76:	81 30       	cpi	r24, 0x01	; 1
    4e78:	91 05       	cpc	r25, r1
    4e7a:	29 f4       	brne	.+10     	; 0x4e86 <RTC_getTime+0x17c>

			ptr_time->time_mode = PM;
    4e7c:	ee 81       	ldd	r30, Y+6	; 0x06
    4e7e:	ff 81       	ldd	r31, Y+7	; 0x07
    4e80:	81 e0       	ldi	r24, 0x01	; 1
    4e82:	84 83       	std	Z+4, r24	; 0x04
    4e84:	2b c0       	rjmp	.+86     	; 0x4edc <RTC_getTime+0x1d2>

		}
		else if( ( GET_BIT(hr,5) == 0 ) ) {
    4e86:	8a 81       	ldd	r24, Y+2	; 0x02
    4e88:	88 2f       	mov	r24, r24
    4e8a:	90 e0       	ldi	r25, 0x00	; 0
    4e8c:	80 72       	andi	r24, 0x20	; 32
    4e8e:	90 70       	andi	r25, 0x00	; 0
    4e90:	95 95       	asr	r25
    4e92:	87 95       	ror	r24
    4e94:	95 95       	asr	r25
    4e96:	87 95       	ror	r24
    4e98:	95 95       	asr	r25
    4e9a:	87 95       	ror	r24
    4e9c:	95 95       	asr	r25
    4e9e:	87 95       	ror	r24
    4ea0:	95 95       	asr	r25
    4ea2:	87 95       	ror	r24
    4ea4:	00 97       	sbiw	r24, 0x00	; 0
    4ea6:	d1 f4       	brne	.+52     	; 0x4edc <RTC_getTime+0x1d2>
			ptr_time->time_mode = AM;
    4ea8:	ee 81       	ldd	r30, Y+6	; 0x06
    4eaa:	ff 81       	ldd	r31, Y+7	; 0x07
    4eac:	14 82       	std	Z+4, r1	; 0x04
    4eae:	16 c0       	rjmp	.+44     	; 0x4edc <RTC_getTime+0x1d2>

			// do nothing , error type
		}
	}

	else if( (GET_BIT(hr,6) == 0) ){
    4eb0:	8a 81       	ldd	r24, Y+2	; 0x02
    4eb2:	88 2f       	mov	r24, r24
    4eb4:	90 e0       	ldi	r25, 0x00	; 0
    4eb6:	80 74       	andi	r24, 0x40	; 64
    4eb8:	90 70       	andi	r25, 0x00	; 0
    4eba:	08 2e       	mov	r0, r24
    4ebc:	89 2f       	mov	r24, r25
    4ebe:	00 0c       	add	r0, r0
    4ec0:	88 1f       	adc	r24, r24
    4ec2:	99 0b       	sbc	r25, r25
    4ec4:	00 0c       	add	r0, r0
    4ec6:	88 1f       	adc	r24, r24
    4ec8:	99 1f       	adc	r25, r25
    4eca:	00 97       	sbiw	r24, 0x00	; 0
    4ecc:	39 f4       	brne	.+14     	; 0x4edc <RTC_getTime+0x1d2>

		ptr_time->time_format = time_format_24;
    4ece:	ee 81       	ldd	r30, Y+6	; 0x06
    4ed0:	ff 81       	ldd	r31, Y+7	; 0x07
    4ed2:	13 82       	std	Z+3, r1	; 0x03
		ptr_time->time_mode = No_TYPE;
    4ed4:	ee 81       	ldd	r30, Y+6	; 0x06
    4ed6:	ff 81       	ldd	r31, Y+7	; 0x07
    4ed8:	82 e0       	ldi	r24, 0x02	; 2
    4eda:	84 83       	std	Z+4, r24	; 0x04
	}
	return 1;
    4edc:	81 e0       	ldi	r24, 0x01	; 1
    4ede:	88 87       	std	Y+8, r24	; 0x08
    4ee0:	88 85       	ldd	r24, Y+8	; 0x08
}
    4ee2:	28 96       	adiw	r28, 0x08	; 8
    4ee4:	0f b6       	in	r0, 0x3f	; 63
    4ee6:	f8 94       	cli
    4ee8:	de bf       	out	0x3e, r29	; 62
    4eea:	0f be       	out	0x3f, r0	; 63
    4eec:	cd bf       	out	0x3d, r28	; 61
    4eee:	cf 91       	pop	r28
    4ef0:	df 91       	pop	r29
    4ef2:	08 95       	ret

00004ef4 <RTC_SetDate>:



/* this function should take date in (year month day )and should configure RTC with it -> */
void RTC_SetDate(year_t* copy_year){
    4ef4:	df 93       	push	r29
    4ef6:	cf 93       	push	r28
    4ef8:	00 d0       	rcall	.+0      	; 0x4efa <RTC_SetDate+0x6>
    4efa:	00 d0       	rcall	.+0      	; 0x4efc <RTC_SetDate+0x8>
    4efc:	00 d0       	rcall	.+0      	; 0x4efe <RTC_SetDate+0xa>
    4efe:	cd b7       	in	r28, 0x3d	; 61
    4f00:	de b7       	in	r29, 0x3e	; 62
    4f02:	9e 83       	std	Y+6, r25	; 0x06
    4f04:	8d 83       	std	Y+5, r24	; 0x05

	/* Data year handling */

	uint8 day_res_send = RTC_dayFormat(copy_year->day);
    4f06:	ed 81       	ldd	r30, Y+5	; 0x05
    4f08:	fe 81       	ldd	r31, Y+6	; 0x06
    4f0a:	84 81       	ldd	r24, Z+4	; 0x04
    4f0c:	0e 94 ef 24 	call	0x49de	; 0x49de <RTC_dayFormat>
    4f10:	8c 83       	std	Y+4, r24	; 0x04

	uint8 date_res_send = RTC_dateFormat(copy_year->date);
    4f12:	ed 81       	ldd	r30, Y+5	; 0x05
    4f14:	fe 81       	ldd	r31, Y+6	; 0x06
    4f16:	83 81       	ldd	r24, Z+3	; 0x03
    4f18:	0e 94 af 24 	call	0x495e	; 0x495e <RTC_dateFormat>
    4f1c:	8b 83       	std	Y+3, r24	; 0x03

	uint8 month_res_send = RTC_MonthFormat(copy_year->month);
    4f1e:	ed 81       	ldd	r30, Y+5	; 0x05
    4f20:	fe 81       	ldd	r31, Y+6	; 0x06
    4f22:	82 81       	ldd	r24, Z+2	; 0x02
    4f24:	0e 94 fd 24 	call	0x49fa	; 0x49fa <RTC_MonthFormat>
    4f28:	8a 83       	std	Y+2, r24	; 0x02

	uint8 year_res_send = RTC_yearFormat(copy_year->year);
    4f2a:	ed 81       	ldd	r30, Y+5	; 0x05
    4f2c:	fe 81       	ldd	r31, Y+6	; 0x06
    4f2e:	80 81       	ld	r24, Z
    4f30:	91 81       	ldd	r25, Z+1	; 0x01
    4f32:	0e 94 3c 25 	call	0x4a78	; 0x4a78 <RTC_yearFormat>
    4f36:	89 83       	std	Y+1, r24	; 0x01


	/* start sending data */
	TWI_start();
    4f38:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <TWI_start>

	TWI_writeByte(0xD0);
    4f3c:	80 ed       	ldi	r24, 0xD0	; 208
    4f3e:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <TWI_writeByte>

	TWI_writeByte(0x03);
    4f42:	83 e0       	ldi	r24, 0x03	; 3
    4f44:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <TWI_writeByte>

	TWI_writeByte(day_res_send);
    4f48:	8c 81       	ldd	r24, Y+4	; 0x04
    4f4a:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <TWI_writeByte>
	TWI_writeByte(date_res_send);
    4f4e:	8b 81       	ldd	r24, Y+3	; 0x03
    4f50:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <TWI_writeByte>

	TWI_writeByte(month_res_send);
    4f54:	8a 81       	ldd	r24, Y+2	; 0x02
    4f56:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <TWI_writeByte>

	TWI_writeByte(year_res_send);
    4f5a:	89 81       	ldd	r24, Y+1	; 0x01
    4f5c:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <TWI_writeByte>

	TWI_stop();
    4f60:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <TWI_stop>



}
    4f64:	26 96       	adiw	r28, 0x06	; 6
    4f66:	0f b6       	in	r0, 0x3f	; 63
    4f68:	f8 94       	cli
    4f6a:	de bf       	out	0x3e, r29	; 62
    4f6c:	0f be       	out	0x3f, r0	; 63
    4f6e:	cd bf       	out	0x3d, r28	; 61
    4f70:	cf 91       	pop	r28
    4f72:	df 91       	pop	r29
    4f74:	08 95       	ret

00004f76 <RTC_GetDate>:

/* this function should return the data in (year month day)-> */
year_t  RTC_GetDate(void){
    4f76:	af 92       	push	r10
    4f78:	bf 92       	push	r11
    4f7a:	cf 92       	push	r12
    4f7c:	df 92       	push	r13
    4f7e:	ef 92       	push	r14
    4f80:	ff 92       	push	r15
    4f82:	0f 93       	push	r16
    4f84:	1f 93       	push	r17
    4f86:	df 93       	push	r29
    4f88:	cf 93       	push	r28
    4f8a:	cd b7       	in	r28, 0x3d	; 61
    4f8c:	de b7       	in	r29, 0x3e	; 62
    4f8e:	67 97       	sbiw	r28, 0x17	; 23
    4f90:	0f b6       	in	r0, 0x3f	; 63
    4f92:	f8 94       	cli
    4f94:	de bf       	out	0x3e, r29	; 62
    4f96:	0f be       	out	0x3f, r0	; 63
    4f98:	cd bf       	out	0x3d, r28	; 61


	/* start Receiving data */

	TWI_start();
    4f9a:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <TWI_start>
	TWI_writeByte(0xD0);
    4f9e:	80 ed       	ldi	r24, 0xD0	; 208
    4fa0:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <TWI_writeByte>
	TWI_writeByte(0x03);
    4fa4:	83 e0       	ldi	r24, 0x03	; 3
    4fa6:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <TWI_writeByte>

	TWI_start();
    4faa:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <TWI_start>

	TWI_writeByte(0xD1);
    4fae:	81 ed       	ldi	r24, 0xD1	; 209
    4fb0:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <TWI_writeByte>


	uint8 ptr_date_receive;

	TWI_readByteWithACK(&ptr_date_receive);
    4fb4:	ce 01       	movw	r24, r28
    4fb6:	0a 96       	adiw	r24, 0x0a	; 10
    4fb8:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <TWI_readByteWithACK>

	uint8 date_day = ptr_date_receive;
    4fbc:	8a 85       	ldd	r24, Y+10	; 0x0a
    4fbe:	8c 83       	std	Y+4, r24	; 0x04

	TWI_readByteWithACK(&ptr_date_receive);
    4fc0:	ce 01       	movw	r24, r28
    4fc2:	0a 96       	adiw	r24, 0x0a	; 10
    4fc4:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <TWI_readByteWithACK>

	uint8 date = ptr_date_receive;
    4fc8:	8a 85       	ldd	r24, Y+10	; 0x0a
    4fca:	8b 83       	std	Y+3, r24	; 0x03

	TWI_readByteWithACK(&ptr_date_receive);
    4fcc:	ce 01       	movw	r24, r28
    4fce:	0a 96       	adiw	r24, 0x0a	; 10
    4fd0:	0e 94 84 0d 	call	0x1b08	; 0x1b08 <TWI_readByteWithACK>

	uint8 date_month = ptr_date_receive;
    4fd4:	8a 85       	ldd	r24, Y+10	; 0x0a
    4fd6:	8a 83       	std	Y+2, r24	; 0x02

	TWI_readByteWithNACK(&ptr_date_receive);
    4fd8:	ce 01       	movw	r24, r28
    4fda:	0a 96       	adiw	r24, 0x0a	; 10
    4fdc:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <TWI_readByteWithNACK>

	uint8 date_year = ptr_date_receive;
    4fe0:	8a 85       	ldd	r24, Y+10	; 0x0a
    4fe2:	89 83       	std	Y+1, r24	; 0x01

	TWI_stop();
    4fe4:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <TWI_stop>

	/* Data handling to return date */

	date_res.day = date_day;
    4fe8:	8c 81       	ldd	r24, Y+4	; 0x04
    4fea:	80 93 43 02 	sts	0x0243, r24
	date_res.date = date;
    4fee:	8b 81       	ldd	r24, Y+3	; 0x03
    4ff0:	80 93 42 02 	sts	0x0242, r24
	date_res.month = date_month;
    4ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    4ff6:	80 93 41 02 	sts	0x0241, r24
	date_res.year = date_year;
    4ffa:	89 81       	ldd	r24, Y+1	; 0x01
    4ffc:	88 2f       	mov	r24, r24
    4ffe:	90 e0       	ldi	r25, 0x00	; 0
    5000:	90 93 40 02 	sts	0x0240, r25
    5004:	80 93 3f 02 	sts	0x023F, r24

	return date_res;
    5008:	ce 01       	movw	r24, r28
    500a:	05 96       	adiw	r24, 0x05	; 5
    500c:	9c 87       	std	Y+12, r25	; 0x0c
    500e:	8b 87       	std	Y+11, r24	; 0x0b
    5010:	ef e3       	ldi	r30, 0x3F	; 63
    5012:	f2 e0       	ldi	r31, 0x02	; 2
    5014:	fe 87       	std	Y+14, r31	; 0x0e
    5016:	ed 87       	std	Y+13, r30	; 0x0d
    5018:	f5 e0       	ldi	r31, 0x05	; 5
    501a:	ff 87       	std	Y+15, r31	; 0x0f
    501c:	ed 85       	ldd	r30, Y+13	; 0x0d
    501e:	fe 85       	ldd	r31, Y+14	; 0x0e
    5020:	00 80       	ld	r0, Z
    5022:	8d 85       	ldd	r24, Y+13	; 0x0d
    5024:	9e 85       	ldd	r25, Y+14	; 0x0e
    5026:	01 96       	adiw	r24, 0x01	; 1
    5028:	9e 87       	std	Y+14, r25	; 0x0e
    502a:	8d 87       	std	Y+13, r24	; 0x0d
    502c:	eb 85       	ldd	r30, Y+11	; 0x0b
    502e:	fc 85       	ldd	r31, Y+12	; 0x0c
    5030:	00 82       	st	Z, r0
    5032:	8b 85       	ldd	r24, Y+11	; 0x0b
    5034:	9c 85       	ldd	r25, Y+12	; 0x0c
    5036:	01 96       	adiw	r24, 0x01	; 1
    5038:	9c 87       	std	Y+12, r25	; 0x0c
    503a:	8b 87       	std	Y+11, r24	; 0x0b
    503c:	9f 85       	ldd	r25, Y+15	; 0x0f
    503e:	91 50       	subi	r25, 0x01	; 1
    5040:	9f 87       	std	Y+15, r25	; 0x0f
    5042:	ef 85       	ldd	r30, Y+15	; 0x0f
    5044:	ee 23       	and	r30, r30
    5046:	51 f7       	brne	.-44     	; 0x501c <RTC_GetDate+0xa6>
    5048:	20 e0       	ldi	r18, 0x00	; 0
    504a:	2d 81       	ldd	r18, Y+5	; 0x05
    504c:	30 e0       	ldi	r19, 0x00	; 0
    504e:	3e 81       	ldd	r19, Y+6	; 0x06
    5050:	40 e0       	ldi	r20, 0x00	; 0
    5052:	4f 81       	ldd	r20, Y+7	; 0x07
    5054:	80 e0       	ldi	r24, 0x00	; 0
    5056:	88 85       	ldd	r24, Y+8	; 0x08
    5058:	90 e0       	ldi	r25, 0x00	; 0
    505a:	99 85       	ldd	r25, Y+9	; 0x09
    505c:	28 8b       	std	Y+16, r18	; 0x10
    505e:	39 8b       	std	Y+17, r19	; 0x11
    5060:	4a 8b       	std	Y+18, r20	; 0x12
    5062:	8b 8b       	std	Y+19, r24	; 0x13
    5064:	9c 8b       	std	Y+20, r25	; 0x14
    5066:	a8 88       	ldd	r10, Y+16	; 0x10
    5068:	b9 88       	ldd	r11, Y+17	; 0x11
    506a:	ca 88       	ldd	r12, Y+18	; 0x12
    506c:	db 88       	ldd	r13, Y+19	; 0x13
    506e:	ec 88       	ldd	r14, Y+20	; 0x14
    5070:	fd 88       	ldd	r15, Y+21	; 0x15
    5072:	0e 89       	ldd	r16, Y+22	; 0x16
    5074:	1f 89       	ldd	r17, Y+23	; 0x17

}
    5076:	2a 2d       	mov	r18, r10
    5078:	3b 2d       	mov	r19, r11
    507a:	4c 2d       	mov	r20, r12
    507c:	5d 2d       	mov	r21, r13
    507e:	6e 2d       	mov	r22, r14
    5080:	7f 2d       	mov	r23, r15
    5082:	80 2f       	mov	r24, r16
    5084:	91 2f       	mov	r25, r17
    5086:	67 96       	adiw	r28, 0x17	; 23
    5088:	0f b6       	in	r0, 0x3f	; 63
    508a:	f8 94       	cli
    508c:	de bf       	out	0x3e, r29	; 62
    508e:	0f be       	out	0x3f, r0	; 63
    5090:	cd bf       	out	0x3d, r28	; 61
    5092:	cf 91       	pop	r28
    5094:	df 91       	pop	r29
    5096:	1f 91       	pop	r17
    5098:	0f 91       	pop	r16
    509a:	ff 90       	pop	r15
    509c:	ef 90       	pop	r14
    509e:	df 90       	pop	r13
    50a0:	cf 90       	pop	r12
    50a2:	bf 90       	pop	r11
    50a4:	af 90       	pop	r10
    50a6:	08 95       	ret

000050a8 <Segment_init>:
 * The Channel Numbers refers to how many segment do you want to enable
 *
 * you can choose it from  @ref Seven_Segment Number
 */
void Segment_init(channel_numbers ch_num)
{
    50a8:	0f 93       	push	r16
    50aa:	1f 93       	push	r17
    50ac:	df 93       	push	r29
    50ae:	cf 93       	push	r28
    50b0:	cd b7       	in	r28, 0x3d	; 61
    50b2:	de b7       	in	r29, 0x3e	; 62
    50b4:	c9 52       	subi	r28, 0x29	; 41
    50b6:	d1 40       	sbci	r29, 0x01	; 1
    50b8:	0f b6       	in	r0, 0x3f	; 63
    50ba:	f8 94       	cli
    50bc:	de bf       	out	0x3e, r29	; 62
    50be:	0f be       	out	0x3f, r0	; 63
    50c0:	cd bf       	out	0x3d, r28	; 61
    50c2:	fe 01       	movw	r30, r28
    50c4:	e9 5d       	subi	r30, 0xD9	; 217
    50c6:	fe 4f       	sbci	r31, 0xFE	; 254
    50c8:	80 83       	st	Z, r24
	DIO_voidSetPinDirection(GPIOB_BASE,PIN0_ID,Pin_OUTPUT);
    50ca:	86 e3       	ldi	r24, 0x36	; 54
    50cc:	90 e0       	ldi	r25, 0x00	; 0
    50ce:	60 e0       	ldi	r22, 0x00	; 0
    50d0:	41 e0       	ldi	r20, 0x01	; 1
    50d2:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GPIOB_BASE,PIN1_ID,Pin_OUTPUT);
    50d6:	86 e3       	ldi	r24, 0x36	; 54
    50d8:	90 e0       	ldi	r25, 0x00	; 0
    50da:	61 e0       	ldi	r22, 0x01	; 1
    50dc:	41 e0       	ldi	r20, 0x01	; 1
    50de:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GPIOB_BASE,PIN2_ID,Pin_OUTPUT);
    50e2:	86 e3       	ldi	r24, 0x36	; 54
    50e4:	90 e0       	ldi	r25, 0x00	; 0
    50e6:	62 e0       	ldi	r22, 0x02	; 2
    50e8:	41 e0       	ldi	r20, 0x01	; 1
    50ea:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GPIOB_BASE,PIN4_ID,Pin_OUTPUT);
    50ee:	86 e3       	ldi	r24, 0x36	; 54
    50f0:	90 e0       	ldi	r25, 0x00	; 0
    50f2:	64 e0       	ldi	r22, 0x04	; 4
    50f4:	41 e0       	ldi	r20, 0x01	; 1
    50f6:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>


	DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,LOW);
    50fa:	86 e3       	ldi	r24, 0x36	; 54
    50fc:	90 e0       	ldi	r25, 0x00	; 0
    50fe:	60 e0       	ldi	r22, 0x00	; 0
    5100:	40 e0       	ldi	r20, 0x00	; 0
    5102:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,LOW);
    5106:	86 e3       	ldi	r24, 0x36	; 54
    5108:	90 e0       	ldi	r25, 0x00	; 0
    510a:	61 e0       	ldi	r22, 0x01	; 1
    510c:	40 e0       	ldi	r20, 0x00	; 0
    510e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,LOW);
    5112:	86 e3       	ldi	r24, 0x36	; 54
    5114:	90 e0       	ldi	r25, 0x00	; 0
    5116:	62 e0       	ldi	r22, 0x02	; 2
    5118:	40 e0       	ldi	r20, 0x00	; 0
    511a:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,LOW);
    511e:	86 e3       	ldi	r24, 0x36	; 54
    5120:	90 e0       	ldi	r25, 0x00	; 0
    5122:	64 e0       	ldi	r22, 0x04	; 4
    5124:	40 e0       	ldi	r20, 0x00	; 0
    5126:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>

	DIO_voidSetPinDirection(GPIOA_BASE,PIN3_ID,Pin_OUTPUT);
    512a:	89 e3       	ldi	r24, 0x39	; 57
    512c:	90 e0       	ldi	r25, 0x00	; 0
    512e:	63 e0       	ldi	r22, 0x03	; 3
    5130:	41 e0       	ldi	r20, 0x01	; 1
    5132:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GPIOA_BASE,PIN2_ID,Pin_OUTPUT);
    5136:	89 e3       	ldi	r24, 0x39	; 57
    5138:	90 e0       	ldi	r25, 0x00	; 0
    513a:	62 e0       	ldi	r22, 0x02	; 2
    513c:	41 e0       	ldi	r20, 0x01	; 1
    513e:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GPIOB_BASE,PIN5_ID,Pin_OUTPUT);
    5142:	86 e3       	ldi	r24, 0x36	; 54
    5144:	90 e0       	ldi	r25, 0x00	; 0
    5146:	65 e0       	ldi	r22, 0x05	; 5
    5148:	41 e0       	ldi	r20, 0x01	; 1
    514a:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GPIOB_BASE,PIN6_ID,Pin_OUTPUT);
    514e:	86 e3       	ldi	r24, 0x36	; 54
    5150:	90 e0       	ldi	r25, 0x00	; 0
    5152:	66 e0       	ldi	r22, 0x06	; 6
    5154:	41 e0       	ldi	r20, 0x01	; 1
    5156:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>
	switch(ch_num)
    515a:	fe 01       	movw	r30, r28
    515c:	e9 5d       	subi	r30, 0xD9	; 217
    515e:	fe 4f       	sbci	r31, 0xFE	; 254
    5160:	80 81       	ld	r24, Z
    5162:	28 2f       	mov	r18, r24
    5164:	30 e0       	ldi	r19, 0x00	; 0
    5166:	c8 5d       	subi	r28, 0xD8	; 216
    5168:	de 4f       	sbci	r29, 0xFE	; 254
    516a:	39 83       	std	Y+1, r19	; 0x01
    516c:	28 83       	st	Y, r18
    516e:	c8 52       	subi	r28, 0x28	; 40
    5170:	d1 40       	sbci	r29, 0x01	; 1
    5172:	c8 5d       	subi	r28, 0xD8	; 216
    5174:	de 4f       	sbci	r29, 0xFE	; 254
    5176:	88 81       	ld	r24, Y
    5178:	99 81       	ldd	r25, Y+1	; 0x01
    517a:	c8 52       	subi	r28, 0x28	; 40
    517c:	d1 40       	sbci	r29, 0x01	; 1
    517e:	83 30       	cpi	r24, 0x03	; 3
    5180:	91 05       	cpc	r25, r1
    5182:	09 f4       	brne	.+2      	; 0x5186 <Segment_init+0xde>
    5184:	e3 c6       	rjmp	.+3526   	; 0x5f4c <Segment_init+0xea4>
    5186:	c8 5d       	subi	r28, 0xD8	; 216
    5188:	de 4f       	sbci	r29, 0xFE	; 254
    518a:	e8 81       	ld	r30, Y
    518c:	f9 81       	ldd	r31, Y+1	; 0x01
    518e:	c8 52       	subi	r28, 0x28	; 40
    5190:	d1 40       	sbci	r29, 0x01	; 1
    5192:	e4 30       	cpi	r30, 0x04	; 4
    5194:	f1 05       	cpc	r31, r1
    5196:	f4 f4       	brge	.+60     	; 0x51d4 <Segment_init+0x12c>
    5198:	c8 5d       	subi	r28, 0xD8	; 216
    519a:	de 4f       	sbci	r29, 0xFE	; 254
    519c:	28 81       	ld	r18, Y
    519e:	39 81       	ldd	r19, Y+1	; 0x01
    51a0:	c8 52       	subi	r28, 0x28	; 40
    51a2:	d1 40       	sbci	r29, 0x01	; 1
    51a4:	21 30       	cpi	r18, 0x01	; 1
    51a6:	31 05       	cpc	r19, r1
    51a8:	09 f4       	brne	.+2      	; 0x51ac <Segment_init+0x104>
    51aa:	6a c2       	rjmp	.+1236   	; 0x5680 <Segment_init+0x5d8>
    51ac:	c8 5d       	subi	r28, 0xD8	; 216
    51ae:	de 4f       	sbci	r29, 0xFE	; 254
    51b0:	88 81       	ld	r24, Y
    51b2:	99 81       	ldd	r25, Y+1	; 0x01
    51b4:	c8 52       	subi	r28, 0x28	; 40
    51b6:	d1 40       	sbci	r29, 0x01	; 1
    51b8:	82 30       	cpi	r24, 0x02	; 2
    51ba:	91 05       	cpc	r25, r1
    51bc:	0c f0       	brlt	.+2      	; 0x51c0 <Segment_init+0x118>
    51be:	93 c4       	rjmp	.+2342   	; 0x5ae6 <Segment_init+0xa3e>
    51c0:	c8 5d       	subi	r28, 0xD8	; 216
    51c2:	de 4f       	sbci	r29, 0xFE	; 254
    51c4:	e8 81       	ld	r30, Y
    51c6:	f9 81       	ldd	r31, Y+1	; 0x01
    51c8:	c8 52       	subi	r28, 0x28	; 40
    51ca:	d1 40       	sbci	r29, 0x01	; 1
    51cc:	30 97       	sbiw	r30, 0x00	; 0
    51ce:	29 f1       	breq	.+74     	; 0x521a <Segment_init+0x172>
    51d0:	0c 94 3b 37 	jmp	0x6e76	; 0x6e76 <Segment_init+0x1dce>
    51d4:	c8 5d       	subi	r28, 0xD8	; 216
    51d6:	de 4f       	sbci	r29, 0xFE	; 254
    51d8:	28 81       	ld	r18, Y
    51da:	39 81       	ldd	r19, Y+1	; 0x01
    51dc:	c8 52       	subi	r28, 0x28	; 40
    51de:	d1 40       	sbci	r29, 0x01	; 1
    51e0:	25 30       	cpi	r18, 0x05	; 5
    51e2:	31 05       	cpc	r19, r1
    51e4:	11 f4       	brne	.+4      	; 0x51ea <Segment_init+0x142>
    51e6:	0c 94 0a 34 	jmp	0x6814	; 0x6814 <Segment_init+0x176c>
    51ea:	c8 5d       	subi	r28, 0xD8	; 216
    51ec:	de 4f       	sbci	r29, 0xFE	; 254
    51ee:	88 81       	ld	r24, Y
    51f0:	99 81       	ldd	r25, Y+1	; 0x01
    51f2:	c8 52       	subi	r28, 0x28	; 40
    51f4:	d1 40       	sbci	r29, 0x01	; 1
    51f6:	85 30       	cpi	r24, 0x05	; 5
    51f8:	91 05       	cpc	r25, r1
    51fa:	14 f4       	brge	.+4      	; 0x5200 <Segment_init+0x158>
    51fc:	0c 94 d8 31 	jmp	0x63b0	; 0x63b0 <Segment_init+0x1308>
    5200:	c8 5d       	subi	r28, 0xD8	; 216
    5202:	de 4f       	sbci	r29, 0xFE	; 254
    5204:	e8 81       	ld	r30, Y
    5206:	f9 81       	ldd	r31, Y+1	; 0x01
    5208:	c8 52       	subi	r28, 0x28	; 40
    520a:	d1 40       	sbci	r29, 0x01	; 1
    520c:	e6 30       	cpi	r30, 0x06	; 6
    520e:	f1 05       	cpc	r31, r1
    5210:	11 f4       	brne	.+4      	; 0x5216 <Segment_init+0x16e>
    5212:	0c 94 cd 35 	jmp	0x6b9a	; 0x6b9a <Segment_init+0x1af2>
    5216:	0c 94 3b 37 	jmp	0x6e76	; 0x6e76 <Segment_init+0x1dce>
	{
	case FIRST_SEG:
		DIO_voidSetPinValue(GPIOA_BASE,PIN3_ID,LOW);
    521a:	89 e3       	ldi	r24, 0x39	; 57
    521c:	90 e0       	ldi	r25, 0x00	; 0
    521e:	63 e0       	ldi	r22, 0x03	; 3
    5220:	40 e0       	ldi	r20, 0x00	; 0
    5222:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    5226:	fe 01       	movw	r30, r28
    5228:	ed 5d       	subi	r30, 0xDD	; 221
    522a:	fe 4f       	sbci	r31, 0xFE	; 254
    522c:	80 e0       	ldi	r24, 0x00	; 0
    522e:	90 e0       	ldi	r25, 0x00	; 0
    5230:	a0 e0       	ldi	r26, 0x00	; 0
    5232:	b0 e4       	ldi	r27, 0x40	; 64
    5234:	80 83       	st	Z, r24
    5236:	91 83       	std	Z+1, r25	; 0x01
    5238:	a2 83       	std	Z+2, r26	; 0x02
    523a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    523c:	8e 01       	movw	r16, r28
    523e:	01 5e       	subi	r16, 0xE1	; 225
    5240:	1e 4f       	sbci	r17, 0xFE	; 254
    5242:	fe 01       	movw	r30, r28
    5244:	ed 5d       	subi	r30, 0xDD	; 221
    5246:	fe 4f       	sbci	r31, 0xFE	; 254
    5248:	60 81       	ld	r22, Z
    524a:	71 81       	ldd	r23, Z+1	; 0x01
    524c:	82 81       	ldd	r24, Z+2	; 0x02
    524e:	93 81       	ldd	r25, Z+3	; 0x03
    5250:	20 e0       	ldi	r18, 0x00	; 0
    5252:	30 e0       	ldi	r19, 0x00	; 0
    5254:	4a e7       	ldi	r20, 0x7A	; 122
    5256:	55 e4       	ldi	r21, 0x45	; 69
    5258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    525c:	dc 01       	movw	r26, r24
    525e:	cb 01       	movw	r24, r22
    5260:	f8 01       	movw	r30, r16
    5262:	80 83       	st	Z, r24
    5264:	91 83       	std	Z+1, r25	; 0x01
    5266:	a2 83       	std	Z+2, r26	; 0x02
    5268:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    526a:	fe 01       	movw	r30, r28
    526c:	e1 5e       	subi	r30, 0xE1	; 225
    526e:	fe 4f       	sbci	r31, 0xFE	; 254
    5270:	60 81       	ld	r22, Z
    5272:	71 81       	ldd	r23, Z+1	; 0x01
    5274:	82 81       	ldd	r24, Z+2	; 0x02
    5276:	93 81       	ldd	r25, Z+3	; 0x03
    5278:	20 e0       	ldi	r18, 0x00	; 0
    527a:	30 e0       	ldi	r19, 0x00	; 0
    527c:	40 e8       	ldi	r20, 0x80	; 128
    527e:	5f e3       	ldi	r21, 0x3F	; 63
    5280:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5284:	88 23       	and	r24, r24
    5286:	44 f4       	brge	.+16     	; 0x5298 <Segment_init+0x1f0>
		__ticks = 1;
    5288:	fe 01       	movw	r30, r28
    528a:	e3 5e       	subi	r30, 0xE3	; 227
    528c:	fe 4f       	sbci	r31, 0xFE	; 254
    528e:	81 e0       	ldi	r24, 0x01	; 1
    5290:	90 e0       	ldi	r25, 0x00	; 0
    5292:	91 83       	std	Z+1, r25	; 0x01
    5294:	80 83       	st	Z, r24
    5296:	64 c0       	rjmp	.+200    	; 0x5360 <Segment_init+0x2b8>
	else if (__tmp > 65535)
    5298:	fe 01       	movw	r30, r28
    529a:	e1 5e       	subi	r30, 0xE1	; 225
    529c:	fe 4f       	sbci	r31, 0xFE	; 254
    529e:	60 81       	ld	r22, Z
    52a0:	71 81       	ldd	r23, Z+1	; 0x01
    52a2:	82 81       	ldd	r24, Z+2	; 0x02
    52a4:	93 81       	ldd	r25, Z+3	; 0x03
    52a6:	20 e0       	ldi	r18, 0x00	; 0
    52a8:	3f ef       	ldi	r19, 0xFF	; 255
    52aa:	4f e7       	ldi	r20, 0x7F	; 127
    52ac:	57 e4       	ldi	r21, 0x47	; 71
    52ae:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    52b2:	18 16       	cp	r1, r24
    52b4:	0c f0       	brlt	.+2      	; 0x52b8 <Segment_init+0x210>
    52b6:	43 c0       	rjmp	.+134    	; 0x533e <Segment_init+0x296>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    52b8:	fe 01       	movw	r30, r28
    52ba:	ed 5d       	subi	r30, 0xDD	; 221
    52bc:	fe 4f       	sbci	r31, 0xFE	; 254
    52be:	60 81       	ld	r22, Z
    52c0:	71 81       	ldd	r23, Z+1	; 0x01
    52c2:	82 81       	ldd	r24, Z+2	; 0x02
    52c4:	93 81       	ldd	r25, Z+3	; 0x03
    52c6:	20 e0       	ldi	r18, 0x00	; 0
    52c8:	30 e0       	ldi	r19, 0x00	; 0
    52ca:	40 e2       	ldi	r20, 0x20	; 32
    52cc:	51 e4       	ldi	r21, 0x41	; 65
    52ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    52d2:	dc 01       	movw	r26, r24
    52d4:	cb 01       	movw	r24, r22
    52d6:	8e 01       	movw	r16, r28
    52d8:	03 5e       	subi	r16, 0xE3	; 227
    52da:	1e 4f       	sbci	r17, 0xFE	; 254
    52dc:	bc 01       	movw	r22, r24
    52de:	cd 01       	movw	r24, r26
    52e0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    52e4:	dc 01       	movw	r26, r24
    52e6:	cb 01       	movw	r24, r22
    52e8:	f8 01       	movw	r30, r16
    52ea:	91 83       	std	Z+1, r25	; 0x01
    52ec:	80 83       	st	Z, r24
    52ee:	1f c0       	rjmp	.+62     	; 0x532e <Segment_init+0x286>
    52f0:	fe 01       	movw	r30, r28
    52f2:	e5 5e       	subi	r30, 0xE5	; 229
    52f4:	fe 4f       	sbci	r31, 0xFE	; 254
    52f6:	80 e9       	ldi	r24, 0x90	; 144
    52f8:	91 e0       	ldi	r25, 0x01	; 1
    52fa:	91 83       	std	Z+1, r25	; 0x01
    52fc:	80 83       	st	Z, r24
    52fe:	fe 01       	movw	r30, r28
    5300:	e5 5e       	subi	r30, 0xE5	; 229
    5302:	fe 4f       	sbci	r31, 0xFE	; 254
    5304:	80 81       	ld	r24, Z
    5306:	91 81       	ldd	r25, Z+1	; 0x01
    5308:	01 97       	sbiw	r24, 0x01	; 1
    530a:	f1 f7       	brne	.-4      	; 0x5308 <Segment_init+0x260>
    530c:	fe 01       	movw	r30, r28
    530e:	e5 5e       	subi	r30, 0xE5	; 229
    5310:	fe 4f       	sbci	r31, 0xFE	; 254
    5312:	91 83       	std	Z+1, r25	; 0x01
    5314:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5316:	de 01       	movw	r26, r28
    5318:	a3 5e       	subi	r26, 0xE3	; 227
    531a:	be 4f       	sbci	r27, 0xFE	; 254
    531c:	fe 01       	movw	r30, r28
    531e:	e3 5e       	subi	r30, 0xE3	; 227
    5320:	fe 4f       	sbci	r31, 0xFE	; 254
    5322:	80 81       	ld	r24, Z
    5324:	91 81       	ldd	r25, Z+1	; 0x01
    5326:	01 97       	sbiw	r24, 0x01	; 1
    5328:	11 96       	adiw	r26, 0x01	; 1
    532a:	9c 93       	st	X, r25
    532c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    532e:	fe 01       	movw	r30, r28
    5330:	e3 5e       	subi	r30, 0xE3	; 227
    5332:	fe 4f       	sbci	r31, 0xFE	; 254
    5334:	80 81       	ld	r24, Z
    5336:	91 81       	ldd	r25, Z+1	; 0x01
    5338:	00 97       	sbiw	r24, 0x00	; 0
    533a:	d1 f6       	brne	.-76     	; 0x52f0 <Segment_init+0x248>
    533c:	27 c0       	rjmp	.+78     	; 0x538c <Segment_init+0x2e4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    533e:	8e 01       	movw	r16, r28
    5340:	03 5e       	subi	r16, 0xE3	; 227
    5342:	1e 4f       	sbci	r17, 0xFE	; 254
    5344:	fe 01       	movw	r30, r28
    5346:	e1 5e       	subi	r30, 0xE1	; 225
    5348:	fe 4f       	sbci	r31, 0xFE	; 254
    534a:	60 81       	ld	r22, Z
    534c:	71 81       	ldd	r23, Z+1	; 0x01
    534e:	82 81       	ldd	r24, Z+2	; 0x02
    5350:	93 81       	ldd	r25, Z+3	; 0x03
    5352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5356:	dc 01       	movw	r26, r24
    5358:	cb 01       	movw	r24, r22
    535a:	f8 01       	movw	r30, r16
    535c:	91 83       	std	Z+1, r25	; 0x01
    535e:	80 83       	st	Z, r24
    5360:	de 01       	movw	r26, r28
    5362:	a7 5e       	subi	r26, 0xE7	; 231
    5364:	be 4f       	sbci	r27, 0xFE	; 254
    5366:	fe 01       	movw	r30, r28
    5368:	e3 5e       	subi	r30, 0xE3	; 227
    536a:	fe 4f       	sbci	r31, 0xFE	; 254
    536c:	80 81       	ld	r24, Z
    536e:	91 81       	ldd	r25, Z+1	; 0x01
    5370:	8d 93       	st	X+, r24
    5372:	9c 93       	st	X, r25
    5374:	fe 01       	movw	r30, r28
    5376:	e7 5e       	subi	r30, 0xE7	; 231
    5378:	fe 4f       	sbci	r31, 0xFE	; 254
    537a:	80 81       	ld	r24, Z
    537c:	91 81       	ldd	r25, Z+1	; 0x01
    537e:	01 97       	sbiw	r24, 0x01	; 1
    5380:	f1 f7       	brne	.-4      	; 0x537e <Segment_init+0x2d6>
    5382:	fe 01       	movw	r30, r28
    5384:	e7 5e       	subi	r30, 0xE7	; 231
    5386:	fe 4f       	sbci	r31, 0xFE	; 254
    5388:	91 83       	std	Z+1, r25	; 0x01
    538a:	80 83       	st	Z, r24
		_delay_ms(2);
		DIO_voidSetPinValue(GPIOA_BASE,PIN2_ID,HIGH);
    538c:	89 e3       	ldi	r24, 0x39	; 57
    538e:	90 e0       	ldi	r25, 0x00	; 0
    5390:	62 e0       	ldi	r22, 0x02	; 2
    5392:	41 e0       	ldi	r20, 0x01	; 1
    5394:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    5398:	fe 01       	movw	r30, r28
    539a:	eb 5e       	subi	r30, 0xEB	; 235
    539c:	fe 4f       	sbci	r31, 0xFE	; 254
    539e:	80 e0       	ldi	r24, 0x00	; 0
    53a0:	90 e0       	ldi	r25, 0x00	; 0
    53a2:	a0 e0       	ldi	r26, 0x00	; 0
    53a4:	b0 e4       	ldi	r27, 0x40	; 64
    53a6:	80 83       	st	Z, r24
    53a8:	91 83       	std	Z+1, r25	; 0x01
    53aa:	a2 83       	std	Z+2, r26	; 0x02
    53ac:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    53ae:	8e 01       	movw	r16, r28
    53b0:	0f 5e       	subi	r16, 0xEF	; 239
    53b2:	1e 4f       	sbci	r17, 0xFE	; 254
    53b4:	fe 01       	movw	r30, r28
    53b6:	eb 5e       	subi	r30, 0xEB	; 235
    53b8:	fe 4f       	sbci	r31, 0xFE	; 254
    53ba:	60 81       	ld	r22, Z
    53bc:	71 81       	ldd	r23, Z+1	; 0x01
    53be:	82 81       	ldd	r24, Z+2	; 0x02
    53c0:	93 81       	ldd	r25, Z+3	; 0x03
    53c2:	20 e0       	ldi	r18, 0x00	; 0
    53c4:	30 e0       	ldi	r19, 0x00	; 0
    53c6:	4a e7       	ldi	r20, 0x7A	; 122
    53c8:	55 e4       	ldi	r21, 0x45	; 69
    53ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    53ce:	dc 01       	movw	r26, r24
    53d0:	cb 01       	movw	r24, r22
    53d2:	f8 01       	movw	r30, r16
    53d4:	80 83       	st	Z, r24
    53d6:	91 83       	std	Z+1, r25	; 0x01
    53d8:	a2 83       	std	Z+2, r26	; 0x02
    53da:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    53dc:	fe 01       	movw	r30, r28
    53de:	ef 5e       	subi	r30, 0xEF	; 239
    53e0:	fe 4f       	sbci	r31, 0xFE	; 254
    53e2:	60 81       	ld	r22, Z
    53e4:	71 81       	ldd	r23, Z+1	; 0x01
    53e6:	82 81       	ldd	r24, Z+2	; 0x02
    53e8:	93 81       	ldd	r25, Z+3	; 0x03
    53ea:	20 e0       	ldi	r18, 0x00	; 0
    53ec:	30 e0       	ldi	r19, 0x00	; 0
    53ee:	40 e8       	ldi	r20, 0x80	; 128
    53f0:	5f e3       	ldi	r21, 0x3F	; 63
    53f2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    53f6:	88 23       	and	r24, r24
    53f8:	44 f4       	brge	.+16     	; 0x540a <Segment_init+0x362>
		__ticks = 1;
    53fa:	fe 01       	movw	r30, r28
    53fc:	e1 5f       	subi	r30, 0xF1	; 241
    53fe:	fe 4f       	sbci	r31, 0xFE	; 254
    5400:	81 e0       	ldi	r24, 0x01	; 1
    5402:	90 e0       	ldi	r25, 0x00	; 0
    5404:	91 83       	std	Z+1, r25	; 0x01
    5406:	80 83       	st	Z, r24
    5408:	64 c0       	rjmp	.+200    	; 0x54d2 <Segment_init+0x42a>
	else if (__tmp > 65535)
    540a:	fe 01       	movw	r30, r28
    540c:	ef 5e       	subi	r30, 0xEF	; 239
    540e:	fe 4f       	sbci	r31, 0xFE	; 254
    5410:	60 81       	ld	r22, Z
    5412:	71 81       	ldd	r23, Z+1	; 0x01
    5414:	82 81       	ldd	r24, Z+2	; 0x02
    5416:	93 81       	ldd	r25, Z+3	; 0x03
    5418:	20 e0       	ldi	r18, 0x00	; 0
    541a:	3f ef       	ldi	r19, 0xFF	; 255
    541c:	4f e7       	ldi	r20, 0x7F	; 127
    541e:	57 e4       	ldi	r21, 0x47	; 71
    5420:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5424:	18 16       	cp	r1, r24
    5426:	0c f0       	brlt	.+2      	; 0x542a <Segment_init+0x382>
    5428:	43 c0       	rjmp	.+134    	; 0x54b0 <Segment_init+0x408>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    542a:	fe 01       	movw	r30, r28
    542c:	eb 5e       	subi	r30, 0xEB	; 235
    542e:	fe 4f       	sbci	r31, 0xFE	; 254
    5430:	60 81       	ld	r22, Z
    5432:	71 81       	ldd	r23, Z+1	; 0x01
    5434:	82 81       	ldd	r24, Z+2	; 0x02
    5436:	93 81       	ldd	r25, Z+3	; 0x03
    5438:	20 e0       	ldi	r18, 0x00	; 0
    543a:	30 e0       	ldi	r19, 0x00	; 0
    543c:	40 e2       	ldi	r20, 0x20	; 32
    543e:	51 e4       	ldi	r21, 0x41	; 65
    5440:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5444:	dc 01       	movw	r26, r24
    5446:	cb 01       	movw	r24, r22
    5448:	8e 01       	movw	r16, r28
    544a:	01 5f       	subi	r16, 0xF1	; 241
    544c:	1e 4f       	sbci	r17, 0xFE	; 254
    544e:	bc 01       	movw	r22, r24
    5450:	cd 01       	movw	r24, r26
    5452:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5456:	dc 01       	movw	r26, r24
    5458:	cb 01       	movw	r24, r22
    545a:	f8 01       	movw	r30, r16
    545c:	91 83       	std	Z+1, r25	; 0x01
    545e:	80 83       	st	Z, r24
    5460:	1f c0       	rjmp	.+62     	; 0x54a0 <Segment_init+0x3f8>
    5462:	fe 01       	movw	r30, r28
    5464:	e3 5f       	subi	r30, 0xF3	; 243
    5466:	fe 4f       	sbci	r31, 0xFE	; 254
    5468:	80 e9       	ldi	r24, 0x90	; 144
    546a:	91 e0       	ldi	r25, 0x01	; 1
    546c:	91 83       	std	Z+1, r25	; 0x01
    546e:	80 83       	st	Z, r24
    5470:	fe 01       	movw	r30, r28
    5472:	e3 5f       	subi	r30, 0xF3	; 243
    5474:	fe 4f       	sbci	r31, 0xFE	; 254
    5476:	80 81       	ld	r24, Z
    5478:	91 81       	ldd	r25, Z+1	; 0x01
    547a:	01 97       	sbiw	r24, 0x01	; 1
    547c:	f1 f7       	brne	.-4      	; 0x547a <Segment_init+0x3d2>
    547e:	fe 01       	movw	r30, r28
    5480:	e3 5f       	subi	r30, 0xF3	; 243
    5482:	fe 4f       	sbci	r31, 0xFE	; 254
    5484:	91 83       	std	Z+1, r25	; 0x01
    5486:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5488:	de 01       	movw	r26, r28
    548a:	a1 5f       	subi	r26, 0xF1	; 241
    548c:	be 4f       	sbci	r27, 0xFE	; 254
    548e:	fe 01       	movw	r30, r28
    5490:	e1 5f       	subi	r30, 0xF1	; 241
    5492:	fe 4f       	sbci	r31, 0xFE	; 254
    5494:	80 81       	ld	r24, Z
    5496:	91 81       	ldd	r25, Z+1	; 0x01
    5498:	01 97       	sbiw	r24, 0x01	; 1
    549a:	11 96       	adiw	r26, 0x01	; 1
    549c:	9c 93       	st	X, r25
    549e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    54a0:	fe 01       	movw	r30, r28
    54a2:	e1 5f       	subi	r30, 0xF1	; 241
    54a4:	fe 4f       	sbci	r31, 0xFE	; 254
    54a6:	80 81       	ld	r24, Z
    54a8:	91 81       	ldd	r25, Z+1	; 0x01
    54aa:	00 97       	sbiw	r24, 0x00	; 0
    54ac:	d1 f6       	brne	.-76     	; 0x5462 <Segment_init+0x3ba>
    54ae:	27 c0       	rjmp	.+78     	; 0x54fe <Segment_init+0x456>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    54b0:	8e 01       	movw	r16, r28
    54b2:	01 5f       	subi	r16, 0xF1	; 241
    54b4:	1e 4f       	sbci	r17, 0xFE	; 254
    54b6:	fe 01       	movw	r30, r28
    54b8:	ef 5e       	subi	r30, 0xEF	; 239
    54ba:	fe 4f       	sbci	r31, 0xFE	; 254
    54bc:	60 81       	ld	r22, Z
    54be:	71 81       	ldd	r23, Z+1	; 0x01
    54c0:	82 81       	ldd	r24, Z+2	; 0x02
    54c2:	93 81       	ldd	r25, Z+3	; 0x03
    54c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    54c8:	dc 01       	movw	r26, r24
    54ca:	cb 01       	movw	r24, r22
    54cc:	f8 01       	movw	r30, r16
    54ce:	91 83       	std	Z+1, r25	; 0x01
    54d0:	80 83       	st	Z, r24
    54d2:	de 01       	movw	r26, r28
    54d4:	a5 5f       	subi	r26, 0xF5	; 245
    54d6:	be 4f       	sbci	r27, 0xFE	; 254
    54d8:	fe 01       	movw	r30, r28
    54da:	e1 5f       	subi	r30, 0xF1	; 241
    54dc:	fe 4f       	sbci	r31, 0xFE	; 254
    54de:	80 81       	ld	r24, Z
    54e0:	91 81       	ldd	r25, Z+1	; 0x01
    54e2:	8d 93       	st	X+, r24
    54e4:	9c 93       	st	X, r25
    54e6:	fe 01       	movw	r30, r28
    54e8:	e5 5f       	subi	r30, 0xF5	; 245
    54ea:	fe 4f       	sbci	r31, 0xFE	; 254
    54ec:	80 81       	ld	r24, Z
    54ee:	91 81       	ldd	r25, Z+1	; 0x01
    54f0:	01 97       	sbiw	r24, 0x01	; 1
    54f2:	f1 f7       	brne	.-4      	; 0x54f0 <Segment_init+0x448>
    54f4:	fe 01       	movw	r30, r28
    54f6:	e5 5f       	subi	r30, 0xF5	; 245
    54f8:	fe 4f       	sbci	r31, 0xFE	; 254
    54fa:	91 83       	std	Z+1, r25	; 0x01
    54fc:	80 83       	st	Z, r24
		_delay_ms(2);
		DIO_voidSetPinValue(GPIOB_BASE,PIN5_ID,HIGH);
    54fe:	86 e3       	ldi	r24, 0x36	; 54
    5500:	90 e0       	ldi	r25, 0x00	; 0
    5502:	65 e0       	ldi	r22, 0x05	; 5
    5504:	41 e0       	ldi	r20, 0x01	; 1
    5506:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    550a:	fe 01       	movw	r30, r28
    550c:	e9 5f       	subi	r30, 0xF9	; 249
    550e:	fe 4f       	sbci	r31, 0xFE	; 254
    5510:	80 e0       	ldi	r24, 0x00	; 0
    5512:	90 e0       	ldi	r25, 0x00	; 0
    5514:	a0 e0       	ldi	r26, 0x00	; 0
    5516:	b0 e4       	ldi	r27, 0x40	; 64
    5518:	80 83       	st	Z, r24
    551a:	91 83       	std	Z+1, r25	; 0x01
    551c:	a2 83       	std	Z+2, r26	; 0x02
    551e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5520:	8e 01       	movw	r16, r28
    5522:	0d 5f       	subi	r16, 0xFD	; 253
    5524:	1e 4f       	sbci	r17, 0xFE	; 254
    5526:	fe 01       	movw	r30, r28
    5528:	e9 5f       	subi	r30, 0xF9	; 249
    552a:	fe 4f       	sbci	r31, 0xFE	; 254
    552c:	60 81       	ld	r22, Z
    552e:	71 81       	ldd	r23, Z+1	; 0x01
    5530:	82 81       	ldd	r24, Z+2	; 0x02
    5532:	93 81       	ldd	r25, Z+3	; 0x03
    5534:	20 e0       	ldi	r18, 0x00	; 0
    5536:	30 e0       	ldi	r19, 0x00	; 0
    5538:	4a e7       	ldi	r20, 0x7A	; 122
    553a:	55 e4       	ldi	r21, 0x45	; 69
    553c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5540:	dc 01       	movw	r26, r24
    5542:	cb 01       	movw	r24, r22
    5544:	f8 01       	movw	r30, r16
    5546:	80 83       	st	Z, r24
    5548:	91 83       	std	Z+1, r25	; 0x01
    554a:	a2 83       	std	Z+2, r26	; 0x02
    554c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    554e:	fe 01       	movw	r30, r28
    5550:	ed 5f       	subi	r30, 0xFD	; 253
    5552:	fe 4f       	sbci	r31, 0xFE	; 254
    5554:	60 81       	ld	r22, Z
    5556:	71 81       	ldd	r23, Z+1	; 0x01
    5558:	82 81       	ldd	r24, Z+2	; 0x02
    555a:	93 81       	ldd	r25, Z+3	; 0x03
    555c:	20 e0       	ldi	r18, 0x00	; 0
    555e:	30 e0       	ldi	r19, 0x00	; 0
    5560:	40 e8       	ldi	r20, 0x80	; 128
    5562:	5f e3       	ldi	r21, 0x3F	; 63
    5564:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5568:	88 23       	and	r24, r24
    556a:	44 f4       	brge	.+16     	; 0x557c <Segment_init+0x4d4>
		__ticks = 1;
    556c:	fe 01       	movw	r30, r28
    556e:	ef 5f       	subi	r30, 0xFF	; 255
    5570:	fe 4f       	sbci	r31, 0xFE	; 254
    5572:	81 e0       	ldi	r24, 0x01	; 1
    5574:	90 e0       	ldi	r25, 0x00	; 0
    5576:	91 83       	std	Z+1, r25	; 0x01
    5578:	80 83       	st	Z, r24
    557a:	64 c0       	rjmp	.+200    	; 0x5644 <Segment_init+0x59c>
	else if (__tmp > 65535)
    557c:	fe 01       	movw	r30, r28
    557e:	ed 5f       	subi	r30, 0xFD	; 253
    5580:	fe 4f       	sbci	r31, 0xFE	; 254
    5582:	60 81       	ld	r22, Z
    5584:	71 81       	ldd	r23, Z+1	; 0x01
    5586:	82 81       	ldd	r24, Z+2	; 0x02
    5588:	93 81       	ldd	r25, Z+3	; 0x03
    558a:	20 e0       	ldi	r18, 0x00	; 0
    558c:	3f ef       	ldi	r19, 0xFF	; 255
    558e:	4f e7       	ldi	r20, 0x7F	; 127
    5590:	57 e4       	ldi	r21, 0x47	; 71
    5592:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5596:	18 16       	cp	r1, r24
    5598:	0c f0       	brlt	.+2      	; 0x559c <Segment_init+0x4f4>
    559a:	43 c0       	rjmp	.+134    	; 0x5622 <Segment_init+0x57a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    559c:	fe 01       	movw	r30, r28
    559e:	e9 5f       	subi	r30, 0xF9	; 249
    55a0:	fe 4f       	sbci	r31, 0xFE	; 254
    55a2:	60 81       	ld	r22, Z
    55a4:	71 81       	ldd	r23, Z+1	; 0x01
    55a6:	82 81       	ldd	r24, Z+2	; 0x02
    55a8:	93 81       	ldd	r25, Z+3	; 0x03
    55aa:	20 e0       	ldi	r18, 0x00	; 0
    55ac:	30 e0       	ldi	r19, 0x00	; 0
    55ae:	40 e2       	ldi	r20, 0x20	; 32
    55b0:	51 e4       	ldi	r21, 0x41	; 65
    55b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    55b6:	dc 01       	movw	r26, r24
    55b8:	cb 01       	movw	r24, r22
    55ba:	8e 01       	movw	r16, r28
    55bc:	0f 5f       	subi	r16, 0xFF	; 255
    55be:	1e 4f       	sbci	r17, 0xFE	; 254
    55c0:	bc 01       	movw	r22, r24
    55c2:	cd 01       	movw	r24, r26
    55c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    55c8:	dc 01       	movw	r26, r24
    55ca:	cb 01       	movw	r24, r22
    55cc:	f8 01       	movw	r30, r16
    55ce:	91 83       	std	Z+1, r25	; 0x01
    55d0:	80 83       	st	Z, r24
    55d2:	1f c0       	rjmp	.+62     	; 0x5612 <Segment_init+0x56a>
    55d4:	fe 01       	movw	r30, r28
    55d6:	e1 50       	subi	r30, 0x01	; 1
    55d8:	ff 4f       	sbci	r31, 0xFF	; 255
    55da:	80 e9       	ldi	r24, 0x90	; 144
    55dc:	91 e0       	ldi	r25, 0x01	; 1
    55de:	91 83       	std	Z+1, r25	; 0x01
    55e0:	80 83       	st	Z, r24
    55e2:	fe 01       	movw	r30, r28
    55e4:	e1 50       	subi	r30, 0x01	; 1
    55e6:	ff 4f       	sbci	r31, 0xFF	; 255
    55e8:	80 81       	ld	r24, Z
    55ea:	91 81       	ldd	r25, Z+1	; 0x01
    55ec:	01 97       	sbiw	r24, 0x01	; 1
    55ee:	f1 f7       	brne	.-4      	; 0x55ec <Segment_init+0x544>
    55f0:	fe 01       	movw	r30, r28
    55f2:	e1 50       	subi	r30, 0x01	; 1
    55f4:	ff 4f       	sbci	r31, 0xFF	; 255
    55f6:	91 83       	std	Z+1, r25	; 0x01
    55f8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    55fa:	de 01       	movw	r26, r28
    55fc:	af 5f       	subi	r26, 0xFF	; 255
    55fe:	be 4f       	sbci	r27, 0xFE	; 254
    5600:	fe 01       	movw	r30, r28
    5602:	ef 5f       	subi	r30, 0xFF	; 255
    5604:	fe 4f       	sbci	r31, 0xFE	; 254
    5606:	80 81       	ld	r24, Z
    5608:	91 81       	ldd	r25, Z+1	; 0x01
    560a:	01 97       	sbiw	r24, 0x01	; 1
    560c:	11 96       	adiw	r26, 0x01	; 1
    560e:	9c 93       	st	X, r25
    5610:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5612:	fe 01       	movw	r30, r28
    5614:	ef 5f       	subi	r30, 0xFF	; 255
    5616:	fe 4f       	sbci	r31, 0xFE	; 254
    5618:	80 81       	ld	r24, Z
    561a:	91 81       	ldd	r25, Z+1	; 0x01
    561c:	00 97       	sbiw	r24, 0x00	; 0
    561e:	d1 f6       	brne	.-76     	; 0x55d4 <Segment_init+0x52c>
    5620:	27 c0       	rjmp	.+78     	; 0x5670 <Segment_init+0x5c8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5622:	8e 01       	movw	r16, r28
    5624:	0f 5f       	subi	r16, 0xFF	; 255
    5626:	1e 4f       	sbci	r17, 0xFE	; 254
    5628:	fe 01       	movw	r30, r28
    562a:	ed 5f       	subi	r30, 0xFD	; 253
    562c:	fe 4f       	sbci	r31, 0xFE	; 254
    562e:	60 81       	ld	r22, Z
    5630:	71 81       	ldd	r23, Z+1	; 0x01
    5632:	82 81       	ldd	r24, Z+2	; 0x02
    5634:	93 81       	ldd	r25, Z+3	; 0x03
    5636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    563a:	dc 01       	movw	r26, r24
    563c:	cb 01       	movw	r24, r22
    563e:	f8 01       	movw	r30, r16
    5640:	91 83       	std	Z+1, r25	; 0x01
    5642:	80 83       	st	Z, r24
    5644:	de 01       	movw	r26, r28
    5646:	a3 50       	subi	r26, 0x03	; 3
    5648:	bf 4f       	sbci	r27, 0xFF	; 255
    564a:	fe 01       	movw	r30, r28
    564c:	ef 5f       	subi	r30, 0xFF	; 255
    564e:	fe 4f       	sbci	r31, 0xFE	; 254
    5650:	80 81       	ld	r24, Z
    5652:	91 81       	ldd	r25, Z+1	; 0x01
    5654:	8d 93       	st	X+, r24
    5656:	9c 93       	st	X, r25
    5658:	fe 01       	movw	r30, r28
    565a:	e3 50       	subi	r30, 0x03	; 3
    565c:	ff 4f       	sbci	r31, 0xFF	; 255
    565e:	80 81       	ld	r24, Z
    5660:	91 81       	ldd	r25, Z+1	; 0x01
    5662:	01 97       	sbiw	r24, 0x01	; 1
    5664:	f1 f7       	brne	.-4      	; 0x5662 <Segment_init+0x5ba>
    5666:	fe 01       	movw	r30, r28
    5668:	e3 50       	subi	r30, 0x03	; 3
    566a:	ff 4f       	sbci	r31, 0xFF	; 255
    566c:	91 83       	std	Z+1, r25	; 0x01
    566e:	80 83       	st	Z, r24
		_delay_ms(2);
		DIO_voidSetPinValue(GPIOB_BASE,PIN6_ID,HIGH);
    5670:	86 e3       	ldi	r24, 0x36	; 54
    5672:	90 e0       	ldi	r25, 0x00	; 0
    5674:	66 e0       	ldi	r22, 0x06	; 6
    5676:	41 e0       	ldi	r20, 0x01	; 1
    5678:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    567c:	0c 94 3b 37 	jmp	0x6e76	; 0x6e76 <Segment_init+0x1dce>
		break;
	case TWO_SEGs:
			DIO_voidSetPinValue(GPIOA_BASE,PIN3_ID,LOW);
    5680:	89 e3       	ldi	r24, 0x39	; 57
    5682:	90 e0       	ldi	r25, 0x00	; 0
    5684:	63 e0       	ldi	r22, 0x03	; 3
    5686:	40 e0       	ldi	r20, 0x00	; 0
    5688:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    568c:	fe 01       	movw	r30, r28
    568e:	e7 50       	subi	r30, 0x07	; 7
    5690:	ff 4f       	sbci	r31, 0xFF	; 255
    5692:	80 e0       	ldi	r24, 0x00	; 0
    5694:	90 e0       	ldi	r25, 0x00	; 0
    5696:	a0 e0       	ldi	r26, 0x00	; 0
    5698:	b0 e4       	ldi	r27, 0x40	; 64
    569a:	80 83       	st	Z, r24
    569c:	91 83       	std	Z+1, r25	; 0x01
    569e:	a2 83       	std	Z+2, r26	; 0x02
    56a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    56a2:	8e 01       	movw	r16, r28
    56a4:	0b 50       	subi	r16, 0x0B	; 11
    56a6:	1f 4f       	sbci	r17, 0xFF	; 255
    56a8:	fe 01       	movw	r30, r28
    56aa:	e7 50       	subi	r30, 0x07	; 7
    56ac:	ff 4f       	sbci	r31, 0xFF	; 255
    56ae:	60 81       	ld	r22, Z
    56b0:	71 81       	ldd	r23, Z+1	; 0x01
    56b2:	82 81       	ldd	r24, Z+2	; 0x02
    56b4:	93 81       	ldd	r25, Z+3	; 0x03
    56b6:	20 e0       	ldi	r18, 0x00	; 0
    56b8:	30 e0       	ldi	r19, 0x00	; 0
    56ba:	4a e7       	ldi	r20, 0x7A	; 122
    56bc:	55 e4       	ldi	r21, 0x45	; 69
    56be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    56c2:	dc 01       	movw	r26, r24
    56c4:	cb 01       	movw	r24, r22
    56c6:	f8 01       	movw	r30, r16
    56c8:	80 83       	st	Z, r24
    56ca:	91 83       	std	Z+1, r25	; 0x01
    56cc:	a2 83       	std	Z+2, r26	; 0x02
    56ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    56d0:	fe 01       	movw	r30, r28
    56d2:	eb 50       	subi	r30, 0x0B	; 11
    56d4:	ff 4f       	sbci	r31, 0xFF	; 255
    56d6:	60 81       	ld	r22, Z
    56d8:	71 81       	ldd	r23, Z+1	; 0x01
    56da:	82 81       	ldd	r24, Z+2	; 0x02
    56dc:	93 81       	ldd	r25, Z+3	; 0x03
    56de:	20 e0       	ldi	r18, 0x00	; 0
    56e0:	30 e0       	ldi	r19, 0x00	; 0
    56e2:	40 e8       	ldi	r20, 0x80	; 128
    56e4:	5f e3       	ldi	r21, 0x3F	; 63
    56e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    56ea:	88 23       	and	r24, r24
    56ec:	44 f4       	brge	.+16     	; 0x56fe <Segment_init+0x656>
		__ticks = 1;
    56ee:	fe 01       	movw	r30, r28
    56f0:	ed 50       	subi	r30, 0x0D	; 13
    56f2:	ff 4f       	sbci	r31, 0xFF	; 255
    56f4:	81 e0       	ldi	r24, 0x01	; 1
    56f6:	90 e0       	ldi	r25, 0x00	; 0
    56f8:	91 83       	std	Z+1, r25	; 0x01
    56fa:	80 83       	st	Z, r24
    56fc:	64 c0       	rjmp	.+200    	; 0x57c6 <Segment_init+0x71e>
	else if (__tmp > 65535)
    56fe:	fe 01       	movw	r30, r28
    5700:	eb 50       	subi	r30, 0x0B	; 11
    5702:	ff 4f       	sbci	r31, 0xFF	; 255
    5704:	60 81       	ld	r22, Z
    5706:	71 81       	ldd	r23, Z+1	; 0x01
    5708:	82 81       	ldd	r24, Z+2	; 0x02
    570a:	93 81       	ldd	r25, Z+3	; 0x03
    570c:	20 e0       	ldi	r18, 0x00	; 0
    570e:	3f ef       	ldi	r19, 0xFF	; 255
    5710:	4f e7       	ldi	r20, 0x7F	; 127
    5712:	57 e4       	ldi	r21, 0x47	; 71
    5714:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5718:	18 16       	cp	r1, r24
    571a:	0c f0       	brlt	.+2      	; 0x571e <Segment_init+0x676>
    571c:	43 c0       	rjmp	.+134    	; 0x57a4 <Segment_init+0x6fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    571e:	fe 01       	movw	r30, r28
    5720:	e7 50       	subi	r30, 0x07	; 7
    5722:	ff 4f       	sbci	r31, 0xFF	; 255
    5724:	60 81       	ld	r22, Z
    5726:	71 81       	ldd	r23, Z+1	; 0x01
    5728:	82 81       	ldd	r24, Z+2	; 0x02
    572a:	93 81       	ldd	r25, Z+3	; 0x03
    572c:	20 e0       	ldi	r18, 0x00	; 0
    572e:	30 e0       	ldi	r19, 0x00	; 0
    5730:	40 e2       	ldi	r20, 0x20	; 32
    5732:	51 e4       	ldi	r21, 0x41	; 65
    5734:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5738:	dc 01       	movw	r26, r24
    573a:	cb 01       	movw	r24, r22
    573c:	8e 01       	movw	r16, r28
    573e:	0d 50       	subi	r16, 0x0D	; 13
    5740:	1f 4f       	sbci	r17, 0xFF	; 255
    5742:	bc 01       	movw	r22, r24
    5744:	cd 01       	movw	r24, r26
    5746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    574a:	dc 01       	movw	r26, r24
    574c:	cb 01       	movw	r24, r22
    574e:	f8 01       	movw	r30, r16
    5750:	91 83       	std	Z+1, r25	; 0x01
    5752:	80 83       	st	Z, r24
    5754:	1f c0       	rjmp	.+62     	; 0x5794 <Segment_init+0x6ec>
    5756:	fe 01       	movw	r30, r28
    5758:	ef 50       	subi	r30, 0x0F	; 15
    575a:	ff 4f       	sbci	r31, 0xFF	; 255
    575c:	80 e9       	ldi	r24, 0x90	; 144
    575e:	91 e0       	ldi	r25, 0x01	; 1
    5760:	91 83       	std	Z+1, r25	; 0x01
    5762:	80 83       	st	Z, r24
    5764:	fe 01       	movw	r30, r28
    5766:	ef 50       	subi	r30, 0x0F	; 15
    5768:	ff 4f       	sbci	r31, 0xFF	; 255
    576a:	80 81       	ld	r24, Z
    576c:	91 81       	ldd	r25, Z+1	; 0x01
    576e:	01 97       	sbiw	r24, 0x01	; 1
    5770:	f1 f7       	brne	.-4      	; 0x576e <Segment_init+0x6c6>
    5772:	fe 01       	movw	r30, r28
    5774:	ef 50       	subi	r30, 0x0F	; 15
    5776:	ff 4f       	sbci	r31, 0xFF	; 255
    5778:	91 83       	std	Z+1, r25	; 0x01
    577a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    577c:	de 01       	movw	r26, r28
    577e:	ad 50       	subi	r26, 0x0D	; 13
    5780:	bf 4f       	sbci	r27, 0xFF	; 255
    5782:	fe 01       	movw	r30, r28
    5784:	ed 50       	subi	r30, 0x0D	; 13
    5786:	ff 4f       	sbci	r31, 0xFF	; 255
    5788:	80 81       	ld	r24, Z
    578a:	91 81       	ldd	r25, Z+1	; 0x01
    578c:	01 97       	sbiw	r24, 0x01	; 1
    578e:	11 96       	adiw	r26, 0x01	; 1
    5790:	9c 93       	st	X, r25
    5792:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5794:	fe 01       	movw	r30, r28
    5796:	ed 50       	subi	r30, 0x0D	; 13
    5798:	ff 4f       	sbci	r31, 0xFF	; 255
    579a:	80 81       	ld	r24, Z
    579c:	91 81       	ldd	r25, Z+1	; 0x01
    579e:	00 97       	sbiw	r24, 0x00	; 0
    57a0:	d1 f6       	brne	.-76     	; 0x5756 <Segment_init+0x6ae>
    57a2:	27 c0       	rjmp	.+78     	; 0x57f2 <Segment_init+0x74a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    57a4:	8e 01       	movw	r16, r28
    57a6:	0d 50       	subi	r16, 0x0D	; 13
    57a8:	1f 4f       	sbci	r17, 0xFF	; 255
    57aa:	fe 01       	movw	r30, r28
    57ac:	eb 50       	subi	r30, 0x0B	; 11
    57ae:	ff 4f       	sbci	r31, 0xFF	; 255
    57b0:	60 81       	ld	r22, Z
    57b2:	71 81       	ldd	r23, Z+1	; 0x01
    57b4:	82 81       	ldd	r24, Z+2	; 0x02
    57b6:	93 81       	ldd	r25, Z+3	; 0x03
    57b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    57bc:	dc 01       	movw	r26, r24
    57be:	cb 01       	movw	r24, r22
    57c0:	f8 01       	movw	r30, r16
    57c2:	91 83       	std	Z+1, r25	; 0x01
    57c4:	80 83       	st	Z, r24
    57c6:	de 01       	movw	r26, r28
    57c8:	a1 51       	subi	r26, 0x11	; 17
    57ca:	bf 4f       	sbci	r27, 0xFF	; 255
    57cc:	fe 01       	movw	r30, r28
    57ce:	ed 50       	subi	r30, 0x0D	; 13
    57d0:	ff 4f       	sbci	r31, 0xFF	; 255
    57d2:	80 81       	ld	r24, Z
    57d4:	91 81       	ldd	r25, Z+1	; 0x01
    57d6:	8d 93       	st	X+, r24
    57d8:	9c 93       	st	X, r25
    57da:	fe 01       	movw	r30, r28
    57dc:	e1 51       	subi	r30, 0x11	; 17
    57de:	ff 4f       	sbci	r31, 0xFF	; 255
    57e0:	80 81       	ld	r24, Z
    57e2:	91 81       	ldd	r25, Z+1	; 0x01
    57e4:	01 97       	sbiw	r24, 0x01	; 1
    57e6:	f1 f7       	brne	.-4      	; 0x57e4 <Segment_init+0x73c>
    57e8:	fe 01       	movw	r30, r28
    57ea:	e1 51       	subi	r30, 0x11	; 17
    57ec:	ff 4f       	sbci	r31, 0xFF	; 255
    57ee:	91 83       	std	Z+1, r25	; 0x01
    57f0:	80 83       	st	Z, r24
			_delay_ms(2);
			DIO_voidSetPinValue(GPIOA_BASE,PIN2_ID,LOW);
    57f2:	89 e3       	ldi	r24, 0x39	; 57
    57f4:	90 e0       	ldi	r25, 0x00	; 0
    57f6:	62 e0       	ldi	r22, 0x02	; 2
    57f8:	40 e0       	ldi	r20, 0x00	; 0
    57fa:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    57fe:	fe 01       	movw	r30, r28
    5800:	e5 51       	subi	r30, 0x15	; 21
    5802:	ff 4f       	sbci	r31, 0xFF	; 255
    5804:	80 e0       	ldi	r24, 0x00	; 0
    5806:	90 e0       	ldi	r25, 0x00	; 0
    5808:	a0 e0       	ldi	r26, 0x00	; 0
    580a:	b0 e4       	ldi	r27, 0x40	; 64
    580c:	80 83       	st	Z, r24
    580e:	91 83       	std	Z+1, r25	; 0x01
    5810:	a2 83       	std	Z+2, r26	; 0x02
    5812:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5814:	8e 01       	movw	r16, r28
    5816:	09 51       	subi	r16, 0x19	; 25
    5818:	1f 4f       	sbci	r17, 0xFF	; 255
    581a:	fe 01       	movw	r30, r28
    581c:	e5 51       	subi	r30, 0x15	; 21
    581e:	ff 4f       	sbci	r31, 0xFF	; 255
    5820:	60 81       	ld	r22, Z
    5822:	71 81       	ldd	r23, Z+1	; 0x01
    5824:	82 81       	ldd	r24, Z+2	; 0x02
    5826:	93 81       	ldd	r25, Z+3	; 0x03
    5828:	20 e0       	ldi	r18, 0x00	; 0
    582a:	30 e0       	ldi	r19, 0x00	; 0
    582c:	4a e7       	ldi	r20, 0x7A	; 122
    582e:	55 e4       	ldi	r21, 0x45	; 69
    5830:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5834:	dc 01       	movw	r26, r24
    5836:	cb 01       	movw	r24, r22
    5838:	f8 01       	movw	r30, r16
    583a:	80 83       	st	Z, r24
    583c:	91 83       	std	Z+1, r25	; 0x01
    583e:	a2 83       	std	Z+2, r26	; 0x02
    5840:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5842:	fe 01       	movw	r30, r28
    5844:	e9 51       	subi	r30, 0x19	; 25
    5846:	ff 4f       	sbci	r31, 0xFF	; 255
    5848:	60 81       	ld	r22, Z
    584a:	71 81       	ldd	r23, Z+1	; 0x01
    584c:	82 81       	ldd	r24, Z+2	; 0x02
    584e:	93 81       	ldd	r25, Z+3	; 0x03
    5850:	20 e0       	ldi	r18, 0x00	; 0
    5852:	30 e0       	ldi	r19, 0x00	; 0
    5854:	40 e8       	ldi	r20, 0x80	; 128
    5856:	5f e3       	ldi	r21, 0x3F	; 63
    5858:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    585c:	88 23       	and	r24, r24
    585e:	44 f4       	brge	.+16     	; 0x5870 <Segment_init+0x7c8>
		__ticks = 1;
    5860:	fe 01       	movw	r30, r28
    5862:	eb 51       	subi	r30, 0x1B	; 27
    5864:	ff 4f       	sbci	r31, 0xFF	; 255
    5866:	81 e0       	ldi	r24, 0x01	; 1
    5868:	90 e0       	ldi	r25, 0x00	; 0
    586a:	91 83       	std	Z+1, r25	; 0x01
    586c:	80 83       	st	Z, r24
    586e:	64 c0       	rjmp	.+200    	; 0x5938 <Segment_init+0x890>
	else if (__tmp > 65535)
    5870:	fe 01       	movw	r30, r28
    5872:	e9 51       	subi	r30, 0x19	; 25
    5874:	ff 4f       	sbci	r31, 0xFF	; 255
    5876:	60 81       	ld	r22, Z
    5878:	71 81       	ldd	r23, Z+1	; 0x01
    587a:	82 81       	ldd	r24, Z+2	; 0x02
    587c:	93 81       	ldd	r25, Z+3	; 0x03
    587e:	20 e0       	ldi	r18, 0x00	; 0
    5880:	3f ef       	ldi	r19, 0xFF	; 255
    5882:	4f e7       	ldi	r20, 0x7F	; 127
    5884:	57 e4       	ldi	r21, 0x47	; 71
    5886:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    588a:	18 16       	cp	r1, r24
    588c:	0c f0       	brlt	.+2      	; 0x5890 <Segment_init+0x7e8>
    588e:	43 c0       	rjmp	.+134    	; 0x5916 <Segment_init+0x86e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5890:	fe 01       	movw	r30, r28
    5892:	e5 51       	subi	r30, 0x15	; 21
    5894:	ff 4f       	sbci	r31, 0xFF	; 255
    5896:	60 81       	ld	r22, Z
    5898:	71 81       	ldd	r23, Z+1	; 0x01
    589a:	82 81       	ldd	r24, Z+2	; 0x02
    589c:	93 81       	ldd	r25, Z+3	; 0x03
    589e:	20 e0       	ldi	r18, 0x00	; 0
    58a0:	30 e0       	ldi	r19, 0x00	; 0
    58a2:	40 e2       	ldi	r20, 0x20	; 32
    58a4:	51 e4       	ldi	r21, 0x41	; 65
    58a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    58aa:	dc 01       	movw	r26, r24
    58ac:	cb 01       	movw	r24, r22
    58ae:	8e 01       	movw	r16, r28
    58b0:	0b 51       	subi	r16, 0x1B	; 27
    58b2:	1f 4f       	sbci	r17, 0xFF	; 255
    58b4:	bc 01       	movw	r22, r24
    58b6:	cd 01       	movw	r24, r26
    58b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    58bc:	dc 01       	movw	r26, r24
    58be:	cb 01       	movw	r24, r22
    58c0:	f8 01       	movw	r30, r16
    58c2:	91 83       	std	Z+1, r25	; 0x01
    58c4:	80 83       	st	Z, r24
    58c6:	1f c0       	rjmp	.+62     	; 0x5906 <Segment_init+0x85e>
    58c8:	fe 01       	movw	r30, r28
    58ca:	ed 51       	subi	r30, 0x1D	; 29
    58cc:	ff 4f       	sbci	r31, 0xFF	; 255
    58ce:	80 e9       	ldi	r24, 0x90	; 144
    58d0:	91 e0       	ldi	r25, 0x01	; 1
    58d2:	91 83       	std	Z+1, r25	; 0x01
    58d4:	80 83       	st	Z, r24
    58d6:	fe 01       	movw	r30, r28
    58d8:	ed 51       	subi	r30, 0x1D	; 29
    58da:	ff 4f       	sbci	r31, 0xFF	; 255
    58dc:	80 81       	ld	r24, Z
    58de:	91 81       	ldd	r25, Z+1	; 0x01
    58e0:	01 97       	sbiw	r24, 0x01	; 1
    58e2:	f1 f7       	brne	.-4      	; 0x58e0 <Segment_init+0x838>
    58e4:	fe 01       	movw	r30, r28
    58e6:	ed 51       	subi	r30, 0x1D	; 29
    58e8:	ff 4f       	sbci	r31, 0xFF	; 255
    58ea:	91 83       	std	Z+1, r25	; 0x01
    58ec:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    58ee:	de 01       	movw	r26, r28
    58f0:	ab 51       	subi	r26, 0x1B	; 27
    58f2:	bf 4f       	sbci	r27, 0xFF	; 255
    58f4:	fe 01       	movw	r30, r28
    58f6:	eb 51       	subi	r30, 0x1B	; 27
    58f8:	ff 4f       	sbci	r31, 0xFF	; 255
    58fa:	80 81       	ld	r24, Z
    58fc:	91 81       	ldd	r25, Z+1	; 0x01
    58fe:	01 97       	sbiw	r24, 0x01	; 1
    5900:	11 96       	adiw	r26, 0x01	; 1
    5902:	9c 93       	st	X, r25
    5904:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5906:	fe 01       	movw	r30, r28
    5908:	eb 51       	subi	r30, 0x1B	; 27
    590a:	ff 4f       	sbci	r31, 0xFF	; 255
    590c:	80 81       	ld	r24, Z
    590e:	91 81       	ldd	r25, Z+1	; 0x01
    5910:	00 97       	sbiw	r24, 0x00	; 0
    5912:	d1 f6       	brne	.-76     	; 0x58c8 <Segment_init+0x820>
    5914:	27 c0       	rjmp	.+78     	; 0x5964 <Segment_init+0x8bc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5916:	8e 01       	movw	r16, r28
    5918:	0b 51       	subi	r16, 0x1B	; 27
    591a:	1f 4f       	sbci	r17, 0xFF	; 255
    591c:	fe 01       	movw	r30, r28
    591e:	e9 51       	subi	r30, 0x19	; 25
    5920:	ff 4f       	sbci	r31, 0xFF	; 255
    5922:	60 81       	ld	r22, Z
    5924:	71 81       	ldd	r23, Z+1	; 0x01
    5926:	82 81       	ldd	r24, Z+2	; 0x02
    5928:	93 81       	ldd	r25, Z+3	; 0x03
    592a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    592e:	dc 01       	movw	r26, r24
    5930:	cb 01       	movw	r24, r22
    5932:	f8 01       	movw	r30, r16
    5934:	91 83       	std	Z+1, r25	; 0x01
    5936:	80 83       	st	Z, r24
    5938:	de 01       	movw	r26, r28
    593a:	af 51       	subi	r26, 0x1F	; 31
    593c:	bf 4f       	sbci	r27, 0xFF	; 255
    593e:	fe 01       	movw	r30, r28
    5940:	eb 51       	subi	r30, 0x1B	; 27
    5942:	ff 4f       	sbci	r31, 0xFF	; 255
    5944:	80 81       	ld	r24, Z
    5946:	91 81       	ldd	r25, Z+1	; 0x01
    5948:	8d 93       	st	X+, r24
    594a:	9c 93       	st	X, r25
    594c:	fe 01       	movw	r30, r28
    594e:	ef 51       	subi	r30, 0x1F	; 31
    5950:	ff 4f       	sbci	r31, 0xFF	; 255
    5952:	80 81       	ld	r24, Z
    5954:	91 81       	ldd	r25, Z+1	; 0x01
    5956:	01 97       	sbiw	r24, 0x01	; 1
    5958:	f1 f7       	brne	.-4      	; 0x5956 <Segment_init+0x8ae>
    595a:	fe 01       	movw	r30, r28
    595c:	ef 51       	subi	r30, 0x1F	; 31
    595e:	ff 4f       	sbci	r31, 0xFF	; 255
    5960:	91 83       	std	Z+1, r25	; 0x01
    5962:	80 83       	st	Z, r24
			_delay_ms(2);
			DIO_voidSetPinValue(GPIOB_BASE,PIN5_ID,HIGH);
    5964:	86 e3       	ldi	r24, 0x36	; 54
    5966:	90 e0       	ldi	r25, 0x00	; 0
    5968:	65 e0       	ldi	r22, 0x05	; 5
    596a:	41 e0       	ldi	r20, 0x01	; 1
    596c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    5970:	fe 01       	movw	r30, r28
    5972:	e3 52       	subi	r30, 0x23	; 35
    5974:	ff 4f       	sbci	r31, 0xFF	; 255
    5976:	80 e0       	ldi	r24, 0x00	; 0
    5978:	90 e0       	ldi	r25, 0x00	; 0
    597a:	a0 e0       	ldi	r26, 0x00	; 0
    597c:	b0 e4       	ldi	r27, 0x40	; 64
    597e:	80 83       	st	Z, r24
    5980:	91 83       	std	Z+1, r25	; 0x01
    5982:	a2 83       	std	Z+2, r26	; 0x02
    5984:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5986:	8e 01       	movw	r16, r28
    5988:	07 52       	subi	r16, 0x27	; 39
    598a:	1f 4f       	sbci	r17, 0xFF	; 255
    598c:	fe 01       	movw	r30, r28
    598e:	e3 52       	subi	r30, 0x23	; 35
    5990:	ff 4f       	sbci	r31, 0xFF	; 255
    5992:	60 81       	ld	r22, Z
    5994:	71 81       	ldd	r23, Z+1	; 0x01
    5996:	82 81       	ldd	r24, Z+2	; 0x02
    5998:	93 81       	ldd	r25, Z+3	; 0x03
    599a:	20 e0       	ldi	r18, 0x00	; 0
    599c:	30 e0       	ldi	r19, 0x00	; 0
    599e:	4a e7       	ldi	r20, 0x7A	; 122
    59a0:	55 e4       	ldi	r21, 0x45	; 69
    59a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    59a6:	dc 01       	movw	r26, r24
    59a8:	cb 01       	movw	r24, r22
    59aa:	f8 01       	movw	r30, r16
    59ac:	80 83       	st	Z, r24
    59ae:	91 83       	std	Z+1, r25	; 0x01
    59b0:	a2 83       	std	Z+2, r26	; 0x02
    59b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    59b4:	fe 01       	movw	r30, r28
    59b6:	e7 52       	subi	r30, 0x27	; 39
    59b8:	ff 4f       	sbci	r31, 0xFF	; 255
    59ba:	60 81       	ld	r22, Z
    59bc:	71 81       	ldd	r23, Z+1	; 0x01
    59be:	82 81       	ldd	r24, Z+2	; 0x02
    59c0:	93 81       	ldd	r25, Z+3	; 0x03
    59c2:	20 e0       	ldi	r18, 0x00	; 0
    59c4:	30 e0       	ldi	r19, 0x00	; 0
    59c6:	40 e8       	ldi	r20, 0x80	; 128
    59c8:	5f e3       	ldi	r21, 0x3F	; 63
    59ca:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    59ce:	88 23       	and	r24, r24
    59d0:	44 f4       	brge	.+16     	; 0x59e2 <Segment_init+0x93a>
		__ticks = 1;
    59d2:	fe 01       	movw	r30, r28
    59d4:	e9 52       	subi	r30, 0x29	; 41
    59d6:	ff 4f       	sbci	r31, 0xFF	; 255
    59d8:	81 e0       	ldi	r24, 0x01	; 1
    59da:	90 e0       	ldi	r25, 0x00	; 0
    59dc:	91 83       	std	Z+1, r25	; 0x01
    59de:	80 83       	st	Z, r24
    59e0:	64 c0       	rjmp	.+200    	; 0x5aaa <Segment_init+0xa02>
	else if (__tmp > 65535)
    59e2:	fe 01       	movw	r30, r28
    59e4:	e7 52       	subi	r30, 0x27	; 39
    59e6:	ff 4f       	sbci	r31, 0xFF	; 255
    59e8:	60 81       	ld	r22, Z
    59ea:	71 81       	ldd	r23, Z+1	; 0x01
    59ec:	82 81       	ldd	r24, Z+2	; 0x02
    59ee:	93 81       	ldd	r25, Z+3	; 0x03
    59f0:	20 e0       	ldi	r18, 0x00	; 0
    59f2:	3f ef       	ldi	r19, 0xFF	; 255
    59f4:	4f e7       	ldi	r20, 0x7F	; 127
    59f6:	57 e4       	ldi	r21, 0x47	; 71
    59f8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    59fc:	18 16       	cp	r1, r24
    59fe:	0c f0       	brlt	.+2      	; 0x5a02 <Segment_init+0x95a>
    5a00:	43 c0       	rjmp	.+134    	; 0x5a88 <Segment_init+0x9e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5a02:	fe 01       	movw	r30, r28
    5a04:	e3 52       	subi	r30, 0x23	; 35
    5a06:	ff 4f       	sbci	r31, 0xFF	; 255
    5a08:	60 81       	ld	r22, Z
    5a0a:	71 81       	ldd	r23, Z+1	; 0x01
    5a0c:	82 81       	ldd	r24, Z+2	; 0x02
    5a0e:	93 81       	ldd	r25, Z+3	; 0x03
    5a10:	20 e0       	ldi	r18, 0x00	; 0
    5a12:	30 e0       	ldi	r19, 0x00	; 0
    5a14:	40 e2       	ldi	r20, 0x20	; 32
    5a16:	51 e4       	ldi	r21, 0x41	; 65
    5a18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5a1c:	dc 01       	movw	r26, r24
    5a1e:	cb 01       	movw	r24, r22
    5a20:	8e 01       	movw	r16, r28
    5a22:	09 52       	subi	r16, 0x29	; 41
    5a24:	1f 4f       	sbci	r17, 0xFF	; 255
    5a26:	bc 01       	movw	r22, r24
    5a28:	cd 01       	movw	r24, r26
    5a2a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5a2e:	dc 01       	movw	r26, r24
    5a30:	cb 01       	movw	r24, r22
    5a32:	f8 01       	movw	r30, r16
    5a34:	91 83       	std	Z+1, r25	; 0x01
    5a36:	80 83       	st	Z, r24
    5a38:	1f c0       	rjmp	.+62     	; 0x5a78 <Segment_init+0x9d0>
    5a3a:	fe 01       	movw	r30, r28
    5a3c:	eb 52       	subi	r30, 0x2B	; 43
    5a3e:	ff 4f       	sbci	r31, 0xFF	; 255
    5a40:	80 e9       	ldi	r24, 0x90	; 144
    5a42:	91 e0       	ldi	r25, 0x01	; 1
    5a44:	91 83       	std	Z+1, r25	; 0x01
    5a46:	80 83       	st	Z, r24
    5a48:	fe 01       	movw	r30, r28
    5a4a:	eb 52       	subi	r30, 0x2B	; 43
    5a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a4e:	80 81       	ld	r24, Z
    5a50:	91 81       	ldd	r25, Z+1	; 0x01
    5a52:	01 97       	sbiw	r24, 0x01	; 1
    5a54:	f1 f7       	brne	.-4      	; 0x5a52 <Segment_init+0x9aa>
    5a56:	fe 01       	movw	r30, r28
    5a58:	eb 52       	subi	r30, 0x2B	; 43
    5a5a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a5c:	91 83       	std	Z+1, r25	; 0x01
    5a5e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5a60:	de 01       	movw	r26, r28
    5a62:	a9 52       	subi	r26, 0x29	; 41
    5a64:	bf 4f       	sbci	r27, 0xFF	; 255
    5a66:	fe 01       	movw	r30, r28
    5a68:	e9 52       	subi	r30, 0x29	; 41
    5a6a:	ff 4f       	sbci	r31, 0xFF	; 255
    5a6c:	80 81       	ld	r24, Z
    5a6e:	91 81       	ldd	r25, Z+1	; 0x01
    5a70:	01 97       	sbiw	r24, 0x01	; 1
    5a72:	11 96       	adiw	r26, 0x01	; 1
    5a74:	9c 93       	st	X, r25
    5a76:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5a78:	fe 01       	movw	r30, r28
    5a7a:	e9 52       	subi	r30, 0x29	; 41
    5a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    5a7e:	80 81       	ld	r24, Z
    5a80:	91 81       	ldd	r25, Z+1	; 0x01
    5a82:	00 97       	sbiw	r24, 0x00	; 0
    5a84:	d1 f6       	brne	.-76     	; 0x5a3a <Segment_init+0x992>
    5a86:	27 c0       	rjmp	.+78     	; 0x5ad6 <Segment_init+0xa2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5a88:	8e 01       	movw	r16, r28
    5a8a:	09 52       	subi	r16, 0x29	; 41
    5a8c:	1f 4f       	sbci	r17, 0xFF	; 255
    5a8e:	fe 01       	movw	r30, r28
    5a90:	e7 52       	subi	r30, 0x27	; 39
    5a92:	ff 4f       	sbci	r31, 0xFF	; 255
    5a94:	60 81       	ld	r22, Z
    5a96:	71 81       	ldd	r23, Z+1	; 0x01
    5a98:	82 81       	ldd	r24, Z+2	; 0x02
    5a9a:	93 81       	ldd	r25, Z+3	; 0x03
    5a9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5aa0:	dc 01       	movw	r26, r24
    5aa2:	cb 01       	movw	r24, r22
    5aa4:	f8 01       	movw	r30, r16
    5aa6:	91 83       	std	Z+1, r25	; 0x01
    5aa8:	80 83       	st	Z, r24
    5aaa:	de 01       	movw	r26, r28
    5aac:	ad 52       	subi	r26, 0x2D	; 45
    5aae:	bf 4f       	sbci	r27, 0xFF	; 255
    5ab0:	fe 01       	movw	r30, r28
    5ab2:	e9 52       	subi	r30, 0x29	; 41
    5ab4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ab6:	80 81       	ld	r24, Z
    5ab8:	91 81       	ldd	r25, Z+1	; 0x01
    5aba:	8d 93       	st	X+, r24
    5abc:	9c 93       	st	X, r25
    5abe:	fe 01       	movw	r30, r28
    5ac0:	ed 52       	subi	r30, 0x2D	; 45
    5ac2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ac4:	80 81       	ld	r24, Z
    5ac6:	91 81       	ldd	r25, Z+1	; 0x01
    5ac8:	01 97       	sbiw	r24, 0x01	; 1
    5aca:	f1 f7       	brne	.-4      	; 0x5ac8 <Segment_init+0xa20>
    5acc:	fe 01       	movw	r30, r28
    5ace:	ed 52       	subi	r30, 0x2D	; 45
    5ad0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ad2:	91 83       	std	Z+1, r25	; 0x01
    5ad4:	80 83       	st	Z, r24
			_delay_ms(2);
			DIO_voidSetPinValue(GPIOB_BASE,PIN6_ID,HIGH);
    5ad6:	86 e3       	ldi	r24, 0x36	; 54
    5ad8:	90 e0       	ldi	r25, 0x00	; 0
    5ada:	66 e0       	ldi	r22, 0x06	; 6
    5adc:	41 e0       	ldi	r20, 0x01	; 1
    5ade:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    5ae2:	0c 94 3b 37 	jmp	0x6e76	; 0x6e76 <Segment_init+0x1dce>
			break;
	case THREE_SEGs:
			DIO_voidSetPinValue(GPIOA_BASE,PIN3_ID,LOW);
    5ae6:	89 e3       	ldi	r24, 0x39	; 57
    5ae8:	90 e0       	ldi	r25, 0x00	; 0
    5aea:	63 e0       	ldi	r22, 0x03	; 3
    5aec:	40 e0       	ldi	r20, 0x00	; 0
    5aee:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    5af2:	fe 01       	movw	r30, r28
    5af4:	e1 53       	subi	r30, 0x31	; 49
    5af6:	ff 4f       	sbci	r31, 0xFF	; 255
    5af8:	80 e0       	ldi	r24, 0x00	; 0
    5afa:	90 e0       	ldi	r25, 0x00	; 0
    5afc:	a0 e0       	ldi	r26, 0x00	; 0
    5afe:	b0 e4       	ldi	r27, 0x40	; 64
    5b00:	80 83       	st	Z, r24
    5b02:	91 83       	std	Z+1, r25	; 0x01
    5b04:	a2 83       	std	Z+2, r26	; 0x02
    5b06:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5b08:	8e 01       	movw	r16, r28
    5b0a:	05 53       	subi	r16, 0x35	; 53
    5b0c:	1f 4f       	sbci	r17, 0xFF	; 255
    5b0e:	fe 01       	movw	r30, r28
    5b10:	e1 53       	subi	r30, 0x31	; 49
    5b12:	ff 4f       	sbci	r31, 0xFF	; 255
    5b14:	60 81       	ld	r22, Z
    5b16:	71 81       	ldd	r23, Z+1	; 0x01
    5b18:	82 81       	ldd	r24, Z+2	; 0x02
    5b1a:	93 81       	ldd	r25, Z+3	; 0x03
    5b1c:	20 e0       	ldi	r18, 0x00	; 0
    5b1e:	30 e0       	ldi	r19, 0x00	; 0
    5b20:	4a e7       	ldi	r20, 0x7A	; 122
    5b22:	55 e4       	ldi	r21, 0x45	; 69
    5b24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b28:	dc 01       	movw	r26, r24
    5b2a:	cb 01       	movw	r24, r22
    5b2c:	f8 01       	movw	r30, r16
    5b2e:	80 83       	st	Z, r24
    5b30:	91 83       	std	Z+1, r25	; 0x01
    5b32:	a2 83       	std	Z+2, r26	; 0x02
    5b34:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5b36:	fe 01       	movw	r30, r28
    5b38:	e5 53       	subi	r30, 0x35	; 53
    5b3a:	ff 4f       	sbci	r31, 0xFF	; 255
    5b3c:	60 81       	ld	r22, Z
    5b3e:	71 81       	ldd	r23, Z+1	; 0x01
    5b40:	82 81       	ldd	r24, Z+2	; 0x02
    5b42:	93 81       	ldd	r25, Z+3	; 0x03
    5b44:	20 e0       	ldi	r18, 0x00	; 0
    5b46:	30 e0       	ldi	r19, 0x00	; 0
    5b48:	40 e8       	ldi	r20, 0x80	; 128
    5b4a:	5f e3       	ldi	r21, 0x3F	; 63
    5b4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5b50:	88 23       	and	r24, r24
    5b52:	44 f4       	brge	.+16     	; 0x5b64 <Segment_init+0xabc>
		__ticks = 1;
    5b54:	fe 01       	movw	r30, r28
    5b56:	e7 53       	subi	r30, 0x37	; 55
    5b58:	ff 4f       	sbci	r31, 0xFF	; 255
    5b5a:	81 e0       	ldi	r24, 0x01	; 1
    5b5c:	90 e0       	ldi	r25, 0x00	; 0
    5b5e:	91 83       	std	Z+1, r25	; 0x01
    5b60:	80 83       	st	Z, r24
    5b62:	64 c0       	rjmp	.+200    	; 0x5c2c <Segment_init+0xb84>
	else if (__tmp > 65535)
    5b64:	fe 01       	movw	r30, r28
    5b66:	e5 53       	subi	r30, 0x35	; 53
    5b68:	ff 4f       	sbci	r31, 0xFF	; 255
    5b6a:	60 81       	ld	r22, Z
    5b6c:	71 81       	ldd	r23, Z+1	; 0x01
    5b6e:	82 81       	ldd	r24, Z+2	; 0x02
    5b70:	93 81       	ldd	r25, Z+3	; 0x03
    5b72:	20 e0       	ldi	r18, 0x00	; 0
    5b74:	3f ef       	ldi	r19, 0xFF	; 255
    5b76:	4f e7       	ldi	r20, 0x7F	; 127
    5b78:	57 e4       	ldi	r21, 0x47	; 71
    5b7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5b7e:	18 16       	cp	r1, r24
    5b80:	0c f0       	brlt	.+2      	; 0x5b84 <Segment_init+0xadc>
    5b82:	43 c0       	rjmp	.+134    	; 0x5c0a <Segment_init+0xb62>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5b84:	fe 01       	movw	r30, r28
    5b86:	e1 53       	subi	r30, 0x31	; 49
    5b88:	ff 4f       	sbci	r31, 0xFF	; 255
    5b8a:	60 81       	ld	r22, Z
    5b8c:	71 81       	ldd	r23, Z+1	; 0x01
    5b8e:	82 81       	ldd	r24, Z+2	; 0x02
    5b90:	93 81       	ldd	r25, Z+3	; 0x03
    5b92:	20 e0       	ldi	r18, 0x00	; 0
    5b94:	30 e0       	ldi	r19, 0x00	; 0
    5b96:	40 e2       	ldi	r20, 0x20	; 32
    5b98:	51 e4       	ldi	r21, 0x41	; 65
    5b9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5b9e:	dc 01       	movw	r26, r24
    5ba0:	cb 01       	movw	r24, r22
    5ba2:	8e 01       	movw	r16, r28
    5ba4:	07 53       	subi	r16, 0x37	; 55
    5ba6:	1f 4f       	sbci	r17, 0xFF	; 255
    5ba8:	bc 01       	movw	r22, r24
    5baa:	cd 01       	movw	r24, r26
    5bac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5bb0:	dc 01       	movw	r26, r24
    5bb2:	cb 01       	movw	r24, r22
    5bb4:	f8 01       	movw	r30, r16
    5bb6:	91 83       	std	Z+1, r25	; 0x01
    5bb8:	80 83       	st	Z, r24
    5bba:	1f c0       	rjmp	.+62     	; 0x5bfa <Segment_init+0xb52>
    5bbc:	fe 01       	movw	r30, r28
    5bbe:	e9 53       	subi	r30, 0x39	; 57
    5bc0:	ff 4f       	sbci	r31, 0xFF	; 255
    5bc2:	80 e9       	ldi	r24, 0x90	; 144
    5bc4:	91 e0       	ldi	r25, 0x01	; 1
    5bc6:	91 83       	std	Z+1, r25	; 0x01
    5bc8:	80 83       	st	Z, r24
    5bca:	fe 01       	movw	r30, r28
    5bcc:	e9 53       	subi	r30, 0x39	; 57
    5bce:	ff 4f       	sbci	r31, 0xFF	; 255
    5bd0:	80 81       	ld	r24, Z
    5bd2:	91 81       	ldd	r25, Z+1	; 0x01
    5bd4:	01 97       	sbiw	r24, 0x01	; 1
    5bd6:	f1 f7       	brne	.-4      	; 0x5bd4 <Segment_init+0xb2c>
    5bd8:	fe 01       	movw	r30, r28
    5bda:	e9 53       	subi	r30, 0x39	; 57
    5bdc:	ff 4f       	sbci	r31, 0xFF	; 255
    5bde:	91 83       	std	Z+1, r25	; 0x01
    5be0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5be2:	de 01       	movw	r26, r28
    5be4:	a7 53       	subi	r26, 0x37	; 55
    5be6:	bf 4f       	sbci	r27, 0xFF	; 255
    5be8:	fe 01       	movw	r30, r28
    5bea:	e7 53       	subi	r30, 0x37	; 55
    5bec:	ff 4f       	sbci	r31, 0xFF	; 255
    5bee:	80 81       	ld	r24, Z
    5bf0:	91 81       	ldd	r25, Z+1	; 0x01
    5bf2:	01 97       	sbiw	r24, 0x01	; 1
    5bf4:	11 96       	adiw	r26, 0x01	; 1
    5bf6:	9c 93       	st	X, r25
    5bf8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5bfa:	fe 01       	movw	r30, r28
    5bfc:	e7 53       	subi	r30, 0x37	; 55
    5bfe:	ff 4f       	sbci	r31, 0xFF	; 255
    5c00:	80 81       	ld	r24, Z
    5c02:	91 81       	ldd	r25, Z+1	; 0x01
    5c04:	00 97       	sbiw	r24, 0x00	; 0
    5c06:	d1 f6       	brne	.-76     	; 0x5bbc <Segment_init+0xb14>
    5c08:	27 c0       	rjmp	.+78     	; 0x5c58 <Segment_init+0xbb0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5c0a:	8e 01       	movw	r16, r28
    5c0c:	07 53       	subi	r16, 0x37	; 55
    5c0e:	1f 4f       	sbci	r17, 0xFF	; 255
    5c10:	fe 01       	movw	r30, r28
    5c12:	e5 53       	subi	r30, 0x35	; 53
    5c14:	ff 4f       	sbci	r31, 0xFF	; 255
    5c16:	60 81       	ld	r22, Z
    5c18:	71 81       	ldd	r23, Z+1	; 0x01
    5c1a:	82 81       	ldd	r24, Z+2	; 0x02
    5c1c:	93 81       	ldd	r25, Z+3	; 0x03
    5c1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5c22:	dc 01       	movw	r26, r24
    5c24:	cb 01       	movw	r24, r22
    5c26:	f8 01       	movw	r30, r16
    5c28:	91 83       	std	Z+1, r25	; 0x01
    5c2a:	80 83       	st	Z, r24
    5c2c:	de 01       	movw	r26, r28
    5c2e:	ab 53       	subi	r26, 0x3B	; 59
    5c30:	bf 4f       	sbci	r27, 0xFF	; 255
    5c32:	fe 01       	movw	r30, r28
    5c34:	e7 53       	subi	r30, 0x37	; 55
    5c36:	ff 4f       	sbci	r31, 0xFF	; 255
    5c38:	80 81       	ld	r24, Z
    5c3a:	91 81       	ldd	r25, Z+1	; 0x01
    5c3c:	8d 93       	st	X+, r24
    5c3e:	9c 93       	st	X, r25
    5c40:	fe 01       	movw	r30, r28
    5c42:	eb 53       	subi	r30, 0x3B	; 59
    5c44:	ff 4f       	sbci	r31, 0xFF	; 255
    5c46:	80 81       	ld	r24, Z
    5c48:	91 81       	ldd	r25, Z+1	; 0x01
    5c4a:	01 97       	sbiw	r24, 0x01	; 1
    5c4c:	f1 f7       	brne	.-4      	; 0x5c4a <Segment_init+0xba2>
    5c4e:	fe 01       	movw	r30, r28
    5c50:	eb 53       	subi	r30, 0x3B	; 59
    5c52:	ff 4f       	sbci	r31, 0xFF	; 255
    5c54:	91 83       	std	Z+1, r25	; 0x01
    5c56:	80 83       	st	Z, r24
			_delay_ms(2);
			DIO_voidSetPinValue(GPIOA_BASE,PIN2_ID,LOW);
    5c58:	89 e3       	ldi	r24, 0x39	; 57
    5c5a:	90 e0       	ldi	r25, 0x00	; 0
    5c5c:	62 e0       	ldi	r22, 0x02	; 2
    5c5e:	40 e0       	ldi	r20, 0x00	; 0
    5c60:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    5c64:	fe 01       	movw	r30, r28
    5c66:	ef 53       	subi	r30, 0x3F	; 63
    5c68:	ff 4f       	sbci	r31, 0xFF	; 255
    5c6a:	80 e0       	ldi	r24, 0x00	; 0
    5c6c:	90 e0       	ldi	r25, 0x00	; 0
    5c6e:	a0 e0       	ldi	r26, 0x00	; 0
    5c70:	b0 e4       	ldi	r27, 0x40	; 64
    5c72:	80 83       	st	Z, r24
    5c74:	91 83       	std	Z+1, r25	; 0x01
    5c76:	a2 83       	std	Z+2, r26	; 0x02
    5c78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5c7a:	8e 01       	movw	r16, r28
    5c7c:	03 54       	subi	r16, 0x43	; 67
    5c7e:	1f 4f       	sbci	r17, 0xFF	; 255
    5c80:	fe 01       	movw	r30, r28
    5c82:	ef 53       	subi	r30, 0x3F	; 63
    5c84:	ff 4f       	sbci	r31, 0xFF	; 255
    5c86:	60 81       	ld	r22, Z
    5c88:	71 81       	ldd	r23, Z+1	; 0x01
    5c8a:	82 81       	ldd	r24, Z+2	; 0x02
    5c8c:	93 81       	ldd	r25, Z+3	; 0x03
    5c8e:	20 e0       	ldi	r18, 0x00	; 0
    5c90:	30 e0       	ldi	r19, 0x00	; 0
    5c92:	4a e7       	ldi	r20, 0x7A	; 122
    5c94:	55 e4       	ldi	r21, 0x45	; 69
    5c96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5c9a:	dc 01       	movw	r26, r24
    5c9c:	cb 01       	movw	r24, r22
    5c9e:	f8 01       	movw	r30, r16
    5ca0:	80 83       	st	Z, r24
    5ca2:	91 83       	std	Z+1, r25	; 0x01
    5ca4:	a2 83       	std	Z+2, r26	; 0x02
    5ca6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5ca8:	fe 01       	movw	r30, r28
    5caa:	e3 54       	subi	r30, 0x43	; 67
    5cac:	ff 4f       	sbci	r31, 0xFF	; 255
    5cae:	60 81       	ld	r22, Z
    5cb0:	71 81       	ldd	r23, Z+1	; 0x01
    5cb2:	82 81       	ldd	r24, Z+2	; 0x02
    5cb4:	93 81       	ldd	r25, Z+3	; 0x03
    5cb6:	20 e0       	ldi	r18, 0x00	; 0
    5cb8:	30 e0       	ldi	r19, 0x00	; 0
    5cba:	40 e8       	ldi	r20, 0x80	; 128
    5cbc:	5f e3       	ldi	r21, 0x3F	; 63
    5cbe:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5cc2:	88 23       	and	r24, r24
    5cc4:	44 f4       	brge	.+16     	; 0x5cd6 <Segment_init+0xc2e>
		__ticks = 1;
    5cc6:	fe 01       	movw	r30, r28
    5cc8:	e5 54       	subi	r30, 0x45	; 69
    5cca:	ff 4f       	sbci	r31, 0xFF	; 255
    5ccc:	81 e0       	ldi	r24, 0x01	; 1
    5cce:	90 e0       	ldi	r25, 0x00	; 0
    5cd0:	91 83       	std	Z+1, r25	; 0x01
    5cd2:	80 83       	st	Z, r24
    5cd4:	64 c0       	rjmp	.+200    	; 0x5d9e <Segment_init+0xcf6>
	else if (__tmp > 65535)
    5cd6:	fe 01       	movw	r30, r28
    5cd8:	e3 54       	subi	r30, 0x43	; 67
    5cda:	ff 4f       	sbci	r31, 0xFF	; 255
    5cdc:	60 81       	ld	r22, Z
    5cde:	71 81       	ldd	r23, Z+1	; 0x01
    5ce0:	82 81       	ldd	r24, Z+2	; 0x02
    5ce2:	93 81       	ldd	r25, Z+3	; 0x03
    5ce4:	20 e0       	ldi	r18, 0x00	; 0
    5ce6:	3f ef       	ldi	r19, 0xFF	; 255
    5ce8:	4f e7       	ldi	r20, 0x7F	; 127
    5cea:	57 e4       	ldi	r21, 0x47	; 71
    5cec:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5cf0:	18 16       	cp	r1, r24
    5cf2:	0c f0       	brlt	.+2      	; 0x5cf6 <Segment_init+0xc4e>
    5cf4:	43 c0       	rjmp	.+134    	; 0x5d7c <Segment_init+0xcd4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5cf6:	fe 01       	movw	r30, r28
    5cf8:	ef 53       	subi	r30, 0x3F	; 63
    5cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    5cfc:	60 81       	ld	r22, Z
    5cfe:	71 81       	ldd	r23, Z+1	; 0x01
    5d00:	82 81       	ldd	r24, Z+2	; 0x02
    5d02:	93 81       	ldd	r25, Z+3	; 0x03
    5d04:	20 e0       	ldi	r18, 0x00	; 0
    5d06:	30 e0       	ldi	r19, 0x00	; 0
    5d08:	40 e2       	ldi	r20, 0x20	; 32
    5d0a:	51 e4       	ldi	r21, 0x41	; 65
    5d0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5d10:	dc 01       	movw	r26, r24
    5d12:	cb 01       	movw	r24, r22
    5d14:	8e 01       	movw	r16, r28
    5d16:	05 54       	subi	r16, 0x45	; 69
    5d18:	1f 4f       	sbci	r17, 0xFF	; 255
    5d1a:	bc 01       	movw	r22, r24
    5d1c:	cd 01       	movw	r24, r26
    5d1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d22:	dc 01       	movw	r26, r24
    5d24:	cb 01       	movw	r24, r22
    5d26:	f8 01       	movw	r30, r16
    5d28:	91 83       	std	Z+1, r25	; 0x01
    5d2a:	80 83       	st	Z, r24
    5d2c:	1f c0       	rjmp	.+62     	; 0x5d6c <Segment_init+0xcc4>
    5d2e:	fe 01       	movw	r30, r28
    5d30:	e7 54       	subi	r30, 0x47	; 71
    5d32:	ff 4f       	sbci	r31, 0xFF	; 255
    5d34:	80 e9       	ldi	r24, 0x90	; 144
    5d36:	91 e0       	ldi	r25, 0x01	; 1
    5d38:	91 83       	std	Z+1, r25	; 0x01
    5d3a:	80 83       	st	Z, r24
    5d3c:	fe 01       	movw	r30, r28
    5d3e:	e7 54       	subi	r30, 0x47	; 71
    5d40:	ff 4f       	sbci	r31, 0xFF	; 255
    5d42:	80 81       	ld	r24, Z
    5d44:	91 81       	ldd	r25, Z+1	; 0x01
    5d46:	01 97       	sbiw	r24, 0x01	; 1
    5d48:	f1 f7       	brne	.-4      	; 0x5d46 <Segment_init+0xc9e>
    5d4a:	fe 01       	movw	r30, r28
    5d4c:	e7 54       	subi	r30, 0x47	; 71
    5d4e:	ff 4f       	sbci	r31, 0xFF	; 255
    5d50:	91 83       	std	Z+1, r25	; 0x01
    5d52:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5d54:	de 01       	movw	r26, r28
    5d56:	a5 54       	subi	r26, 0x45	; 69
    5d58:	bf 4f       	sbci	r27, 0xFF	; 255
    5d5a:	fe 01       	movw	r30, r28
    5d5c:	e5 54       	subi	r30, 0x45	; 69
    5d5e:	ff 4f       	sbci	r31, 0xFF	; 255
    5d60:	80 81       	ld	r24, Z
    5d62:	91 81       	ldd	r25, Z+1	; 0x01
    5d64:	01 97       	sbiw	r24, 0x01	; 1
    5d66:	11 96       	adiw	r26, 0x01	; 1
    5d68:	9c 93       	st	X, r25
    5d6a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5d6c:	fe 01       	movw	r30, r28
    5d6e:	e5 54       	subi	r30, 0x45	; 69
    5d70:	ff 4f       	sbci	r31, 0xFF	; 255
    5d72:	80 81       	ld	r24, Z
    5d74:	91 81       	ldd	r25, Z+1	; 0x01
    5d76:	00 97       	sbiw	r24, 0x00	; 0
    5d78:	d1 f6       	brne	.-76     	; 0x5d2e <Segment_init+0xc86>
    5d7a:	27 c0       	rjmp	.+78     	; 0x5dca <Segment_init+0xd22>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5d7c:	8e 01       	movw	r16, r28
    5d7e:	05 54       	subi	r16, 0x45	; 69
    5d80:	1f 4f       	sbci	r17, 0xFF	; 255
    5d82:	fe 01       	movw	r30, r28
    5d84:	e3 54       	subi	r30, 0x43	; 67
    5d86:	ff 4f       	sbci	r31, 0xFF	; 255
    5d88:	60 81       	ld	r22, Z
    5d8a:	71 81       	ldd	r23, Z+1	; 0x01
    5d8c:	82 81       	ldd	r24, Z+2	; 0x02
    5d8e:	93 81       	ldd	r25, Z+3	; 0x03
    5d90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5d94:	dc 01       	movw	r26, r24
    5d96:	cb 01       	movw	r24, r22
    5d98:	f8 01       	movw	r30, r16
    5d9a:	91 83       	std	Z+1, r25	; 0x01
    5d9c:	80 83       	st	Z, r24
    5d9e:	de 01       	movw	r26, r28
    5da0:	a9 54       	subi	r26, 0x49	; 73
    5da2:	bf 4f       	sbci	r27, 0xFF	; 255
    5da4:	fe 01       	movw	r30, r28
    5da6:	e5 54       	subi	r30, 0x45	; 69
    5da8:	ff 4f       	sbci	r31, 0xFF	; 255
    5daa:	80 81       	ld	r24, Z
    5dac:	91 81       	ldd	r25, Z+1	; 0x01
    5dae:	8d 93       	st	X+, r24
    5db0:	9c 93       	st	X, r25
    5db2:	fe 01       	movw	r30, r28
    5db4:	e9 54       	subi	r30, 0x49	; 73
    5db6:	ff 4f       	sbci	r31, 0xFF	; 255
    5db8:	80 81       	ld	r24, Z
    5dba:	91 81       	ldd	r25, Z+1	; 0x01
    5dbc:	01 97       	sbiw	r24, 0x01	; 1
    5dbe:	f1 f7       	brne	.-4      	; 0x5dbc <Segment_init+0xd14>
    5dc0:	fe 01       	movw	r30, r28
    5dc2:	e9 54       	subi	r30, 0x49	; 73
    5dc4:	ff 4f       	sbci	r31, 0xFF	; 255
    5dc6:	91 83       	std	Z+1, r25	; 0x01
    5dc8:	80 83       	st	Z, r24
			_delay_ms(2);
			DIO_voidSetPinValue(GPIOB_BASE,PIN5_ID,LOW);
    5dca:	86 e3       	ldi	r24, 0x36	; 54
    5dcc:	90 e0       	ldi	r25, 0x00	; 0
    5dce:	65 e0       	ldi	r22, 0x05	; 5
    5dd0:	40 e0       	ldi	r20, 0x00	; 0
    5dd2:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    5dd6:	fe 01       	movw	r30, r28
    5dd8:	ed 54       	subi	r30, 0x4D	; 77
    5dda:	ff 4f       	sbci	r31, 0xFF	; 255
    5ddc:	80 e0       	ldi	r24, 0x00	; 0
    5dde:	90 e0       	ldi	r25, 0x00	; 0
    5de0:	a0 e0       	ldi	r26, 0x00	; 0
    5de2:	b0 e4       	ldi	r27, 0x40	; 64
    5de4:	80 83       	st	Z, r24
    5de6:	91 83       	std	Z+1, r25	; 0x01
    5de8:	a2 83       	std	Z+2, r26	; 0x02
    5dea:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5dec:	8e 01       	movw	r16, r28
    5dee:	01 55       	subi	r16, 0x51	; 81
    5df0:	1f 4f       	sbci	r17, 0xFF	; 255
    5df2:	fe 01       	movw	r30, r28
    5df4:	ed 54       	subi	r30, 0x4D	; 77
    5df6:	ff 4f       	sbci	r31, 0xFF	; 255
    5df8:	60 81       	ld	r22, Z
    5dfa:	71 81       	ldd	r23, Z+1	; 0x01
    5dfc:	82 81       	ldd	r24, Z+2	; 0x02
    5dfe:	93 81       	ldd	r25, Z+3	; 0x03
    5e00:	20 e0       	ldi	r18, 0x00	; 0
    5e02:	30 e0       	ldi	r19, 0x00	; 0
    5e04:	4a e7       	ldi	r20, 0x7A	; 122
    5e06:	55 e4       	ldi	r21, 0x45	; 69
    5e08:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e0c:	dc 01       	movw	r26, r24
    5e0e:	cb 01       	movw	r24, r22
    5e10:	f8 01       	movw	r30, r16
    5e12:	80 83       	st	Z, r24
    5e14:	91 83       	std	Z+1, r25	; 0x01
    5e16:	a2 83       	std	Z+2, r26	; 0x02
    5e18:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5e1a:	fe 01       	movw	r30, r28
    5e1c:	e1 55       	subi	r30, 0x51	; 81
    5e1e:	ff 4f       	sbci	r31, 0xFF	; 255
    5e20:	60 81       	ld	r22, Z
    5e22:	71 81       	ldd	r23, Z+1	; 0x01
    5e24:	82 81       	ldd	r24, Z+2	; 0x02
    5e26:	93 81       	ldd	r25, Z+3	; 0x03
    5e28:	20 e0       	ldi	r18, 0x00	; 0
    5e2a:	30 e0       	ldi	r19, 0x00	; 0
    5e2c:	40 e8       	ldi	r20, 0x80	; 128
    5e2e:	5f e3       	ldi	r21, 0x3F	; 63
    5e30:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5e34:	88 23       	and	r24, r24
    5e36:	44 f4       	brge	.+16     	; 0x5e48 <Segment_init+0xda0>
		__ticks = 1;
    5e38:	fe 01       	movw	r30, r28
    5e3a:	e3 55       	subi	r30, 0x53	; 83
    5e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e3e:	81 e0       	ldi	r24, 0x01	; 1
    5e40:	90 e0       	ldi	r25, 0x00	; 0
    5e42:	91 83       	std	Z+1, r25	; 0x01
    5e44:	80 83       	st	Z, r24
    5e46:	64 c0       	rjmp	.+200    	; 0x5f10 <Segment_init+0xe68>
	else if (__tmp > 65535)
    5e48:	fe 01       	movw	r30, r28
    5e4a:	e1 55       	subi	r30, 0x51	; 81
    5e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e4e:	60 81       	ld	r22, Z
    5e50:	71 81       	ldd	r23, Z+1	; 0x01
    5e52:	82 81       	ldd	r24, Z+2	; 0x02
    5e54:	93 81       	ldd	r25, Z+3	; 0x03
    5e56:	20 e0       	ldi	r18, 0x00	; 0
    5e58:	3f ef       	ldi	r19, 0xFF	; 255
    5e5a:	4f e7       	ldi	r20, 0x7F	; 127
    5e5c:	57 e4       	ldi	r21, 0x47	; 71
    5e5e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5e62:	18 16       	cp	r1, r24
    5e64:	0c f0       	brlt	.+2      	; 0x5e68 <Segment_init+0xdc0>
    5e66:	43 c0       	rjmp	.+134    	; 0x5eee <Segment_init+0xe46>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5e68:	fe 01       	movw	r30, r28
    5e6a:	ed 54       	subi	r30, 0x4D	; 77
    5e6c:	ff 4f       	sbci	r31, 0xFF	; 255
    5e6e:	60 81       	ld	r22, Z
    5e70:	71 81       	ldd	r23, Z+1	; 0x01
    5e72:	82 81       	ldd	r24, Z+2	; 0x02
    5e74:	93 81       	ldd	r25, Z+3	; 0x03
    5e76:	20 e0       	ldi	r18, 0x00	; 0
    5e78:	30 e0       	ldi	r19, 0x00	; 0
    5e7a:	40 e2       	ldi	r20, 0x20	; 32
    5e7c:	51 e4       	ldi	r21, 0x41	; 65
    5e7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5e82:	dc 01       	movw	r26, r24
    5e84:	cb 01       	movw	r24, r22
    5e86:	8e 01       	movw	r16, r28
    5e88:	03 55       	subi	r16, 0x53	; 83
    5e8a:	1f 4f       	sbci	r17, 0xFF	; 255
    5e8c:	bc 01       	movw	r22, r24
    5e8e:	cd 01       	movw	r24, r26
    5e90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5e94:	dc 01       	movw	r26, r24
    5e96:	cb 01       	movw	r24, r22
    5e98:	f8 01       	movw	r30, r16
    5e9a:	91 83       	std	Z+1, r25	; 0x01
    5e9c:	80 83       	st	Z, r24
    5e9e:	1f c0       	rjmp	.+62     	; 0x5ede <Segment_init+0xe36>
    5ea0:	fe 01       	movw	r30, r28
    5ea2:	e5 55       	subi	r30, 0x55	; 85
    5ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    5ea6:	80 e9       	ldi	r24, 0x90	; 144
    5ea8:	91 e0       	ldi	r25, 0x01	; 1
    5eaa:	91 83       	std	Z+1, r25	; 0x01
    5eac:	80 83       	st	Z, r24
    5eae:	fe 01       	movw	r30, r28
    5eb0:	e5 55       	subi	r30, 0x55	; 85
    5eb2:	ff 4f       	sbci	r31, 0xFF	; 255
    5eb4:	80 81       	ld	r24, Z
    5eb6:	91 81       	ldd	r25, Z+1	; 0x01
    5eb8:	01 97       	sbiw	r24, 0x01	; 1
    5eba:	f1 f7       	brne	.-4      	; 0x5eb8 <Segment_init+0xe10>
    5ebc:	fe 01       	movw	r30, r28
    5ebe:	e5 55       	subi	r30, 0x55	; 85
    5ec0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ec2:	91 83       	std	Z+1, r25	; 0x01
    5ec4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    5ec6:	de 01       	movw	r26, r28
    5ec8:	a3 55       	subi	r26, 0x53	; 83
    5eca:	bf 4f       	sbci	r27, 0xFF	; 255
    5ecc:	fe 01       	movw	r30, r28
    5ece:	e3 55       	subi	r30, 0x53	; 83
    5ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    5ed2:	80 81       	ld	r24, Z
    5ed4:	91 81       	ldd	r25, Z+1	; 0x01
    5ed6:	01 97       	sbiw	r24, 0x01	; 1
    5ed8:	11 96       	adiw	r26, 0x01	; 1
    5eda:	9c 93       	st	X, r25
    5edc:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    5ede:	fe 01       	movw	r30, r28
    5ee0:	e3 55       	subi	r30, 0x53	; 83
    5ee2:	ff 4f       	sbci	r31, 0xFF	; 255
    5ee4:	80 81       	ld	r24, Z
    5ee6:	91 81       	ldd	r25, Z+1	; 0x01
    5ee8:	00 97       	sbiw	r24, 0x00	; 0
    5eea:	d1 f6       	brne	.-76     	; 0x5ea0 <Segment_init+0xdf8>
    5eec:	27 c0       	rjmp	.+78     	; 0x5f3c <Segment_init+0xe94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    5eee:	8e 01       	movw	r16, r28
    5ef0:	03 55       	subi	r16, 0x53	; 83
    5ef2:	1f 4f       	sbci	r17, 0xFF	; 255
    5ef4:	fe 01       	movw	r30, r28
    5ef6:	e1 55       	subi	r30, 0x51	; 81
    5ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    5efa:	60 81       	ld	r22, Z
    5efc:	71 81       	ldd	r23, Z+1	; 0x01
    5efe:	82 81       	ldd	r24, Z+2	; 0x02
    5f00:	93 81       	ldd	r25, Z+3	; 0x03
    5f02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    5f06:	dc 01       	movw	r26, r24
    5f08:	cb 01       	movw	r24, r22
    5f0a:	f8 01       	movw	r30, r16
    5f0c:	91 83       	std	Z+1, r25	; 0x01
    5f0e:	80 83       	st	Z, r24
    5f10:	de 01       	movw	r26, r28
    5f12:	a7 55       	subi	r26, 0x57	; 87
    5f14:	bf 4f       	sbci	r27, 0xFF	; 255
    5f16:	fe 01       	movw	r30, r28
    5f18:	e3 55       	subi	r30, 0x53	; 83
    5f1a:	ff 4f       	sbci	r31, 0xFF	; 255
    5f1c:	80 81       	ld	r24, Z
    5f1e:	91 81       	ldd	r25, Z+1	; 0x01
    5f20:	8d 93       	st	X+, r24
    5f22:	9c 93       	st	X, r25
    5f24:	fe 01       	movw	r30, r28
    5f26:	e7 55       	subi	r30, 0x57	; 87
    5f28:	ff 4f       	sbci	r31, 0xFF	; 255
    5f2a:	80 81       	ld	r24, Z
    5f2c:	91 81       	ldd	r25, Z+1	; 0x01
    5f2e:	01 97       	sbiw	r24, 0x01	; 1
    5f30:	f1 f7       	brne	.-4      	; 0x5f2e <Segment_init+0xe86>
    5f32:	fe 01       	movw	r30, r28
    5f34:	e7 55       	subi	r30, 0x57	; 87
    5f36:	ff 4f       	sbci	r31, 0xFF	; 255
    5f38:	91 83       	std	Z+1, r25	; 0x01
    5f3a:	80 83       	st	Z, r24
			_delay_ms(2);
			DIO_voidSetPinValue(GPIOB_BASE,PIN6_ID,HIGH);
    5f3c:	86 e3       	ldi	r24, 0x36	; 54
    5f3e:	90 e0       	ldi	r25, 0x00	; 0
    5f40:	66 e0       	ldi	r22, 0x06	; 6
    5f42:	41 e0       	ldi	r20, 0x01	; 1
    5f44:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    5f48:	0c 94 3b 37 	jmp	0x6e76	; 0x6e76 <Segment_init+0x1dce>
			break;
	case FOUR_SEGs:
			DIO_voidSetPinValue(GPIOA_BASE,PIN3_ID,LOW);
    5f4c:	89 e3       	ldi	r24, 0x39	; 57
    5f4e:	90 e0       	ldi	r25, 0x00	; 0
    5f50:	63 e0       	ldi	r22, 0x03	; 3
    5f52:	40 e0       	ldi	r20, 0x00	; 0
    5f54:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    5f58:	fe 01       	movw	r30, r28
    5f5a:	eb 55       	subi	r30, 0x5B	; 91
    5f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    5f5e:	80 e0       	ldi	r24, 0x00	; 0
    5f60:	90 e0       	ldi	r25, 0x00	; 0
    5f62:	a0 e0       	ldi	r26, 0x00	; 0
    5f64:	b0 e4       	ldi	r27, 0x40	; 64
    5f66:	80 83       	st	Z, r24
    5f68:	91 83       	std	Z+1, r25	; 0x01
    5f6a:	a2 83       	std	Z+2, r26	; 0x02
    5f6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    5f6e:	8e 01       	movw	r16, r28
    5f70:	0f 55       	subi	r16, 0x5F	; 95
    5f72:	1f 4f       	sbci	r17, 0xFF	; 255
    5f74:	fe 01       	movw	r30, r28
    5f76:	eb 55       	subi	r30, 0x5B	; 91
    5f78:	ff 4f       	sbci	r31, 0xFF	; 255
    5f7a:	60 81       	ld	r22, Z
    5f7c:	71 81       	ldd	r23, Z+1	; 0x01
    5f7e:	82 81       	ldd	r24, Z+2	; 0x02
    5f80:	93 81       	ldd	r25, Z+3	; 0x03
    5f82:	20 e0       	ldi	r18, 0x00	; 0
    5f84:	30 e0       	ldi	r19, 0x00	; 0
    5f86:	4a e7       	ldi	r20, 0x7A	; 122
    5f88:	55 e4       	ldi	r21, 0x45	; 69
    5f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    5f8e:	dc 01       	movw	r26, r24
    5f90:	cb 01       	movw	r24, r22
    5f92:	f8 01       	movw	r30, r16
    5f94:	80 83       	st	Z, r24
    5f96:	91 83       	std	Z+1, r25	; 0x01
    5f98:	a2 83       	std	Z+2, r26	; 0x02
    5f9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    5f9c:	fe 01       	movw	r30, r28
    5f9e:	ef 55       	subi	r30, 0x5F	; 95
    5fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    5fa2:	60 81       	ld	r22, Z
    5fa4:	71 81       	ldd	r23, Z+1	; 0x01
    5fa6:	82 81       	ldd	r24, Z+2	; 0x02
    5fa8:	93 81       	ldd	r25, Z+3	; 0x03
    5faa:	20 e0       	ldi	r18, 0x00	; 0
    5fac:	30 e0       	ldi	r19, 0x00	; 0
    5fae:	40 e8       	ldi	r20, 0x80	; 128
    5fb0:	5f e3       	ldi	r21, 0x3F	; 63
    5fb2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    5fb6:	88 23       	and	r24, r24
    5fb8:	44 f4       	brge	.+16     	; 0x5fca <Segment_init+0xf22>
		__ticks = 1;
    5fba:	fe 01       	movw	r30, r28
    5fbc:	e1 56       	subi	r30, 0x61	; 97
    5fbe:	ff 4f       	sbci	r31, 0xFF	; 255
    5fc0:	81 e0       	ldi	r24, 0x01	; 1
    5fc2:	90 e0       	ldi	r25, 0x00	; 0
    5fc4:	91 83       	std	Z+1, r25	; 0x01
    5fc6:	80 83       	st	Z, r24
    5fc8:	64 c0       	rjmp	.+200    	; 0x6092 <Segment_init+0xfea>
	else if (__tmp > 65535)
    5fca:	fe 01       	movw	r30, r28
    5fcc:	ef 55       	subi	r30, 0x5F	; 95
    5fce:	ff 4f       	sbci	r31, 0xFF	; 255
    5fd0:	60 81       	ld	r22, Z
    5fd2:	71 81       	ldd	r23, Z+1	; 0x01
    5fd4:	82 81       	ldd	r24, Z+2	; 0x02
    5fd6:	93 81       	ldd	r25, Z+3	; 0x03
    5fd8:	20 e0       	ldi	r18, 0x00	; 0
    5fda:	3f ef       	ldi	r19, 0xFF	; 255
    5fdc:	4f e7       	ldi	r20, 0x7F	; 127
    5fde:	57 e4       	ldi	r21, 0x47	; 71
    5fe0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    5fe4:	18 16       	cp	r1, r24
    5fe6:	0c f0       	brlt	.+2      	; 0x5fea <Segment_init+0xf42>
    5fe8:	43 c0       	rjmp	.+134    	; 0x6070 <Segment_init+0xfc8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    5fea:	fe 01       	movw	r30, r28
    5fec:	eb 55       	subi	r30, 0x5B	; 91
    5fee:	ff 4f       	sbci	r31, 0xFF	; 255
    5ff0:	60 81       	ld	r22, Z
    5ff2:	71 81       	ldd	r23, Z+1	; 0x01
    5ff4:	82 81       	ldd	r24, Z+2	; 0x02
    5ff6:	93 81       	ldd	r25, Z+3	; 0x03
    5ff8:	20 e0       	ldi	r18, 0x00	; 0
    5ffa:	30 e0       	ldi	r19, 0x00	; 0
    5ffc:	40 e2       	ldi	r20, 0x20	; 32
    5ffe:	51 e4       	ldi	r21, 0x41	; 65
    6000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6004:	dc 01       	movw	r26, r24
    6006:	cb 01       	movw	r24, r22
    6008:	8e 01       	movw	r16, r28
    600a:	01 56       	subi	r16, 0x61	; 97
    600c:	1f 4f       	sbci	r17, 0xFF	; 255
    600e:	bc 01       	movw	r22, r24
    6010:	cd 01       	movw	r24, r26
    6012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6016:	dc 01       	movw	r26, r24
    6018:	cb 01       	movw	r24, r22
    601a:	f8 01       	movw	r30, r16
    601c:	91 83       	std	Z+1, r25	; 0x01
    601e:	80 83       	st	Z, r24
    6020:	1f c0       	rjmp	.+62     	; 0x6060 <Segment_init+0xfb8>
    6022:	fe 01       	movw	r30, r28
    6024:	e3 56       	subi	r30, 0x63	; 99
    6026:	ff 4f       	sbci	r31, 0xFF	; 255
    6028:	80 e9       	ldi	r24, 0x90	; 144
    602a:	91 e0       	ldi	r25, 0x01	; 1
    602c:	91 83       	std	Z+1, r25	; 0x01
    602e:	80 83       	st	Z, r24
    6030:	fe 01       	movw	r30, r28
    6032:	e3 56       	subi	r30, 0x63	; 99
    6034:	ff 4f       	sbci	r31, 0xFF	; 255
    6036:	80 81       	ld	r24, Z
    6038:	91 81       	ldd	r25, Z+1	; 0x01
    603a:	01 97       	sbiw	r24, 0x01	; 1
    603c:	f1 f7       	brne	.-4      	; 0x603a <Segment_init+0xf92>
    603e:	fe 01       	movw	r30, r28
    6040:	e3 56       	subi	r30, 0x63	; 99
    6042:	ff 4f       	sbci	r31, 0xFF	; 255
    6044:	91 83       	std	Z+1, r25	; 0x01
    6046:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6048:	de 01       	movw	r26, r28
    604a:	a1 56       	subi	r26, 0x61	; 97
    604c:	bf 4f       	sbci	r27, 0xFF	; 255
    604e:	fe 01       	movw	r30, r28
    6050:	e1 56       	subi	r30, 0x61	; 97
    6052:	ff 4f       	sbci	r31, 0xFF	; 255
    6054:	80 81       	ld	r24, Z
    6056:	91 81       	ldd	r25, Z+1	; 0x01
    6058:	01 97       	sbiw	r24, 0x01	; 1
    605a:	11 96       	adiw	r26, 0x01	; 1
    605c:	9c 93       	st	X, r25
    605e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6060:	fe 01       	movw	r30, r28
    6062:	e1 56       	subi	r30, 0x61	; 97
    6064:	ff 4f       	sbci	r31, 0xFF	; 255
    6066:	80 81       	ld	r24, Z
    6068:	91 81       	ldd	r25, Z+1	; 0x01
    606a:	00 97       	sbiw	r24, 0x00	; 0
    606c:	d1 f6       	brne	.-76     	; 0x6022 <Segment_init+0xf7a>
    606e:	27 c0       	rjmp	.+78     	; 0x60be <Segment_init+0x1016>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6070:	8e 01       	movw	r16, r28
    6072:	01 56       	subi	r16, 0x61	; 97
    6074:	1f 4f       	sbci	r17, 0xFF	; 255
    6076:	fe 01       	movw	r30, r28
    6078:	ef 55       	subi	r30, 0x5F	; 95
    607a:	ff 4f       	sbci	r31, 0xFF	; 255
    607c:	60 81       	ld	r22, Z
    607e:	71 81       	ldd	r23, Z+1	; 0x01
    6080:	82 81       	ldd	r24, Z+2	; 0x02
    6082:	93 81       	ldd	r25, Z+3	; 0x03
    6084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6088:	dc 01       	movw	r26, r24
    608a:	cb 01       	movw	r24, r22
    608c:	f8 01       	movw	r30, r16
    608e:	91 83       	std	Z+1, r25	; 0x01
    6090:	80 83       	st	Z, r24
    6092:	de 01       	movw	r26, r28
    6094:	a5 56       	subi	r26, 0x65	; 101
    6096:	bf 4f       	sbci	r27, 0xFF	; 255
    6098:	fe 01       	movw	r30, r28
    609a:	e1 56       	subi	r30, 0x61	; 97
    609c:	ff 4f       	sbci	r31, 0xFF	; 255
    609e:	80 81       	ld	r24, Z
    60a0:	91 81       	ldd	r25, Z+1	; 0x01
    60a2:	8d 93       	st	X+, r24
    60a4:	9c 93       	st	X, r25
    60a6:	fe 01       	movw	r30, r28
    60a8:	e5 56       	subi	r30, 0x65	; 101
    60aa:	ff 4f       	sbci	r31, 0xFF	; 255
    60ac:	80 81       	ld	r24, Z
    60ae:	91 81       	ldd	r25, Z+1	; 0x01
    60b0:	01 97       	sbiw	r24, 0x01	; 1
    60b2:	f1 f7       	brne	.-4      	; 0x60b0 <Segment_init+0x1008>
    60b4:	fe 01       	movw	r30, r28
    60b6:	e5 56       	subi	r30, 0x65	; 101
    60b8:	ff 4f       	sbci	r31, 0xFF	; 255
    60ba:	91 83       	std	Z+1, r25	; 0x01
    60bc:	80 83       	st	Z, r24
			_delay_ms(2);
			DIO_voidSetPinValue(GPIOA_BASE,PIN2_ID,LOW);
    60be:	89 e3       	ldi	r24, 0x39	; 57
    60c0:	90 e0       	ldi	r25, 0x00	; 0
    60c2:	62 e0       	ldi	r22, 0x02	; 2
    60c4:	40 e0       	ldi	r20, 0x00	; 0
    60c6:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    60ca:	fe 01       	movw	r30, r28
    60cc:	e9 56       	subi	r30, 0x69	; 105
    60ce:	ff 4f       	sbci	r31, 0xFF	; 255
    60d0:	80 e0       	ldi	r24, 0x00	; 0
    60d2:	90 e0       	ldi	r25, 0x00	; 0
    60d4:	a0 e0       	ldi	r26, 0x00	; 0
    60d6:	b0 e4       	ldi	r27, 0x40	; 64
    60d8:	80 83       	st	Z, r24
    60da:	91 83       	std	Z+1, r25	; 0x01
    60dc:	a2 83       	std	Z+2, r26	; 0x02
    60de:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    60e0:	8e 01       	movw	r16, r28
    60e2:	0d 56       	subi	r16, 0x6D	; 109
    60e4:	1f 4f       	sbci	r17, 0xFF	; 255
    60e6:	fe 01       	movw	r30, r28
    60e8:	e9 56       	subi	r30, 0x69	; 105
    60ea:	ff 4f       	sbci	r31, 0xFF	; 255
    60ec:	60 81       	ld	r22, Z
    60ee:	71 81       	ldd	r23, Z+1	; 0x01
    60f0:	82 81       	ldd	r24, Z+2	; 0x02
    60f2:	93 81       	ldd	r25, Z+3	; 0x03
    60f4:	20 e0       	ldi	r18, 0x00	; 0
    60f6:	30 e0       	ldi	r19, 0x00	; 0
    60f8:	4a e7       	ldi	r20, 0x7A	; 122
    60fa:	55 e4       	ldi	r21, 0x45	; 69
    60fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6100:	dc 01       	movw	r26, r24
    6102:	cb 01       	movw	r24, r22
    6104:	f8 01       	movw	r30, r16
    6106:	80 83       	st	Z, r24
    6108:	91 83       	std	Z+1, r25	; 0x01
    610a:	a2 83       	std	Z+2, r26	; 0x02
    610c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    610e:	fe 01       	movw	r30, r28
    6110:	ed 56       	subi	r30, 0x6D	; 109
    6112:	ff 4f       	sbci	r31, 0xFF	; 255
    6114:	60 81       	ld	r22, Z
    6116:	71 81       	ldd	r23, Z+1	; 0x01
    6118:	82 81       	ldd	r24, Z+2	; 0x02
    611a:	93 81       	ldd	r25, Z+3	; 0x03
    611c:	20 e0       	ldi	r18, 0x00	; 0
    611e:	30 e0       	ldi	r19, 0x00	; 0
    6120:	40 e8       	ldi	r20, 0x80	; 128
    6122:	5f e3       	ldi	r21, 0x3F	; 63
    6124:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6128:	88 23       	and	r24, r24
    612a:	44 f4       	brge	.+16     	; 0x613c <Segment_init+0x1094>
		__ticks = 1;
    612c:	fe 01       	movw	r30, r28
    612e:	ef 56       	subi	r30, 0x6F	; 111
    6130:	ff 4f       	sbci	r31, 0xFF	; 255
    6132:	81 e0       	ldi	r24, 0x01	; 1
    6134:	90 e0       	ldi	r25, 0x00	; 0
    6136:	91 83       	std	Z+1, r25	; 0x01
    6138:	80 83       	st	Z, r24
    613a:	64 c0       	rjmp	.+200    	; 0x6204 <Segment_init+0x115c>
	else if (__tmp > 65535)
    613c:	fe 01       	movw	r30, r28
    613e:	ed 56       	subi	r30, 0x6D	; 109
    6140:	ff 4f       	sbci	r31, 0xFF	; 255
    6142:	60 81       	ld	r22, Z
    6144:	71 81       	ldd	r23, Z+1	; 0x01
    6146:	82 81       	ldd	r24, Z+2	; 0x02
    6148:	93 81       	ldd	r25, Z+3	; 0x03
    614a:	20 e0       	ldi	r18, 0x00	; 0
    614c:	3f ef       	ldi	r19, 0xFF	; 255
    614e:	4f e7       	ldi	r20, 0x7F	; 127
    6150:	57 e4       	ldi	r21, 0x47	; 71
    6152:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6156:	18 16       	cp	r1, r24
    6158:	0c f0       	brlt	.+2      	; 0x615c <Segment_init+0x10b4>
    615a:	43 c0       	rjmp	.+134    	; 0x61e2 <Segment_init+0x113a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    615c:	fe 01       	movw	r30, r28
    615e:	e9 56       	subi	r30, 0x69	; 105
    6160:	ff 4f       	sbci	r31, 0xFF	; 255
    6162:	60 81       	ld	r22, Z
    6164:	71 81       	ldd	r23, Z+1	; 0x01
    6166:	82 81       	ldd	r24, Z+2	; 0x02
    6168:	93 81       	ldd	r25, Z+3	; 0x03
    616a:	20 e0       	ldi	r18, 0x00	; 0
    616c:	30 e0       	ldi	r19, 0x00	; 0
    616e:	40 e2       	ldi	r20, 0x20	; 32
    6170:	51 e4       	ldi	r21, 0x41	; 65
    6172:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6176:	dc 01       	movw	r26, r24
    6178:	cb 01       	movw	r24, r22
    617a:	8e 01       	movw	r16, r28
    617c:	0f 56       	subi	r16, 0x6F	; 111
    617e:	1f 4f       	sbci	r17, 0xFF	; 255
    6180:	bc 01       	movw	r22, r24
    6182:	cd 01       	movw	r24, r26
    6184:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6188:	dc 01       	movw	r26, r24
    618a:	cb 01       	movw	r24, r22
    618c:	f8 01       	movw	r30, r16
    618e:	91 83       	std	Z+1, r25	; 0x01
    6190:	80 83       	st	Z, r24
    6192:	1f c0       	rjmp	.+62     	; 0x61d2 <Segment_init+0x112a>
    6194:	fe 01       	movw	r30, r28
    6196:	e1 57       	subi	r30, 0x71	; 113
    6198:	ff 4f       	sbci	r31, 0xFF	; 255
    619a:	80 e9       	ldi	r24, 0x90	; 144
    619c:	91 e0       	ldi	r25, 0x01	; 1
    619e:	91 83       	std	Z+1, r25	; 0x01
    61a0:	80 83       	st	Z, r24
    61a2:	fe 01       	movw	r30, r28
    61a4:	e1 57       	subi	r30, 0x71	; 113
    61a6:	ff 4f       	sbci	r31, 0xFF	; 255
    61a8:	80 81       	ld	r24, Z
    61aa:	91 81       	ldd	r25, Z+1	; 0x01
    61ac:	01 97       	sbiw	r24, 0x01	; 1
    61ae:	f1 f7       	brne	.-4      	; 0x61ac <Segment_init+0x1104>
    61b0:	fe 01       	movw	r30, r28
    61b2:	e1 57       	subi	r30, 0x71	; 113
    61b4:	ff 4f       	sbci	r31, 0xFF	; 255
    61b6:	91 83       	std	Z+1, r25	; 0x01
    61b8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    61ba:	de 01       	movw	r26, r28
    61bc:	af 56       	subi	r26, 0x6F	; 111
    61be:	bf 4f       	sbci	r27, 0xFF	; 255
    61c0:	fe 01       	movw	r30, r28
    61c2:	ef 56       	subi	r30, 0x6F	; 111
    61c4:	ff 4f       	sbci	r31, 0xFF	; 255
    61c6:	80 81       	ld	r24, Z
    61c8:	91 81       	ldd	r25, Z+1	; 0x01
    61ca:	01 97       	sbiw	r24, 0x01	; 1
    61cc:	11 96       	adiw	r26, 0x01	; 1
    61ce:	9c 93       	st	X, r25
    61d0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    61d2:	fe 01       	movw	r30, r28
    61d4:	ef 56       	subi	r30, 0x6F	; 111
    61d6:	ff 4f       	sbci	r31, 0xFF	; 255
    61d8:	80 81       	ld	r24, Z
    61da:	91 81       	ldd	r25, Z+1	; 0x01
    61dc:	00 97       	sbiw	r24, 0x00	; 0
    61de:	d1 f6       	brne	.-76     	; 0x6194 <Segment_init+0x10ec>
    61e0:	27 c0       	rjmp	.+78     	; 0x6230 <Segment_init+0x1188>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    61e2:	8e 01       	movw	r16, r28
    61e4:	0f 56       	subi	r16, 0x6F	; 111
    61e6:	1f 4f       	sbci	r17, 0xFF	; 255
    61e8:	fe 01       	movw	r30, r28
    61ea:	ed 56       	subi	r30, 0x6D	; 109
    61ec:	ff 4f       	sbci	r31, 0xFF	; 255
    61ee:	60 81       	ld	r22, Z
    61f0:	71 81       	ldd	r23, Z+1	; 0x01
    61f2:	82 81       	ldd	r24, Z+2	; 0x02
    61f4:	93 81       	ldd	r25, Z+3	; 0x03
    61f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    61fa:	dc 01       	movw	r26, r24
    61fc:	cb 01       	movw	r24, r22
    61fe:	f8 01       	movw	r30, r16
    6200:	91 83       	std	Z+1, r25	; 0x01
    6202:	80 83       	st	Z, r24
    6204:	de 01       	movw	r26, r28
    6206:	a3 57       	subi	r26, 0x73	; 115
    6208:	bf 4f       	sbci	r27, 0xFF	; 255
    620a:	fe 01       	movw	r30, r28
    620c:	ef 56       	subi	r30, 0x6F	; 111
    620e:	ff 4f       	sbci	r31, 0xFF	; 255
    6210:	80 81       	ld	r24, Z
    6212:	91 81       	ldd	r25, Z+1	; 0x01
    6214:	8d 93       	st	X+, r24
    6216:	9c 93       	st	X, r25
    6218:	fe 01       	movw	r30, r28
    621a:	e3 57       	subi	r30, 0x73	; 115
    621c:	ff 4f       	sbci	r31, 0xFF	; 255
    621e:	80 81       	ld	r24, Z
    6220:	91 81       	ldd	r25, Z+1	; 0x01
    6222:	01 97       	sbiw	r24, 0x01	; 1
    6224:	f1 f7       	brne	.-4      	; 0x6222 <Segment_init+0x117a>
    6226:	fe 01       	movw	r30, r28
    6228:	e3 57       	subi	r30, 0x73	; 115
    622a:	ff 4f       	sbci	r31, 0xFF	; 255
    622c:	91 83       	std	Z+1, r25	; 0x01
    622e:	80 83       	st	Z, r24
			_delay_ms(2);
			DIO_voidSetPinValue(GPIOB_BASE,PIN5_ID,LOW);
    6230:	86 e3       	ldi	r24, 0x36	; 54
    6232:	90 e0       	ldi	r25, 0x00	; 0
    6234:	65 e0       	ldi	r22, 0x05	; 5
    6236:	40 e0       	ldi	r20, 0x00	; 0
    6238:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    623c:	fe 01       	movw	r30, r28
    623e:	e7 57       	subi	r30, 0x77	; 119
    6240:	ff 4f       	sbci	r31, 0xFF	; 255
    6242:	80 e0       	ldi	r24, 0x00	; 0
    6244:	90 e0       	ldi	r25, 0x00	; 0
    6246:	a0 e0       	ldi	r26, 0x00	; 0
    6248:	b0 e4       	ldi	r27, 0x40	; 64
    624a:	80 83       	st	Z, r24
    624c:	91 83       	std	Z+1, r25	; 0x01
    624e:	a2 83       	std	Z+2, r26	; 0x02
    6250:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6252:	8e 01       	movw	r16, r28
    6254:	0b 57       	subi	r16, 0x7B	; 123
    6256:	1f 4f       	sbci	r17, 0xFF	; 255
    6258:	fe 01       	movw	r30, r28
    625a:	e7 57       	subi	r30, 0x77	; 119
    625c:	ff 4f       	sbci	r31, 0xFF	; 255
    625e:	60 81       	ld	r22, Z
    6260:	71 81       	ldd	r23, Z+1	; 0x01
    6262:	82 81       	ldd	r24, Z+2	; 0x02
    6264:	93 81       	ldd	r25, Z+3	; 0x03
    6266:	20 e0       	ldi	r18, 0x00	; 0
    6268:	30 e0       	ldi	r19, 0x00	; 0
    626a:	4a e7       	ldi	r20, 0x7A	; 122
    626c:	55 e4       	ldi	r21, 0x45	; 69
    626e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6272:	dc 01       	movw	r26, r24
    6274:	cb 01       	movw	r24, r22
    6276:	f8 01       	movw	r30, r16
    6278:	80 83       	st	Z, r24
    627a:	91 83       	std	Z+1, r25	; 0x01
    627c:	a2 83       	std	Z+2, r26	; 0x02
    627e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6280:	fe 01       	movw	r30, r28
    6282:	eb 57       	subi	r30, 0x7B	; 123
    6284:	ff 4f       	sbci	r31, 0xFF	; 255
    6286:	60 81       	ld	r22, Z
    6288:	71 81       	ldd	r23, Z+1	; 0x01
    628a:	82 81       	ldd	r24, Z+2	; 0x02
    628c:	93 81       	ldd	r25, Z+3	; 0x03
    628e:	20 e0       	ldi	r18, 0x00	; 0
    6290:	30 e0       	ldi	r19, 0x00	; 0
    6292:	40 e8       	ldi	r20, 0x80	; 128
    6294:	5f e3       	ldi	r21, 0x3F	; 63
    6296:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    629a:	88 23       	and	r24, r24
    629c:	44 f4       	brge	.+16     	; 0x62ae <Segment_init+0x1206>
		__ticks = 1;
    629e:	fe 01       	movw	r30, r28
    62a0:	ed 57       	subi	r30, 0x7D	; 125
    62a2:	ff 4f       	sbci	r31, 0xFF	; 255
    62a4:	81 e0       	ldi	r24, 0x01	; 1
    62a6:	90 e0       	ldi	r25, 0x00	; 0
    62a8:	91 83       	std	Z+1, r25	; 0x01
    62aa:	80 83       	st	Z, r24
    62ac:	64 c0       	rjmp	.+200    	; 0x6376 <Segment_init+0x12ce>
	else if (__tmp > 65535)
    62ae:	fe 01       	movw	r30, r28
    62b0:	eb 57       	subi	r30, 0x7B	; 123
    62b2:	ff 4f       	sbci	r31, 0xFF	; 255
    62b4:	60 81       	ld	r22, Z
    62b6:	71 81       	ldd	r23, Z+1	; 0x01
    62b8:	82 81       	ldd	r24, Z+2	; 0x02
    62ba:	93 81       	ldd	r25, Z+3	; 0x03
    62bc:	20 e0       	ldi	r18, 0x00	; 0
    62be:	3f ef       	ldi	r19, 0xFF	; 255
    62c0:	4f e7       	ldi	r20, 0x7F	; 127
    62c2:	57 e4       	ldi	r21, 0x47	; 71
    62c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    62c8:	18 16       	cp	r1, r24
    62ca:	0c f0       	brlt	.+2      	; 0x62ce <Segment_init+0x1226>
    62cc:	43 c0       	rjmp	.+134    	; 0x6354 <Segment_init+0x12ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    62ce:	fe 01       	movw	r30, r28
    62d0:	e7 57       	subi	r30, 0x77	; 119
    62d2:	ff 4f       	sbci	r31, 0xFF	; 255
    62d4:	60 81       	ld	r22, Z
    62d6:	71 81       	ldd	r23, Z+1	; 0x01
    62d8:	82 81       	ldd	r24, Z+2	; 0x02
    62da:	93 81       	ldd	r25, Z+3	; 0x03
    62dc:	20 e0       	ldi	r18, 0x00	; 0
    62de:	30 e0       	ldi	r19, 0x00	; 0
    62e0:	40 e2       	ldi	r20, 0x20	; 32
    62e2:	51 e4       	ldi	r21, 0x41	; 65
    62e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    62e8:	dc 01       	movw	r26, r24
    62ea:	cb 01       	movw	r24, r22
    62ec:	8e 01       	movw	r16, r28
    62ee:	0d 57       	subi	r16, 0x7D	; 125
    62f0:	1f 4f       	sbci	r17, 0xFF	; 255
    62f2:	bc 01       	movw	r22, r24
    62f4:	cd 01       	movw	r24, r26
    62f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    62fa:	dc 01       	movw	r26, r24
    62fc:	cb 01       	movw	r24, r22
    62fe:	f8 01       	movw	r30, r16
    6300:	91 83       	std	Z+1, r25	; 0x01
    6302:	80 83       	st	Z, r24
    6304:	1f c0       	rjmp	.+62     	; 0x6344 <Segment_init+0x129c>
    6306:	fe 01       	movw	r30, r28
    6308:	ef 57       	subi	r30, 0x7F	; 127
    630a:	ff 4f       	sbci	r31, 0xFF	; 255
    630c:	80 e9       	ldi	r24, 0x90	; 144
    630e:	91 e0       	ldi	r25, 0x01	; 1
    6310:	91 83       	std	Z+1, r25	; 0x01
    6312:	80 83       	st	Z, r24
    6314:	fe 01       	movw	r30, r28
    6316:	ef 57       	subi	r30, 0x7F	; 127
    6318:	ff 4f       	sbci	r31, 0xFF	; 255
    631a:	80 81       	ld	r24, Z
    631c:	91 81       	ldd	r25, Z+1	; 0x01
    631e:	01 97       	sbiw	r24, 0x01	; 1
    6320:	f1 f7       	brne	.-4      	; 0x631e <Segment_init+0x1276>
    6322:	fe 01       	movw	r30, r28
    6324:	ef 57       	subi	r30, 0x7F	; 127
    6326:	ff 4f       	sbci	r31, 0xFF	; 255
    6328:	91 83       	std	Z+1, r25	; 0x01
    632a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    632c:	de 01       	movw	r26, r28
    632e:	ad 57       	subi	r26, 0x7D	; 125
    6330:	bf 4f       	sbci	r27, 0xFF	; 255
    6332:	fe 01       	movw	r30, r28
    6334:	ed 57       	subi	r30, 0x7D	; 125
    6336:	ff 4f       	sbci	r31, 0xFF	; 255
    6338:	80 81       	ld	r24, Z
    633a:	91 81       	ldd	r25, Z+1	; 0x01
    633c:	01 97       	sbiw	r24, 0x01	; 1
    633e:	11 96       	adiw	r26, 0x01	; 1
    6340:	9c 93       	st	X, r25
    6342:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6344:	fe 01       	movw	r30, r28
    6346:	ed 57       	subi	r30, 0x7D	; 125
    6348:	ff 4f       	sbci	r31, 0xFF	; 255
    634a:	80 81       	ld	r24, Z
    634c:	91 81       	ldd	r25, Z+1	; 0x01
    634e:	00 97       	sbiw	r24, 0x00	; 0
    6350:	d1 f6       	brne	.-76     	; 0x6306 <Segment_init+0x125e>
    6352:	27 c0       	rjmp	.+78     	; 0x63a2 <Segment_init+0x12fa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6354:	8e 01       	movw	r16, r28
    6356:	0d 57       	subi	r16, 0x7D	; 125
    6358:	1f 4f       	sbci	r17, 0xFF	; 255
    635a:	fe 01       	movw	r30, r28
    635c:	eb 57       	subi	r30, 0x7B	; 123
    635e:	ff 4f       	sbci	r31, 0xFF	; 255
    6360:	60 81       	ld	r22, Z
    6362:	71 81       	ldd	r23, Z+1	; 0x01
    6364:	82 81       	ldd	r24, Z+2	; 0x02
    6366:	93 81       	ldd	r25, Z+3	; 0x03
    6368:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    636c:	dc 01       	movw	r26, r24
    636e:	cb 01       	movw	r24, r22
    6370:	f8 01       	movw	r30, r16
    6372:	91 83       	std	Z+1, r25	; 0x01
    6374:	80 83       	st	Z, r24
    6376:	de 01       	movw	r26, r28
    6378:	a1 58       	subi	r26, 0x81	; 129
    637a:	bf 4f       	sbci	r27, 0xFF	; 255
    637c:	fe 01       	movw	r30, r28
    637e:	ed 57       	subi	r30, 0x7D	; 125
    6380:	ff 4f       	sbci	r31, 0xFF	; 255
    6382:	80 81       	ld	r24, Z
    6384:	91 81       	ldd	r25, Z+1	; 0x01
    6386:	8d 93       	st	X+, r24
    6388:	9c 93       	st	X, r25
    638a:	fe 01       	movw	r30, r28
    638c:	e1 58       	subi	r30, 0x81	; 129
    638e:	ff 4f       	sbci	r31, 0xFF	; 255
    6390:	80 81       	ld	r24, Z
    6392:	91 81       	ldd	r25, Z+1	; 0x01
    6394:	01 97       	sbiw	r24, 0x01	; 1
    6396:	f1 f7       	brne	.-4      	; 0x6394 <Segment_init+0x12ec>
    6398:	fe 01       	movw	r30, r28
    639a:	e1 58       	subi	r30, 0x81	; 129
    639c:	ff 4f       	sbci	r31, 0xFF	; 255
    639e:	91 83       	std	Z+1, r25	; 0x01
    63a0:	80 83       	st	Z, r24
			_delay_ms(2);
			DIO_voidSetPinValue(GPIOB_BASE,PIN6_ID,LOW);
    63a2:	86 e3       	ldi	r24, 0x36	; 54
    63a4:	90 e0       	ldi	r25, 0x00	; 0
    63a6:	66 e0       	ldi	r22, 0x06	; 6
    63a8:	40 e0       	ldi	r20, 0x00	; 0
    63aa:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    63ae:	63 c5       	rjmp	.+2758   	; 0x6e76 <Segment_init+0x1dce>
			break;
	case SECOND:
				DIO_voidSetPinValue(GPIOA_BASE,PIN3_ID,HIGH);
    63b0:	89 e3       	ldi	r24, 0x39	; 57
    63b2:	90 e0       	ldi	r25, 0x00	; 0
    63b4:	63 e0       	ldi	r22, 0x03	; 3
    63b6:	41 e0       	ldi	r20, 0x01	; 1
    63b8:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    63bc:	fe 01       	movw	r30, r28
    63be:	e5 58       	subi	r30, 0x85	; 133
    63c0:	ff 4f       	sbci	r31, 0xFF	; 255
    63c2:	80 e0       	ldi	r24, 0x00	; 0
    63c4:	90 e0       	ldi	r25, 0x00	; 0
    63c6:	a0 e0       	ldi	r26, 0x00	; 0
    63c8:	b0 e4       	ldi	r27, 0x40	; 64
    63ca:	80 83       	st	Z, r24
    63cc:	91 83       	std	Z+1, r25	; 0x01
    63ce:	a2 83       	std	Z+2, r26	; 0x02
    63d0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    63d2:	8e 01       	movw	r16, r28
    63d4:	09 58       	subi	r16, 0x89	; 137
    63d6:	1f 4f       	sbci	r17, 0xFF	; 255
    63d8:	fe 01       	movw	r30, r28
    63da:	e5 58       	subi	r30, 0x85	; 133
    63dc:	ff 4f       	sbci	r31, 0xFF	; 255
    63de:	60 81       	ld	r22, Z
    63e0:	71 81       	ldd	r23, Z+1	; 0x01
    63e2:	82 81       	ldd	r24, Z+2	; 0x02
    63e4:	93 81       	ldd	r25, Z+3	; 0x03
    63e6:	20 e0       	ldi	r18, 0x00	; 0
    63e8:	30 e0       	ldi	r19, 0x00	; 0
    63ea:	4a e7       	ldi	r20, 0x7A	; 122
    63ec:	55 e4       	ldi	r21, 0x45	; 69
    63ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    63f2:	dc 01       	movw	r26, r24
    63f4:	cb 01       	movw	r24, r22
    63f6:	f8 01       	movw	r30, r16
    63f8:	80 83       	st	Z, r24
    63fa:	91 83       	std	Z+1, r25	; 0x01
    63fc:	a2 83       	std	Z+2, r26	; 0x02
    63fe:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6400:	fe 01       	movw	r30, r28
    6402:	e9 58       	subi	r30, 0x89	; 137
    6404:	ff 4f       	sbci	r31, 0xFF	; 255
    6406:	60 81       	ld	r22, Z
    6408:	71 81       	ldd	r23, Z+1	; 0x01
    640a:	82 81       	ldd	r24, Z+2	; 0x02
    640c:	93 81       	ldd	r25, Z+3	; 0x03
    640e:	20 e0       	ldi	r18, 0x00	; 0
    6410:	30 e0       	ldi	r19, 0x00	; 0
    6412:	40 e8       	ldi	r20, 0x80	; 128
    6414:	5f e3       	ldi	r21, 0x3F	; 63
    6416:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    641a:	88 23       	and	r24, r24
    641c:	44 f4       	brge	.+16     	; 0x642e <Segment_init+0x1386>
		__ticks = 1;
    641e:	fe 01       	movw	r30, r28
    6420:	eb 58       	subi	r30, 0x8B	; 139
    6422:	ff 4f       	sbci	r31, 0xFF	; 255
    6424:	81 e0       	ldi	r24, 0x01	; 1
    6426:	90 e0       	ldi	r25, 0x00	; 0
    6428:	91 83       	std	Z+1, r25	; 0x01
    642a:	80 83       	st	Z, r24
    642c:	64 c0       	rjmp	.+200    	; 0x64f6 <Segment_init+0x144e>
	else if (__tmp > 65535)
    642e:	fe 01       	movw	r30, r28
    6430:	e9 58       	subi	r30, 0x89	; 137
    6432:	ff 4f       	sbci	r31, 0xFF	; 255
    6434:	60 81       	ld	r22, Z
    6436:	71 81       	ldd	r23, Z+1	; 0x01
    6438:	82 81       	ldd	r24, Z+2	; 0x02
    643a:	93 81       	ldd	r25, Z+3	; 0x03
    643c:	20 e0       	ldi	r18, 0x00	; 0
    643e:	3f ef       	ldi	r19, 0xFF	; 255
    6440:	4f e7       	ldi	r20, 0x7F	; 127
    6442:	57 e4       	ldi	r21, 0x47	; 71
    6444:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6448:	18 16       	cp	r1, r24
    644a:	0c f0       	brlt	.+2      	; 0x644e <Segment_init+0x13a6>
    644c:	43 c0       	rjmp	.+134    	; 0x64d4 <Segment_init+0x142c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    644e:	fe 01       	movw	r30, r28
    6450:	e5 58       	subi	r30, 0x85	; 133
    6452:	ff 4f       	sbci	r31, 0xFF	; 255
    6454:	60 81       	ld	r22, Z
    6456:	71 81       	ldd	r23, Z+1	; 0x01
    6458:	82 81       	ldd	r24, Z+2	; 0x02
    645a:	93 81       	ldd	r25, Z+3	; 0x03
    645c:	20 e0       	ldi	r18, 0x00	; 0
    645e:	30 e0       	ldi	r19, 0x00	; 0
    6460:	40 e2       	ldi	r20, 0x20	; 32
    6462:	51 e4       	ldi	r21, 0x41	; 65
    6464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6468:	dc 01       	movw	r26, r24
    646a:	cb 01       	movw	r24, r22
    646c:	8e 01       	movw	r16, r28
    646e:	0b 58       	subi	r16, 0x8B	; 139
    6470:	1f 4f       	sbci	r17, 0xFF	; 255
    6472:	bc 01       	movw	r22, r24
    6474:	cd 01       	movw	r24, r26
    6476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    647a:	dc 01       	movw	r26, r24
    647c:	cb 01       	movw	r24, r22
    647e:	f8 01       	movw	r30, r16
    6480:	91 83       	std	Z+1, r25	; 0x01
    6482:	80 83       	st	Z, r24
    6484:	1f c0       	rjmp	.+62     	; 0x64c4 <Segment_init+0x141c>
    6486:	fe 01       	movw	r30, r28
    6488:	ed 58       	subi	r30, 0x8D	; 141
    648a:	ff 4f       	sbci	r31, 0xFF	; 255
    648c:	80 e9       	ldi	r24, 0x90	; 144
    648e:	91 e0       	ldi	r25, 0x01	; 1
    6490:	91 83       	std	Z+1, r25	; 0x01
    6492:	80 83       	st	Z, r24
    6494:	fe 01       	movw	r30, r28
    6496:	ed 58       	subi	r30, 0x8D	; 141
    6498:	ff 4f       	sbci	r31, 0xFF	; 255
    649a:	80 81       	ld	r24, Z
    649c:	91 81       	ldd	r25, Z+1	; 0x01
    649e:	01 97       	sbiw	r24, 0x01	; 1
    64a0:	f1 f7       	brne	.-4      	; 0x649e <Segment_init+0x13f6>
    64a2:	fe 01       	movw	r30, r28
    64a4:	ed 58       	subi	r30, 0x8D	; 141
    64a6:	ff 4f       	sbci	r31, 0xFF	; 255
    64a8:	91 83       	std	Z+1, r25	; 0x01
    64aa:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    64ac:	de 01       	movw	r26, r28
    64ae:	ab 58       	subi	r26, 0x8B	; 139
    64b0:	bf 4f       	sbci	r27, 0xFF	; 255
    64b2:	fe 01       	movw	r30, r28
    64b4:	eb 58       	subi	r30, 0x8B	; 139
    64b6:	ff 4f       	sbci	r31, 0xFF	; 255
    64b8:	80 81       	ld	r24, Z
    64ba:	91 81       	ldd	r25, Z+1	; 0x01
    64bc:	01 97       	sbiw	r24, 0x01	; 1
    64be:	11 96       	adiw	r26, 0x01	; 1
    64c0:	9c 93       	st	X, r25
    64c2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    64c4:	fe 01       	movw	r30, r28
    64c6:	eb 58       	subi	r30, 0x8B	; 139
    64c8:	ff 4f       	sbci	r31, 0xFF	; 255
    64ca:	80 81       	ld	r24, Z
    64cc:	91 81       	ldd	r25, Z+1	; 0x01
    64ce:	00 97       	sbiw	r24, 0x00	; 0
    64d0:	d1 f6       	brne	.-76     	; 0x6486 <Segment_init+0x13de>
    64d2:	27 c0       	rjmp	.+78     	; 0x6522 <Segment_init+0x147a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    64d4:	8e 01       	movw	r16, r28
    64d6:	0b 58       	subi	r16, 0x8B	; 139
    64d8:	1f 4f       	sbci	r17, 0xFF	; 255
    64da:	fe 01       	movw	r30, r28
    64dc:	e9 58       	subi	r30, 0x89	; 137
    64de:	ff 4f       	sbci	r31, 0xFF	; 255
    64e0:	60 81       	ld	r22, Z
    64e2:	71 81       	ldd	r23, Z+1	; 0x01
    64e4:	82 81       	ldd	r24, Z+2	; 0x02
    64e6:	93 81       	ldd	r25, Z+3	; 0x03
    64e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    64ec:	dc 01       	movw	r26, r24
    64ee:	cb 01       	movw	r24, r22
    64f0:	f8 01       	movw	r30, r16
    64f2:	91 83       	std	Z+1, r25	; 0x01
    64f4:	80 83       	st	Z, r24
    64f6:	de 01       	movw	r26, r28
    64f8:	af 58       	subi	r26, 0x8F	; 143
    64fa:	bf 4f       	sbci	r27, 0xFF	; 255
    64fc:	fe 01       	movw	r30, r28
    64fe:	eb 58       	subi	r30, 0x8B	; 139
    6500:	ff 4f       	sbci	r31, 0xFF	; 255
    6502:	80 81       	ld	r24, Z
    6504:	91 81       	ldd	r25, Z+1	; 0x01
    6506:	8d 93       	st	X+, r24
    6508:	9c 93       	st	X, r25
    650a:	fe 01       	movw	r30, r28
    650c:	ef 58       	subi	r30, 0x8F	; 143
    650e:	ff 4f       	sbci	r31, 0xFF	; 255
    6510:	80 81       	ld	r24, Z
    6512:	91 81       	ldd	r25, Z+1	; 0x01
    6514:	01 97       	sbiw	r24, 0x01	; 1
    6516:	f1 f7       	brne	.-4      	; 0x6514 <Segment_init+0x146c>
    6518:	fe 01       	movw	r30, r28
    651a:	ef 58       	subi	r30, 0x8F	; 143
    651c:	ff 4f       	sbci	r31, 0xFF	; 255
    651e:	91 83       	std	Z+1, r25	; 0x01
    6520:	80 83       	st	Z, r24
				_delay_ms(2);
				DIO_voidSetPinValue(GPIOA_BASE,PIN2_ID,LOW);
    6522:	89 e3       	ldi	r24, 0x39	; 57
    6524:	90 e0       	ldi	r25, 0x00	; 0
    6526:	62 e0       	ldi	r22, 0x02	; 2
    6528:	40 e0       	ldi	r20, 0x00	; 0
    652a:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    652e:	fe 01       	movw	r30, r28
    6530:	e3 59       	subi	r30, 0x93	; 147
    6532:	ff 4f       	sbci	r31, 0xFF	; 255
    6534:	80 e0       	ldi	r24, 0x00	; 0
    6536:	90 e0       	ldi	r25, 0x00	; 0
    6538:	a0 e0       	ldi	r26, 0x00	; 0
    653a:	b0 e4       	ldi	r27, 0x40	; 64
    653c:	80 83       	st	Z, r24
    653e:	91 83       	std	Z+1, r25	; 0x01
    6540:	a2 83       	std	Z+2, r26	; 0x02
    6542:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6544:	8e 01       	movw	r16, r28
    6546:	07 59       	subi	r16, 0x97	; 151
    6548:	1f 4f       	sbci	r17, 0xFF	; 255
    654a:	fe 01       	movw	r30, r28
    654c:	e3 59       	subi	r30, 0x93	; 147
    654e:	ff 4f       	sbci	r31, 0xFF	; 255
    6550:	60 81       	ld	r22, Z
    6552:	71 81       	ldd	r23, Z+1	; 0x01
    6554:	82 81       	ldd	r24, Z+2	; 0x02
    6556:	93 81       	ldd	r25, Z+3	; 0x03
    6558:	20 e0       	ldi	r18, 0x00	; 0
    655a:	30 e0       	ldi	r19, 0x00	; 0
    655c:	4a e7       	ldi	r20, 0x7A	; 122
    655e:	55 e4       	ldi	r21, 0x45	; 69
    6560:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6564:	dc 01       	movw	r26, r24
    6566:	cb 01       	movw	r24, r22
    6568:	f8 01       	movw	r30, r16
    656a:	80 83       	st	Z, r24
    656c:	91 83       	std	Z+1, r25	; 0x01
    656e:	a2 83       	std	Z+2, r26	; 0x02
    6570:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6572:	fe 01       	movw	r30, r28
    6574:	e7 59       	subi	r30, 0x97	; 151
    6576:	ff 4f       	sbci	r31, 0xFF	; 255
    6578:	60 81       	ld	r22, Z
    657a:	71 81       	ldd	r23, Z+1	; 0x01
    657c:	82 81       	ldd	r24, Z+2	; 0x02
    657e:	93 81       	ldd	r25, Z+3	; 0x03
    6580:	20 e0       	ldi	r18, 0x00	; 0
    6582:	30 e0       	ldi	r19, 0x00	; 0
    6584:	40 e8       	ldi	r20, 0x80	; 128
    6586:	5f e3       	ldi	r21, 0x3F	; 63
    6588:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    658c:	88 23       	and	r24, r24
    658e:	44 f4       	brge	.+16     	; 0x65a0 <Segment_init+0x14f8>
		__ticks = 1;
    6590:	fe 01       	movw	r30, r28
    6592:	e9 59       	subi	r30, 0x99	; 153
    6594:	ff 4f       	sbci	r31, 0xFF	; 255
    6596:	81 e0       	ldi	r24, 0x01	; 1
    6598:	90 e0       	ldi	r25, 0x00	; 0
    659a:	91 83       	std	Z+1, r25	; 0x01
    659c:	80 83       	st	Z, r24
    659e:	64 c0       	rjmp	.+200    	; 0x6668 <Segment_init+0x15c0>
	else if (__tmp > 65535)
    65a0:	fe 01       	movw	r30, r28
    65a2:	e7 59       	subi	r30, 0x97	; 151
    65a4:	ff 4f       	sbci	r31, 0xFF	; 255
    65a6:	60 81       	ld	r22, Z
    65a8:	71 81       	ldd	r23, Z+1	; 0x01
    65aa:	82 81       	ldd	r24, Z+2	; 0x02
    65ac:	93 81       	ldd	r25, Z+3	; 0x03
    65ae:	20 e0       	ldi	r18, 0x00	; 0
    65b0:	3f ef       	ldi	r19, 0xFF	; 255
    65b2:	4f e7       	ldi	r20, 0x7F	; 127
    65b4:	57 e4       	ldi	r21, 0x47	; 71
    65b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    65ba:	18 16       	cp	r1, r24
    65bc:	0c f0       	brlt	.+2      	; 0x65c0 <Segment_init+0x1518>
    65be:	43 c0       	rjmp	.+134    	; 0x6646 <Segment_init+0x159e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    65c0:	fe 01       	movw	r30, r28
    65c2:	e3 59       	subi	r30, 0x93	; 147
    65c4:	ff 4f       	sbci	r31, 0xFF	; 255
    65c6:	60 81       	ld	r22, Z
    65c8:	71 81       	ldd	r23, Z+1	; 0x01
    65ca:	82 81       	ldd	r24, Z+2	; 0x02
    65cc:	93 81       	ldd	r25, Z+3	; 0x03
    65ce:	20 e0       	ldi	r18, 0x00	; 0
    65d0:	30 e0       	ldi	r19, 0x00	; 0
    65d2:	40 e2       	ldi	r20, 0x20	; 32
    65d4:	51 e4       	ldi	r21, 0x41	; 65
    65d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    65da:	dc 01       	movw	r26, r24
    65dc:	cb 01       	movw	r24, r22
    65de:	8e 01       	movw	r16, r28
    65e0:	09 59       	subi	r16, 0x99	; 153
    65e2:	1f 4f       	sbci	r17, 0xFF	; 255
    65e4:	bc 01       	movw	r22, r24
    65e6:	cd 01       	movw	r24, r26
    65e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    65ec:	dc 01       	movw	r26, r24
    65ee:	cb 01       	movw	r24, r22
    65f0:	f8 01       	movw	r30, r16
    65f2:	91 83       	std	Z+1, r25	; 0x01
    65f4:	80 83       	st	Z, r24
    65f6:	1f c0       	rjmp	.+62     	; 0x6636 <Segment_init+0x158e>
    65f8:	fe 01       	movw	r30, r28
    65fa:	eb 59       	subi	r30, 0x9B	; 155
    65fc:	ff 4f       	sbci	r31, 0xFF	; 255
    65fe:	80 e9       	ldi	r24, 0x90	; 144
    6600:	91 e0       	ldi	r25, 0x01	; 1
    6602:	91 83       	std	Z+1, r25	; 0x01
    6604:	80 83       	st	Z, r24
    6606:	fe 01       	movw	r30, r28
    6608:	eb 59       	subi	r30, 0x9B	; 155
    660a:	ff 4f       	sbci	r31, 0xFF	; 255
    660c:	80 81       	ld	r24, Z
    660e:	91 81       	ldd	r25, Z+1	; 0x01
    6610:	01 97       	sbiw	r24, 0x01	; 1
    6612:	f1 f7       	brne	.-4      	; 0x6610 <Segment_init+0x1568>
    6614:	fe 01       	movw	r30, r28
    6616:	eb 59       	subi	r30, 0x9B	; 155
    6618:	ff 4f       	sbci	r31, 0xFF	; 255
    661a:	91 83       	std	Z+1, r25	; 0x01
    661c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    661e:	de 01       	movw	r26, r28
    6620:	a9 59       	subi	r26, 0x99	; 153
    6622:	bf 4f       	sbci	r27, 0xFF	; 255
    6624:	fe 01       	movw	r30, r28
    6626:	e9 59       	subi	r30, 0x99	; 153
    6628:	ff 4f       	sbci	r31, 0xFF	; 255
    662a:	80 81       	ld	r24, Z
    662c:	91 81       	ldd	r25, Z+1	; 0x01
    662e:	01 97       	sbiw	r24, 0x01	; 1
    6630:	11 96       	adiw	r26, 0x01	; 1
    6632:	9c 93       	st	X, r25
    6634:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6636:	fe 01       	movw	r30, r28
    6638:	e9 59       	subi	r30, 0x99	; 153
    663a:	ff 4f       	sbci	r31, 0xFF	; 255
    663c:	80 81       	ld	r24, Z
    663e:	91 81       	ldd	r25, Z+1	; 0x01
    6640:	00 97       	sbiw	r24, 0x00	; 0
    6642:	d1 f6       	brne	.-76     	; 0x65f8 <Segment_init+0x1550>
    6644:	27 c0       	rjmp	.+78     	; 0x6694 <Segment_init+0x15ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6646:	8e 01       	movw	r16, r28
    6648:	09 59       	subi	r16, 0x99	; 153
    664a:	1f 4f       	sbci	r17, 0xFF	; 255
    664c:	fe 01       	movw	r30, r28
    664e:	e7 59       	subi	r30, 0x97	; 151
    6650:	ff 4f       	sbci	r31, 0xFF	; 255
    6652:	60 81       	ld	r22, Z
    6654:	71 81       	ldd	r23, Z+1	; 0x01
    6656:	82 81       	ldd	r24, Z+2	; 0x02
    6658:	93 81       	ldd	r25, Z+3	; 0x03
    665a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    665e:	dc 01       	movw	r26, r24
    6660:	cb 01       	movw	r24, r22
    6662:	f8 01       	movw	r30, r16
    6664:	91 83       	std	Z+1, r25	; 0x01
    6666:	80 83       	st	Z, r24
    6668:	de 01       	movw	r26, r28
    666a:	ad 59       	subi	r26, 0x9D	; 157
    666c:	bf 4f       	sbci	r27, 0xFF	; 255
    666e:	fe 01       	movw	r30, r28
    6670:	e9 59       	subi	r30, 0x99	; 153
    6672:	ff 4f       	sbci	r31, 0xFF	; 255
    6674:	80 81       	ld	r24, Z
    6676:	91 81       	ldd	r25, Z+1	; 0x01
    6678:	8d 93       	st	X+, r24
    667a:	9c 93       	st	X, r25
    667c:	fe 01       	movw	r30, r28
    667e:	ed 59       	subi	r30, 0x9D	; 157
    6680:	ff 4f       	sbci	r31, 0xFF	; 255
    6682:	80 81       	ld	r24, Z
    6684:	91 81       	ldd	r25, Z+1	; 0x01
    6686:	01 97       	sbiw	r24, 0x01	; 1
    6688:	f1 f7       	brne	.-4      	; 0x6686 <Segment_init+0x15de>
    668a:	fe 01       	movw	r30, r28
    668c:	ed 59       	subi	r30, 0x9D	; 157
    668e:	ff 4f       	sbci	r31, 0xFF	; 255
    6690:	91 83       	std	Z+1, r25	; 0x01
    6692:	80 83       	st	Z, r24
				_delay_ms(2);
				DIO_voidSetPinValue(GPIOB_BASE,PIN5_ID,HIGH);
    6694:	86 e3       	ldi	r24, 0x36	; 54
    6696:	90 e0       	ldi	r25, 0x00	; 0
    6698:	65 e0       	ldi	r22, 0x05	; 5
    669a:	41 e0       	ldi	r20, 0x01	; 1
    669c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    66a0:	fe 01       	movw	r30, r28
    66a2:	e1 5a       	subi	r30, 0xA1	; 161
    66a4:	ff 4f       	sbci	r31, 0xFF	; 255
    66a6:	80 e0       	ldi	r24, 0x00	; 0
    66a8:	90 e0       	ldi	r25, 0x00	; 0
    66aa:	a0 e0       	ldi	r26, 0x00	; 0
    66ac:	b0 e4       	ldi	r27, 0x40	; 64
    66ae:	80 83       	st	Z, r24
    66b0:	91 83       	std	Z+1, r25	; 0x01
    66b2:	a2 83       	std	Z+2, r26	; 0x02
    66b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    66b6:	8e 01       	movw	r16, r28
    66b8:	05 5a       	subi	r16, 0xA5	; 165
    66ba:	1f 4f       	sbci	r17, 0xFF	; 255
    66bc:	fe 01       	movw	r30, r28
    66be:	e1 5a       	subi	r30, 0xA1	; 161
    66c0:	ff 4f       	sbci	r31, 0xFF	; 255
    66c2:	60 81       	ld	r22, Z
    66c4:	71 81       	ldd	r23, Z+1	; 0x01
    66c6:	82 81       	ldd	r24, Z+2	; 0x02
    66c8:	93 81       	ldd	r25, Z+3	; 0x03
    66ca:	20 e0       	ldi	r18, 0x00	; 0
    66cc:	30 e0       	ldi	r19, 0x00	; 0
    66ce:	4a e7       	ldi	r20, 0x7A	; 122
    66d0:	55 e4       	ldi	r21, 0x45	; 69
    66d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    66d6:	dc 01       	movw	r26, r24
    66d8:	cb 01       	movw	r24, r22
    66da:	f8 01       	movw	r30, r16
    66dc:	80 83       	st	Z, r24
    66de:	91 83       	std	Z+1, r25	; 0x01
    66e0:	a2 83       	std	Z+2, r26	; 0x02
    66e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    66e4:	fe 01       	movw	r30, r28
    66e6:	e5 5a       	subi	r30, 0xA5	; 165
    66e8:	ff 4f       	sbci	r31, 0xFF	; 255
    66ea:	60 81       	ld	r22, Z
    66ec:	71 81       	ldd	r23, Z+1	; 0x01
    66ee:	82 81       	ldd	r24, Z+2	; 0x02
    66f0:	93 81       	ldd	r25, Z+3	; 0x03
    66f2:	20 e0       	ldi	r18, 0x00	; 0
    66f4:	30 e0       	ldi	r19, 0x00	; 0
    66f6:	40 e8       	ldi	r20, 0x80	; 128
    66f8:	5f e3       	ldi	r21, 0x3F	; 63
    66fa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    66fe:	88 23       	and	r24, r24
    6700:	44 f4       	brge	.+16     	; 0x6712 <Segment_init+0x166a>
		__ticks = 1;
    6702:	fe 01       	movw	r30, r28
    6704:	e7 5a       	subi	r30, 0xA7	; 167
    6706:	ff 4f       	sbci	r31, 0xFF	; 255
    6708:	81 e0       	ldi	r24, 0x01	; 1
    670a:	90 e0       	ldi	r25, 0x00	; 0
    670c:	91 83       	std	Z+1, r25	; 0x01
    670e:	80 83       	st	Z, r24
    6710:	64 c0       	rjmp	.+200    	; 0x67da <Segment_init+0x1732>
	else if (__tmp > 65535)
    6712:	fe 01       	movw	r30, r28
    6714:	e5 5a       	subi	r30, 0xA5	; 165
    6716:	ff 4f       	sbci	r31, 0xFF	; 255
    6718:	60 81       	ld	r22, Z
    671a:	71 81       	ldd	r23, Z+1	; 0x01
    671c:	82 81       	ldd	r24, Z+2	; 0x02
    671e:	93 81       	ldd	r25, Z+3	; 0x03
    6720:	20 e0       	ldi	r18, 0x00	; 0
    6722:	3f ef       	ldi	r19, 0xFF	; 255
    6724:	4f e7       	ldi	r20, 0x7F	; 127
    6726:	57 e4       	ldi	r21, 0x47	; 71
    6728:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    672c:	18 16       	cp	r1, r24
    672e:	0c f0       	brlt	.+2      	; 0x6732 <Segment_init+0x168a>
    6730:	43 c0       	rjmp	.+134    	; 0x67b8 <Segment_init+0x1710>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6732:	fe 01       	movw	r30, r28
    6734:	e1 5a       	subi	r30, 0xA1	; 161
    6736:	ff 4f       	sbci	r31, 0xFF	; 255
    6738:	60 81       	ld	r22, Z
    673a:	71 81       	ldd	r23, Z+1	; 0x01
    673c:	82 81       	ldd	r24, Z+2	; 0x02
    673e:	93 81       	ldd	r25, Z+3	; 0x03
    6740:	20 e0       	ldi	r18, 0x00	; 0
    6742:	30 e0       	ldi	r19, 0x00	; 0
    6744:	40 e2       	ldi	r20, 0x20	; 32
    6746:	51 e4       	ldi	r21, 0x41	; 65
    6748:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    674c:	dc 01       	movw	r26, r24
    674e:	cb 01       	movw	r24, r22
    6750:	8e 01       	movw	r16, r28
    6752:	07 5a       	subi	r16, 0xA7	; 167
    6754:	1f 4f       	sbci	r17, 0xFF	; 255
    6756:	bc 01       	movw	r22, r24
    6758:	cd 01       	movw	r24, r26
    675a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    675e:	dc 01       	movw	r26, r24
    6760:	cb 01       	movw	r24, r22
    6762:	f8 01       	movw	r30, r16
    6764:	91 83       	std	Z+1, r25	; 0x01
    6766:	80 83       	st	Z, r24
    6768:	1f c0       	rjmp	.+62     	; 0x67a8 <Segment_init+0x1700>
    676a:	fe 01       	movw	r30, r28
    676c:	e9 5a       	subi	r30, 0xA9	; 169
    676e:	ff 4f       	sbci	r31, 0xFF	; 255
    6770:	80 e9       	ldi	r24, 0x90	; 144
    6772:	91 e0       	ldi	r25, 0x01	; 1
    6774:	91 83       	std	Z+1, r25	; 0x01
    6776:	80 83       	st	Z, r24
    6778:	fe 01       	movw	r30, r28
    677a:	e9 5a       	subi	r30, 0xA9	; 169
    677c:	ff 4f       	sbci	r31, 0xFF	; 255
    677e:	80 81       	ld	r24, Z
    6780:	91 81       	ldd	r25, Z+1	; 0x01
    6782:	01 97       	sbiw	r24, 0x01	; 1
    6784:	f1 f7       	brne	.-4      	; 0x6782 <Segment_init+0x16da>
    6786:	fe 01       	movw	r30, r28
    6788:	e9 5a       	subi	r30, 0xA9	; 169
    678a:	ff 4f       	sbci	r31, 0xFF	; 255
    678c:	91 83       	std	Z+1, r25	; 0x01
    678e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6790:	de 01       	movw	r26, r28
    6792:	a7 5a       	subi	r26, 0xA7	; 167
    6794:	bf 4f       	sbci	r27, 0xFF	; 255
    6796:	fe 01       	movw	r30, r28
    6798:	e7 5a       	subi	r30, 0xA7	; 167
    679a:	ff 4f       	sbci	r31, 0xFF	; 255
    679c:	80 81       	ld	r24, Z
    679e:	91 81       	ldd	r25, Z+1	; 0x01
    67a0:	01 97       	sbiw	r24, 0x01	; 1
    67a2:	11 96       	adiw	r26, 0x01	; 1
    67a4:	9c 93       	st	X, r25
    67a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    67a8:	fe 01       	movw	r30, r28
    67aa:	e7 5a       	subi	r30, 0xA7	; 167
    67ac:	ff 4f       	sbci	r31, 0xFF	; 255
    67ae:	80 81       	ld	r24, Z
    67b0:	91 81       	ldd	r25, Z+1	; 0x01
    67b2:	00 97       	sbiw	r24, 0x00	; 0
    67b4:	d1 f6       	brne	.-76     	; 0x676a <Segment_init+0x16c2>
    67b6:	27 c0       	rjmp	.+78     	; 0x6806 <Segment_init+0x175e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    67b8:	8e 01       	movw	r16, r28
    67ba:	07 5a       	subi	r16, 0xA7	; 167
    67bc:	1f 4f       	sbci	r17, 0xFF	; 255
    67be:	fe 01       	movw	r30, r28
    67c0:	e5 5a       	subi	r30, 0xA5	; 165
    67c2:	ff 4f       	sbci	r31, 0xFF	; 255
    67c4:	60 81       	ld	r22, Z
    67c6:	71 81       	ldd	r23, Z+1	; 0x01
    67c8:	82 81       	ldd	r24, Z+2	; 0x02
    67ca:	93 81       	ldd	r25, Z+3	; 0x03
    67cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    67d0:	dc 01       	movw	r26, r24
    67d2:	cb 01       	movw	r24, r22
    67d4:	f8 01       	movw	r30, r16
    67d6:	91 83       	std	Z+1, r25	; 0x01
    67d8:	80 83       	st	Z, r24
    67da:	de 01       	movw	r26, r28
    67dc:	ab 5a       	subi	r26, 0xAB	; 171
    67de:	bf 4f       	sbci	r27, 0xFF	; 255
    67e0:	fe 01       	movw	r30, r28
    67e2:	e7 5a       	subi	r30, 0xA7	; 167
    67e4:	ff 4f       	sbci	r31, 0xFF	; 255
    67e6:	80 81       	ld	r24, Z
    67e8:	91 81       	ldd	r25, Z+1	; 0x01
    67ea:	8d 93       	st	X+, r24
    67ec:	9c 93       	st	X, r25
    67ee:	fe 01       	movw	r30, r28
    67f0:	eb 5a       	subi	r30, 0xAB	; 171
    67f2:	ff 4f       	sbci	r31, 0xFF	; 255
    67f4:	80 81       	ld	r24, Z
    67f6:	91 81       	ldd	r25, Z+1	; 0x01
    67f8:	01 97       	sbiw	r24, 0x01	; 1
    67fa:	f1 f7       	brne	.-4      	; 0x67f8 <Segment_init+0x1750>
    67fc:	fe 01       	movw	r30, r28
    67fe:	eb 5a       	subi	r30, 0xAB	; 171
    6800:	ff 4f       	sbci	r31, 0xFF	; 255
    6802:	91 83       	std	Z+1, r25	; 0x01
    6804:	80 83       	st	Z, r24
				_delay_ms(2);
				DIO_voidSetPinValue(GPIOB_BASE,PIN6_ID,HIGH);
    6806:	86 e3       	ldi	r24, 0x36	; 54
    6808:	90 e0       	ldi	r25, 0x00	; 0
    680a:	66 e0       	ldi	r22, 0x06	; 6
    680c:	41 e0       	ldi	r20, 0x01	; 1
    680e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    6812:	31 c3       	rjmp	.+1634   	; 0x6e76 <Segment_init+0x1dce>
				break;
	case THIRD:
				DIO_voidSetPinValue(GPIOA_BASE,PIN3_ID,HIGH);
    6814:	89 e3       	ldi	r24, 0x39	; 57
    6816:	90 e0       	ldi	r25, 0x00	; 0
    6818:	63 e0       	ldi	r22, 0x03	; 3
    681a:	41 e0       	ldi	r20, 0x01	; 1
    681c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    6820:	fe 01       	movw	r30, r28
    6822:	ef 5a       	subi	r30, 0xAF	; 175
    6824:	ff 4f       	sbci	r31, 0xFF	; 255
    6826:	80 e0       	ldi	r24, 0x00	; 0
    6828:	90 e0       	ldi	r25, 0x00	; 0
    682a:	a0 e0       	ldi	r26, 0x00	; 0
    682c:	b0 e4       	ldi	r27, 0x40	; 64
    682e:	80 83       	st	Z, r24
    6830:	91 83       	std	Z+1, r25	; 0x01
    6832:	a2 83       	std	Z+2, r26	; 0x02
    6834:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6836:	8e 01       	movw	r16, r28
    6838:	03 5b       	subi	r16, 0xB3	; 179
    683a:	1f 4f       	sbci	r17, 0xFF	; 255
    683c:	fe 01       	movw	r30, r28
    683e:	ef 5a       	subi	r30, 0xAF	; 175
    6840:	ff 4f       	sbci	r31, 0xFF	; 255
    6842:	60 81       	ld	r22, Z
    6844:	71 81       	ldd	r23, Z+1	; 0x01
    6846:	82 81       	ldd	r24, Z+2	; 0x02
    6848:	93 81       	ldd	r25, Z+3	; 0x03
    684a:	20 e0       	ldi	r18, 0x00	; 0
    684c:	30 e0       	ldi	r19, 0x00	; 0
    684e:	4a e7       	ldi	r20, 0x7A	; 122
    6850:	55 e4       	ldi	r21, 0x45	; 69
    6852:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6856:	dc 01       	movw	r26, r24
    6858:	cb 01       	movw	r24, r22
    685a:	f8 01       	movw	r30, r16
    685c:	80 83       	st	Z, r24
    685e:	91 83       	std	Z+1, r25	; 0x01
    6860:	a2 83       	std	Z+2, r26	; 0x02
    6862:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    6864:	fe 01       	movw	r30, r28
    6866:	e3 5b       	subi	r30, 0xB3	; 179
    6868:	ff 4f       	sbci	r31, 0xFF	; 255
    686a:	60 81       	ld	r22, Z
    686c:	71 81       	ldd	r23, Z+1	; 0x01
    686e:	82 81       	ldd	r24, Z+2	; 0x02
    6870:	93 81       	ldd	r25, Z+3	; 0x03
    6872:	20 e0       	ldi	r18, 0x00	; 0
    6874:	30 e0       	ldi	r19, 0x00	; 0
    6876:	40 e8       	ldi	r20, 0x80	; 128
    6878:	5f e3       	ldi	r21, 0x3F	; 63
    687a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    687e:	88 23       	and	r24, r24
    6880:	44 f4       	brge	.+16     	; 0x6892 <Segment_init+0x17ea>
		__ticks = 1;
    6882:	fe 01       	movw	r30, r28
    6884:	e5 5b       	subi	r30, 0xB5	; 181
    6886:	ff 4f       	sbci	r31, 0xFF	; 255
    6888:	81 e0       	ldi	r24, 0x01	; 1
    688a:	90 e0       	ldi	r25, 0x00	; 0
    688c:	91 83       	std	Z+1, r25	; 0x01
    688e:	80 83       	st	Z, r24
    6890:	64 c0       	rjmp	.+200    	; 0x695a <Segment_init+0x18b2>
	else if (__tmp > 65535)
    6892:	fe 01       	movw	r30, r28
    6894:	e3 5b       	subi	r30, 0xB3	; 179
    6896:	ff 4f       	sbci	r31, 0xFF	; 255
    6898:	60 81       	ld	r22, Z
    689a:	71 81       	ldd	r23, Z+1	; 0x01
    689c:	82 81       	ldd	r24, Z+2	; 0x02
    689e:	93 81       	ldd	r25, Z+3	; 0x03
    68a0:	20 e0       	ldi	r18, 0x00	; 0
    68a2:	3f ef       	ldi	r19, 0xFF	; 255
    68a4:	4f e7       	ldi	r20, 0x7F	; 127
    68a6:	57 e4       	ldi	r21, 0x47	; 71
    68a8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    68ac:	18 16       	cp	r1, r24
    68ae:	0c f0       	brlt	.+2      	; 0x68b2 <Segment_init+0x180a>
    68b0:	43 c0       	rjmp	.+134    	; 0x6938 <Segment_init+0x1890>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    68b2:	fe 01       	movw	r30, r28
    68b4:	ef 5a       	subi	r30, 0xAF	; 175
    68b6:	ff 4f       	sbci	r31, 0xFF	; 255
    68b8:	60 81       	ld	r22, Z
    68ba:	71 81       	ldd	r23, Z+1	; 0x01
    68bc:	82 81       	ldd	r24, Z+2	; 0x02
    68be:	93 81       	ldd	r25, Z+3	; 0x03
    68c0:	20 e0       	ldi	r18, 0x00	; 0
    68c2:	30 e0       	ldi	r19, 0x00	; 0
    68c4:	40 e2       	ldi	r20, 0x20	; 32
    68c6:	51 e4       	ldi	r21, 0x41	; 65
    68c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    68cc:	dc 01       	movw	r26, r24
    68ce:	cb 01       	movw	r24, r22
    68d0:	8e 01       	movw	r16, r28
    68d2:	05 5b       	subi	r16, 0xB5	; 181
    68d4:	1f 4f       	sbci	r17, 0xFF	; 255
    68d6:	bc 01       	movw	r22, r24
    68d8:	cd 01       	movw	r24, r26
    68da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    68de:	dc 01       	movw	r26, r24
    68e0:	cb 01       	movw	r24, r22
    68e2:	f8 01       	movw	r30, r16
    68e4:	91 83       	std	Z+1, r25	; 0x01
    68e6:	80 83       	st	Z, r24
    68e8:	1f c0       	rjmp	.+62     	; 0x6928 <Segment_init+0x1880>
    68ea:	fe 01       	movw	r30, r28
    68ec:	e7 5b       	subi	r30, 0xB7	; 183
    68ee:	ff 4f       	sbci	r31, 0xFF	; 255
    68f0:	80 e9       	ldi	r24, 0x90	; 144
    68f2:	91 e0       	ldi	r25, 0x01	; 1
    68f4:	91 83       	std	Z+1, r25	; 0x01
    68f6:	80 83       	st	Z, r24
    68f8:	fe 01       	movw	r30, r28
    68fa:	e7 5b       	subi	r30, 0xB7	; 183
    68fc:	ff 4f       	sbci	r31, 0xFF	; 255
    68fe:	80 81       	ld	r24, Z
    6900:	91 81       	ldd	r25, Z+1	; 0x01
    6902:	01 97       	sbiw	r24, 0x01	; 1
    6904:	f1 f7       	brne	.-4      	; 0x6902 <Segment_init+0x185a>
    6906:	fe 01       	movw	r30, r28
    6908:	e7 5b       	subi	r30, 0xB7	; 183
    690a:	ff 4f       	sbci	r31, 0xFF	; 255
    690c:	91 83       	std	Z+1, r25	; 0x01
    690e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6910:	de 01       	movw	r26, r28
    6912:	a5 5b       	subi	r26, 0xB5	; 181
    6914:	bf 4f       	sbci	r27, 0xFF	; 255
    6916:	fe 01       	movw	r30, r28
    6918:	e5 5b       	subi	r30, 0xB5	; 181
    691a:	ff 4f       	sbci	r31, 0xFF	; 255
    691c:	80 81       	ld	r24, Z
    691e:	91 81       	ldd	r25, Z+1	; 0x01
    6920:	01 97       	sbiw	r24, 0x01	; 1
    6922:	11 96       	adiw	r26, 0x01	; 1
    6924:	9c 93       	st	X, r25
    6926:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6928:	fe 01       	movw	r30, r28
    692a:	e5 5b       	subi	r30, 0xB5	; 181
    692c:	ff 4f       	sbci	r31, 0xFF	; 255
    692e:	80 81       	ld	r24, Z
    6930:	91 81       	ldd	r25, Z+1	; 0x01
    6932:	00 97       	sbiw	r24, 0x00	; 0
    6934:	d1 f6       	brne	.-76     	; 0x68ea <Segment_init+0x1842>
    6936:	27 c0       	rjmp	.+78     	; 0x6986 <Segment_init+0x18de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6938:	8e 01       	movw	r16, r28
    693a:	05 5b       	subi	r16, 0xB5	; 181
    693c:	1f 4f       	sbci	r17, 0xFF	; 255
    693e:	fe 01       	movw	r30, r28
    6940:	e3 5b       	subi	r30, 0xB3	; 179
    6942:	ff 4f       	sbci	r31, 0xFF	; 255
    6944:	60 81       	ld	r22, Z
    6946:	71 81       	ldd	r23, Z+1	; 0x01
    6948:	82 81       	ldd	r24, Z+2	; 0x02
    694a:	93 81       	ldd	r25, Z+3	; 0x03
    694c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6950:	dc 01       	movw	r26, r24
    6952:	cb 01       	movw	r24, r22
    6954:	f8 01       	movw	r30, r16
    6956:	91 83       	std	Z+1, r25	; 0x01
    6958:	80 83       	st	Z, r24
    695a:	de 01       	movw	r26, r28
    695c:	a9 5b       	subi	r26, 0xB9	; 185
    695e:	bf 4f       	sbci	r27, 0xFF	; 255
    6960:	fe 01       	movw	r30, r28
    6962:	e5 5b       	subi	r30, 0xB5	; 181
    6964:	ff 4f       	sbci	r31, 0xFF	; 255
    6966:	80 81       	ld	r24, Z
    6968:	91 81       	ldd	r25, Z+1	; 0x01
    696a:	8d 93       	st	X+, r24
    696c:	9c 93       	st	X, r25
    696e:	fe 01       	movw	r30, r28
    6970:	e9 5b       	subi	r30, 0xB9	; 185
    6972:	ff 4f       	sbci	r31, 0xFF	; 255
    6974:	80 81       	ld	r24, Z
    6976:	91 81       	ldd	r25, Z+1	; 0x01
    6978:	01 97       	sbiw	r24, 0x01	; 1
    697a:	f1 f7       	brne	.-4      	; 0x6978 <Segment_init+0x18d0>
    697c:	fe 01       	movw	r30, r28
    697e:	e9 5b       	subi	r30, 0xB9	; 185
    6980:	ff 4f       	sbci	r31, 0xFF	; 255
    6982:	91 83       	std	Z+1, r25	; 0x01
    6984:	80 83       	st	Z, r24
				_delay_ms(2);
				DIO_voidSetPinValue(GPIOA_BASE,PIN2_ID,HIGH);
    6986:	89 e3       	ldi	r24, 0x39	; 57
    6988:	90 e0       	ldi	r25, 0x00	; 0
    698a:	62 e0       	ldi	r22, 0x02	; 2
    698c:	41 e0       	ldi	r20, 0x01	; 1
    698e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    6992:	fe 01       	movw	r30, r28
    6994:	ed 5b       	subi	r30, 0xBD	; 189
    6996:	ff 4f       	sbci	r31, 0xFF	; 255
    6998:	80 e0       	ldi	r24, 0x00	; 0
    699a:	90 e0       	ldi	r25, 0x00	; 0
    699c:	a0 e0       	ldi	r26, 0x00	; 0
    699e:	b0 e4       	ldi	r27, 0x40	; 64
    69a0:	80 83       	st	Z, r24
    69a2:	91 83       	std	Z+1, r25	; 0x01
    69a4:	a2 83       	std	Z+2, r26	; 0x02
    69a6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    69a8:	8e 01       	movw	r16, r28
    69aa:	01 5c       	subi	r16, 0xC1	; 193
    69ac:	1f 4f       	sbci	r17, 0xFF	; 255
    69ae:	fe 01       	movw	r30, r28
    69b0:	ed 5b       	subi	r30, 0xBD	; 189
    69b2:	ff 4f       	sbci	r31, 0xFF	; 255
    69b4:	60 81       	ld	r22, Z
    69b6:	71 81       	ldd	r23, Z+1	; 0x01
    69b8:	82 81       	ldd	r24, Z+2	; 0x02
    69ba:	93 81       	ldd	r25, Z+3	; 0x03
    69bc:	20 e0       	ldi	r18, 0x00	; 0
    69be:	30 e0       	ldi	r19, 0x00	; 0
    69c0:	4a e7       	ldi	r20, 0x7A	; 122
    69c2:	55 e4       	ldi	r21, 0x45	; 69
    69c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    69c8:	dc 01       	movw	r26, r24
    69ca:	cb 01       	movw	r24, r22
    69cc:	f8 01       	movw	r30, r16
    69ce:	80 83       	st	Z, r24
    69d0:	91 83       	std	Z+1, r25	; 0x01
    69d2:	a2 83       	std	Z+2, r26	; 0x02
    69d4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    69d6:	fe 01       	movw	r30, r28
    69d8:	ff 96       	adiw	r30, 0x3f	; 63
    69da:	60 81       	ld	r22, Z
    69dc:	71 81       	ldd	r23, Z+1	; 0x01
    69de:	82 81       	ldd	r24, Z+2	; 0x02
    69e0:	93 81       	ldd	r25, Z+3	; 0x03
    69e2:	20 e0       	ldi	r18, 0x00	; 0
    69e4:	30 e0       	ldi	r19, 0x00	; 0
    69e6:	40 e8       	ldi	r20, 0x80	; 128
    69e8:	5f e3       	ldi	r21, 0x3F	; 63
    69ea:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    69ee:	88 23       	and	r24, r24
    69f0:	2c f4       	brge	.+10     	; 0x69fc <Segment_init+0x1954>
		__ticks = 1;
    69f2:	81 e0       	ldi	r24, 0x01	; 1
    69f4:	90 e0       	ldi	r25, 0x00	; 0
    69f6:	9e af       	std	Y+62, r25	; 0x3e
    69f8:	8d af       	std	Y+61, r24	; 0x3d
    69fa:	46 c0       	rjmp	.+140    	; 0x6a88 <Segment_init+0x19e0>
	else if (__tmp > 65535)
    69fc:	fe 01       	movw	r30, r28
    69fe:	ff 96       	adiw	r30, 0x3f	; 63
    6a00:	60 81       	ld	r22, Z
    6a02:	71 81       	ldd	r23, Z+1	; 0x01
    6a04:	82 81       	ldd	r24, Z+2	; 0x02
    6a06:	93 81       	ldd	r25, Z+3	; 0x03
    6a08:	20 e0       	ldi	r18, 0x00	; 0
    6a0a:	3f ef       	ldi	r19, 0xFF	; 255
    6a0c:	4f e7       	ldi	r20, 0x7F	; 127
    6a0e:	57 e4       	ldi	r21, 0x47	; 71
    6a10:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6a14:	18 16       	cp	r1, r24
    6a16:	64 f5       	brge	.+88     	; 0x6a70 <Segment_init+0x19c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6a18:	fe 01       	movw	r30, r28
    6a1a:	ed 5b       	subi	r30, 0xBD	; 189
    6a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    6a1e:	60 81       	ld	r22, Z
    6a20:	71 81       	ldd	r23, Z+1	; 0x01
    6a22:	82 81       	ldd	r24, Z+2	; 0x02
    6a24:	93 81       	ldd	r25, Z+3	; 0x03
    6a26:	20 e0       	ldi	r18, 0x00	; 0
    6a28:	30 e0       	ldi	r19, 0x00	; 0
    6a2a:	40 e2       	ldi	r20, 0x20	; 32
    6a2c:	51 e4       	ldi	r21, 0x41	; 65
    6a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6a32:	dc 01       	movw	r26, r24
    6a34:	cb 01       	movw	r24, r22
    6a36:	bc 01       	movw	r22, r24
    6a38:	cd 01       	movw	r24, r26
    6a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a3e:	dc 01       	movw	r26, r24
    6a40:	cb 01       	movw	r24, r22
    6a42:	9e af       	std	Y+62, r25	; 0x3e
    6a44:	8d af       	std	Y+61, r24	; 0x3d
    6a46:	0f c0       	rjmp	.+30     	; 0x6a66 <Segment_init+0x19be>
    6a48:	80 e9       	ldi	r24, 0x90	; 144
    6a4a:	91 e0       	ldi	r25, 0x01	; 1
    6a4c:	9c af       	std	Y+60, r25	; 0x3c
    6a4e:	8b af       	std	Y+59, r24	; 0x3b
    6a50:	8b ad       	ldd	r24, Y+59	; 0x3b
    6a52:	9c ad       	ldd	r25, Y+60	; 0x3c
    6a54:	01 97       	sbiw	r24, 0x01	; 1
    6a56:	f1 f7       	brne	.-4      	; 0x6a54 <Segment_init+0x19ac>
    6a58:	9c af       	std	Y+60, r25	; 0x3c
    6a5a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6a5c:	8d ad       	ldd	r24, Y+61	; 0x3d
    6a5e:	9e ad       	ldd	r25, Y+62	; 0x3e
    6a60:	01 97       	sbiw	r24, 0x01	; 1
    6a62:	9e af       	std	Y+62, r25	; 0x3e
    6a64:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6a66:	8d ad       	ldd	r24, Y+61	; 0x3d
    6a68:	9e ad       	ldd	r25, Y+62	; 0x3e
    6a6a:	00 97       	sbiw	r24, 0x00	; 0
    6a6c:	69 f7       	brne	.-38     	; 0x6a48 <Segment_init+0x19a0>
    6a6e:	16 c0       	rjmp	.+44     	; 0x6a9c <Segment_init+0x19f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6a70:	fe 01       	movw	r30, r28
    6a72:	ff 96       	adiw	r30, 0x3f	; 63
    6a74:	60 81       	ld	r22, Z
    6a76:	71 81       	ldd	r23, Z+1	; 0x01
    6a78:	82 81       	ldd	r24, Z+2	; 0x02
    6a7a:	93 81       	ldd	r25, Z+3	; 0x03
    6a7c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6a80:	dc 01       	movw	r26, r24
    6a82:	cb 01       	movw	r24, r22
    6a84:	9e af       	std	Y+62, r25	; 0x3e
    6a86:	8d af       	std	Y+61, r24	; 0x3d
    6a88:	8d ad       	ldd	r24, Y+61	; 0x3d
    6a8a:	9e ad       	ldd	r25, Y+62	; 0x3e
    6a8c:	9a af       	std	Y+58, r25	; 0x3a
    6a8e:	89 af       	std	Y+57, r24	; 0x39
    6a90:	89 ad       	ldd	r24, Y+57	; 0x39
    6a92:	9a ad       	ldd	r25, Y+58	; 0x3a
    6a94:	01 97       	sbiw	r24, 0x01	; 1
    6a96:	f1 f7       	brne	.-4      	; 0x6a94 <Segment_init+0x19ec>
    6a98:	9a af       	std	Y+58, r25	; 0x3a
    6a9a:	89 af       	std	Y+57, r24	; 0x39
				_delay_ms(2);
				DIO_voidSetPinValue(GPIOB_BASE,PIN5_ID,LOW);
    6a9c:	86 e3       	ldi	r24, 0x36	; 54
    6a9e:	90 e0       	ldi	r25, 0x00	; 0
    6aa0:	65 e0       	ldi	r22, 0x05	; 5
    6aa2:	40 e0       	ldi	r20, 0x00	; 0
    6aa4:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    6aa8:	80 e0       	ldi	r24, 0x00	; 0
    6aaa:	90 e0       	ldi	r25, 0x00	; 0
    6aac:	a0 e0       	ldi	r26, 0x00	; 0
    6aae:	b0 e4       	ldi	r27, 0x40	; 64
    6ab0:	8d ab       	std	Y+53, r24	; 0x35
    6ab2:	9e ab       	std	Y+54, r25	; 0x36
    6ab4:	af ab       	std	Y+55, r26	; 0x37
    6ab6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6ab8:	6d a9       	ldd	r22, Y+53	; 0x35
    6aba:	7e a9       	ldd	r23, Y+54	; 0x36
    6abc:	8f a9       	ldd	r24, Y+55	; 0x37
    6abe:	98 ad       	ldd	r25, Y+56	; 0x38
    6ac0:	20 e0       	ldi	r18, 0x00	; 0
    6ac2:	30 e0       	ldi	r19, 0x00	; 0
    6ac4:	4a e7       	ldi	r20, 0x7A	; 122
    6ac6:	55 e4       	ldi	r21, 0x45	; 69
    6ac8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6acc:	dc 01       	movw	r26, r24
    6ace:	cb 01       	movw	r24, r22
    6ad0:	89 ab       	std	Y+49, r24	; 0x31
    6ad2:	9a ab       	std	Y+50, r25	; 0x32
    6ad4:	ab ab       	std	Y+51, r26	; 0x33
    6ad6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    6ad8:	69 a9       	ldd	r22, Y+49	; 0x31
    6ada:	7a a9       	ldd	r23, Y+50	; 0x32
    6adc:	8b a9       	ldd	r24, Y+51	; 0x33
    6ade:	9c a9       	ldd	r25, Y+52	; 0x34
    6ae0:	20 e0       	ldi	r18, 0x00	; 0
    6ae2:	30 e0       	ldi	r19, 0x00	; 0
    6ae4:	40 e8       	ldi	r20, 0x80	; 128
    6ae6:	5f e3       	ldi	r21, 0x3F	; 63
    6ae8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6aec:	88 23       	and	r24, r24
    6aee:	2c f4       	brge	.+10     	; 0x6afa <Segment_init+0x1a52>
		__ticks = 1;
    6af0:	81 e0       	ldi	r24, 0x01	; 1
    6af2:	90 e0       	ldi	r25, 0x00	; 0
    6af4:	98 ab       	std	Y+48, r25	; 0x30
    6af6:	8f a7       	std	Y+47, r24	; 0x2f
    6af8:	3f c0       	rjmp	.+126    	; 0x6b78 <Segment_init+0x1ad0>
	else if (__tmp > 65535)
    6afa:	69 a9       	ldd	r22, Y+49	; 0x31
    6afc:	7a a9       	ldd	r23, Y+50	; 0x32
    6afe:	8b a9       	ldd	r24, Y+51	; 0x33
    6b00:	9c a9       	ldd	r25, Y+52	; 0x34
    6b02:	20 e0       	ldi	r18, 0x00	; 0
    6b04:	3f ef       	ldi	r19, 0xFF	; 255
    6b06:	4f e7       	ldi	r20, 0x7F	; 127
    6b08:	57 e4       	ldi	r21, 0x47	; 71
    6b0a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6b0e:	18 16       	cp	r1, r24
    6b10:	4c f5       	brge	.+82     	; 0x6b64 <Segment_init+0x1abc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6b12:	6d a9       	ldd	r22, Y+53	; 0x35
    6b14:	7e a9       	ldd	r23, Y+54	; 0x36
    6b16:	8f a9       	ldd	r24, Y+55	; 0x37
    6b18:	98 ad       	ldd	r25, Y+56	; 0x38
    6b1a:	20 e0       	ldi	r18, 0x00	; 0
    6b1c:	30 e0       	ldi	r19, 0x00	; 0
    6b1e:	40 e2       	ldi	r20, 0x20	; 32
    6b20:	51 e4       	ldi	r21, 0x41	; 65
    6b22:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6b26:	dc 01       	movw	r26, r24
    6b28:	cb 01       	movw	r24, r22
    6b2a:	bc 01       	movw	r22, r24
    6b2c:	cd 01       	movw	r24, r26
    6b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b32:	dc 01       	movw	r26, r24
    6b34:	cb 01       	movw	r24, r22
    6b36:	98 ab       	std	Y+48, r25	; 0x30
    6b38:	8f a7       	std	Y+47, r24	; 0x2f
    6b3a:	0f c0       	rjmp	.+30     	; 0x6b5a <Segment_init+0x1ab2>
    6b3c:	80 e9       	ldi	r24, 0x90	; 144
    6b3e:	91 e0       	ldi	r25, 0x01	; 1
    6b40:	9e a7       	std	Y+46, r25	; 0x2e
    6b42:	8d a7       	std	Y+45, r24	; 0x2d
    6b44:	8d a5       	ldd	r24, Y+45	; 0x2d
    6b46:	9e a5       	ldd	r25, Y+46	; 0x2e
    6b48:	01 97       	sbiw	r24, 0x01	; 1
    6b4a:	f1 f7       	brne	.-4      	; 0x6b48 <Segment_init+0x1aa0>
    6b4c:	9e a7       	std	Y+46, r25	; 0x2e
    6b4e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6b50:	8f a5       	ldd	r24, Y+47	; 0x2f
    6b52:	98 a9       	ldd	r25, Y+48	; 0x30
    6b54:	01 97       	sbiw	r24, 0x01	; 1
    6b56:	98 ab       	std	Y+48, r25	; 0x30
    6b58:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6b5a:	8f a5       	ldd	r24, Y+47	; 0x2f
    6b5c:	98 a9       	ldd	r25, Y+48	; 0x30
    6b5e:	00 97       	sbiw	r24, 0x00	; 0
    6b60:	69 f7       	brne	.-38     	; 0x6b3c <Segment_init+0x1a94>
    6b62:	14 c0       	rjmp	.+40     	; 0x6b8c <Segment_init+0x1ae4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6b64:	69 a9       	ldd	r22, Y+49	; 0x31
    6b66:	7a a9       	ldd	r23, Y+50	; 0x32
    6b68:	8b a9       	ldd	r24, Y+51	; 0x33
    6b6a:	9c a9       	ldd	r25, Y+52	; 0x34
    6b6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6b70:	dc 01       	movw	r26, r24
    6b72:	cb 01       	movw	r24, r22
    6b74:	98 ab       	std	Y+48, r25	; 0x30
    6b76:	8f a7       	std	Y+47, r24	; 0x2f
    6b78:	8f a5       	ldd	r24, Y+47	; 0x2f
    6b7a:	98 a9       	ldd	r25, Y+48	; 0x30
    6b7c:	9c a7       	std	Y+44, r25	; 0x2c
    6b7e:	8b a7       	std	Y+43, r24	; 0x2b
    6b80:	8b a5       	ldd	r24, Y+43	; 0x2b
    6b82:	9c a5       	ldd	r25, Y+44	; 0x2c
    6b84:	01 97       	sbiw	r24, 0x01	; 1
    6b86:	f1 f7       	brne	.-4      	; 0x6b84 <Segment_init+0x1adc>
    6b88:	9c a7       	std	Y+44, r25	; 0x2c
    6b8a:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(2);
				DIO_voidSetPinValue(GPIOB_BASE,PIN6_ID,HIGH);
    6b8c:	86 e3       	ldi	r24, 0x36	; 54
    6b8e:	90 e0       	ldi	r25, 0x00	; 0
    6b90:	66 e0       	ldi	r22, 0x06	; 6
    6b92:	41 e0       	ldi	r20, 0x01	; 1
    6b94:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    6b98:	6e c1       	rjmp	.+732    	; 0x6e76 <Segment_init+0x1dce>
				break;
	case FOURTH:
				DIO_voidSetPinValue(GPIOA_BASE,PIN3_ID,HIGH);
    6b9a:	89 e3       	ldi	r24, 0x39	; 57
    6b9c:	90 e0       	ldi	r25, 0x00	; 0
    6b9e:	63 e0       	ldi	r22, 0x03	; 3
    6ba0:	41 e0       	ldi	r20, 0x01	; 1
    6ba2:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    6ba6:	80 e0       	ldi	r24, 0x00	; 0
    6ba8:	90 e0       	ldi	r25, 0x00	; 0
    6baa:	a0 e0       	ldi	r26, 0x00	; 0
    6bac:	b0 e4       	ldi	r27, 0x40	; 64
    6bae:	8f a3       	std	Y+39, r24	; 0x27
    6bb0:	98 a7       	std	Y+40, r25	; 0x28
    6bb2:	a9 a7       	std	Y+41, r26	; 0x29
    6bb4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6bb6:	6f a1       	ldd	r22, Y+39	; 0x27
    6bb8:	78 a5       	ldd	r23, Y+40	; 0x28
    6bba:	89 a5       	ldd	r24, Y+41	; 0x29
    6bbc:	9a a5       	ldd	r25, Y+42	; 0x2a
    6bbe:	20 e0       	ldi	r18, 0x00	; 0
    6bc0:	30 e0       	ldi	r19, 0x00	; 0
    6bc2:	4a e7       	ldi	r20, 0x7A	; 122
    6bc4:	55 e4       	ldi	r21, 0x45	; 69
    6bc6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6bca:	dc 01       	movw	r26, r24
    6bcc:	cb 01       	movw	r24, r22
    6bce:	8b a3       	std	Y+35, r24	; 0x23
    6bd0:	9c a3       	std	Y+36, r25	; 0x24
    6bd2:	ad a3       	std	Y+37, r26	; 0x25
    6bd4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    6bd6:	6b a1       	ldd	r22, Y+35	; 0x23
    6bd8:	7c a1       	ldd	r23, Y+36	; 0x24
    6bda:	8d a1       	ldd	r24, Y+37	; 0x25
    6bdc:	9e a1       	ldd	r25, Y+38	; 0x26
    6bde:	20 e0       	ldi	r18, 0x00	; 0
    6be0:	30 e0       	ldi	r19, 0x00	; 0
    6be2:	40 e8       	ldi	r20, 0x80	; 128
    6be4:	5f e3       	ldi	r21, 0x3F	; 63
    6be6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6bea:	88 23       	and	r24, r24
    6bec:	2c f4       	brge	.+10     	; 0x6bf8 <Segment_init+0x1b50>
		__ticks = 1;
    6bee:	81 e0       	ldi	r24, 0x01	; 1
    6bf0:	90 e0       	ldi	r25, 0x00	; 0
    6bf2:	9a a3       	std	Y+34, r25	; 0x22
    6bf4:	89 a3       	std	Y+33, r24	; 0x21
    6bf6:	3f c0       	rjmp	.+126    	; 0x6c76 <Segment_init+0x1bce>
	else if (__tmp > 65535)
    6bf8:	6b a1       	ldd	r22, Y+35	; 0x23
    6bfa:	7c a1       	ldd	r23, Y+36	; 0x24
    6bfc:	8d a1       	ldd	r24, Y+37	; 0x25
    6bfe:	9e a1       	ldd	r25, Y+38	; 0x26
    6c00:	20 e0       	ldi	r18, 0x00	; 0
    6c02:	3f ef       	ldi	r19, 0xFF	; 255
    6c04:	4f e7       	ldi	r20, 0x7F	; 127
    6c06:	57 e4       	ldi	r21, 0x47	; 71
    6c08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6c0c:	18 16       	cp	r1, r24
    6c0e:	4c f5       	brge	.+82     	; 0x6c62 <Segment_init+0x1bba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6c10:	6f a1       	ldd	r22, Y+39	; 0x27
    6c12:	78 a5       	ldd	r23, Y+40	; 0x28
    6c14:	89 a5       	ldd	r24, Y+41	; 0x29
    6c16:	9a a5       	ldd	r25, Y+42	; 0x2a
    6c18:	20 e0       	ldi	r18, 0x00	; 0
    6c1a:	30 e0       	ldi	r19, 0x00	; 0
    6c1c:	40 e2       	ldi	r20, 0x20	; 32
    6c1e:	51 e4       	ldi	r21, 0x41	; 65
    6c20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6c24:	dc 01       	movw	r26, r24
    6c26:	cb 01       	movw	r24, r22
    6c28:	bc 01       	movw	r22, r24
    6c2a:	cd 01       	movw	r24, r26
    6c2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c30:	dc 01       	movw	r26, r24
    6c32:	cb 01       	movw	r24, r22
    6c34:	9a a3       	std	Y+34, r25	; 0x22
    6c36:	89 a3       	std	Y+33, r24	; 0x21
    6c38:	0f c0       	rjmp	.+30     	; 0x6c58 <Segment_init+0x1bb0>
    6c3a:	80 e9       	ldi	r24, 0x90	; 144
    6c3c:	91 e0       	ldi	r25, 0x01	; 1
    6c3e:	98 a3       	std	Y+32, r25	; 0x20
    6c40:	8f 8f       	std	Y+31, r24	; 0x1f
    6c42:	8f 8d       	ldd	r24, Y+31	; 0x1f
    6c44:	98 a1       	ldd	r25, Y+32	; 0x20
    6c46:	01 97       	sbiw	r24, 0x01	; 1
    6c48:	f1 f7       	brne	.-4      	; 0x6c46 <Segment_init+0x1b9e>
    6c4a:	98 a3       	std	Y+32, r25	; 0x20
    6c4c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6c4e:	89 a1       	ldd	r24, Y+33	; 0x21
    6c50:	9a a1       	ldd	r25, Y+34	; 0x22
    6c52:	01 97       	sbiw	r24, 0x01	; 1
    6c54:	9a a3       	std	Y+34, r25	; 0x22
    6c56:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6c58:	89 a1       	ldd	r24, Y+33	; 0x21
    6c5a:	9a a1       	ldd	r25, Y+34	; 0x22
    6c5c:	00 97       	sbiw	r24, 0x00	; 0
    6c5e:	69 f7       	brne	.-38     	; 0x6c3a <Segment_init+0x1b92>
    6c60:	14 c0       	rjmp	.+40     	; 0x6c8a <Segment_init+0x1be2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6c62:	6b a1       	ldd	r22, Y+35	; 0x23
    6c64:	7c a1       	ldd	r23, Y+36	; 0x24
    6c66:	8d a1       	ldd	r24, Y+37	; 0x25
    6c68:	9e a1       	ldd	r25, Y+38	; 0x26
    6c6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6c6e:	dc 01       	movw	r26, r24
    6c70:	cb 01       	movw	r24, r22
    6c72:	9a a3       	std	Y+34, r25	; 0x22
    6c74:	89 a3       	std	Y+33, r24	; 0x21
    6c76:	89 a1       	ldd	r24, Y+33	; 0x21
    6c78:	9a a1       	ldd	r25, Y+34	; 0x22
    6c7a:	9e 8f       	std	Y+30, r25	; 0x1e
    6c7c:	8d 8f       	std	Y+29, r24	; 0x1d
    6c7e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    6c80:	9e 8d       	ldd	r25, Y+30	; 0x1e
    6c82:	01 97       	sbiw	r24, 0x01	; 1
    6c84:	f1 f7       	brne	.-4      	; 0x6c82 <Segment_init+0x1bda>
    6c86:	9e 8f       	std	Y+30, r25	; 0x1e
    6c88:	8d 8f       	std	Y+29, r24	; 0x1d
				_delay_ms(2);
				DIO_voidSetPinValue(GPIOA_BASE,PIN2_ID,HIGH);
    6c8a:	89 e3       	ldi	r24, 0x39	; 57
    6c8c:	90 e0       	ldi	r25, 0x00	; 0
    6c8e:	62 e0       	ldi	r22, 0x02	; 2
    6c90:	41 e0       	ldi	r20, 0x01	; 1
    6c92:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    6c96:	80 e0       	ldi	r24, 0x00	; 0
    6c98:	90 e0       	ldi	r25, 0x00	; 0
    6c9a:	a0 e0       	ldi	r26, 0x00	; 0
    6c9c:	b0 e4       	ldi	r27, 0x40	; 64
    6c9e:	89 8f       	std	Y+25, r24	; 0x19
    6ca0:	9a 8f       	std	Y+26, r25	; 0x1a
    6ca2:	ab 8f       	std	Y+27, r26	; 0x1b
    6ca4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6ca6:	69 8d       	ldd	r22, Y+25	; 0x19
    6ca8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6caa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6cac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6cae:	20 e0       	ldi	r18, 0x00	; 0
    6cb0:	30 e0       	ldi	r19, 0x00	; 0
    6cb2:	4a e7       	ldi	r20, 0x7A	; 122
    6cb4:	55 e4       	ldi	r21, 0x45	; 69
    6cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6cba:	dc 01       	movw	r26, r24
    6cbc:	cb 01       	movw	r24, r22
    6cbe:	8d 8b       	std	Y+21, r24	; 0x15
    6cc0:	9e 8b       	std	Y+22, r25	; 0x16
    6cc2:	af 8b       	std	Y+23, r26	; 0x17
    6cc4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    6cc6:	6d 89       	ldd	r22, Y+21	; 0x15
    6cc8:	7e 89       	ldd	r23, Y+22	; 0x16
    6cca:	8f 89       	ldd	r24, Y+23	; 0x17
    6ccc:	98 8d       	ldd	r25, Y+24	; 0x18
    6cce:	20 e0       	ldi	r18, 0x00	; 0
    6cd0:	30 e0       	ldi	r19, 0x00	; 0
    6cd2:	40 e8       	ldi	r20, 0x80	; 128
    6cd4:	5f e3       	ldi	r21, 0x3F	; 63
    6cd6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6cda:	88 23       	and	r24, r24
    6cdc:	2c f4       	brge	.+10     	; 0x6ce8 <Segment_init+0x1c40>
		__ticks = 1;
    6cde:	81 e0       	ldi	r24, 0x01	; 1
    6ce0:	90 e0       	ldi	r25, 0x00	; 0
    6ce2:	9c 8b       	std	Y+20, r25	; 0x14
    6ce4:	8b 8b       	std	Y+19, r24	; 0x13
    6ce6:	3f c0       	rjmp	.+126    	; 0x6d66 <Segment_init+0x1cbe>
	else if (__tmp > 65535)
    6ce8:	6d 89       	ldd	r22, Y+21	; 0x15
    6cea:	7e 89       	ldd	r23, Y+22	; 0x16
    6cec:	8f 89       	ldd	r24, Y+23	; 0x17
    6cee:	98 8d       	ldd	r25, Y+24	; 0x18
    6cf0:	20 e0       	ldi	r18, 0x00	; 0
    6cf2:	3f ef       	ldi	r19, 0xFF	; 255
    6cf4:	4f e7       	ldi	r20, 0x7F	; 127
    6cf6:	57 e4       	ldi	r21, 0x47	; 71
    6cf8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6cfc:	18 16       	cp	r1, r24
    6cfe:	4c f5       	brge	.+82     	; 0x6d52 <Segment_init+0x1caa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6d00:	69 8d       	ldd	r22, Y+25	; 0x19
    6d02:	7a 8d       	ldd	r23, Y+26	; 0x1a
    6d04:	8b 8d       	ldd	r24, Y+27	; 0x1b
    6d06:	9c 8d       	ldd	r25, Y+28	; 0x1c
    6d08:	20 e0       	ldi	r18, 0x00	; 0
    6d0a:	30 e0       	ldi	r19, 0x00	; 0
    6d0c:	40 e2       	ldi	r20, 0x20	; 32
    6d0e:	51 e4       	ldi	r21, 0x41	; 65
    6d10:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6d14:	dc 01       	movw	r26, r24
    6d16:	cb 01       	movw	r24, r22
    6d18:	bc 01       	movw	r22, r24
    6d1a:	cd 01       	movw	r24, r26
    6d1c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6d20:	dc 01       	movw	r26, r24
    6d22:	cb 01       	movw	r24, r22
    6d24:	9c 8b       	std	Y+20, r25	; 0x14
    6d26:	8b 8b       	std	Y+19, r24	; 0x13
    6d28:	0f c0       	rjmp	.+30     	; 0x6d48 <Segment_init+0x1ca0>
    6d2a:	80 e9       	ldi	r24, 0x90	; 144
    6d2c:	91 e0       	ldi	r25, 0x01	; 1
    6d2e:	9a 8b       	std	Y+18, r25	; 0x12
    6d30:	89 8b       	std	Y+17, r24	; 0x11
    6d32:	89 89       	ldd	r24, Y+17	; 0x11
    6d34:	9a 89       	ldd	r25, Y+18	; 0x12
    6d36:	01 97       	sbiw	r24, 0x01	; 1
    6d38:	f1 f7       	brne	.-4      	; 0x6d36 <Segment_init+0x1c8e>
    6d3a:	9a 8b       	std	Y+18, r25	; 0x12
    6d3c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6d3e:	8b 89       	ldd	r24, Y+19	; 0x13
    6d40:	9c 89       	ldd	r25, Y+20	; 0x14
    6d42:	01 97       	sbiw	r24, 0x01	; 1
    6d44:	9c 8b       	std	Y+20, r25	; 0x14
    6d46:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6d48:	8b 89       	ldd	r24, Y+19	; 0x13
    6d4a:	9c 89       	ldd	r25, Y+20	; 0x14
    6d4c:	00 97       	sbiw	r24, 0x00	; 0
    6d4e:	69 f7       	brne	.-38     	; 0x6d2a <Segment_init+0x1c82>
    6d50:	14 c0       	rjmp	.+40     	; 0x6d7a <Segment_init+0x1cd2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6d52:	6d 89       	ldd	r22, Y+21	; 0x15
    6d54:	7e 89       	ldd	r23, Y+22	; 0x16
    6d56:	8f 89       	ldd	r24, Y+23	; 0x17
    6d58:	98 8d       	ldd	r25, Y+24	; 0x18
    6d5a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6d5e:	dc 01       	movw	r26, r24
    6d60:	cb 01       	movw	r24, r22
    6d62:	9c 8b       	std	Y+20, r25	; 0x14
    6d64:	8b 8b       	std	Y+19, r24	; 0x13
    6d66:	8b 89       	ldd	r24, Y+19	; 0x13
    6d68:	9c 89       	ldd	r25, Y+20	; 0x14
    6d6a:	98 8b       	std	Y+16, r25	; 0x10
    6d6c:	8f 87       	std	Y+15, r24	; 0x0f
    6d6e:	8f 85       	ldd	r24, Y+15	; 0x0f
    6d70:	98 89       	ldd	r25, Y+16	; 0x10
    6d72:	01 97       	sbiw	r24, 0x01	; 1
    6d74:	f1 f7       	brne	.-4      	; 0x6d72 <Segment_init+0x1cca>
    6d76:	98 8b       	std	Y+16, r25	; 0x10
    6d78:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(2);
				DIO_voidSetPinValue(GPIOB_BASE,PIN5_ID,HIGH);
    6d7a:	86 e3       	ldi	r24, 0x36	; 54
    6d7c:	90 e0       	ldi	r25, 0x00	; 0
    6d7e:	65 e0       	ldi	r22, 0x05	; 5
    6d80:	41 e0       	ldi	r20, 0x01	; 1
    6d82:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    6d86:	80 e0       	ldi	r24, 0x00	; 0
    6d88:	90 e0       	ldi	r25, 0x00	; 0
    6d8a:	a0 e0       	ldi	r26, 0x00	; 0
    6d8c:	b0 e4       	ldi	r27, 0x40	; 64
    6d8e:	8b 87       	std	Y+11, r24	; 0x0b
    6d90:	9c 87       	std	Y+12, r25	; 0x0c
    6d92:	ad 87       	std	Y+13, r26	; 0x0d
    6d94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    6d96:	6b 85       	ldd	r22, Y+11	; 0x0b
    6d98:	7c 85       	ldd	r23, Y+12	; 0x0c
    6d9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    6d9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    6d9e:	20 e0       	ldi	r18, 0x00	; 0
    6da0:	30 e0       	ldi	r19, 0x00	; 0
    6da2:	4a e7       	ldi	r20, 0x7A	; 122
    6da4:	55 e4       	ldi	r21, 0x45	; 69
    6da6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6daa:	dc 01       	movw	r26, r24
    6dac:	cb 01       	movw	r24, r22
    6dae:	8f 83       	std	Y+7, r24	; 0x07
    6db0:	98 87       	std	Y+8, r25	; 0x08
    6db2:	a9 87       	std	Y+9, r26	; 0x09
    6db4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    6db6:	6f 81       	ldd	r22, Y+7	; 0x07
    6db8:	78 85       	ldd	r23, Y+8	; 0x08
    6dba:	89 85       	ldd	r24, Y+9	; 0x09
    6dbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    6dbe:	20 e0       	ldi	r18, 0x00	; 0
    6dc0:	30 e0       	ldi	r19, 0x00	; 0
    6dc2:	40 e8       	ldi	r20, 0x80	; 128
    6dc4:	5f e3       	ldi	r21, 0x3F	; 63
    6dc6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    6dca:	88 23       	and	r24, r24
    6dcc:	2c f4       	brge	.+10     	; 0x6dd8 <Segment_init+0x1d30>
		__ticks = 1;
    6dce:	81 e0       	ldi	r24, 0x01	; 1
    6dd0:	90 e0       	ldi	r25, 0x00	; 0
    6dd2:	9e 83       	std	Y+6, r25	; 0x06
    6dd4:	8d 83       	std	Y+5, r24	; 0x05
    6dd6:	3f c0       	rjmp	.+126    	; 0x6e56 <Segment_init+0x1dae>
	else if (__tmp > 65535)
    6dd8:	6f 81       	ldd	r22, Y+7	; 0x07
    6dda:	78 85       	ldd	r23, Y+8	; 0x08
    6ddc:	89 85       	ldd	r24, Y+9	; 0x09
    6dde:	9a 85       	ldd	r25, Y+10	; 0x0a
    6de0:	20 e0       	ldi	r18, 0x00	; 0
    6de2:	3f ef       	ldi	r19, 0xFF	; 255
    6de4:	4f e7       	ldi	r20, 0x7F	; 127
    6de6:	57 e4       	ldi	r21, 0x47	; 71
    6de8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    6dec:	18 16       	cp	r1, r24
    6dee:	4c f5       	brge	.+82     	; 0x6e42 <Segment_init+0x1d9a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    6df0:	6b 85       	ldd	r22, Y+11	; 0x0b
    6df2:	7c 85       	ldd	r23, Y+12	; 0x0c
    6df4:	8d 85       	ldd	r24, Y+13	; 0x0d
    6df6:	9e 85       	ldd	r25, Y+14	; 0x0e
    6df8:	20 e0       	ldi	r18, 0x00	; 0
    6dfa:	30 e0       	ldi	r19, 0x00	; 0
    6dfc:	40 e2       	ldi	r20, 0x20	; 32
    6dfe:	51 e4       	ldi	r21, 0x41	; 65
    6e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    6e04:	dc 01       	movw	r26, r24
    6e06:	cb 01       	movw	r24, r22
    6e08:	bc 01       	movw	r22, r24
    6e0a:	cd 01       	movw	r24, r26
    6e0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6e10:	dc 01       	movw	r26, r24
    6e12:	cb 01       	movw	r24, r22
    6e14:	9e 83       	std	Y+6, r25	; 0x06
    6e16:	8d 83       	std	Y+5, r24	; 0x05
    6e18:	0f c0       	rjmp	.+30     	; 0x6e38 <Segment_init+0x1d90>
    6e1a:	80 e9       	ldi	r24, 0x90	; 144
    6e1c:	91 e0       	ldi	r25, 0x01	; 1
    6e1e:	9c 83       	std	Y+4, r25	; 0x04
    6e20:	8b 83       	std	Y+3, r24	; 0x03
    6e22:	8b 81       	ldd	r24, Y+3	; 0x03
    6e24:	9c 81       	ldd	r25, Y+4	; 0x04
    6e26:	01 97       	sbiw	r24, 0x01	; 1
    6e28:	f1 f7       	brne	.-4      	; 0x6e26 <Segment_init+0x1d7e>
    6e2a:	9c 83       	std	Y+4, r25	; 0x04
    6e2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    6e2e:	8d 81       	ldd	r24, Y+5	; 0x05
    6e30:	9e 81       	ldd	r25, Y+6	; 0x06
    6e32:	01 97       	sbiw	r24, 0x01	; 1
    6e34:	9e 83       	std	Y+6, r25	; 0x06
    6e36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    6e38:	8d 81       	ldd	r24, Y+5	; 0x05
    6e3a:	9e 81       	ldd	r25, Y+6	; 0x06
    6e3c:	00 97       	sbiw	r24, 0x00	; 0
    6e3e:	69 f7       	brne	.-38     	; 0x6e1a <Segment_init+0x1d72>
    6e40:	14 c0       	rjmp	.+40     	; 0x6e6a <Segment_init+0x1dc2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    6e42:	6f 81       	ldd	r22, Y+7	; 0x07
    6e44:	78 85       	ldd	r23, Y+8	; 0x08
    6e46:	89 85       	ldd	r24, Y+9	; 0x09
    6e48:	9a 85       	ldd	r25, Y+10	; 0x0a
    6e4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    6e4e:	dc 01       	movw	r26, r24
    6e50:	cb 01       	movw	r24, r22
    6e52:	9e 83       	std	Y+6, r25	; 0x06
    6e54:	8d 83       	std	Y+5, r24	; 0x05
    6e56:	8d 81       	ldd	r24, Y+5	; 0x05
    6e58:	9e 81       	ldd	r25, Y+6	; 0x06
    6e5a:	9a 83       	std	Y+2, r25	; 0x02
    6e5c:	89 83       	std	Y+1, r24	; 0x01
    6e5e:	89 81       	ldd	r24, Y+1	; 0x01
    6e60:	9a 81       	ldd	r25, Y+2	; 0x02
    6e62:	01 97       	sbiw	r24, 0x01	; 1
    6e64:	f1 f7       	brne	.-4      	; 0x6e62 <Segment_init+0x1dba>
    6e66:	9a 83       	std	Y+2, r25	; 0x02
    6e68:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(2);
				DIO_voidSetPinValue(GPIOB_BASE,PIN6_ID,LOW);
    6e6a:	86 e3       	ldi	r24, 0x36	; 54
    6e6c:	90 e0       	ldi	r25, 0x00	; 0
    6e6e:	66 e0       	ldi	r22, 0x06	; 6
    6e70:	40 e0       	ldi	r20, 0x00	; 0
    6e72:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
				break;

	}

}
    6e76:	c7 5d       	subi	r28, 0xD7	; 215
    6e78:	de 4f       	sbci	r29, 0xFE	; 254
    6e7a:	0f b6       	in	r0, 0x3f	; 63
    6e7c:	f8 94       	cli
    6e7e:	de bf       	out	0x3e, r29	; 62
    6e80:	0f be       	out	0x3f, r0	; 63
    6e82:	cd bf       	out	0x3d, r28	; 61
    6e84:	cf 91       	pop	r28
    6e86:	df 91       	pop	r29
    6e88:	1f 91       	pop	r17
    6e8a:	0f 91       	pop	r16
    6e8c:	08 95       	ret

00006e8e <SevenSeg_Num>:
 * @retval 			-none
 * Note				-none
 * =================================================================*/
void SevenSeg_Num(uint8 num)

{
    6e8e:	df 93       	push	r29
    6e90:	cf 93       	push	r28
    6e92:	00 d0       	rcall	.+0      	; 0x6e94 <SevenSeg_Num+0x6>
    6e94:	0f 92       	push	r0
    6e96:	cd b7       	in	r28, 0x3d	; 61
    6e98:	de b7       	in	r29, 0x3e	; 62
    6e9a:	89 83       	std	Y+1, r24	; 0x01
	switch(num)
    6e9c:	89 81       	ldd	r24, Y+1	; 0x01
    6e9e:	28 2f       	mov	r18, r24
    6ea0:	30 e0       	ldi	r19, 0x00	; 0
    6ea2:	3b 83       	std	Y+3, r19	; 0x03
    6ea4:	2a 83       	std	Y+2, r18	; 0x02
    6ea6:	8a 81       	ldd	r24, Y+2	; 0x02
    6ea8:	9b 81       	ldd	r25, Y+3	; 0x03
    6eaa:	84 30       	cpi	r24, 0x04	; 4
    6eac:	91 05       	cpc	r25, r1
    6eae:	09 f4       	brne	.+2      	; 0x6eb2 <SevenSeg_Num+0x24>
    6eb0:	ab c0       	rjmp	.+342    	; 0x7008 <SevenSeg_Num+0x17a>
    6eb2:	2a 81       	ldd	r18, Y+2	; 0x02
    6eb4:	3b 81       	ldd	r19, Y+3	; 0x03
    6eb6:	25 30       	cpi	r18, 0x05	; 5
    6eb8:	31 05       	cpc	r19, r1
    6eba:	ec f4       	brge	.+58     	; 0x6ef6 <SevenSeg_Num+0x68>
    6ebc:	8a 81       	ldd	r24, Y+2	; 0x02
    6ebe:	9b 81       	ldd	r25, Y+3	; 0x03
    6ec0:	81 30       	cpi	r24, 0x01	; 1
    6ec2:	91 05       	cpc	r25, r1
    6ec4:	09 f4       	brne	.+2      	; 0x6ec8 <SevenSeg_Num+0x3a>
    6ec6:	55 c0       	rjmp	.+170    	; 0x6f72 <SevenSeg_Num+0xe4>
    6ec8:	2a 81       	ldd	r18, Y+2	; 0x02
    6eca:	3b 81       	ldd	r19, Y+3	; 0x03
    6ecc:	22 30       	cpi	r18, 0x02	; 2
    6ece:	31 05       	cpc	r19, r1
    6ed0:	2c f4       	brge	.+10     	; 0x6edc <SevenSeg_Num+0x4e>
    6ed2:	8a 81       	ldd	r24, Y+2	; 0x02
    6ed4:	9b 81       	ldd	r25, Y+3	; 0x03
    6ed6:	00 97       	sbiw	r24, 0x00	; 0
    6ed8:	99 f1       	breq	.+102    	; 0x6f40 <SevenSeg_Num+0xb2>
    6eda:	2b c1       	rjmp	.+598    	; 0x7132 <SevenSeg_Num+0x2a4>
    6edc:	2a 81       	ldd	r18, Y+2	; 0x02
    6ede:	3b 81       	ldd	r19, Y+3	; 0x03
    6ee0:	22 30       	cpi	r18, 0x02	; 2
    6ee2:	31 05       	cpc	r19, r1
    6ee4:	09 f4       	brne	.+2      	; 0x6ee8 <SevenSeg_Num+0x5a>
    6ee6:	5e c0       	rjmp	.+188    	; 0x6fa4 <SevenSeg_Num+0x116>
    6ee8:	8a 81       	ldd	r24, Y+2	; 0x02
    6eea:	9b 81       	ldd	r25, Y+3	; 0x03
    6eec:	83 30       	cpi	r24, 0x03	; 3
    6eee:	91 05       	cpc	r25, r1
    6ef0:	09 f4       	brne	.+2      	; 0x6ef4 <SevenSeg_Num+0x66>
    6ef2:	71 c0       	rjmp	.+226    	; 0x6fd6 <SevenSeg_Num+0x148>
    6ef4:	1e c1       	rjmp	.+572    	; 0x7132 <SevenSeg_Num+0x2a4>
    6ef6:	2a 81       	ldd	r18, Y+2	; 0x02
    6ef8:	3b 81       	ldd	r19, Y+3	; 0x03
    6efa:	27 30       	cpi	r18, 0x07	; 7
    6efc:	31 05       	cpc	r19, r1
    6efe:	09 f4       	brne	.+2      	; 0x6f02 <SevenSeg_Num+0x74>
    6f00:	ce c0       	rjmp	.+412    	; 0x709e <SevenSeg_Num+0x210>
    6f02:	8a 81       	ldd	r24, Y+2	; 0x02
    6f04:	9b 81       	ldd	r25, Y+3	; 0x03
    6f06:	88 30       	cpi	r24, 0x08	; 8
    6f08:	91 05       	cpc	r25, r1
    6f0a:	6c f4       	brge	.+26     	; 0x6f26 <SevenSeg_Num+0x98>
    6f0c:	2a 81       	ldd	r18, Y+2	; 0x02
    6f0e:	3b 81       	ldd	r19, Y+3	; 0x03
    6f10:	25 30       	cpi	r18, 0x05	; 5
    6f12:	31 05       	cpc	r19, r1
    6f14:	09 f4       	brne	.+2      	; 0x6f18 <SevenSeg_Num+0x8a>
    6f16:	91 c0       	rjmp	.+290    	; 0x703a <SevenSeg_Num+0x1ac>
    6f18:	8a 81       	ldd	r24, Y+2	; 0x02
    6f1a:	9b 81       	ldd	r25, Y+3	; 0x03
    6f1c:	86 30       	cpi	r24, 0x06	; 6
    6f1e:	91 05       	cpc	r25, r1
    6f20:	09 f4       	brne	.+2      	; 0x6f24 <SevenSeg_Num+0x96>
    6f22:	a4 c0       	rjmp	.+328    	; 0x706c <SevenSeg_Num+0x1de>
    6f24:	06 c1       	rjmp	.+524    	; 0x7132 <SevenSeg_Num+0x2a4>
    6f26:	2a 81       	ldd	r18, Y+2	; 0x02
    6f28:	3b 81       	ldd	r19, Y+3	; 0x03
    6f2a:	28 30       	cpi	r18, 0x08	; 8
    6f2c:	31 05       	cpc	r19, r1
    6f2e:	09 f4       	brne	.+2      	; 0x6f32 <SevenSeg_Num+0xa4>
    6f30:	cf c0       	rjmp	.+414    	; 0x70d0 <SevenSeg_Num+0x242>
    6f32:	8a 81       	ldd	r24, Y+2	; 0x02
    6f34:	9b 81       	ldd	r25, Y+3	; 0x03
    6f36:	89 30       	cpi	r24, 0x09	; 9
    6f38:	91 05       	cpc	r25, r1
    6f3a:	09 f4       	brne	.+2      	; 0x6f3e <SevenSeg_Num+0xb0>
    6f3c:	e2 c0       	rjmp	.+452    	; 0x7102 <SevenSeg_Num+0x274>
    6f3e:	f9 c0       	rjmp	.+498    	; 0x7132 <SevenSeg_Num+0x2a4>
	{
	case 0:
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,LOW);
    6f40:	86 e3       	ldi	r24, 0x36	; 54
    6f42:	90 e0       	ldi	r25, 0x00	; 0
    6f44:	60 e0       	ldi	r22, 0x00	; 0
    6f46:	40 e0       	ldi	r20, 0x00	; 0
    6f48:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,LOW);
    6f4c:	86 e3       	ldi	r24, 0x36	; 54
    6f4e:	90 e0       	ldi	r25, 0x00	; 0
    6f50:	61 e0       	ldi	r22, 0x01	; 1
    6f52:	40 e0       	ldi	r20, 0x00	; 0
    6f54:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,LOW);
    6f58:	86 e3       	ldi	r24, 0x36	; 54
    6f5a:	90 e0       	ldi	r25, 0x00	; 0
    6f5c:	62 e0       	ldi	r22, 0x02	; 2
    6f5e:	40 e0       	ldi	r20, 0x00	; 0
    6f60:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,LOW);
    6f64:	86 e3       	ldi	r24, 0x36	; 54
    6f66:	90 e0       	ldi	r25, 0x00	; 0
    6f68:	64 e0       	ldi	r22, 0x04	; 4
    6f6a:	40 e0       	ldi	r20, 0x00	; 0
    6f6c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    6f70:	e0 c0       	rjmp	.+448    	; 0x7132 <SevenSeg_Num+0x2a4>
		break;
	case 1 :
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,HIGH);
    6f72:	86 e3       	ldi	r24, 0x36	; 54
    6f74:	90 e0       	ldi	r25, 0x00	; 0
    6f76:	60 e0       	ldi	r22, 0x00	; 0
    6f78:	41 e0       	ldi	r20, 0x01	; 1
    6f7a:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,LOW);
    6f7e:	86 e3       	ldi	r24, 0x36	; 54
    6f80:	90 e0       	ldi	r25, 0x00	; 0
    6f82:	61 e0       	ldi	r22, 0x01	; 1
    6f84:	40 e0       	ldi	r20, 0x00	; 0
    6f86:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,LOW);
    6f8a:	86 e3       	ldi	r24, 0x36	; 54
    6f8c:	90 e0       	ldi	r25, 0x00	; 0
    6f8e:	62 e0       	ldi	r22, 0x02	; 2
    6f90:	40 e0       	ldi	r20, 0x00	; 0
    6f92:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,LOW);
    6f96:	86 e3       	ldi	r24, 0x36	; 54
    6f98:	90 e0       	ldi	r25, 0x00	; 0
    6f9a:	64 e0       	ldi	r22, 0x04	; 4
    6f9c:	40 e0       	ldi	r20, 0x00	; 0
    6f9e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    6fa2:	c7 c0       	rjmp	.+398    	; 0x7132 <SevenSeg_Num+0x2a4>
		break;
	case 2 :
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,LOW);
    6fa4:	86 e3       	ldi	r24, 0x36	; 54
    6fa6:	90 e0       	ldi	r25, 0x00	; 0
    6fa8:	60 e0       	ldi	r22, 0x00	; 0
    6faa:	40 e0       	ldi	r20, 0x00	; 0
    6fac:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,HIGH);
    6fb0:	86 e3       	ldi	r24, 0x36	; 54
    6fb2:	90 e0       	ldi	r25, 0x00	; 0
    6fb4:	61 e0       	ldi	r22, 0x01	; 1
    6fb6:	41 e0       	ldi	r20, 0x01	; 1
    6fb8:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,LOW);
    6fbc:	86 e3       	ldi	r24, 0x36	; 54
    6fbe:	90 e0       	ldi	r25, 0x00	; 0
    6fc0:	62 e0       	ldi	r22, 0x02	; 2
    6fc2:	40 e0       	ldi	r20, 0x00	; 0
    6fc4:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,LOW);
    6fc8:	86 e3       	ldi	r24, 0x36	; 54
    6fca:	90 e0       	ldi	r25, 0x00	; 0
    6fcc:	64 e0       	ldi	r22, 0x04	; 4
    6fce:	40 e0       	ldi	r20, 0x00	; 0
    6fd0:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    6fd4:	ae c0       	rjmp	.+348    	; 0x7132 <SevenSeg_Num+0x2a4>
		break;
	case 3 :
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,HIGH);
    6fd6:	86 e3       	ldi	r24, 0x36	; 54
    6fd8:	90 e0       	ldi	r25, 0x00	; 0
    6fda:	60 e0       	ldi	r22, 0x00	; 0
    6fdc:	41 e0       	ldi	r20, 0x01	; 1
    6fde:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,HIGH);
    6fe2:	86 e3       	ldi	r24, 0x36	; 54
    6fe4:	90 e0       	ldi	r25, 0x00	; 0
    6fe6:	61 e0       	ldi	r22, 0x01	; 1
    6fe8:	41 e0       	ldi	r20, 0x01	; 1
    6fea:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,LOW);
    6fee:	86 e3       	ldi	r24, 0x36	; 54
    6ff0:	90 e0       	ldi	r25, 0x00	; 0
    6ff2:	62 e0       	ldi	r22, 0x02	; 2
    6ff4:	40 e0       	ldi	r20, 0x00	; 0
    6ff6:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,LOW);
    6ffa:	86 e3       	ldi	r24, 0x36	; 54
    6ffc:	90 e0       	ldi	r25, 0x00	; 0
    6ffe:	64 e0       	ldi	r22, 0x04	; 4
    7000:	40 e0       	ldi	r20, 0x00	; 0
    7002:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    7006:	95 c0       	rjmp	.+298    	; 0x7132 <SevenSeg_Num+0x2a4>
		break;
	case 4 :
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,LOW);
    7008:	86 e3       	ldi	r24, 0x36	; 54
    700a:	90 e0       	ldi	r25, 0x00	; 0
    700c:	60 e0       	ldi	r22, 0x00	; 0
    700e:	40 e0       	ldi	r20, 0x00	; 0
    7010:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,LOW);
    7014:	86 e3       	ldi	r24, 0x36	; 54
    7016:	90 e0       	ldi	r25, 0x00	; 0
    7018:	61 e0       	ldi	r22, 0x01	; 1
    701a:	40 e0       	ldi	r20, 0x00	; 0
    701c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,HIGH);
    7020:	86 e3       	ldi	r24, 0x36	; 54
    7022:	90 e0       	ldi	r25, 0x00	; 0
    7024:	62 e0       	ldi	r22, 0x02	; 2
    7026:	41 e0       	ldi	r20, 0x01	; 1
    7028:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,LOW);
    702c:	86 e3       	ldi	r24, 0x36	; 54
    702e:	90 e0       	ldi	r25, 0x00	; 0
    7030:	64 e0       	ldi	r22, 0x04	; 4
    7032:	40 e0       	ldi	r20, 0x00	; 0
    7034:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    7038:	7c c0       	rjmp	.+248    	; 0x7132 <SevenSeg_Num+0x2a4>
		break;
	case 5 :
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,HIGH);
    703a:	86 e3       	ldi	r24, 0x36	; 54
    703c:	90 e0       	ldi	r25, 0x00	; 0
    703e:	60 e0       	ldi	r22, 0x00	; 0
    7040:	41 e0       	ldi	r20, 0x01	; 1
    7042:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,LOW);
    7046:	86 e3       	ldi	r24, 0x36	; 54
    7048:	90 e0       	ldi	r25, 0x00	; 0
    704a:	61 e0       	ldi	r22, 0x01	; 1
    704c:	40 e0       	ldi	r20, 0x00	; 0
    704e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,HIGH);
    7052:	86 e3       	ldi	r24, 0x36	; 54
    7054:	90 e0       	ldi	r25, 0x00	; 0
    7056:	62 e0       	ldi	r22, 0x02	; 2
    7058:	41 e0       	ldi	r20, 0x01	; 1
    705a:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,LOW);
    705e:	86 e3       	ldi	r24, 0x36	; 54
    7060:	90 e0       	ldi	r25, 0x00	; 0
    7062:	64 e0       	ldi	r22, 0x04	; 4
    7064:	40 e0       	ldi	r20, 0x00	; 0
    7066:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    706a:	63 c0       	rjmp	.+198    	; 0x7132 <SevenSeg_Num+0x2a4>
		break;
	case 6 :
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,LOW);
    706c:	86 e3       	ldi	r24, 0x36	; 54
    706e:	90 e0       	ldi	r25, 0x00	; 0
    7070:	60 e0       	ldi	r22, 0x00	; 0
    7072:	40 e0       	ldi	r20, 0x00	; 0
    7074:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,HIGH);
    7078:	86 e3       	ldi	r24, 0x36	; 54
    707a:	90 e0       	ldi	r25, 0x00	; 0
    707c:	61 e0       	ldi	r22, 0x01	; 1
    707e:	41 e0       	ldi	r20, 0x01	; 1
    7080:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,HIGH);
    7084:	86 e3       	ldi	r24, 0x36	; 54
    7086:	90 e0       	ldi	r25, 0x00	; 0
    7088:	62 e0       	ldi	r22, 0x02	; 2
    708a:	41 e0       	ldi	r20, 0x01	; 1
    708c:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,LOW);
    7090:	86 e3       	ldi	r24, 0x36	; 54
    7092:	90 e0       	ldi	r25, 0x00	; 0
    7094:	64 e0       	ldi	r22, 0x04	; 4
    7096:	40 e0       	ldi	r20, 0x00	; 0
    7098:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    709c:	4a c0       	rjmp	.+148    	; 0x7132 <SevenSeg_Num+0x2a4>
		break;
	case 7 :
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,HIGH);
    709e:	86 e3       	ldi	r24, 0x36	; 54
    70a0:	90 e0       	ldi	r25, 0x00	; 0
    70a2:	60 e0       	ldi	r22, 0x00	; 0
    70a4:	41 e0       	ldi	r20, 0x01	; 1
    70a6:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,HIGH);
    70aa:	86 e3       	ldi	r24, 0x36	; 54
    70ac:	90 e0       	ldi	r25, 0x00	; 0
    70ae:	61 e0       	ldi	r22, 0x01	; 1
    70b0:	41 e0       	ldi	r20, 0x01	; 1
    70b2:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,HIGH);
    70b6:	86 e3       	ldi	r24, 0x36	; 54
    70b8:	90 e0       	ldi	r25, 0x00	; 0
    70ba:	62 e0       	ldi	r22, 0x02	; 2
    70bc:	41 e0       	ldi	r20, 0x01	; 1
    70be:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,LOW);
    70c2:	86 e3       	ldi	r24, 0x36	; 54
    70c4:	90 e0       	ldi	r25, 0x00	; 0
    70c6:	64 e0       	ldi	r22, 0x04	; 4
    70c8:	40 e0       	ldi	r20, 0x00	; 0
    70ca:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    70ce:	31 c0       	rjmp	.+98     	; 0x7132 <SevenSeg_Num+0x2a4>
		break;
	case 8 :
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,LOW);
    70d0:	86 e3       	ldi	r24, 0x36	; 54
    70d2:	90 e0       	ldi	r25, 0x00	; 0
    70d4:	60 e0       	ldi	r22, 0x00	; 0
    70d6:	40 e0       	ldi	r20, 0x00	; 0
    70d8:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,LOW);
    70dc:	86 e3       	ldi	r24, 0x36	; 54
    70de:	90 e0       	ldi	r25, 0x00	; 0
    70e0:	61 e0       	ldi	r22, 0x01	; 1
    70e2:	40 e0       	ldi	r20, 0x00	; 0
    70e4:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,LOW);
    70e8:	86 e3       	ldi	r24, 0x36	; 54
    70ea:	90 e0       	ldi	r25, 0x00	; 0
    70ec:	62 e0       	ldi	r22, 0x02	; 2
    70ee:	40 e0       	ldi	r20, 0x00	; 0
    70f0:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,HIGH);
    70f4:	86 e3       	ldi	r24, 0x36	; 54
    70f6:	90 e0       	ldi	r25, 0x00	; 0
    70f8:	64 e0       	ldi	r22, 0x04	; 4
    70fa:	41 e0       	ldi	r20, 0x01	; 1
    70fc:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    7100:	18 c0       	rjmp	.+48     	; 0x7132 <SevenSeg_Num+0x2a4>
		break;
	case 9 :
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,HIGH);
    7102:	86 e3       	ldi	r24, 0x36	; 54
    7104:	90 e0       	ldi	r25, 0x00	; 0
    7106:	60 e0       	ldi	r22, 0x00	; 0
    7108:	41 e0       	ldi	r20, 0x01	; 1
    710a:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,LOW);
    710e:	86 e3       	ldi	r24, 0x36	; 54
    7110:	90 e0       	ldi	r25, 0x00	; 0
    7112:	61 e0       	ldi	r22, 0x01	; 1
    7114:	40 e0       	ldi	r20, 0x00	; 0
    7116:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,LOW);
    711a:	86 e3       	ldi	r24, 0x36	; 54
    711c:	90 e0       	ldi	r25, 0x00	; 0
    711e:	62 e0       	ldi	r22, 0x02	; 2
    7120:	40 e0       	ldi	r20, 0x00	; 0
    7122:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,HIGH);
    7126:	86 e3       	ldi	r24, 0x36	; 54
    7128:	90 e0       	ldi	r25, 0x00	; 0
    712a:	64 e0       	ldi	r22, 0x04	; 4
    712c:	41 e0       	ldi	r20, 0x01	; 1
    712e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
		break;
	}

}
    7132:	0f 90       	pop	r0
    7134:	0f 90       	pop	r0
    7136:	0f 90       	pop	r0
    7138:	cf 91       	pop	r28
    713a:	df 91       	pop	r29
    713c:	08 95       	ret

0000713e <Ultrasonic_edgeProcessing>:




void Ultrasonic_edgeProcessing(void)
{
    713e:	df 93       	push	r29
    7140:	cf 93       	push	r28
    7142:	cd b7       	in	r28, 0x3d	; 61
    7144:	de b7       	in	r29, 0x3e	; 62

	g_edgeCount++;
    7146:	80 91 e8 01 	lds	r24, 0x01E8
    714a:	8f 5f       	subi	r24, 0xFF	; 255
    714c:	80 93 e8 01 	sts	0x01E8, r24
	if(g_edgeCount == 1)
    7150:	80 91 e8 01 	lds	r24, 0x01E8
    7154:	81 30       	cpi	r24, 0x01	; 1
    7156:	31 f4       	brne	.+12     	; 0x7164 <Ultrasonic_edgeProcessing+0x26>
	{

		/* Clear the timer counter register to start measurements from the
		 * first detected rising edge
		 */
		MCAL_Timer1_ICU_clearTimerValue();
    7158:	0e 94 b4 11 	call	0x2368	; 0x2368 <MCAL_Timer1_ICU_clearTimerValue>
		/* Detect falling edge */
		MCAL_Timer1_ICU_setEdgeDetectionType(FALLING);
    715c:	80 e0       	ldi	r24, 0x00	; 0
    715e:	0e 94 85 11 	call	0x230a	; 0x230a <MCAL_Timer1_ICU_setEdgeDetectionType>
    7162:	16 c0       	rjmp	.+44     	; 0x7190 <Ultrasonic_edgeProcessing+0x52>
	}
	else if(g_edgeCount == 2)
    7164:	80 91 e8 01 	lds	r24, 0x01E8
    7168:	82 30       	cpi	r24, 0x02	; 2
    716a:	91 f4       	brne	.+36     	; 0x7190 <Ultrasonic_edgeProcessing+0x52>
	{
		TOGGLE_BIT(GPIOB_BASE->PORT.Reg,PIN6_ID);
    716c:	a6 e3       	ldi	r26, 0x36	; 54
    716e:	b0 e0       	ldi	r27, 0x00	; 0
    7170:	e6 e3       	ldi	r30, 0x36	; 54
    7172:	f0 e0       	ldi	r31, 0x00	; 0
    7174:	92 81       	ldd	r25, Z+2	; 0x02
    7176:	80 e4       	ldi	r24, 0x40	; 64
    7178:	89 27       	eor	r24, r25
    717a:	12 96       	adiw	r26, 0x02	; 2
    717c:	8c 93       	st	X, r24


		g_timeHigh =  MCAL_Timer1_ICU_getInputCaptureValue();
    717e:	0e 94 a9 11 	call	0x2352	; 0x2352 <MCAL_Timer1_ICU_getInputCaptureValue>
    7182:	90 93 ea 01 	sts	0x01EA, r25
    7186:	80 93 e9 01 	sts	0x01E9, r24

		/* Detect rising edge */
		MCAL_Timer1_ICU_setEdgeDetectionType(RISING);
    718a:	81 e0       	ldi	r24, 0x01	; 1
    718c:	0e 94 85 11 	call	0x230a	; 0x230a <MCAL_Timer1_ICU_setEdgeDetectionType>
	}
}
    7190:	cf 91       	pop	r28
    7192:	df 91       	pop	r29
    7194:	08 95       	ret

00007196 <Ultrasonic_init>:


void Ultrasonic_init(void)
{
    7196:	df 93       	push	r29
    7198:	cf 93       	push	r28
    719a:	00 d0       	rcall	.+0      	; 0x719c <Ultrasonic_init+0x6>
    719c:	cd b7       	in	r28, 0x3d	; 61
    719e:	de b7       	in	r29, 0x3e	; 62
	Icu_ConfigType ICU_CONFIG= {RISING,F_CPU_256__};
    71a0:	81 e0       	ldi	r24, 0x01	; 1
    71a2:	89 83       	std	Y+1, r24	; 0x01
    71a4:	84 e0       	ldi	r24, 0x04	; 4
    71a6:	8a 83       	std	Y+2, r24	; 0x02


	//leD
	DIO_voidSetPinDirection(GPIOB_BASE, PIN6_ID, Pin_OUTPUT);
    71a8:	86 e3       	ldi	r24, 0x36	; 54
    71aa:	90 e0       	ldi	r25, 0x00	; 0
    71ac:	66 e0       	ldi	r22, 0x06	; 6
    71ae:	41 e0       	ldi	r20, 0x01	; 1
    71b0:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>

	MCAL_Timer1_ICU_Init(&ICU_CONFIG);
    71b4:	ce 01       	movw	r24, r28
    71b6:	01 96       	adiw	r24, 0x01	; 1
    71b8:	0e 94 2b 11 	call	0x2256	; 0x2256 <MCAL_Timer1_ICU_Init>
	MCAL_Timer1_ICU_setCallBack(Ultrasonic_edgeProcessing);
    71bc:	8f e9       	ldi	r24, 0x9F	; 159
    71be:	98 e3       	ldi	r25, 0x38	; 56
    71c0:	0e 94 73 11 	call	0x22e6	; 0x22e6 <MCAL_Timer1_ICU_setCallBack>

	DIO_voidSetPinDirection(GPIOB_BASE, PIN5_ID, Pin_OUTPUT);
    71c4:	86 e3       	ldi	r24, 0x36	; 54
    71c6:	90 e0       	ldi	r25, 0x00	; 0
    71c8:	65 e0       	ldi	r22, 0x05	; 5
    71ca:	41 e0       	ldi	r20, 0x01	; 1
    71cc:	0e 94 4b 08 	call	0x1096	; 0x1096 <DIO_voidSetPinDirection>
	DIO_voidSetPinValue(GPIOB_BASE, PIN5_ID, LOGIC_LOW);
    71d0:	86 e3       	ldi	r24, 0x36	; 54
    71d2:	90 e0       	ldi	r25, 0x00	; 0
    71d4:	65 e0       	ldi	r22, 0x05	; 5
    71d6:	40 e0       	ldi	r20, 0x00	; 0
    71d8:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
	Ultrasonic_Trigger();
    71dc:	0e 94 f5 38 	call	0x71ea	; 0x71ea <Ultrasonic_Trigger>
}
    71e0:	0f 90       	pop	r0
    71e2:	0f 90       	pop	r0
    71e4:	cf 91       	pop	r28
    71e6:	df 91       	pop	r29
    71e8:	08 95       	ret

000071ea <Ultrasonic_Trigger>:

void Ultrasonic_Trigger(void)
{
    71ea:	df 93       	push	r29
    71ec:	cf 93       	push	r28
    71ee:	cd b7       	in	r28, 0x3d	; 61
    71f0:	de b7       	in	r29, 0x3e	; 62
    71f2:	68 97       	sbiw	r28, 0x18	; 24
    71f4:	0f b6       	in	r0, 0x3f	; 63
    71f6:	f8 94       	cli
    71f8:	de bf       	out	0x3e, r29	; 62
    71fa:	0f be       	out	0x3f, r0	; 63
    71fc:	cd bf       	out	0x3d, r28	; 61
	DIO_voidSetPinValue(GPIOB_BASE, PIN5_ID, LOGIC_HIGH);
    71fe:	86 e3       	ldi	r24, 0x36	; 54
    7200:	90 e0       	ldi	r25, 0x00	; 0
    7202:	65 e0       	ldi	r22, 0x05	; 5
    7204:	41 e0       	ldi	r20, 0x01	; 1
    7206:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
    720a:	80 e0       	ldi	r24, 0x00	; 0
    720c:	90 e0       	ldi	r25, 0x00	; 0
    720e:	a0 e2       	ldi	r26, 0x20	; 32
    7210:	b1 e4       	ldi	r27, 0x41	; 65
    7212:	8d 8b       	std	Y+21, r24	; 0x15
    7214:	9e 8b       	std	Y+22, r25	; 0x16
    7216:	af 8b       	std	Y+23, r26	; 0x17
    7218:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    721a:	6d 89       	ldd	r22, Y+21	; 0x15
    721c:	7e 89       	ldd	r23, Y+22	; 0x16
    721e:	8f 89       	ldd	r24, Y+23	; 0x17
    7220:	98 8d       	ldd	r25, Y+24	; 0x18
    7222:	2b ea       	ldi	r18, 0xAB	; 171
    7224:	3a ea       	ldi	r19, 0xAA	; 170
    7226:	4a ea       	ldi	r20, 0xAA	; 170
    7228:	50 e4       	ldi	r21, 0x40	; 64
    722a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    722e:	dc 01       	movw	r26, r24
    7230:	cb 01       	movw	r24, r22
    7232:	89 8b       	std	Y+17, r24	; 0x11
    7234:	9a 8b       	std	Y+18, r25	; 0x12
    7236:	ab 8b       	std	Y+19, r26	; 0x13
    7238:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    723a:	69 89       	ldd	r22, Y+17	; 0x11
    723c:	7a 89       	ldd	r23, Y+18	; 0x12
    723e:	8b 89       	ldd	r24, Y+19	; 0x13
    7240:	9c 89       	ldd	r25, Y+20	; 0x14
    7242:	20 e0       	ldi	r18, 0x00	; 0
    7244:	30 e0       	ldi	r19, 0x00	; 0
    7246:	40 e8       	ldi	r20, 0x80	; 128
    7248:	5f e3       	ldi	r21, 0x3F	; 63
    724a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    724e:	88 23       	and	r24, r24
    7250:	1c f4       	brge	.+6      	; 0x7258 <Ultrasonic_Trigger+0x6e>
		__ticks = 1;
    7252:	81 e0       	ldi	r24, 0x01	; 1
    7254:	88 8b       	std	Y+16, r24	; 0x10
    7256:	91 c0       	rjmp	.+290    	; 0x737a <Ultrasonic_Trigger+0x190>
	else if (__tmp > 255)
    7258:	69 89       	ldd	r22, Y+17	; 0x11
    725a:	7a 89       	ldd	r23, Y+18	; 0x12
    725c:	8b 89       	ldd	r24, Y+19	; 0x13
    725e:	9c 89       	ldd	r25, Y+20	; 0x14
    7260:	20 e0       	ldi	r18, 0x00	; 0
    7262:	30 e0       	ldi	r19, 0x00	; 0
    7264:	4f e7       	ldi	r20, 0x7F	; 127
    7266:	53 e4       	ldi	r21, 0x43	; 67
    7268:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    726c:	18 16       	cp	r1, r24
    726e:	0c f0       	brlt	.+2      	; 0x7272 <Ultrasonic_Trigger+0x88>
    7270:	7b c0       	rjmp	.+246    	; 0x7368 <Ultrasonic_Trigger+0x17e>
	{
		_delay_ms(__us / 1000.0);
    7272:	6d 89       	ldd	r22, Y+21	; 0x15
    7274:	7e 89       	ldd	r23, Y+22	; 0x16
    7276:	8f 89       	ldd	r24, Y+23	; 0x17
    7278:	98 8d       	ldd	r25, Y+24	; 0x18
    727a:	20 e0       	ldi	r18, 0x00	; 0
    727c:	30 e0       	ldi	r19, 0x00	; 0
    727e:	4a e7       	ldi	r20, 0x7A	; 122
    7280:	54 e4       	ldi	r21, 0x44	; 68
    7282:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    7286:	dc 01       	movw	r26, r24
    7288:	cb 01       	movw	r24, r22
    728a:	8c 87       	std	Y+12, r24	; 0x0c
    728c:	9d 87       	std	Y+13, r25	; 0x0d
    728e:	ae 87       	std	Y+14, r26	; 0x0e
    7290:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    7292:	6c 85       	ldd	r22, Y+12	; 0x0c
    7294:	7d 85       	ldd	r23, Y+13	; 0x0d
    7296:	8e 85       	ldd	r24, Y+14	; 0x0e
    7298:	9f 85       	ldd	r25, Y+15	; 0x0f
    729a:	20 e0       	ldi	r18, 0x00	; 0
    729c:	30 e0       	ldi	r19, 0x00	; 0
    729e:	4a e7       	ldi	r20, 0x7A	; 122
    72a0:	55 e4       	ldi	r21, 0x45	; 69
    72a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    72a6:	dc 01       	movw	r26, r24
    72a8:	cb 01       	movw	r24, r22
    72aa:	88 87       	std	Y+8, r24	; 0x08
    72ac:	99 87       	std	Y+9, r25	; 0x09
    72ae:	aa 87       	std	Y+10, r26	; 0x0a
    72b0:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    72b2:	68 85       	ldd	r22, Y+8	; 0x08
    72b4:	79 85       	ldd	r23, Y+9	; 0x09
    72b6:	8a 85       	ldd	r24, Y+10	; 0x0a
    72b8:	9b 85       	ldd	r25, Y+11	; 0x0b
    72ba:	20 e0       	ldi	r18, 0x00	; 0
    72bc:	30 e0       	ldi	r19, 0x00	; 0
    72be:	40 e8       	ldi	r20, 0x80	; 128
    72c0:	5f e3       	ldi	r21, 0x3F	; 63
    72c2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    72c6:	88 23       	and	r24, r24
    72c8:	2c f4       	brge	.+10     	; 0x72d4 <Ultrasonic_Trigger+0xea>
		__ticks = 1;
    72ca:	81 e0       	ldi	r24, 0x01	; 1
    72cc:	90 e0       	ldi	r25, 0x00	; 0
    72ce:	9f 83       	std	Y+7, r25	; 0x07
    72d0:	8e 83       	std	Y+6, r24	; 0x06
    72d2:	3f c0       	rjmp	.+126    	; 0x7352 <Ultrasonic_Trigger+0x168>
	else if (__tmp > 65535)
    72d4:	68 85       	ldd	r22, Y+8	; 0x08
    72d6:	79 85       	ldd	r23, Y+9	; 0x09
    72d8:	8a 85       	ldd	r24, Y+10	; 0x0a
    72da:	9b 85       	ldd	r25, Y+11	; 0x0b
    72dc:	20 e0       	ldi	r18, 0x00	; 0
    72de:	3f ef       	ldi	r19, 0xFF	; 255
    72e0:	4f e7       	ldi	r20, 0x7F	; 127
    72e2:	57 e4       	ldi	r21, 0x47	; 71
    72e4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    72e8:	18 16       	cp	r1, r24
    72ea:	4c f5       	brge	.+82     	; 0x733e <Ultrasonic_Trigger+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    72ec:	6c 85       	ldd	r22, Y+12	; 0x0c
    72ee:	7d 85       	ldd	r23, Y+13	; 0x0d
    72f0:	8e 85       	ldd	r24, Y+14	; 0x0e
    72f2:	9f 85       	ldd	r25, Y+15	; 0x0f
    72f4:	20 e0       	ldi	r18, 0x00	; 0
    72f6:	30 e0       	ldi	r19, 0x00	; 0
    72f8:	40 e2       	ldi	r20, 0x20	; 32
    72fa:	51 e4       	ldi	r21, 0x41	; 65
    72fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    7300:	dc 01       	movw	r26, r24
    7302:	cb 01       	movw	r24, r22
    7304:	bc 01       	movw	r22, r24
    7306:	cd 01       	movw	r24, r26
    7308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    730c:	dc 01       	movw	r26, r24
    730e:	cb 01       	movw	r24, r22
    7310:	9f 83       	std	Y+7, r25	; 0x07
    7312:	8e 83       	std	Y+6, r24	; 0x06
    7314:	0f c0       	rjmp	.+30     	; 0x7334 <Ultrasonic_Trigger+0x14a>
    7316:	80 e9       	ldi	r24, 0x90	; 144
    7318:	91 e0       	ldi	r25, 0x01	; 1
    731a:	9d 83       	std	Y+5, r25	; 0x05
    731c:	8c 83       	std	Y+4, r24	; 0x04
    731e:	8c 81       	ldd	r24, Y+4	; 0x04
    7320:	9d 81       	ldd	r25, Y+5	; 0x05
    7322:	01 97       	sbiw	r24, 0x01	; 1
    7324:	f1 f7       	brne	.-4      	; 0x7322 <Ultrasonic_Trigger+0x138>
    7326:	9d 83       	std	Y+5, r25	; 0x05
    7328:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    732a:	8e 81       	ldd	r24, Y+6	; 0x06
    732c:	9f 81       	ldd	r25, Y+7	; 0x07
    732e:	01 97       	sbiw	r24, 0x01	; 1
    7330:	9f 83       	std	Y+7, r25	; 0x07
    7332:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    7334:	8e 81       	ldd	r24, Y+6	; 0x06
    7336:	9f 81       	ldd	r25, Y+7	; 0x07
    7338:	00 97       	sbiw	r24, 0x00	; 0
    733a:	69 f7       	brne	.-38     	; 0x7316 <Ultrasonic_Trigger+0x12c>
    733c:	24 c0       	rjmp	.+72     	; 0x7386 <Ultrasonic_Trigger+0x19c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    733e:	68 85       	ldd	r22, Y+8	; 0x08
    7340:	79 85       	ldd	r23, Y+9	; 0x09
    7342:	8a 85       	ldd	r24, Y+10	; 0x0a
    7344:	9b 85       	ldd	r25, Y+11	; 0x0b
    7346:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    734a:	dc 01       	movw	r26, r24
    734c:	cb 01       	movw	r24, r22
    734e:	9f 83       	std	Y+7, r25	; 0x07
    7350:	8e 83       	std	Y+6, r24	; 0x06
    7352:	8e 81       	ldd	r24, Y+6	; 0x06
    7354:	9f 81       	ldd	r25, Y+7	; 0x07
    7356:	9b 83       	std	Y+3, r25	; 0x03
    7358:	8a 83       	std	Y+2, r24	; 0x02
    735a:	8a 81       	ldd	r24, Y+2	; 0x02
    735c:	9b 81       	ldd	r25, Y+3	; 0x03
    735e:	01 97       	sbiw	r24, 0x01	; 1
    7360:	f1 f7       	brne	.-4      	; 0x735e <Ultrasonic_Trigger+0x174>
    7362:	9b 83       	std	Y+3, r25	; 0x03
    7364:	8a 83       	std	Y+2, r24	; 0x02
    7366:	0f c0       	rjmp	.+30     	; 0x7386 <Ultrasonic_Trigger+0x19c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    7368:	69 89       	ldd	r22, Y+17	; 0x11
    736a:	7a 89       	ldd	r23, Y+18	; 0x12
    736c:	8b 89       	ldd	r24, Y+19	; 0x13
    736e:	9c 89       	ldd	r25, Y+20	; 0x14
    7370:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    7374:	dc 01       	movw	r26, r24
    7376:	cb 01       	movw	r24, r22
    7378:	88 8b       	std	Y+16, r24	; 0x10
    737a:	88 89       	ldd	r24, Y+16	; 0x10
    737c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    737e:	89 81       	ldd	r24, Y+1	; 0x01
    7380:	8a 95       	dec	r24
    7382:	f1 f7       	brne	.-4      	; 0x7380 <Ultrasonic_Trigger+0x196>
    7384:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(10);
	DIO_voidSetPinValue(GPIOB_BASE, PIN5_ID, LOGIC_LOW);
    7386:	86 e3       	ldi	r24, 0x36	; 54
    7388:	90 e0       	ldi	r25, 0x00	; 0
    738a:	65 e0       	ldi	r22, 0x05	; 5
    738c:	40 e0       	ldi	r20, 0x00	; 0
    738e:	0e 94 ff 08 	call	0x11fe	; 0x11fe <DIO_voidSetPinValue>
}
    7392:	68 96       	adiw	r28, 0x18	; 24
    7394:	0f b6       	in	r0, 0x3f	; 63
    7396:	f8 94       	cli
    7398:	de bf       	out	0x3e, r29	; 62
    739a:	0f be       	out	0x3f, r0	; 63
    739c:	cd bf       	out	0x3d, r28	; 61
    739e:	cf 91       	pop	r28
    73a0:	df 91       	pop	r29
    73a2:	08 95       	ret

000073a4 <Ultrasonic_readDistance>:



uint16 Ultrasonic_readDistance(void)
{
    73a4:	ef 92       	push	r14
    73a6:	ff 92       	push	r15
    73a8:	0f 93       	push	r16
    73aa:	1f 93       	push	r17
    73ac:	df 93       	push	r29
    73ae:	cf 93       	push	r28
    73b0:	cd b7       	in	r28, 0x3d	; 61
    73b2:	de b7       	in	r29, 0x3e	; 62
	//Ultrasonic_Trigger();

	if(g_edgeCount == 2)
    73b4:	80 91 e8 01 	lds	r24, 0x01E8
    73b8:	82 30       	cpi	r24, 0x02	; 2
    73ba:	09 f0       	breq	.+2      	; 0x73be <Ultrasonic_readDistance+0x1a>
    73bc:	5c c1       	rjmp	.+696    	; 0x7676 <Ultrasonic_readDistance+0x2d2>
	{

		distance = ((g_timeHigh*5)/294)+((sint32)(distance-57)/73)+1;
    73be:	20 91 e9 01 	lds	r18, 0x01E9
    73c2:	30 91 ea 01 	lds	r19, 0x01EA
    73c6:	c9 01       	movw	r24, r18
    73c8:	88 0f       	add	r24, r24
    73ca:	99 1f       	adc	r25, r25
    73cc:	88 0f       	add	r24, r24
    73ce:	99 1f       	adc	r25, r25
    73d0:	82 0f       	add	r24, r18
    73d2:	93 1f       	adc	r25, r19
    73d4:	26 e2       	ldi	r18, 0x26	; 38
    73d6:	31 e0       	ldi	r19, 0x01	; 1
    73d8:	b9 01       	movw	r22, r18
    73da:	0e 94 3b 3d 	call	0x7a76	; 0x7a76 <__udivmodhi4>
    73de:	cb 01       	movw	r24, r22
    73e0:	7c 01       	movw	r14, r24
    73e2:	00 e0       	ldi	r16, 0x00	; 0
    73e4:	10 e0       	ldi	r17, 0x00	; 0
    73e6:	80 91 eb 01 	lds	r24, 0x01EB
    73ea:	90 91 ec 01 	lds	r25, 0x01EC
    73ee:	a0 91 ed 01 	lds	r26, 0x01ED
    73f2:	b0 91 ee 01 	lds	r27, 0x01EE
    73f6:	c9 97       	sbiw	r24, 0x39	; 57
    73f8:	a1 09       	sbc	r26, r1
    73fa:	b1 09       	sbc	r27, r1
    73fc:	29 e4       	ldi	r18, 0x49	; 73
    73fe:	30 e0       	ldi	r19, 0x00	; 0
    7400:	40 e0       	ldi	r20, 0x00	; 0
    7402:	50 e0       	ldi	r21, 0x00	; 0
    7404:	bc 01       	movw	r22, r24
    7406:	cd 01       	movw	r24, r26
    7408:	0e 94 84 3d 	call	0x7b08	; 0x7b08 <__divmodsi4>
    740c:	da 01       	movw	r26, r20
    740e:	c9 01       	movw	r24, r18
    7410:	8e 0d       	add	r24, r14
    7412:	9f 1d       	adc	r25, r15
    7414:	a0 1f       	adc	r26, r16
    7416:	b1 1f       	adc	r27, r17
    7418:	01 96       	adiw	r24, 0x01	; 1
    741a:	a1 1d       	adc	r26, r1
    741c:	b1 1d       	adc	r27, r1
    741e:	80 93 eb 01 	sts	0x01EB, r24
    7422:	90 93 ec 01 	sts	0x01EC, r25
    7426:	a0 93 ed 01 	sts	0x01ED, r26
    742a:	b0 93 ee 01 	sts	0x01EE, r27

		if (distance >= 2 && distance < 60)
    742e:	80 91 eb 01 	lds	r24, 0x01EB
    7432:	90 91 ec 01 	lds	r25, 0x01EC
    7436:	a0 91 ed 01 	lds	r26, 0x01ED
    743a:	b0 91 ee 01 	lds	r27, 0x01EE
    743e:	82 30       	cpi	r24, 0x02	; 2
    7440:	91 05       	cpc	r25, r1
    7442:	a1 05       	cpc	r26, r1
    7444:	b1 05       	cpc	r27, r1
    7446:	08 f1       	brcs	.+66     	; 0x748a <Ultrasonic_readDistance+0xe6>
    7448:	80 91 eb 01 	lds	r24, 0x01EB
    744c:	90 91 ec 01 	lds	r25, 0x01EC
    7450:	a0 91 ed 01 	lds	r26, 0x01ED
    7454:	b0 91 ee 01 	lds	r27, 0x01EE
    7458:	8c 33       	cpi	r24, 0x3C	; 60
    745a:	91 05       	cpc	r25, r1
    745c:	a1 05       	cpc	r26, r1
    745e:	b1 05       	cpc	r27, r1
    7460:	a0 f4       	brcc	.+40     	; 0x748a <Ultrasonic_readDistance+0xe6>
		{
			distance = distance + 1;
    7462:	80 91 eb 01 	lds	r24, 0x01EB
    7466:	90 91 ec 01 	lds	r25, 0x01EC
    746a:	a0 91 ed 01 	lds	r26, 0x01ED
    746e:	b0 91 ee 01 	lds	r27, 0x01EE
    7472:	01 96       	adiw	r24, 0x01	; 1
    7474:	a1 1d       	adc	r26, r1
    7476:	b1 1d       	adc	r27, r1
    7478:	80 93 eb 01 	sts	0x01EB, r24
    747c:	90 93 ec 01 	sts	0x01EC, r25
    7480:	a0 93 ed 01 	sts	0x01ED, r26
    7484:	b0 93 ee 01 	sts	0x01EE, r27
    7488:	f4 c0       	rjmp	.+488    	; 0x7672 <Ultrasonic_readDistance+0x2ce>
		}
		else if (distance >= 60 && distance < 133)
    748a:	80 91 eb 01 	lds	r24, 0x01EB
    748e:	90 91 ec 01 	lds	r25, 0x01EC
    7492:	a0 91 ed 01 	lds	r26, 0x01ED
    7496:	b0 91 ee 01 	lds	r27, 0x01EE
    749a:	8c 33       	cpi	r24, 0x3C	; 60
    749c:	91 05       	cpc	r25, r1
    749e:	a1 05       	cpc	r26, r1
    74a0:	b1 05       	cpc	r27, r1
    74a2:	08 f1       	brcs	.+66     	; 0x74e6 <Ultrasonic_readDistance+0x142>
    74a4:	80 91 eb 01 	lds	r24, 0x01EB
    74a8:	90 91 ec 01 	lds	r25, 0x01EC
    74ac:	a0 91 ed 01 	lds	r26, 0x01ED
    74b0:	b0 91 ee 01 	lds	r27, 0x01EE
    74b4:	85 38       	cpi	r24, 0x85	; 133
    74b6:	91 05       	cpc	r25, r1
    74b8:	a1 05       	cpc	r26, r1
    74ba:	b1 05       	cpc	r27, r1
    74bc:	a0 f4       	brcc	.+40     	; 0x74e6 <Ultrasonic_readDistance+0x142>
		{
			distance = distance + 2;
    74be:	80 91 eb 01 	lds	r24, 0x01EB
    74c2:	90 91 ec 01 	lds	r25, 0x01EC
    74c6:	a0 91 ed 01 	lds	r26, 0x01ED
    74ca:	b0 91 ee 01 	lds	r27, 0x01EE
    74ce:	02 96       	adiw	r24, 0x02	; 2
    74d0:	a1 1d       	adc	r26, r1
    74d2:	b1 1d       	adc	r27, r1
    74d4:	80 93 eb 01 	sts	0x01EB, r24
    74d8:	90 93 ec 01 	sts	0x01EC, r25
    74dc:	a0 93 ed 01 	sts	0x01ED, r26
    74e0:	b0 93 ee 01 	sts	0x01EE, r27
    74e4:	c6 c0       	rjmp	.+396    	; 0x7672 <Ultrasonic_readDistance+0x2ce>
		}
		else if (distance >= 133 && distance < 207)
    74e6:	80 91 eb 01 	lds	r24, 0x01EB
    74ea:	90 91 ec 01 	lds	r25, 0x01EC
    74ee:	a0 91 ed 01 	lds	r26, 0x01ED
    74f2:	b0 91 ee 01 	lds	r27, 0x01EE
    74f6:	85 38       	cpi	r24, 0x85	; 133
    74f8:	91 05       	cpc	r25, r1
    74fa:	a1 05       	cpc	r26, r1
    74fc:	b1 05       	cpc	r27, r1
    74fe:	08 f1       	brcs	.+66     	; 0x7542 <Ultrasonic_readDistance+0x19e>
    7500:	80 91 eb 01 	lds	r24, 0x01EB
    7504:	90 91 ec 01 	lds	r25, 0x01EC
    7508:	a0 91 ed 01 	lds	r26, 0x01ED
    750c:	b0 91 ee 01 	lds	r27, 0x01EE
    7510:	8f 3c       	cpi	r24, 0xCF	; 207
    7512:	91 05       	cpc	r25, r1
    7514:	a1 05       	cpc	r26, r1
    7516:	b1 05       	cpc	r27, r1
    7518:	a0 f4       	brcc	.+40     	; 0x7542 <Ultrasonic_readDistance+0x19e>
		{

			distance = distance + 3;
    751a:	80 91 eb 01 	lds	r24, 0x01EB
    751e:	90 91 ec 01 	lds	r25, 0x01EC
    7522:	a0 91 ed 01 	lds	r26, 0x01ED
    7526:	b0 91 ee 01 	lds	r27, 0x01EE
    752a:	03 96       	adiw	r24, 0x03	; 3
    752c:	a1 1d       	adc	r26, r1
    752e:	b1 1d       	adc	r27, r1
    7530:	80 93 eb 01 	sts	0x01EB, r24
    7534:	90 93 ec 01 	sts	0x01EC, r25
    7538:	a0 93 ed 01 	sts	0x01ED, r26
    753c:	b0 93 ee 01 	sts	0x01EE, r27
    7540:	98 c0       	rjmp	.+304    	; 0x7672 <Ultrasonic_readDistance+0x2ce>
		}
		else if (distance >= 207 && distance < 280)
    7542:	80 91 eb 01 	lds	r24, 0x01EB
    7546:	90 91 ec 01 	lds	r25, 0x01EC
    754a:	a0 91 ed 01 	lds	r26, 0x01ED
    754e:	b0 91 ee 01 	lds	r27, 0x01EE
    7552:	8f 3c       	cpi	r24, 0xCF	; 207
    7554:	91 05       	cpc	r25, r1
    7556:	a1 05       	cpc	r26, r1
    7558:	b1 05       	cpc	r27, r1
    755a:	20 f1       	brcs	.+72     	; 0x75a4 <Ultrasonic_readDistance+0x200>
    755c:	80 91 eb 01 	lds	r24, 0x01EB
    7560:	90 91 ec 01 	lds	r25, 0x01EC
    7564:	a0 91 ed 01 	lds	r26, 0x01ED
    7568:	b0 91 ee 01 	lds	r27, 0x01EE
    756c:	88 31       	cpi	r24, 0x18	; 24
    756e:	21 e0       	ldi	r18, 0x01	; 1
    7570:	92 07       	cpc	r25, r18
    7572:	20 e0       	ldi	r18, 0x00	; 0
    7574:	a2 07       	cpc	r26, r18
    7576:	20 e0       	ldi	r18, 0x00	; 0
    7578:	b2 07       	cpc	r27, r18
    757a:	a0 f4       	brcc	.+40     	; 0x75a4 <Ultrasonic_readDistance+0x200>
		{

			distance = distance + 4;
    757c:	80 91 eb 01 	lds	r24, 0x01EB
    7580:	90 91 ec 01 	lds	r25, 0x01EC
    7584:	a0 91 ed 01 	lds	r26, 0x01ED
    7588:	b0 91 ee 01 	lds	r27, 0x01EE
    758c:	04 96       	adiw	r24, 0x04	; 4
    758e:	a1 1d       	adc	r26, r1
    7590:	b1 1d       	adc	r27, r1
    7592:	80 93 eb 01 	sts	0x01EB, r24
    7596:	90 93 ec 01 	sts	0x01EC, r25
    759a:	a0 93 ed 01 	sts	0x01ED, r26
    759e:	b0 93 ee 01 	sts	0x01EE, r27
    75a2:	67 c0       	rjmp	.+206    	; 0x7672 <Ultrasonic_readDistance+0x2ce>
		}
		else if (distance >= 280 && distance < 353)
    75a4:	80 91 eb 01 	lds	r24, 0x01EB
    75a8:	90 91 ec 01 	lds	r25, 0x01EC
    75ac:	a0 91 ed 01 	lds	r26, 0x01ED
    75b0:	b0 91 ee 01 	lds	r27, 0x01EE
    75b4:	88 31       	cpi	r24, 0x18	; 24
    75b6:	21 e0       	ldi	r18, 0x01	; 1
    75b8:	92 07       	cpc	r25, r18
    75ba:	20 e0       	ldi	r18, 0x00	; 0
    75bc:	a2 07       	cpc	r26, r18
    75be:	20 e0       	ldi	r18, 0x00	; 0
    75c0:	b2 07       	cpc	r27, r18
    75c2:	20 f1       	brcs	.+72     	; 0x760c <Ultrasonic_readDistance+0x268>
    75c4:	80 91 eb 01 	lds	r24, 0x01EB
    75c8:	90 91 ec 01 	lds	r25, 0x01EC
    75cc:	a0 91 ed 01 	lds	r26, 0x01ED
    75d0:	b0 91 ee 01 	lds	r27, 0x01EE
    75d4:	81 36       	cpi	r24, 0x61	; 97
    75d6:	21 e0       	ldi	r18, 0x01	; 1
    75d8:	92 07       	cpc	r25, r18
    75da:	20 e0       	ldi	r18, 0x00	; 0
    75dc:	a2 07       	cpc	r26, r18
    75de:	20 e0       	ldi	r18, 0x00	; 0
    75e0:	b2 07       	cpc	r27, r18
    75e2:	a0 f4       	brcc	.+40     	; 0x760c <Ultrasonic_readDistance+0x268>
		{

			distance = distance + 5;
    75e4:	80 91 eb 01 	lds	r24, 0x01EB
    75e8:	90 91 ec 01 	lds	r25, 0x01EC
    75ec:	a0 91 ed 01 	lds	r26, 0x01ED
    75f0:	b0 91 ee 01 	lds	r27, 0x01EE
    75f4:	05 96       	adiw	r24, 0x05	; 5
    75f6:	a1 1d       	adc	r26, r1
    75f8:	b1 1d       	adc	r27, r1
    75fa:	80 93 eb 01 	sts	0x01EB, r24
    75fe:	90 93 ec 01 	sts	0x01EC, r25
    7602:	a0 93 ed 01 	sts	0x01ED, r26
    7606:	b0 93 ee 01 	sts	0x01EE, r27
    760a:	33 c0       	rjmp	.+102    	; 0x7672 <Ultrasonic_readDistance+0x2ce>
		}
		else if (distance >= 353 && distance <= 400)
    760c:	80 91 eb 01 	lds	r24, 0x01EB
    7610:	90 91 ec 01 	lds	r25, 0x01EC
    7614:	a0 91 ed 01 	lds	r26, 0x01ED
    7618:	b0 91 ee 01 	lds	r27, 0x01EE
    761c:	81 36       	cpi	r24, 0x61	; 97
    761e:	21 e0       	ldi	r18, 0x01	; 1
    7620:	92 07       	cpc	r25, r18
    7622:	20 e0       	ldi	r18, 0x00	; 0
    7624:	a2 07       	cpc	r26, r18
    7626:	20 e0       	ldi	r18, 0x00	; 0
    7628:	b2 07       	cpc	r27, r18
    762a:	18 f1       	brcs	.+70     	; 0x7672 <Ultrasonic_readDistance+0x2ce>
    762c:	80 91 eb 01 	lds	r24, 0x01EB
    7630:	90 91 ec 01 	lds	r25, 0x01EC
    7634:	a0 91 ed 01 	lds	r26, 0x01ED
    7638:	b0 91 ee 01 	lds	r27, 0x01EE
    763c:	81 39       	cpi	r24, 0x91	; 145
    763e:	21 e0       	ldi	r18, 0x01	; 1
    7640:	92 07       	cpc	r25, r18
    7642:	20 e0       	ldi	r18, 0x00	; 0
    7644:	a2 07       	cpc	r26, r18
    7646:	20 e0       	ldi	r18, 0x00	; 0
    7648:	b2 07       	cpc	r27, r18
    764a:	98 f4       	brcc	.+38     	; 0x7672 <Ultrasonic_readDistance+0x2ce>
		{

			distance = distance + 6;
    764c:	80 91 eb 01 	lds	r24, 0x01EB
    7650:	90 91 ec 01 	lds	r25, 0x01EC
    7654:	a0 91 ed 01 	lds	r26, 0x01ED
    7658:	b0 91 ee 01 	lds	r27, 0x01EE
    765c:	06 96       	adiw	r24, 0x06	; 6
    765e:	a1 1d       	adc	r26, r1
    7660:	b1 1d       	adc	r27, r1
    7662:	80 93 eb 01 	sts	0x01EB, r24
    7666:	90 93 ec 01 	sts	0x01EC, r25
    766a:	a0 93 ed 01 	sts	0x01ED, r26
    766e:	b0 93 ee 01 	sts	0x01EE, r27
		}
		g_edgeCount = 0;
    7672:	10 92 e8 01 	sts	0x01E8, r1
	}

	return distance;
    7676:	80 91 eb 01 	lds	r24, 0x01EB
    767a:	90 91 ec 01 	lds	r25, 0x01EC
    767e:	a0 91 ed 01 	lds	r26, 0x01ED
    7682:	b0 91 ee 01 	lds	r27, 0x01EE
}
    7686:	cf 91       	pop	r28
    7688:	df 91       	pop	r29
    768a:	1f 91       	pop	r17
    768c:	0f 91       	pop	r16
    768e:	ff 90       	pop	r15
    7690:	ef 90       	pop	r14
    7692:	08 95       	ret

00007694 <EEPROM_Init>:
#include "eeprom_INTERFACE.h"
#include "TWI_INTERFACE.h"


void EEPROM_Init(void)
{
    7694:	df 93       	push	r29
    7696:	cf 93       	push	r28
    7698:	00 d0       	rcall	.+0      	; 0x769a <EEPROM_Init+0x6>
    769a:	cd b7       	in	r28, 0x3d	; 61
    769c:	de b7       	in	r29, 0x3e	; 62
	TWIconfig twi_config = {PRE_4,	FREQ_400};
    769e:	81 e0       	ldi	r24, 0x01	; 1
    76a0:	89 83       	std	Y+1, r24	; 0x01
    76a2:	8c e0       	ldi	r24, 0x0C	; 12
    76a4:	8a 83       	std	Y+2, r24	; 0x02

	TWI_init(&twi_config);
    76a6:	ce 01       	movw	r24, r28
    76a8:	01 96       	adiw	r24, 0x01	; 1
    76aa:	0e 94 2e 0d 	call	0x1a5c	; 0x1a5c <TWI_init>
}
    76ae:	0f 90       	pop	r0
    76b0:	0f 90       	pop	r0
    76b2:	cf 91       	pop	r28
    76b4:	df 91       	pop	r29
    76b6:	08 95       	ret

000076b8 <EEPROM_WriteByte>:



ERROR_STATUS EEPROM_WriteByte(uint16 u16addr, uint8 u8data)
{
    76b8:	df 93       	push	r29
    76ba:	cf 93       	push	r28
    76bc:	00 d0       	rcall	.+0      	; 0x76be <EEPROM_WriteByte+0x6>
    76be:	00 d0       	rcall	.+0      	; 0x76c0 <EEPROM_WriteByte+0x8>
    76c0:	cd b7       	in	r28, 0x3d	; 61
    76c2:	de b7       	in	r29, 0x3e	; 62
    76c4:	9a 83       	std	Y+2, r25	; 0x02
    76c6:	89 83       	std	Y+1, r24	; 0x01
    76c8:	6b 83       	std	Y+3, r22	; 0x03

	/* Send the Start Bit */
	TWI_start();
    76ca:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <TWI_start>
	if (TWI_getStatus() != MT_MODE_START)
    76ce:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <TWI_getStatus>
    76d2:	88 30       	cpi	r24, 0x08	; 8
    76d4:	11 f0       	breq	.+4      	; 0x76da <EEPROM_WriteByte+0x22>
		return ERROR;
    76d6:	1c 82       	std	Y+4, r1	; 0x04
    76d8:	28 c0       	rjmp	.+80     	; 0x772a <EEPROM_WriteByte+0x72>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700) >> 7)));
    76da:	89 81       	ldd	r24, Y+1	; 0x01
    76dc:	9a 81       	ldd	r25, Y+2	; 0x02
    76de:	80 70       	andi	r24, 0x00	; 0
    76e0:	97 70       	andi	r25, 0x07	; 7
    76e2:	88 0f       	add	r24, r24
    76e4:	89 2f       	mov	r24, r25
    76e6:	88 1f       	adc	r24, r24
    76e8:	99 0b       	sbc	r25, r25
    76ea:	91 95       	neg	r25
    76ec:	80 6a       	ori	r24, 0xA0	; 160
    76ee:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <TWI_writeByte>
	if (TWI_getStatus() != MT_MODE_SLAVE_WRITE_ACK)
    76f2:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <TWI_getStatus>
    76f6:	88 31       	cpi	r24, 0x18	; 24
    76f8:	11 f0       	breq	.+4      	; 0x76fe <EEPROM_WriteByte+0x46>
		return ERROR;
    76fa:	1c 82       	std	Y+4, r1	; 0x04
    76fc:	16 c0       	rjmp	.+44     	; 0x772a <EEPROM_WriteByte+0x72>

	/* Send the required memory location address */
	TWI_writeByte((uint8)(u16addr));
    76fe:	89 81       	ldd	r24, Y+1	; 0x01
    7700:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <TWI_writeByte>
	if (TWI_getStatus() != MR_MODE_DATA_RECEIVED_ACK)
    7704:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <TWI_getStatus>
    7708:	80 35       	cpi	r24, 0x50	; 80
    770a:	11 f0       	breq	.+4      	; 0x7710 <EEPROM_WriteByte+0x58>
		return ERROR;
    770c:	1c 82       	std	Y+4, r1	; 0x04
    770e:	0d c0       	rjmp	.+26     	; 0x772a <EEPROM_WriteByte+0x72>

	/* write byte to eeprom */
	TWI_writeByte(u8data);
    7710:	8b 81       	ldd	r24, Y+3	; 0x03
    7712:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <TWI_writeByte>
	if (TWI_getStatus() != MR_MODE_DATA_RECEIVED_ACK)
    7716:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <TWI_getStatus>
    771a:	80 35       	cpi	r24, 0x50	; 80
    771c:	11 f0       	breq	.+4      	; 0x7722 <EEPROM_WriteByte+0x6a>
		return ERROR;
    771e:	1c 82       	std	Y+4, r1	; 0x04
    7720:	04 c0       	rjmp	.+8      	; 0x772a <EEPROM_WriteByte+0x72>

	/* Send the Stop Bit */
	TWI_stop();
    7722:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <TWI_stop>

	return SUCCESS;
    7726:	81 e0       	ldi	r24, 0x01	; 1
    7728:	8c 83       	std	Y+4, r24	; 0x04
    772a:	8c 81       	ldd	r24, Y+4	; 0x04
}
    772c:	0f 90       	pop	r0
    772e:	0f 90       	pop	r0
    7730:	0f 90       	pop	r0
    7732:	0f 90       	pop	r0
    7734:	cf 91       	pop	r28
    7736:	df 91       	pop	r29
    7738:	08 95       	ret

0000773a <EEPROM_ReadByte>:

ERROR_STATUS EEPROM_ReadByte(uint16 addr, uint8 *u8data)
{
    773a:	df 93       	push	r29
    773c:	cf 93       	push	r28
    773e:	00 d0       	rcall	.+0      	; 0x7740 <EEPROM_ReadByte+0x6>
    7740:	00 d0       	rcall	.+0      	; 0x7742 <EEPROM_ReadByte+0x8>
    7742:	0f 92       	push	r0
    7744:	cd b7       	in	r28, 0x3d	; 61
    7746:	de b7       	in	r29, 0x3e	; 62
    7748:	9a 83       	std	Y+2, r25	; 0x02
    774a:	89 83       	std	Y+1, r24	; 0x01
    774c:	7c 83       	std	Y+4, r23	; 0x04
    774e:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
	TWI_start();
    7750:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <TWI_start>
	if (TWI_getStatus() != MT_MODE_START)
    7754:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <TWI_getStatus>
    7758:	88 30       	cpi	r24, 0x08	; 8
    775a:	11 f0       	breq	.+4      	; 0x7760 <EEPROM_ReadByte+0x26>
		return ERROR;
    775c:	1d 82       	std	Y+5, r1	; 0x05
    775e:	43 c0       	rjmp	.+134    	; 0x77e6 <EEPROM_ReadByte+0xac>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=0 (write) */
	TWI_writeByte((uint8)((0xA0) | ((addr & 0x0700) >> 7)));
    7760:	89 81       	ldd	r24, Y+1	; 0x01
    7762:	9a 81       	ldd	r25, Y+2	; 0x02
    7764:	80 70       	andi	r24, 0x00	; 0
    7766:	97 70       	andi	r25, 0x07	; 7
    7768:	88 0f       	add	r24, r24
    776a:	89 2f       	mov	r24, r25
    776c:	88 1f       	adc	r24, r24
    776e:	99 0b       	sbc	r25, r25
    7770:	91 95       	neg	r25
    7772:	80 6a       	ori	r24, 0xA0	; 160
    7774:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <TWI_writeByte>
	if (TWI_getStatus() != MT_MODE_SLAVE_WRITE_ACK)
    7778:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <TWI_getStatus>
    777c:	88 31       	cpi	r24, 0x18	; 24
    777e:	11 f0       	breq	.+4      	; 0x7784 <EEPROM_ReadByte+0x4a>
		return ERROR;
    7780:	1d 82       	std	Y+5, r1	; 0x05
    7782:	31 c0       	rjmp	.+98     	; 0x77e6 <EEPROM_ReadByte+0xac>

	/* Send the required memory location address */
	TWI_writeByte((uint8)(addr));
    7784:	89 81       	ldd	r24, Y+1	; 0x01
    7786:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <TWI_writeByte>
	if (TWI_getStatus() != MT_MODE_DATA_TRANSMITTED_ACK)
    778a:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <TWI_getStatus>
    778e:	88 32       	cpi	r24, 0x28	; 40
    7790:	11 f0       	breq	.+4      	; 0x7796 <EEPROM_ReadByte+0x5c>
		return ERROR;
    7792:	1d 82       	std	Y+5, r1	; 0x05
    7794:	28 c0       	rjmp	.+80     	; 0x77e6 <EEPROM_ReadByte+0xac>

	/* Send the Repeated Start Bit */
	TWI_start();
    7796:	0e 94 52 0d 	call	0x1aa4	; 0x1aa4 <TWI_start>
	if (TWI_getStatus() != MT_MODE_REP_START)
    779a:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <TWI_getStatus>
    779e:	80 31       	cpi	r24, 0x10	; 16
    77a0:	11 f0       	breq	.+4      	; 0x77a6 <EEPROM_ReadByte+0x6c>
		return ERROR;
    77a2:	1d 82       	std	Y+5, r1	; 0x05
    77a4:	20 c0       	rjmp	.+64     	; 0x77e6 <EEPROM_ReadByte+0xac>

	/* Send the device address, we need to get A8 A9 A10 address bits from the
	 * memory location address and R/W=1 (Read) */
	TWI_writeByte((uint8)((0xA0) | ((addr & 0x0700) >> 7) | 1));
    77a6:	89 81       	ldd	r24, Y+1	; 0x01
    77a8:	9a 81       	ldd	r25, Y+2	; 0x02
    77aa:	80 70       	andi	r24, 0x00	; 0
    77ac:	97 70       	andi	r25, 0x07	; 7
    77ae:	88 0f       	add	r24, r24
    77b0:	89 2f       	mov	r24, r25
    77b2:	88 1f       	adc	r24, r24
    77b4:	99 0b       	sbc	r25, r25
    77b6:	91 95       	neg	r25
    77b8:	81 6a       	ori	r24, 0xA1	; 161
    77ba:	0e 94 6d 0d 	call	0x1ada	; 0x1ada <TWI_writeByte>
	if (TWI_getStatus() != MR_MODE_SLAVE_READ_ACK)
    77be:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <TWI_getStatus>
    77c2:	80 34       	cpi	r24, 0x40	; 64
    77c4:	11 f0       	breq	.+4      	; 0x77ca <EEPROM_ReadByte+0x90>
		return ERROR;
    77c6:	1d 82       	std	Y+5, r1	; 0x05
    77c8:	0e c0       	rjmp	.+28     	; 0x77e6 <EEPROM_ReadByte+0xac>

	/* Read Byte from Memory without send ACK */
	 TWI_readByteWithNACK(u8data);
    77ca:	8b 81       	ldd	r24, Y+3	; 0x03
    77cc:	9c 81       	ldd	r25, Y+4	; 0x04
    77ce:	0e 94 9f 0d 	call	0x1b3e	; 0x1b3e <TWI_readByteWithNACK>

	if (TWI_getStatus() != MR_MODE_SLAVE_READ_NACK)
    77d2:	0e 94 ba 0d 	call	0x1b74	; 0x1b74 <TWI_getStatus>
    77d6:	88 34       	cpi	r24, 0x48	; 72
    77d8:	11 f0       	breq	.+4      	; 0x77de <EEPROM_ReadByte+0xa4>
		return ERROR;
    77da:	1d 82       	std	Y+5, r1	; 0x05
    77dc:	04 c0       	rjmp	.+8      	; 0x77e6 <EEPROM_ReadByte+0xac>

	/* Send the Stop Bit */
	TWI_stop();
    77de:	0e 94 62 0d 	call	0x1ac4	; 0x1ac4 <TWI_stop>



	return SUCCESS;
    77e2:	81 e0       	ldi	r24, 0x01	; 1
    77e4:	8d 83       	std	Y+5, r24	; 0x05
    77e6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    77e8:	0f 90       	pop	r0
    77ea:	0f 90       	pop	r0
    77ec:	0f 90       	pop	r0
    77ee:	0f 90       	pop	r0
    77f0:	0f 90       	pop	r0
    77f2:	cf 91       	pop	r28
    77f4:	df 91       	pop	r29
    77f6:	08 95       	ret

000077f8 <initLEDs>:
Timer_Config timer0 = {TIMER0_NORMAL,F_CPU_1024_,0};


// LED control functions
void initLEDs()
{
    77f8:	df 93       	push	r29
    77fa:	cf 93       	push	r28
    77fc:	cd b7       	in	r28, 0x3d	; 61
    77fe:	de b7       	in	r29, 0x3e	; 62
	// Configure LED pins as output
	DIO_voidSetPortDirection(GPIOA_BASE, PORT_OUTPUT);
    7800:	89 e3       	ldi	r24, 0x39	; 57
    7802:	90 e0       	ldi	r25, 0x00	; 0
    7804:	6f ef       	ldi	r22, 0xFF	; 255
    7806:	0e 94 3c 0a 	call	0x1478	; 0x1478 <DIO_voidSetPortDirection>
}
    780a:	cf 91       	pop	r28
    780c:	df 91       	pop	r29
    780e:	08 95       	ret

00007810 <task1>:



// Task functions
void task1()
{
    7810:	df 93       	push	r29
    7812:	cf 93       	push	r28
    7814:	cd b7       	in	r28, 0x3d	; 61
    7816:	de b7       	in	r29, 0x3e	; 62
	TOGGLE_BIT(	GPIOA_BASE->PORT.Reg,RED_LED_PIN);
    7818:	a9 e3       	ldi	r26, 0x39	; 57
    781a:	b0 e0       	ldi	r27, 0x00	; 0
    781c:	e9 e3       	ldi	r30, 0x39	; 57
    781e:	f0 e0       	ldi	r31, 0x00	; 0
    7820:	92 81       	ldd	r25, Z+2	; 0x02
    7822:	80 e4       	ldi	r24, 0x40	; 64
    7824:	89 27       	eor	r24, r25
    7826:	12 96       	adiw	r26, 0x02	; 2
    7828:	8c 93       	st	X, r24
    782a:	12 97       	sbiw	r26, 0x02	; 2
}
    782c:	cf 91       	pop	r28
    782e:	df 91       	pop	r29
    7830:	08 95       	ret

00007832 <task2>:

void task2() {
    7832:	df 93       	push	r29
    7834:	cf 93       	push	r28
    7836:	cd b7       	in	r28, 0x3d	; 61
    7838:	de b7       	in	r29, 0x3e	; 62


	if (Single_press(GPIOD_BASE, PB1_PIN) == pressed)
    783a:	80 e3       	ldi	r24, 0x30	; 48
    783c:	90 e0       	ldi	r25, 0x00	; 0
    783e:	63 e0       	ldi	r22, 0x03	; 3
    7840:	0e 94 1f 17 	call	0x2e3e	; 0x2e3e <Single_press>
    7844:	81 30       	cpi	r24, 0x01	; 1
    7846:	51 f4       	brne	.+20     	; 0x785c <task2+0x2a>

	{
		TOGGLE_BIT(GPIOA_BASE->PORT.Reg,BLUE_LED_PIN);
    7848:	a9 e3       	ldi	r26, 0x39	; 57
    784a:	b0 e0       	ldi	r27, 0x00	; 0
    784c:	e9 e3       	ldi	r30, 0x39	; 57
    784e:	f0 e0       	ldi	r31, 0x00	; 0
    7850:	92 81       	ldd	r25, Z+2	; 0x02
    7852:	80 e2       	ldi	r24, 0x20	; 32
    7854:	89 27       	eor	r24, r25
    7856:	12 96       	adiw	r26, 0x02	; 2
    7858:	8c 93       	st	X, r24
    785a:	12 97       	sbiw	r26, 0x02	; 2
	}
}
    785c:	cf 91       	pop	r28
    785e:	df 91       	pop	r29
    7860:	08 95       	ret

00007862 <task3>:

void task3() {
    7862:	df 93       	push	r29
    7864:	cf 93       	push	r28
    7866:	cd b7       	in	r28, 0x3d	; 61
    7868:	de b7       	in	r29, 0x3e	; 62
	TOGGLE_BIT(	GPIOA_BASE->PORT.Reg,GREEN_LED_PIN);
    786a:	a9 e3       	ldi	r26, 0x39	; 57
    786c:	b0 e0       	ldi	r27, 0x00	; 0
    786e:	e9 e3       	ldi	r30, 0x39	; 57
    7870:	f0 e0       	ldi	r31, 0x00	; 0
    7872:	92 81       	ldd	r25, Z+2	; 0x02
    7874:	80 e1       	ldi	r24, 0x10	; 16
    7876:	89 27       	eor	r24, r25
    7878:	12 96       	adiw	r26, 0x02	; 2
    787a:	8c 93       	st	X, r24
    787c:	12 97       	sbiw	r26, 0x02	; 2
}
    787e:	cf 91       	pop	r28
    7880:	df 91       	pop	r29
    7882:	08 95       	ret

00007884 <Runnable_Task>:
uint32_t task1_counter = 0, task2_counter = 0, task3_counter = 0;




void Runnable_Task(void) {
    7884:	df 93       	push	r29
    7886:	cf 93       	push	r28
    7888:	0f 92       	push	r0
    788a:	cd b7       	in	r28, 0x3d	; 61
    788c:	de b7       	in	r29, 0x3e	; 62
    // Loop through tasks and update based on counter values

    // Task 2 has the highest priority
    task2_counter++;
    788e:	80 91 f3 01 	lds	r24, 0x01F3
    7892:	90 91 f4 01 	lds	r25, 0x01F4
    7896:	a0 91 f5 01 	lds	r26, 0x01F5
    789a:	b0 91 f6 01 	lds	r27, 0x01F6
    789e:	01 96       	adiw	r24, 0x01	; 1
    78a0:	a1 1d       	adc	r26, r1
    78a2:	b1 1d       	adc	r27, r1
    78a4:	80 93 f3 01 	sts	0x01F3, r24
    78a8:	90 93 f4 01 	sts	0x01F4, r25
    78ac:	a0 93 f5 01 	sts	0x01F5, r26
    78b0:	b0 93 f6 01 	sts	0x01F6, r27
    if (task2_counter >= Blue_INTERVAL) {
    78b4:	80 91 f3 01 	lds	r24, 0x01F3
    78b8:	90 91 f4 01 	lds	r25, 0x01F4
    78bc:	a0 91 f5 01 	lds	r26, 0x01F5
    78c0:	b0 91 f6 01 	lds	r27, 0x01F6
    78c4:	85 30       	cpi	r24, 0x05	; 5
    78c6:	91 05       	cpc	r25, r1
    78c8:	a1 05       	cpc	r26, r1
    78ca:	b1 05       	cpc	r27, r1
    78cc:	50 f0       	brcs	.+20     	; 0x78e2 <Runnable_Task+0x5e>
        task2(); // Execute task 2
    78ce:	0e 94 19 3c 	call	0x7832	; 0x7832 <task2>
        task2_counter = 0; // Reset counter
    78d2:	10 92 f3 01 	sts	0x01F3, r1
    78d6:	10 92 f4 01 	sts	0x01F4, r1
    78da:	10 92 f5 01 	sts	0x01F5, r1
    78de:	10 92 f6 01 	sts	0x01F6, r1
    }

    // Tasks 1 and 3 follow
    for (uint8_t i = 0; i < 3; i++) {
    78e2:	19 82       	std	Y+1, r1	; 0x01
    78e4:	64 c0       	rjmp	.+200    	; 0x79ae <Runnable_Task+0x12a>
        if (i == 0 && i != 1) {
    78e6:	89 81       	ldd	r24, Y+1	; 0x01
    78e8:	88 23       	and	r24, r24
    78ea:	71 f5       	brne	.+92     	; 0x7948 <Runnable_Task+0xc4>
    78ec:	89 81       	ldd	r24, Y+1	; 0x01
    78ee:	81 30       	cpi	r24, 0x01	; 1
    78f0:	59 f1       	breq	.+86     	; 0x7948 <Runnable_Task+0xc4>
            task1_counter++;
    78f2:	80 91 ef 01 	lds	r24, 0x01EF
    78f6:	90 91 f0 01 	lds	r25, 0x01F0
    78fa:	a0 91 f1 01 	lds	r26, 0x01F1
    78fe:	b0 91 f2 01 	lds	r27, 0x01F2
    7902:	01 96       	adiw	r24, 0x01	; 1
    7904:	a1 1d       	adc	r26, r1
    7906:	b1 1d       	adc	r27, r1
    7908:	80 93 ef 01 	sts	0x01EF, r24
    790c:	90 93 f0 01 	sts	0x01F0, r25
    7910:	a0 93 f1 01 	sts	0x01F1, r26
    7914:	b0 93 f2 01 	sts	0x01F2, r27
            if (task1_counter >= Red_INTERVAL) {
    7918:	80 91 ef 01 	lds	r24, 0x01EF
    791c:	90 91 f0 01 	lds	r25, 0x01F0
    7920:	a0 91 f1 01 	lds	r26, 0x01F1
    7924:	b0 91 f2 01 	lds	r27, 0x01F2
    7928:	8e 31       	cpi	r24, 0x1E	; 30
    792a:	91 05       	cpc	r25, r1
    792c:	a1 05       	cpc	r26, r1
    792e:	b1 05       	cpc	r27, r1
    7930:	d8 f1       	brcs	.+118    	; 0x79a8 <Runnable_Task+0x124>
                task1(); // Execute task 1
    7932:	0e 94 08 3c 	call	0x7810	; 0x7810 <task1>
                task1_counter = 0; // Reset counter
    7936:	10 92 ef 01 	sts	0x01EF, r1
    793a:	10 92 f0 01 	sts	0x01F0, r1
    793e:	10 92 f1 01 	sts	0x01F1, r1
    7942:	10 92 f2 01 	sts	0x01F2, r1
    7946:	30 c0       	rjmp	.+96     	; 0x79a8 <Runnable_Task+0x124>
            }
        } else if (i == 2 && i != 1) {
    7948:	89 81       	ldd	r24, Y+1	; 0x01
    794a:	82 30       	cpi	r24, 0x02	; 2
    794c:	69 f5       	brne	.+90     	; 0x79a8 <Runnable_Task+0x124>
    794e:	89 81       	ldd	r24, Y+1	; 0x01
    7950:	81 30       	cpi	r24, 0x01	; 1
    7952:	51 f1       	breq	.+84     	; 0x79a8 <Runnable_Task+0x124>
            task3_counter++;
    7954:	80 91 f7 01 	lds	r24, 0x01F7
    7958:	90 91 f8 01 	lds	r25, 0x01F8
    795c:	a0 91 f9 01 	lds	r26, 0x01F9
    7960:	b0 91 fa 01 	lds	r27, 0x01FA
    7964:	01 96       	adiw	r24, 0x01	; 1
    7966:	a1 1d       	adc	r26, r1
    7968:	b1 1d       	adc	r27, r1
    796a:	80 93 f7 01 	sts	0x01F7, r24
    796e:	90 93 f8 01 	sts	0x01F8, r25
    7972:	a0 93 f9 01 	sts	0x01F9, r26
    7976:	b0 93 fa 01 	sts	0x01FA, r27
            if (task3_counter >= Green_INTERVAL) {
    797a:	80 91 f7 01 	lds	r24, 0x01F7
    797e:	90 91 f8 01 	lds	r25, 0x01F8
    7982:	a0 91 f9 01 	lds	r26, 0x01F9
    7986:	b0 91 fa 01 	lds	r27, 0x01FA
    798a:	8b 35       	cpi	r24, 0x5B	; 91
    798c:	91 05       	cpc	r25, r1
    798e:	a1 05       	cpc	r26, r1
    7990:	b1 05       	cpc	r27, r1
    7992:	50 f0       	brcs	.+20     	; 0x79a8 <Runnable_Task+0x124>
                task3(); // Execute task 3
    7994:	0e 94 31 3c 	call	0x7862	; 0x7862 <task3>
                task3_counter = 0; // Reset counter
    7998:	10 92 f7 01 	sts	0x01F7, r1
    799c:	10 92 f8 01 	sts	0x01F8, r1
    79a0:	10 92 f9 01 	sts	0x01F9, r1
    79a4:	10 92 fa 01 	sts	0x01FA, r1
        task2(); // Execute task 2
        task2_counter = 0; // Reset counter
    }

    // Tasks 1 and 3 follow
    for (uint8_t i = 0; i < 3; i++) {
    79a8:	89 81       	ldd	r24, Y+1	; 0x01
    79aa:	8f 5f       	subi	r24, 0xFF	; 255
    79ac:	89 83       	std	Y+1, r24	; 0x01
    79ae:	89 81       	ldd	r24, Y+1	; 0x01
    79b0:	83 30       	cpi	r24, 0x03	; 3
    79b2:	08 f4       	brcc	.+2      	; 0x79b6 <Runnable_Task+0x132>
    79b4:	98 cf       	rjmp	.-208    	; 0x78e6 <Runnable_Task+0x62>
                task3(); // Execute task 3
                task3_counter = 0; // Reset counter
            }
        }
    }
}
    79b6:	0f 90       	pop	r0
    79b8:	cf 91       	pop	r28
    79ba:	df 91       	pop	r29
    79bc:	08 95       	ret

000079be <TIMER_INIT>:
void TIMER_INIT()
{
    79be:	df 93       	push	r29
    79c0:	cf 93       	push	r28
    79c2:	cd b7       	in	r28, 0x3d	; 61
    79c4:	de b7       	in	r29, 0x3e	; 62
	Timer_Init(&timer0);
    79c6:	8a e7       	ldi	r24, 0x7A	; 122
    79c8:	91 e0       	ldi	r25, 0x01	; 1
    79ca:	0e 94 63 12 	call	0x24c6	; 0x24c6 <Timer_Init>
	EnableInt(&timer0,Runnable_Task);
    79ce:	8a e7       	ldi	r24, 0x7A	; 122
    79d0:	91 e0       	ldi	r25, 0x01	; 1
    79d2:	22 e4       	ldi	r18, 0x42	; 66
    79d4:	3c e3       	ldi	r19, 0x3C	; 60
    79d6:	b9 01       	movw	r22, r18
    79d8:	0e 94 8d 13 	call	0x271a	; 0x271a <EnableInt>
}
    79dc:	cf 91       	pop	r28
    79de:	df 91       	pop	r29
    79e0:	08 95       	ret

000079e2 <main>:



int main()
{
    79e2:	df 93       	push	r29
    79e4:	cf 93       	push	r28
    79e6:	cd b7       	in	r28, 0x3d	; 61
    79e8:	de b7       	in	r29, 0x3e	; 62
	ENABLE_GIE();
    79ea:	0e 94 3b 0c 	call	0x1876	; 0x1876 <ENABLE_GIE>
	H_LCD_void_IniT();
    79ee:	0e 94 47 22 	call	0x448e	; 0x448e <H_LCD_void_IniT>
	initLEDs();
    79f2:	0e 94 fc 3b 	call	0x77f8	; 0x77f8 <initLEDs>
	// Initialize the intervals for each task
	tasks[0].interval = Blue_INTERVAL; // Blue interval 30
    79f6:	85 e0       	ldi	r24, 0x05	; 5
    79f8:	90 e0       	ldi	r25, 0x00	; 0
    79fa:	90 93 6b 01 	sts	0x016B, r25
    79fe:	80 93 6a 01 	sts	0x016A, r24
	tasks[1].interval = Red_INTERVAL; // Red 15 one second
    7a02:	8e e1       	ldi	r24, 0x1E	; 30
    7a04:	90 e0       	ldi	r25, 0x00	; 0
    7a06:	90 93 71 01 	sts	0x0171, r25
    7a0a:	80 93 70 01 	sts	0x0170, r24
	tasks[2].interval = Green_INTERVAL; // Task 3: GREEN LED every 3 sec
    7a0e:	8b e5       	ldi	r24, 0x5B	; 91
    7a10:	90 e0       	ldi	r25, 0x00	; 0
    7a12:	90 93 77 01 	sts	0x0177, r25
    7a16:	80 93 76 01 	sts	0x0176, r24


	TIMER_INIT();
    7a1a:	0e 94 df 3c 	call	0x79be	; 0x79be <TIMER_INIT>
    7a1e:	ff cf       	rjmp	.-2      	; 0x7a1e <main+0x3c>

00007a20 <__mulsi3>:
    7a20:	62 9f       	mul	r22, r18
    7a22:	d0 01       	movw	r26, r0
    7a24:	73 9f       	mul	r23, r19
    7a26:	f0 01       	movw	r30, r0
    7a28:	82 9f       	mul	r24, r18
    7a2a:	e0 0d       	add	r30, r0
    7a2c:	f1 1d       	adc	r31, r1
    7a2e:	64 9f       	mul	r22, r20
    7a30:	e0 0d       	add	r30, r0
    7a32:	f1 1d       	adc	r31, r1
    7a34:	92 9f       	mul	r25, r18
    7a36:	f0 0d       	add	r31, r0
    7a38:	83 9f       	mul	r24, r19
    7a3a:	f0 0d       	add	r31, r0
    7a3c:	74 9f       	mul	r23, r20
    7a3e:	f0 0d       	add	r31, r0
    7a40:	65 9f       	mul	r22, r21
    7a42:	f0 0d       	add	r31, r0
    7a44:	99 27       	eor	r25, r25
    7a46:	72 9f       	mul	r23, r18
    7a48:	b0 0d       	add	r27, r0
    7a4a:	e1 1d       	adc	r30, r1
    7a4c:	f9 1f       	adc	r31, r25
    7a4e:	63 9f       	mul	r22, r19
    7a50:	b0 0d       	add	r27, r0
    7a52:	e1 1d       	adc	r30, r1
    7a54:	f9 1f       	adc	r31, r25
    7a56:	bd 01       	movw	r22, r26
    7a58:	cf 01       	movw	r24, r30
    7a5a:	11 24       	eor	r1, r1
    7a5c:	08 95       	ret

00007a5e <__udivmodqi4>:
    7a5e:	99 1b       	sub	r25, r25
    7a60:	79 e0       	ldi	r23, 0x09	; 9
    7a62:	04 c0       	rjmp	.+8      	; 0x7a6c <__udivmodqi4_ep>

00007a64 <__udivmodqi4_loop>:
    7a64:	99 1f       	adc	r25, r25
    7a66:	96 17       	cp	r25, r22
    7a68:	08 f0       	brcs	.+2      	; 0x7a6c <__udivmodqi4_ep>
    7a6a:	96 1b       	sub	r25, r22

00007a6c <__udivmodqi4_ep>:
    7a6c:	88 1f       	adc	r24, r24
    7a6e:	7a 95       	dec	r23
    7a70:	c9 f7       	brne	.-14     	; 0x7a64 <__udivmodqi4_loop>
    7a72:	80 95       	com	r24
    7a74:	08 95       	ret

00007a76 <__udivmodhi4>:
    7a76:	aa 1b       	sub	r26, r26
    7a78:	bb 1b       	sub	r27, r27
    7a7a:	51 e1       	ldi	r21, 0x11	; 17
    7a7c:	07 c0       	rjmp	.+14     	; 0x7a8c <__udivmodhi4_ep>

00007a7e <__udivmodhi4_loop>:
    7a7e:	aa 1f       	adc	r26, r26
    7a80:	bb 1f       	adc	r27, r27
    7a82:	a6 17       	cp	r26, r22
    7a84:	b7 07       	cpc	r27, r23
    7a86:	10 f0       	brcs	.+4      	; 0x7a8c <__udivmodhi4_ep>
    7a88:	a6 1b       	sub	r26, r22
    7a8a:	b7 0b       	sbc	r27, r23

00007a8c <__udivmodhi4_ep>:
    7a8c:	88 1f       	adc	r24, r24
    7a8e:	99 1f       	adc	r25, r25
    7a90:	5a 95       	dec	r21
    7a92:	a9 f7       	brne	.-22     	; 0x7a7e <__udivmodhi4_loop>
    7a94:	80 95       	com	r24
    7a96:	90 95       	com	r25
    7a98:	bc 01       	movw	r22, r24
    7a9a:	cd 01       	movw	r24, r26
    7a9c:	08 95       	ret

00007a9e <__divmodhi4>:
    7a9e:	97 fb       	bst	r25, 7
    7aa0:	09 2e       	mov	r0, r25
    7aa2:	07 26       	eor	r0, r23
    7aa4:	0a d0       	rcall	.+20     	; 0x7aba <__divmodhi4_neg1>
    7aa6:	77 fd       	sbrc	r23, 7
    7aa8:	04 d0       	rcall	.+8      	; 0x7ab2 <__divmodhi4_neg2>
    7aaa:	e5 df       	rcall	.-54     	; 0x7a76 <__udivmodhi4>
    7aac:	06 d0       	rcall	.+12     	; 0x7aba <__divmodhi4_neg1>
    7aae:	00 20       	and	r0, r0
    7ab0:	1a f4       	brpl	.+6      	; 0x7ab8 <__divmodhi4_exit>

00007ab2 <__divmodhi4_neg2>:
    7ab2:	70 95       	com	r23
    7ab4:	61 95       	neg	r22
    7ab6:	7f 4f       	sbci	r23, 0xFF	; 255

00007ab8 <__divmodhi4_exit>:
    7ab8:	08 95       	ret

00007aba <__divmodhi4_neg1>:
    7aba:	f6 f7       	brtc	.-4      	; 0x7ab8 <__divmodhi4_exit>
    7abc:	90 95       	com	r25
    7abe:	81 95       	neg	r24
    7ac0:	9f 4f       	sbci	r25, 0xFF	; 255
    7ac2:	08 95       	ret

00007ac4 <__udivmodsi4>:
    7ac4:	a1 e2       	ldi	r26, 0x21	; 33
    7ac6:	1a 2e       	mov	r1, r26
    7ac8:	aa 1b       	sub	r26, r26
    7aca:	bb 1b       	sub	r27, r27
    7acc:	fd 01       	movw	r30, r26
    7ace:	0d c0       	rjmp	.+26     	; 0x7aea <__udivmodsi4_ep>

00007ad0 <__udivmodsi4_loop>:
    7ad0:	aa 1f       	adc	r26, r26
    7ad2:	bb 1f       	adc	r27, r27
    7ad4:	ee 1f       	adc	r30, r30
    7ad6:	ff 1f       	adc	r31, r31
    7ad8:	a2 17       	cp	r26, r18
    7ada:	b3 07       	cpc	r27, r19
    7adc:	e4 07       	cpc	r30, r20
    7ade:	f5 07       	cpc	r31, r21
    7ae0:	20 f0       	brcs	.+8      	; 0x7aea <__udivmodsi4_ep>
    7ae2:	a2 1b       	sub	r26, r18
    7ae4:	b3 0b       	sbc	r27, r19
    7ae6:	e4 0b       	sbc	r30, r20
    7ae8:	f5 0b       	sbc	r31, r21

00007aea <__udivmodsi4_ep>:
    7aea:	66 1f       	adc	r22, r22
    7aec:	77 1f       	adc	r23, r23
    7aee:	88 1f       	adc	r24, r24
    7af0:	99 1f       	adc	r25, r25
    7af2:	1a 94       	dec	r1
    7af4:	69 f7       	brne	.-38     	; 0x7ad0 <__udivmodsi4_loop>
    7af6:	60 95       	com	r22
    7af8:	70 95       	com	r23
    7afa:	80 95       	com	r24
    7afc:	90 95       	com	r25
    7afe:	9b 01       	movw	r18, r22
    7b00:	ac 01       	movw	r20, r24
    7b02:	bd 01       	movw	r22, r26
    7b04:	cf 01       	movw	r24, r30
    7b06:	08 95       	ret

00007b08 <__divmodsi4>:
    7b08:	97 fb       	bst	r25, 7
    7b0a:	09 2e       	mov	r0, r25
    7b0c:	05 26       	eor	r0, r21
    7b0e:	0e d0       	rcall	.+28     	; 0x7b2c <__divmodsi4_neg1>
    7b10:	57 fd       	sbrc	r21, 7
    7b12:	04 d0       	rcall	.+8      	; 0x7b1c <__divmodsi4_neg2>
    7b14:	d7 df       	rcall	.-82     	; 0x7ac4 <__udivmodsi4>
    7b16:	0a d0       	rcall	.+20     	; 0x7b2c <__divmodsi4_neg1>
    7b18:	00 1c       	adc	r0, r0
    7b1a:	38 f4       	brcc	.+14     	; 0x7b2a <__divmodsi4_exit>

00007b1c <__divmodsi4_neg2>:
    7b1c:	50 95       	com	r21
    7b1e:	40 95       	com	r20
    7b20:	30 95       	com	r19
    7b22:	21 95       	neg	r18
    7b24:	3f 4f       	sbci	r19, 0xFF	; 255
    7b26:	4f 4f       	sbci	r20, 0xFF	; 255
    7b28:	5f 4f       	sbci	r21, 0xFF	; 255

00007b2a <__divmodsi4_exit>:
    7b2a:	08 95       	ret

00007b2c <__divmodsi4_neg1>:
    7b2c:	f6 f7       	brtc	.-4      	; 0x7b2a <__divmodsi4_exit>
    7b2e:	90 95       	com	r25
    7b30:	80 95       	com	r24
    7b32:	70 95       	com	r23
    7b34:	61 95       	neg	r22
    7b36:	7f 4f       	sbci	r23, 0xFF	; 255
    7b38:	8f 4f       	sbci	r24, 0xFF	; 255
    7b3a:	9f 4f       	sbci	r25, 0xFF	; 255
    7b3c:	08 95       	ret

00007b3e <__prologue_saves__>:
    7b3e:	2f 92       	push	r2
    7b40:	3f 92       	push	r3
    7b42:	4f 92       	push	r4
    7b44:	5f 92       	push	r5
    7b46:	6f 92       	push	r6
    7b48:	7f 92       	push	r7
    7b4a:	8f 92       	push	r8
    7b4c:	9f 92       	push	r9
    7b4e:	af 92       	push	r10
    7b50:	bf 92       	push	r11
    7b52:	cf 92       	push	r12
    7b54:	df 92       	push	r13
    7b56:	ef 92       	push	r14
    7b58:	ff 92       	push	r15
    7b5a:	0f 93       	push	r16
    7b5c:	1f 93       	push	r17
    7b5e:	cf 93       	push	r28
    7b60:	df 93       	push	r29
    7b62:	cd b7       	in	r28, 0x3d	; 61
    7b64:	de b7       	in	r29, 0x3e	; 62
    7b66:	ca 1b       	sub	r28, r26
    7b68:	db 0b       	sbc	r29, r27
    7b6a:	0f b6       	in	r0, 0x3f	; 63
    7b6c:	f8 94       	cli
    7b6e:	de bf       	out	0x3e, r29	; 62
    7b70:	0f be       	out	0x3f, r0	; 63
    7b72:	cd bf       	out	0x3d, r28	; 61
    7b74:	09 94       	ijmp

00007b76 <__epilogue_restores__>:
    7b76:	2a 88       	ldd	r2, Y+18	; 0x12
    7b78:	39 88       	ldd	r3, Y+17	; 0x11
    7b7a:	48 88       	ldd	r4, Y+16	; 0x10
    7b7c:	5f 84       	ldd	r5, Y+15	; 0x0f
    7b7e:	6e 84       	ldd	r6, Y+14	; 0x0e
    7b80:	7d 84       	ldd	r7, Y+13	; 0x0d
    7b82:	8c 84       	ldd	r8, Y+12	; 0x0c
    7b84:	9b 84       	ldd	r9, Y+11	; 0x0b
    7b86:	aa 84       	ldd	r10, Y+10	; 0x0a
    7b88:	b9 84       	ldd	r11, Y+9	; 0x09
    7b8a:	c8 84       	ldd	r12, Y+8	; 0x08
    7b8c:	df 80       	ldd	r13, Y+7	; 0x07
    7b8e:	ee 80       	ldd	r14, Y+6	; 0x06
    7b90:	fd 80       	ldd	r15, Y+5	; 0x05
    7b92:	0c 81       	ldd	r16, Y+4	; 0x04
    7b94:	1b 81       	ldd	r17, Y+3	; 0x03
    7b96:	aa 81       	ldd	r26, Y+2	; 0x02
    7b98:	b9 81       	ldd	r27, Y+1	; 0x01
    7b9a:	ce 0f       	add	r28, r30
    7b9c:	d1 1d       	adc	r29, r1
    7b9e:	0f b6       	in	r0, 0x3f	; 63
    7ba0:	f8 94       	cli
    7ba2:	de bf       	out	0x3e, r29	; 62
    7ba4:	0f be       	out	0x3f, r0	; 63
    7ba6:	cd bf       	out	0x3d, r28	; 61
    7ba8:	ed 01       	movw	r28, r26
    7baa:	08 95       	ret

00007bac <itoa>:
    7bac:	fb 01       	movw	r30, r22
    7bae:	9f 01       	movw	r18, r30
    7bb0:	e8 94       	clt
    7bb2:	42 30       	cpi	r20, 0x02	; 2
    7bb4:	c4 f0       	brlt	.+48     	; 0x7be6 <itoa+0x3a>
    7bb6:	45 32       	cpi	r20, 0x25	; 37
    7bb8:	b4 f4       	brge	.+44     	; 0x7be6 <itoa+0x3a>
    7bba:	4a 30       	cpi	r20, 0x0A	; 10
    7bbc:	29 f4       	brne	.+10     	; 0x7bc8 <itoa+0x1c>
    7bbe:	97 fb       	bst	r25, 7
    7bc0:	1e f4       	brtc	.+6      	; 0x7bc8 <itoa+0x1c>
    7bc2:	90 95       	com	r25
    7bc4:	81 95       	neg	r24
    7bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    7bc8:	64 2f       	mov	r22, r20
    7bca:	77 27       	eor	r23, r23
    7bcc:	0e 94 3b 3d 	call	0x7a76	; 0x7a76 <__udivmodhi4>
    7bd0:	80 5d       	subi	r24, 0xD0	; 208
    7bd2:	8a 33       	cpi	r24, 0x3A	; 58
    7bd4:	0c f0       	brlt	.+2      	; 0x7bd8 <itoa+0x2c>
    7bd6:	89 5d       	subi	r24, 0xD9	; 217
    7bd8:	81 93       	st	Z+, r24
    7bda:	cb 01       	movw	r24, r22
    7bdc:	00 97       	sbiw	r24, 0x00	; 0
    7bde:	a1 f7       	brne	.-24     	; 0x7bc8 <itoa+0x1c>
    7be0:	16 f4       	brtc	.+4      	; 0x7be6 <itoa+0x3a>
    7be2:	5d e2       	ldi	r21, 0x2D	; 45
    7be4:	51 93       	st	Z+, r21
    7be6:	10 82       	st	Z, r1
    7be8:	c9 01       	movw	r24, r18
    7bea:	0c 94 f7 3d 	jmp	0x7bee	; 0x7bee <strrev>

00007bee <strrev>:
    7bee:	dc 01       	movw	r26, r24
    7bf0:	fc 01       	movw	r30, r24
    7bf2:	67 2f       	mov	r22, r23
    7bf4:	71 91       	ld	r23, Z+
    7bf6:	77 23       	and	r23, r23
    7bf8:	e1 f7       	brne	.-8      	; 0x7bf2 <strrev+0x4>
    7bfa:	32 97       	sbiw	r30, 0x02	; 2
    7bfc:	04 c0       	rjmp	.+8      	; 0x7c06 <strrev+0x18>
    7bfe:	7c 91       	ld	r23, X
    7c00:	6d 93       	st	X+, r22
    7c02:	70 83       	st	Z, r23
    7c04:	62 91       	ld	r22, -Z
    7c06:	ae 17       	cp	r26, r30
    7c08:	bf 07       	cpc	r27, r31
    7c0a:	c8 f3       	brcs	.-14     	; 0x7bfe <strrev+0x10>
    7c0c:	08 95       	ret

00007c0e <_exit>:
    7c0e:	f8 94       	cli

00007c10 <__stop_program>:
    7c10:	ff cf       	rjmp	.-2      	; 0x7c10 <__stop_program>
