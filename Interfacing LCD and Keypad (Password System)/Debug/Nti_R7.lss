
Nti_R7.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004280  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001ae  00800060  00004280  00004314  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000013  0080020e  0080020e  000044c2  2**0
                  ALLOC
  3 .stab         00003d98  00000000  00000000  000044c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00002245  00000000  00000000  0000825c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000a4a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000a641  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  0000a833  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000cc3e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000dfc4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000f19c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000f35c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000f652  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ffc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 8b 0b 	jmp	0x1716	; 0x1716 <__vector_1>
       8:	0c 94 ba 0b 	jmp	0x1774	; 0x1774 <__vector_2>
       c:	0c 94 e9 0b 	jmp	0x17d2	; 0x17d2 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 34 0c 	jmp	0x1868	; 0x1868 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 17 07 	jmp	0xe2e	; 0xe2e <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 30       	cpi	r26, 0x0E	; 14
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae e0       	ldi	r26, 0x0E	; 14
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 32       	cpi	r26, 0x21	; 33
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 51 20 	call	0x40a2	; 0x40a2 <main>
      8a:	0c 94 3e 21 	jmp	0x427c	; 0x427c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 c2 20 	jmp	0x4184	; 0x4184 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ed       	ldi	r26, 0xDA	; 218
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 de 20 	jmp	0x41bc	; 0x41bc <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 ce 20 	jmp	0x419c	; 0x419c <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 ea 20 	jmp	0x41d4	; 0x41d4 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 ce 20 	jmp	0x419c	; 0x419c <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 ea 20 	jmp	0x41d4	; 0x41d4 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 c2 20 	jmp	0x4184	; 0x4184 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8a ed       	ldi	r24, 0xDA	; 218
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 de 20 	jmp	0x41bc	; 0x41bc <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 ca 20 	jmp	0x4194	; 0x4194 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6a ed       	ldi	r22, 0xDA	; 218
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 e6 20 	jmp	0x41cc	; 0x41cc <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 ce 20 	jmp	0x419c	; 0x419c <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 ea 20 	jmp	0x41d4	; 0x41d4 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 ce 20 	jmp	0x419c	; 0x419c <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 ea 20 	jmp	0x41d4	; 0x41d4 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 ce 20 	jmp	0x419c	; 0x419c <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 ea 20 	jmp	0x41d4	; 0x41d4 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 d2 20 	jmp	0x41a4	; 0x41a4 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 ee 20 	jmp	0x41dc	; 0x41dc <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 ca 20 	jmp	0x4194	; 0x4194 <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 e6 20 	jmp	0x41cc	; 0x41cc <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ee 51       	subi	r30, 0x1E	; 30
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <__vector_16>:




void __vector_16 ()
{
     e2e:	1f 92       	push	r1
     e30:	0f 92       	push	r0
     e32:	0f b6       	in	r0, 0x3f	; 63
     e34:	0f 92       	push	r0
     e36:	11 24       	eor	r1, r1
     e38:	2f 93       	push	r18
     e3a:	3f 93       	push	r19
     e3c:	4f 93       	push	r20
     e3e:	5f 93       	push	r21
     e40:	6f 93       	push	r22
     e42:	7f 93       	push	r23
     e44:	8f 93       	push	r24
     e46:	9f 93       	push	r25
     e48:	af 93       	push	r26
     e4a:	bf 93       	push	r27
     e4c:	ef 93       	push	r30
     e4e:	ff 93       	push	r31
     e50:	df 93       	push	r29
     e52:	cf 93       	push	r28
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62

	CLR_BIT (SREG ,I) ;
     e58:	af e5       	ldi	r26, 0x5F	; 95
     e5a:	b0 e0       	ldi	r27, 0x00	; 0
     e5c:	ef e5       	ldi	r30, 0x5F	; 95
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	80 81       	ld	r24, Z
     e62:	8f 77       	andi	r24, 0x7F	; 127
     e64:	8c 93       	st	X, r24
	adc_ptr ();
     e66:	e0 91 0f 02 	lds	r30, 0x020F
     e6a:	f0 91 10 02 	lds	r31, 0x0210
     e6e:	09 95       	icall
	ADC_BASE->ADCSRA_Reg.Bitfield.B4 = 1;
     e70:	e4 e2       	ldi	r30, 0x24	; 36
     e72:	f0 e0       	ldi	r31, 0x00	; 0
     e74:	82 81       	ldd	r24, Z+2	; 0x02
     e76:	80 61       	ori	r24, 0x10	; 16
     e78:	82 83       	std	Z+2, r24	; 0x02
}
     e7a:	cf 91       	pop	r28
     e7c:	df 91       	pop	r29
     e7e:	ff 91       	pop	r31
     e80:	ef 91       	pop	r30
     e82:	bf 91       	pop	r27
     e84:	af 91       	pop	r26
     e86:	9f 91       	pop	r25
     e88:	8f 91       	pop	r24
     e8a:	7f 91       	pop	r23
     e8c:	6f 91       	pop	r22
     e8e:	5f 91       	pop	r21
     e90:	4f 91       	pop	r20
     e92:	3f 91       	pop	r19
     e94:	2f 91       	pop	r18
     e96:	0f 90       	pop	r0
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	0f 90       	pop	r0
     e9c:	1f 90       	pop	r1
     e9e:	18 95       	reti

00000ea0 <ADC_init>:
/*
 * this function should select ( Vref , Right or Left adjust
, prescaler , autotrigger or Not , and ADC enable).
 */
void ADC_init( const ADC_Config_t * Config_Ptr)
{
     ea0:	df 93       	push	r29
     ea2:	cf 93       	push	r28
     ea4:	00 d0       	rcall	.+0      	; 0xea6 <ADC_init+0x6>
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	9a 83       	std	Y+2, r25	; 0x02
     eac:	89 83       	std	Y+1, r24	; 0x01


	/*Inserting the ref Volatage*/
	ADC_BASE->ADMUX_Reg.Reg = (ADC_BASE->ADMUX_Reg.Reg & VOLTAGE_SELECTION_MASK) | ((Config_Ptr->ref_volt) << REFS0);
     eae:	a4 e2       	ldi	r26, 0x24	; 36
     eb0:	b0 e0       	ldi	r27, 0x00	; 0
     eb2:	e4 e2       	ldi	r30, 0x24	; 36
     eb4:	f0 e0       	ldi	r31, 0x00	; 0
     eb6:	83 81       	ldd	r24, Z+3	; 0x03
     eb8:	28 2f       	mov	r18, r24
     eba:	2f 73       	andi	r18, 0x3F	; 63
     ebc:	e9 81       	ldd	r30, Y+1	; 0x01
     ebe:	fa 81       	ldd	r31, Y+2	; 0x02
     ec0:	80 81       	ld	r24, Z
     ec2:	88 2f       	mov	r24, r24
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	00 24       	eor	r0, r0
     ec8:	96 95       	lsr	r25
     eca:	87 95       	ror	r24
     ecc:	07 94       	ror	r0
     ece:	96 95       	lsr	r25
     ed0:	87 95       	ror	r24
     ed2:	07 94       	ror	r0
     ed4:	98 2f       	mov	r25, r24
     ed6:	80 2d       	mov	r24, r0
     ed8:	82 2b       	or	r24, r18
     eda:	13 96       	adiw	r26, 0x03	; 3
     edc:	8c 93       	st	X, r24

	/*Inserting the Prescalar*/
	ADC_BASE->ADCSRA_Reg.Reg = (ADC_BASE->ADCSRA_Reg.Reg & ADC_Prescaler_Select_Bits_Mask) | (Config_Ptr->prescaler);
     ede:	a4 e2       	ldi	r26, 0x24	; 36
     ee0:	b0 e0       	ldi	r27, 0x00	; 0
     ee2:	e4 e2       	ldi	r30, 0x24	; 36
     ee4:	f0 e0       	ldi	r31, 0x00	; 0
     ee6:	82 81       	ldd	r24, Z+2	; 0x02
     ee8:	98 2f       	mov	r25, r24
     eea:	98 7f       	andi	r25, 0xF8	; 248
     eec:	e9 81       	ldd	r30, Y+1	; 0x01
     eee:	fa 81       	ldd	r31, Y+2	; 0x02
     ef0:	81 81       	ldd	r24, Z+1	; 0x01
     ef2:	89 2b       	or	r24, r25
     ef4:	12 96       	adiw	r26, 0x02	; 2
     ef6:	8c 93       	st	X, r24

	SET_BIT(ADC_BASE->ADCSRA_Reg.Reg,ADEN);
     ef8:	a4 e2       	ldi	r26, 0x24	; 36
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e4 e2       	ldi	r30, 0x24	; 36
     efe:	f0 e0       	ldi	r31, 0x00	; 0
     f00:	82 81       	ldd	r24, Z+2	; 0x02
     f02:	80 68       	ori	r24, 0x80	; 128
     f04:	12 96       	adiw	r26, 0x02	; 2
     f06:	8c 93       	st	X, r24
     f08:	12 97       	sbiw	r26, 0x02	; 2



if(Config_Ptr->adjust == Left_adjust)
     f0a:	e9 81       	ldd	r30, Y+1	; 0x01
     f0c:	fa 81       	ldd	r31, Y+2	; 0x02
     f0e:	83 81       	ldd	r24, Z+3	; 0x03
     f10:	81 30       	cpi	r24, 0x01	; 1
     f12:	a1 f4       	brne	.+40     	; 0xf3c <ADC_init+0x9c>
	ADC_BASE->ADMUX_Reg.Bitfield.B5 = Config_Ptr->adjust;
     f14:	a4 e2       	ldi	r26, 0x24	; 36
     f16:	b0 e0       	ldi	r27, 0x00	; 0
     f18:	e9 81       	ldd	r30, Y+1	; 0x01
     f1a:	fa 81       	ldd	r31, Y+2	; 0x02
     f1c:	83 81       	ldd	r24, Z+3	; 0x03
     f1e:	81 70       	andi	r24, 0x01	; 1
     f20:	81 70       	andi	r24, 0x01	; 1
     f22:	98 2f       	mov	r25, r24
     f24:	92 95       	swap	r25
     f26:	99 0f       	add	r25, r25
     f28:	90 7e       	andi	r25, 0xE0	; 224
     f2a:	13 96       	adiw	r26, 0x03	; 3
     f2c:	8c 91       	ld	r24, X
     f2e:	13 97       	sbiw	r26, 0x03	; 3
     f30:	8f 7d       	andi	r24, 0xDF	; 223
     f32:	89 2b       	or	r24, r25
     f34:	13 96       	adiw	r26, 0x03	; 3
     f36:	8c 93       	st	X, r24
     f38:	13 97       	sbiw	r26, 0x03	; 3
     f3a:	18 c0       	rjmp	.+48     	; 0xf6c <ADC_init+0xcc>
else if(Config_Ptr->adjust == Right_adjust)
     f3c:	e9 81       	ldd	r30, Y+1	; 0x01
     f3e:	fa 81       	ldd	r31, Y+2	; 0x02
     f40:	83 81       	ldd	r24, Z+3	; 0x03
     f42:	88 23       	and	r24, r24
     f44:	99 f4       	brne	.+38     	; 0xf6c <ADC_init+0xcc>
	ADC_BASE->ADMUX_Reg.Bitfield.B5 = Config_Ptr->adjust;
     f46:	a4 e2       	ldi	r26, 0x24	; 36
     f48:	b0 e0       	ldi	r27, 0x00	; 0
     f4a:	e9 81       	ldd	r30, Y+1	; 0x01
     f4c:	fa 81       	ldd	r31, Y+2	; 0x02
     f4e:	83 81       	ldd	r24, Z+3	; 0x03
     f50:	81 70       	andi	r24, 0x01	; 1
     f52:	81 70       	andi	r24, 0x01	; 1
     f54:	98 2f       	mov	r25, r24
     f56:	92 95       	swap	r25
     f58:	99 0f       	add	r25, r25
     f5a:	90 7e       	andi	r25, 0xE0	; 224
     f5c:	13 96       	adiw	r26, 0x03	; 3
     f5e:	8c 91       	ld	r24, X
     f60:	13 97       	sbiw	r26, 0x03	; 3
     f62:	8f 7d       	andi	r24, 0xDF	; 223
     f64:	89 2b       	or	r24, r25
     f66:	13 96       	adiw	r26, 0x03	; 3
     f68:	8c 93       	st	X, r24
     f6a:	13 97       	sbiw	r26, 0x03	; 3


	if(Config_Ptr->AutoTrigger == Enable_AutoTrigger)
     f6c:	e9 81       	ldd	r30, Y+1	; 0x01
     f6e:	fa 81       	ldd	r31, Y+2	; 0x02
     f70:	84 81       	ldd	r24, Z+4	; 0x04
     f72:	88 23       	and	r24, r24
     f74:	f9 f4       	brne	.+62     	; 0xfb4 <ADC_init+0x114>
	{
		ADC_BASE->ADCSRA_Reg.Bitfield.B5 = 0;
     f76:	e4 e2       	ldi	r30, 0x24	; 36
     f78:	f0 e0       	ldi	r31, 0x00	; 0
     f7a:	82 81       	ldd	r24, Z+2	; 0x02
     f7c:	8f 7d       	andi	r24, 0xDF	; 223
     f7e:	82 83       	std	Z+2, r24	; 0x02

		ADC_BASE->ADCSRA_Reg.Bitfield.B5 = 1;
     f80:	e4 e2       	ldi	r30, 0x24	; 36
     f82:	f0 e0       	ldi	r31, 0x00	; 0
     f84:	82 81       	ldd	r24, Z+2	; 0x02
     f86:	80 62       	ori	r24, 0x20	; 32
     f88:	82 83       	std	Z+2, r24	; 0x02
		SFIOR |= (Config_Ptr->AutoTrigger_Source) << 5;
     f8a:	a0 e5       	ldi	r26, 0x50	; 80
     f8c:	b0 e0       	ldi	r27, 0x00	; 0
     f8e:	e0 e5       	ldi	r30, 0x50	; 80
     f90:	f0 e0       	ldi	r31, 0x00	; 0
     f92:	80 81       	ld	r24, Z
     f94:	28 2f       	mov	r18, r24
     f96:	e9 81       	ldd	r30, Y+1	; 0x01
     f98:	fa 81       	ldd	r31, Y+2	; 0x02
     f9a:	85 81       	ldd	r24, Z+5	; 0x05
     f9c:	88 2f       	mov	r24, r24
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	88 0f       	add	r24, r24
     fa2:	99 1f       	adc	r25, r25
     fa4:	82 95       	swap	r24
     fa6:	92 95       	swap	r25
     fa8:	90 7f       	andi	r25, 0xF0	; 240
     faa:	98 27       	eor	r25, r24
     fac:	80 7f       	andi	r24, 0xF0	; 240
     fae:	98 27       	eor	r25, r24
     fb0:	82 2b       	or	r24, r18
     fb2:	8c 93       	st	X, r24
	}



}
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
     fb8:	cf 91       	pop	r28
     fba:	df 91       	pop	r29
     fbc:	08 95       	ret

00000fbe <ADC_getDigitalValueSynchNonBlocking>:




unsigned short ADC_getDigitalValueSynchNonBlocking(ANALOG_CHANNEL channel)
{
     fbe:	df 93       	push	r29
     fc0:	cf 93       	push	r28
     fc2:	00 d0       	rcall	.+0      	; 0xfc4 <ADC_getDigitalValueSynchNonBlocking+0x6>
     fc4:	0f 92       	push	r0
     fc6:	cd b7       	in	r28, 0x3d	; 61
     fc8:	de b7       	in	r29, 0x3e	; 62
     fca:	89 83       	std	Y+1, r24	; 0x01
	/* Inserting Channel */
	ADC_BASE->ADMUX_Reg.Reg = (ADC_BASE->ADMUX_Reg.Reg & Analog_Channel_Mask) | channel;
     fcc:	a4 e2       	ldi	r26, 0x24	; 36
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e4 e2       	ldi	r30, 0x24	; 36
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	83 81       	ldd	r24, Z+3	; 0x03
     fd6:	98 2f       	mov	r25, r24
     fd8:	90 7e       	andi	r25, 0xE0	; 224
     fda:	89 81       	ldd	r24, Y+1	; 0x01
     fdc:	89 2b       	or	r24, r25
     fde:	13 96       	adiw	r26, 0x03	; 3
     fe0:	8c 93       	st	X, r24

	/*Start Conversion */
	SET_BIT(ADC_BASE->ADCSRA_Reg.Reg , ADSC);
     fe2:	a4 e2       	ldi	r26, 0x24	; 36
     fe4:	b0 e0       	ldi	r27, 0x00	; 0
     fe6:	e4 e2       	ldi	r30, 0x24	; 36
     fe8:	f0 e0       	ldi	r31, 0x00	; 0
     fea:	82 81       	ldd	r24, Z+2	; 0x02
     fec:	80 64       	ori	r24, 0x40	; 64
     fee:	12 96       	adiw	r26, 0x02	; 2
     ff0:	8c 93       	st	X, r24
     ff2:	12 97       	sbiw	r26, 0x02	; 2




	if(ADC_BASE->ADCSRA_Reg.Bitfield.B4 == 0)
     ff4:	e4 e2       	ldi	r30, 0x24	; 36
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	82 81       	ldd	r24, Z+2	; 0x02
     ffa:	80 71       	andi	r24, 0x10	; 16
     ffc:	88 23       	and	r24, r24
     ffe:	91 f4       	brne	.+36     	; 0x1024 <ADC_getDigitalValueSynchNonBlocking+0x66>
	{
		SET_BIT(ADC_BASE->ADCSRA_Reg.Reg,ADIF);
    1000:	a4 e2       	ldi	r26, 0x24	; 36
    1002:	b0 e0       	ldi	r27, 0x00	; 0
    1004:	e4 e2       	ldi	r30, 0x24	; 36
    1006:	f0 e0       	ldi	r31, 0x00	; 0
    1008:	82 81       	ldd	r24, Z+2	; 0x02
    100a:	80 61       	ori	r24, 0x10	; 16
    100c:	12 96       	adiw	r26, 0x02	; 2
    100e:	8c 93       	st	X, r24
    1010:	12 97       	sbiw	r26, 0x02	; 2
		return 	 ADC_BASE->ADCL_Reg;
    1012:	e4 e2       	ldi	r30, 0x24	; 36
    1014:	f0 e0       	ldi	r31, 0x00	; 0
    1016:	80 81       	ld	r24, Z
    1018:	91 81       	ldd	r25, Z+1	; 0x01
    101a:	9b 83       	std	Y+3, r25	; 0x03
    101c:	8a 83       	std	Y+2, r24	; 0x02
	}

}
    101e:	8a 81       	ldd	r24, Y+2	; 0x02
    1020:	9b 81       	ldd	r25, Y+3	; 0x03
    1022:	00 c0       	rjmp	.+0      	; 0x1024 <ADC_getDigitalValueSynchNonBlocking+0x66>
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	0f 90       	pop	r0
    102a:	cf 91       	pop	r28
    102c:	df 91       	pop	r29
    102e:	08 95       	ret

00001030 <ADC_getDigitalValueAsynchCallBack>:
 * needs to know channel and the call back pointer ,
 *	this fn enables Interrupt and selects the channel and
 *	starts conversion.
 */
void ADC_getDigitalValueAsynchCallBack( ANALOG_CHANNEL channel,void(*fnptr)(void))
{	/* Inserting Channel */
    1030:	df 93       	push	r29
    1032:	cf 93       	push	r28
    1034:	00 d0       	rcall	.+0      	; 0x1036 <ADC_getDigitalValueAsynchCallBack+0x6>
    1036:	0f 92       	push	r0
    1038:	cd b7       	in	r28, 0x3d	; 61
    103a:	de b7       	in	r29, 0x3e	; 62
    103c:	89 83       	std	Y+1, r24	; 0x01
    103e:	7b 83       	std	Y+3, r23	; 0x03
    1040:	6a 83       	std	Y+2, r22	; 0x02
	ADC_BASE->ADMUX_Reg.Reg = (ADC_BASE->ADMUX_Reg.Reg & Analog_Channel_Mask) | channel;
    1042:	a4 e2       	ldi	r26, 0x24	; 36
    1044:	b0 e0       	ldi	r27, 0x00	; 0
    1046:	e4 e2       	ldi	r30, 0x24	; 36
    1048:	f0 e0       	ldi	r31, 0x00	; 0
    104a:	83 81       	ldd	r24, Z+3	; 0x03
    104c:	98 2f       	mov	r25, r24
    104e:	90 7e       	andi	r25, 0xE0	; 224
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	89 2b       	or	r24, r25
    1054:	13 96       	adiw	r26, 0x03	; 3
    1056:	8c 93       	st	X, r24

	SET_BIT (SREG , I) ;
    1058:	af e5       	ldi	r26, 0x5F	; 95
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	ef e5       	ldi	r30, 0x5F	; 95
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	80 81       	ld	r24, Z
    1062:	80 68       	ori	r24, 0x80	; 128
    1064:	8c 93       	st	X, r24
	SET_BIT(ADC_BASE->ADCSRA_Reg.Reg,ADIE);
    1066:	a4 e2       	ldi	r26, 0x24	; 36
    1068:	b0 e0       	ldi	r27, 0x00	; 0
    106a:	e4 e2       	ldi	r30, 0x24	; 36
    106c:	f0 e0       	ldi	r31, 0x00	; 0
    106e:	82 81       	ldd	r24, Z+2	; 0x02
    1070:	88 60       	ori	r24, 0x08	; 8
    1072:	12 96       	adiw	r26, 0x02	; 2
    1074:	8c 93       	st	X, r24

	/*Start Conversion */
	SET_BIT(ADC_BASE->ADCSRA_Reg.Reg , ADSC);
    1076:	a4 e2       	ldi	r26, 0x24	; 36
    1078:	b0 e0       	ldi	r27, 0x00	; 0
    107a:	e4 e2       	ldi	r30, 0x24	; 36
    107c:	f0 e0       	ldi	r31, 0x00	; 0
    107e:	82 81       	ldd	r24, Z+2	; 0x02
    1080:	80 64       	ori	r24, 0x40	; 64
    1082:	12 96       	adiw	r26, 0x02	; 2
    1084:	8c 93       	st	X, r24
    1086:	12 97       	sbiw	r26, 0x02	; 2
	adc_ptr = fnptr;
    1088:	8a 81       	ldd	r24, Y+2	; 0x02
    108a:	9b 81       	ldd	r25, Y+3	; 0x03
    108c:	90 93 10 02 	sts	0x0210, r25
    1090:	80 93 0f 02 	sts	0x020F, r24


}
    1094:	0f 90       	pop	r0
    1096:	0f 90       	pop	r0
    1098:	0f 90       	pop	r0
    109a:	cf 91       	pop	r28
    109c:	df 91       	pop	r29
    109e:	08 95       	ret

000010a0 <DIO_voidSetPinDirection>:
 *@param [in] 			-Value: Pin Value
 * @retval 			-none
 * Note				-none
 */
void DIO_voidSetPinDirection(Port_Def* ptr,Pin_ID_t Copy_u8PinId,Pin_Direction_t Copy_u8Direction)
{
    10a0:	df 93       	push	r29
    10a2:	cf 93       	push	r28
    10a4:	00 d0       	rcall	.+0      	; 0x10a6 <DIO_voidSetPinDirection+0x6>
    10a6:	00 d0       	rcall	.+0      	; 0x10a8 <DIO_voidSetPinDirection+0x8>
    10a8:	00 d0       	rcall	.+0      	; 0x10aa <DIO_voidSetPinDirection+0xa>
    10aa:	cd b7       	in	r28, 0x3d	; 61
    10ac:	de b7       	in	r29, 0x3e	; 62
    10ae:	9a 83       	std	Y+2, r25	; 0x02
    10b0:	89 83       	std	Y+1, r24	; 0x01
    10b2:	6b 83       	std	Y+3, r22	; 0x03
    10b4:	4c 83       	std	Y+4, r20	; 0x04

	switch (Copy_u8PinId)
    10b6:	8b 81       	ldd	r24, Y+3	; 0x03
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	3e 83       	std	Y+6, r19	; 0x06
    10be:	2d 83       	std	Y+5, r18	; 0x05
    10c0:	8d 81       	ldd	r24, Y+5	; 0x05
    10c2:	9e 81       	ldd	r25, Y+6	; 0x06
    10c4:	83 30       	cpi	r24, 0x03	; 3
    10c6:	91 05       	cpc	r25, r1
    10c8:	09 f4       	brne	.+2      	; 0x10cc <DIO_voidSetPinDirection+0x2c>
    10ca:	51 c0       	rjmp	.+162    	; 0x116e <DIO_voidSetPinDirection+0xce>
    10cc:	2d 81       	ldd	r18, Y+5	; 0x05
    10ce:	3e 81       	ldd	r19, Y+6	; 0x06
    10d0:	24 30       	cpi	r18, 0x04	; 4
    10d2:	31 05       	cpc	r19, r1
    10d4:	7c f4       	brge	.+30     	; 0x10f4 <DIO_voidSetPinDirection+0x54>
    10d6:	8d 81       	ldd	r24, Y+5	; 0x05
    10d8:	9e 81       	ldd	r25, Y+6	; 0x06
    10da:	81 30       	cpi	r24, 0x01	; 1
    10dc:	91 05       	cpc	r25, r1
    10de:	71 f1       	breq	.+92     	; 0x113c <DIO_voidSetPinDirection+0x9c>
    10e0:	2d 81       	ldd	r18, Y+5	; 0x05
    10e2:	3e 81       	ldd	r19, Y+6	; 0x06
    10e4:	22 30       	cpi	r18, 0x02	; 2
    10e6:	31 05       	cpc	r19, r1
    10e8:	ac f5       	brge	.+106    	; 0x1154 <DIO_voidSetPinDirection+0xb4>
    10ea:	8d 81       	ldd	r24, Y+5	; 0x05
    10ec:	9e 81       	ldd	r25, Y+6	; 0x06
    10ee:	00 97       	sbiw	r24, 0x00	; 0
    10f0:	d1 f0       	breq	.+52     	; 0x1126 <DIO_voidSetPinDirection+0x86>
    10f2:	81 c0       	rjmp	.+258    	; 0x11f6 <DIO_voidSetPinDirection+0x156>
    10f4:	2d 81       	ldd	r18, Y+5	; 0x05
    10f6:	3e 81       	ldd	r19, Y+6	; 0x06
    10f8:	25 30       	cpi	r18, 0x05	; 5
    10fa:	31 05       	cpc	r19, r1
    10fc:	09 f4       	brne	.+2      	; 0x1100 <DIO_voidSetPinDirection+0x60>
    10fe:	52 c0       	rjmp	.+164    	; 0x11a4 <DIO_voidSetPinDirection+0x104>
    1100:	8d 81       	ldd	r24, Y+5	; 0x05
    1102:	9e 81       	ldd	r25, Y+6	; 0x06
    1104:	85 30       	cpi	r24, 0x05	; 5
    1106:	91 05       	cpc	r25, r1
    1108:	0c f4       	brge	.+2      	; 0x110c <DIO_voidSetPinDirection+0x6c>
    110a:	3f c0       	rjmp	.+126    	; 0x118a <DIO_voidSetPinDirection+0xea>
    110c:	2d 81       	ldd	r18, Y+5	; 0x05
    110e:	3e 81       	ldd	r19, Y+6	; 0x06
    1110:	26 30       	cpi	r18, 0x06	; 6
    1112:	31 05       	cpc	r19, r1
    1114:	09 f4       	brne	.+2      	; 0x1118 <DIO_voidSetPinDirection+0x78>
    1116:	54 c0       	rjmp	.+168    	; 0x11c0 <DIO_voidSetPinDirection+0x120>
    1118:	8d 81       	ldd	r24, Y+5	; 0x05
    111a:	9e 81       	ldd	r25, Y+6	; 0x06
    111c:	87 30       	cpi	r24, 0x07	; 7
    111e:	91 05       	cpc	r25, r1
    1120:	09 f4       	brne	.+2      	; 0x1124 <DIO_voidSetPinDirection+0x84>
    1122:	5d c0       	rjmp	.+186    	; 0x11de <DIO_voidSetPinDirection+0x13e>
    1124:	68 c0       	rjmp	.+208    	; 0x11f6 <DIO_voidSetPinDirection+0x156>
	{
	case 0:
		ptr->DDR.Bitfield.B0=Copy_u8Direction;
    1126:	8c 81       	ldd	r24, Y+4	; 0x04
    1128:	81 70       	andi	r24, 0x01	; 1
    112a:	e9 81       	ldd	r30, Y+1	; 0x01
    112c:	fa 81       	ldd	r31, Y+2	; 0x02
    112e:	98 2f       	mov	r25, r24
    1130:	91 70       	andi	r25, 0x01	; 1
    1132:	81 81       	ldd	r24, Z+1	; 0x01
    1134:	8e 7f       	andi	r24, 0xFE	; 254
    1136:	89 2b       	or	r24, r25
    1138:	81 83       	std	Z+1, r24	; 0x01
    113a:	5d c0       	rjmp	.+186    	; 0x11f6 <DIO_voidSetPinDirection+0x156>
		break;
	case 1:
		ptr->DDR.Bitfield.B1=Copy_u8Direction;
    113c:	8c 81       	ldd	r24, Y+4	; 0x04
    113e:	81 70       	andi	r24, 0x01	; 1
    1140:	e9 81       	ldd	r30, Y+1	; 0x01
    1142:	fa 81       	ldd	r31, Y+2	; 0x02
    1144:	81 70       	andi	r24, 0x01	; 1
    1146:	98 2f       	mov	r25, r24
    1148:	99 0f       	add	r25, r25
    114a:	81 81       	ldd	r24, Z+1	; 0x01
    114c:	8d 7f       	andi	r24, 0xFD	; 253
    114e:	89 2b       	or	r24, r25
    1150:	81 83       	std	Z+1, r24	; 0x01
    1152:	51 c0       	rjmp	.+162    	; 0x11f6 <DIO_voidSetPinDirection+0x156>
		break;
	case 2:
		ptr->DDR.Bitfield.B2=Copy_u8Direction;
    1154:	8c 81       	ldd	r24, Y+4	; 0x04
    1156:	81 70       	andi	r24, 0x01	; 1
    1158:	e9 81       	ldd	r30, Y+1	; 0x01
    115a:	fa 81       	ldd	r31, Y+2	; 0x02
    115c:	81 70       	andi	r24, 0x01	; 1
    115e:	98 2f       	mov	r25, r24
    1160:	99 0f       	add	r25, r25
    1162:	99 0f       	add	r25, r25
    1164:	81 81       	ldd	r24, Z+1	; 0x01
    1166:	8b 7f       	andi	r24, 0xFB	; 251
    1168:	89 2b       	or	r24, r25
    116a:	81 83       	std	Z+1, r24	; 0x01
    116c:	44 c0       	rjmp	.+136    	; 0x11f6 <DIO_voidSetPinDirection+0x156>
		break;
	case 3:
		ptr->DDR.Bitfield.B3=Copy_u8Direction;
    116e:	8c 81       	ldd	r24, Y+4	; 0x04
    1170:	81 70       	andi	r24, 0x01	; 1
    1172:	e9 81       	ldd	r30, Y+1	; 0x01
    1174:	fa 81       	ldd	r31, Y+2	; 0x02
    1176:	81 70       	andi	r24, 0x01	; 1
    1178:	98 2f       	mov	r25, r24
    117a:	99 0f       	add	r25, r25
    117c:	99 0f       	add	r25, r25
    117e:	99 0f       	add	r25, r25
    1180:	81 81       	ldd	r24, Z+1	; 0x01
    1182:	87 7f       	andi	r24, 0xF7	; 247
    1184:	89 2b       	or	r24, r25
    1186:	81 83       	std	Z+1, r24	; 0x01
    1188:	36 c0       	rjmp	.+108    	; 0x11f6 <DIO_voidSetPinDirection+0x156>
		break;
	case 4:
		ptr->DDR.Bitfield.B4=Copy_u8Direction;
    118a:	8c 81       	ldd	r24, Y+4	; 0x04
    118c:	81 70       	andi	r24, 0x01	; 1
    118e:	e9 81       	ldd	r30, Y+1	; 0x01
    1190:	fa 81       	ldd	r31, Y+2	; 0x02
    1192:	81 70       	andi	r24, 0x01	; 1
    1194:	98 2f       	mov	r25, r24
    1196:	92 95       	swap	r25
    1198:	90 7f       	andi	r25, 0xF0	; 240
    119a:	81 81       	ldd	r24, Z+1	; 0x01
    119c:	8f 7e       	andi	r24, 0xEF	; 239
    119e:	89 2b       	or	r24, r25
    11a0:	81 83       	std	Z+1, r24	; 0x01
    11a2:	29 c0       	rjmp	.+82     	; 0x11f6 <DIO_voidSetPinDirection+0x156>
		break;
	case 5:
		ptr->DDR.Bitfield.B5=Copy_u8Direction;
    11a4:	8c 81       	ldd	r24, Y+4	; 0x04
    11a6:	81 70       	andi	r24, 0x01	; 1
    11a8:	e9 81       	ldd	r30, Y+1	; 0x01
    11aa:	fa 81       	ldd	r31, Y+2	; 0x02
    11ac:	81 70       	andi	r24, 0x01	; 1
    11ae:	98 2f       	mov	r25, r24
    11b0:	92 95       	swap	r25
    11b2:	99 0f       	add	r25, r25
    11b4:	90 7e       	andi	r25, 0xE0	; 224
    11b6:	81 81       	ldd	r24, Z+1	; 0x01
    11b8:	8f 7d       	andi	r24, 0xDF	; 223
    11ba:	89 2b       	or	r24, r25
    11bc:	81 83       	std	Z+1, r24	; 0x01
    11be:	1b c0       	rjmp	.+54     	; 0x11f6 <DIO_voidSetPinDirection+0x156>
		break;
	case 6:
		ptr->DDR.Bitfield.B6=Copy_u8Direction;
    11c0:	8c 81       	ldd	r24, Y+4	; 0x04
    11c2:	81 70       	andi	r24, 0x01	; 1
    11c4:	e9 81       	ldd	r30, Y+1	; 0x01
    11c6:	fa 81       	ldd	r31, Y+2	; 0x02
    11c8:	81 70       	andi	r24, 0x01	; 1
    11ca:	98 2f       	mov	r25, r24
    11cc:	92 95       	swap	r25
    11ce:	99 0f       	add	r25, r25
    11d0:	99 0f       	add	r25, r25
    11d2:	90 7c       	andi	r25, 0xC0	; 192
    11d4:	81 81       	ldd	r24, Z+1	; 0x01
    11d6:	8f 7b       	andi	r24, 0xBF	; 191
    11d8:	89 2b       	or	r24, r25
    11da:	81 83       	std	Z+1, r24	; 0x01
    11dc:	0c c0       	rjmp	.+24     	; 0x11f6 <DIO_voidSetPinDirection+0x156>
		break;
	case 7:
		ptr->DDR.Bitfield.B7=Copy_u8Direction;
    11de:	8c 81       	ldd	r24, Y+4	; 0x04
    11e0:	81 70       	andi	r24, 0x01	; 1
    11e2:	e9 81       	ldd	r30, Y+1	; 0x01
    11e4:	fa 81       	ldd	r31, Y+2	; 0x02
    11e6:	98 2f       	mov	r25, r24
    11e8:	97 95       	ror	r25
    11ea:	99 27       	eor	r25, r25
    11ec:	97 95       	ror	r25
    11ee:	81 81       	ldd	r24, Z+1	; 0x01
    11f0:	8f 77       	andi	r24, 0x7F	; 127
    11f2:	89 2b       	or	r24, r25
    11f4:	81 83       	std	Z+1, r24	; 0x01
		break;

	}
}
    11f6:	26 96       	adiw	r28, 0x06	; 6
    11f8:	0f b6       	in	r0, 0x3f	; 63
    11fa:	f8 94       	cli
    11fc:	de bf       	out	0x3e, r29	; 62
    11fe:	0f be       	out	0x3f, r0	; 63
    1200:	cd bf       	out	0x3d, r28	; 61
    1202:	cf 91       	pop	r28
    1204:	df 91       	pop	r29
    1206:	08 95       	ret

00001208 <DIO_voidSetPinValue>:
 *@param [in] 			-Copy_u8Value: Pin Value
 * @retval 			-none
 * Note				-none
 */
void DIO_voidSetPinValue(Port_Def* ptr,Pin_ID_t Copy_u8PinId, PIN_VALUE_t Copy_u8Value)
{
    1208:	df 93       	push	r29
    120a:	cf 93       	push	r28
    120c:	00 d0       	rcall	.+0      	; 0x120e <DIO_voidSetPinValue+0x6>
    120e:	00 d0       	rcall	.+0      	; 0x1210 <DIO_voidSetPinValue+0x8>
    1210:	00 d0       	rcall	.+0      	; 0x1212 <DIO_voidSetPinValue+0xa>
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	9a 83       	std	Y+2, r25	; 0x02
    1218:	89 83       	std	Y+1, r24	; 0x01
    121a:	6b 83       	std	Y+3, r22	; 0x03
    121c:	4c 83       	std	Y+4, r20	; 0x04

	switch (Copy_u8PinId)
    121e:	8b 81       	ldd	r24, Y+3	; 0x03
    1220:	28 2f       	mov	r18, r24
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	3e 83       	std	Y+6, r19	; 0x06
    1226:	2d 83       	std	Y+5, r18	; 0x05
    1228:	8d 81       	ldd	r24, Y+5	; 0x05
    122a:	9e 81       	ldd	r25, Y+6	; 0x06
    122c:	83 30       	cpi	r24, 0x03	; 3
    122e:	91 05       	cpc	r25, r1
    1230:	09 f4       	brne	.+2      	; 0x1234 <DIO_voidSetPinValue+0x2c>
    1232:	51 c0       	rjmp	.+162    	; 0x12d6 <DIO_voidSetPinValue+0xce>
    1234:	2d 81       	ldd	r18, Y+5	; 0x05
    1236:	3e 81       	ldd	r19, Y+6	; 0x06
    1238:	24 30       	cpi	r18, 0x04	; 4
    123a:	31 05       	cpc	r19, r1
    123c:	7c f4       	brge	.+30     	; 0x125c <DIO_voidSetPinValue+0x54>
    123e:	8d 81       	ldd	r24, Y+5	; 0x05
    1240:	9e 81       	ldd	r25, Y+6	; 0x06
    1242:	81 30       	cpi	r24, 0x01	; 1
    1244:	91 05       	cpc	r25, r1
    1246:	71 f1       	breq	.+92     	; 0x12a4 <DIO_voidSetPinValue+0x9c>
    1248:	2d 81       	ldd	r18, Y+5	; 0x05
    124a:	3e 81       	ldd	r19, Y+6	; 0x06
    124c:	22 30       	cpi	r18, 0x02	; 2
    124e:	31 05       	cpc	r19, r1
    1250:	ac f5       	brge	.+106    	; 0x12bc <DIO_voidSetPinValue+0xb4>
    1252:	8d 81       	ldd	r24, Y+5	; 0x05
    1254:	9e 81       	ldd	r25, Y+6	; 0x06
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	d1 f0       	breq	.+52     	; 0x128e <DIO_voidSetPinValue+0x86>
    125a:	81 c0       	rjmp	.+258    	; 0x135e <DIO_voidSetPinValue+0x156>
    125c:	2d 81       	ldd	r18, Y+5	; 0x05
    125e:	3e 81       	ldd	r19, Y+6	; 0x06
    1260:	25 30       	cpi	r18, 0x05	; 5
    1262:	31 05       	cpc	r19, r1
    1264:	09 f4       	brne	.+2      	; 0x1268 <DIO_voidSetPinValue+0x60>
    1266:	52 c0       	rjmp	.+164    	; 0x130c <DIO_voidSetPinValue+0x104>
    1268:	8d 81       	ldd	r24, Y+5	; 0x05
    126a:	9e 81       	ldd	r25, Y+6	; 0x06
    126c:	85 30       	cpi	r24, 0x05	; 5
    126e:	91 05       	cpc	r25, r1
    1270:	0c f4       	brge	.+2      	; 0x1274 <DIO_voidSetPinValue+0x6c>
    1272:	3f c0       	rjmp	.+126    	; 0x12f2 <DIO_voidSetPinValue+0xea>
    1274:	2d 81       	ldd	r18, Y+5	; 0x05
    1276:	3e 81       	ldd	r19, Y+6	; 0x06
    1278:	26 30       	cpi	r18, 0x06	; 6
    127a:	31 05       	cpc	r19, r1
    127c:	09 f4       	brne	.+2      	; 0x1280 <DIO_voidSetPinValue+0x78>
    127e:	54 c0       	rjmp	.+168    	; 0x1328 <DIO_voidSetPinValue+0x120>
    1280:	8d 81       	ldd	r24, Y+5	; 0x05
    1282:	9e 81       	ldd	r25, Y+6	; 0x06
    1284:	87 30       	cpi	r24, 0x07	; 7
    1286:	91 05       	cpc	r25, r1
    1288:	09 f4       	brne	.+2      	; 0x128c <DIO_voidSetPinValue+0x84>
    128a:	5d c0       	rjmp	.+186    	; 0x1346 <DIO_voidSetPinValue+0x13e>
    128c:	68 c0       	rjmp	.+208    	; 0x135e <DIO_voidSetPinValue+0x156>
	{
	case 0:
		ptr->PORT.Bitfield.B0=Copy_u8Value;
    128e:	8c 81       	ldd	r24, Y+4	; 0x04
    1290:	81 70       	andi	r24, 0x01	; 1
    1292:	e9 81       	ldd	r30, Y+1	; 0x01
    1294:	fa 81       	ldd	r31, Y+2	; 0x02
    1296:	98 2f       	mov	r25, r24
    1298:	91 70       	andi	r25, 0x01	; 1
    129a:	82 81       	ldd	r24, Z+2	; 0x02
    129c:	8e 7f       	andi	r24, 0xFE	; 254
    129e:	89 2b       	or	r24, r25
    12a0:	82 83       	std	Z+2, r24	; 0x02
    12a2:	5d c0       	rjmp	.+186    	; 0x135e <DIO_voidSetPinValue+0x156>
		break;
	case 1:
		ptr->PORT.Bitfield.B1=Copy_u8Value;
    12a4:	8c 81       	ldd	r24, Y+4	; 0x04
    12a6:	81 70       	andi	r24, 0x01	; 1
    12a8:	e9 81       	ldd	r30, Y+1	; 0x01
    12aa:	fa 81       	ldd	r31, Y+2	; 0x02
    12ac:	81 70       	andi	r24, 0x01	; 1
    12ae:	98 2f       	mov	r25, r24
    12b0:	99 0f       	add	r25, r25
    12b2:	82 81       	ldd	r24, Z+2	; 0x02
    12b4:	8d 7f       	andi	r24, 0xFD	; 253
    12b6:	89 2b       	or	r24, r25
    12b8:	82 83       	std	Z+2, r24	; 0x02
    12ba:	51 c0       	rjmp	.+162    	; 0x135e <DIO_voidSetPinValue+0x156>
		break;
	case 2:
		ptr->PORT.Bitfield.B2=Copy_u8Value;
    12bc:	8c 81       	ldd	r24, Y+4	; 0x04
    12be:	81 70       	andi	r24, 0x01	; 1
    12c0:	e9 81       	ldd	r30, Y+1	; 0x01
    12c2:	fa 81       	ldd	r31, Y+2	; 0x02
    12c4:	81 70       	andi	r24, 0x01	; 1
    12c6:	98 2f       	mov	r25, r24
    12c8:	99 0f       	add	r25, r25
    12ca:	99 0f       	add	r25, r25
    12cc:	82 81       	ldd	r24, Z+2	; 0x02
    12ce:	8b 7f       	andi	r24, 0xFB	; 251
    12d0:	89 2b       	or	r24, r25
    12d2:	82 83       	std	Z+2, r24	; 0x02
    12d4:	44 c0       	rjmp	.+136    	; 0x135e <DIO_voidSetPinValue+0x156>
		break;
	case 3:
		ptr->PORT.Bitfield.B3=Copy_u8Value;
    12d6:	8c 81       	ldd	r24, Y+4	; 0x04
    12d8:	81 70       	andi	r24, 0x01	; 1
    12da:	e9 81       	ldd	r30, Y+1	; 0x01
    12dc:	fa 81       	ldd	r31, Y+2	; 0x02
    12de:	81 70       	andi	r24, 0x01	; 1
    12e0:	98 2f       	mov	r25, r24
    12e2:	99 0f       	add	r25, r25
    12e4:	99 0f       	add	r25, r25
    12e6:	99 0f       	add	r25, r25
    12e8:	82 81       	ldd	r24, Z+2	; 0x02
    12ea:	87 7f       	andi	r24, 0xF7	; 247
    12ec:	89 2b       	or	r24, r25
    12ee:	82 83       	std	Z+2, r24	; 0x02
    12f0:	36 c0       	rjmp	.+108    	; 0x135e <DIO_voidSetPinValue+0x156>
		break;
	case 4:
		ptr->PORT.Bitfield.B4=Copy_u8Value;
    12f2:	8c 81       	ldd	r24, Y+4	; 0x04
    12f4:	81 70       	andi	r24, 0x01	; 1
    12f6:	e9 81       	ldd	r30, Y+1	; 0x01
    12f8:	fa 81       	ldd	r31, Y+2	; 0x02
    12fa:	81 70       	andi	r24, 0x01	; 1
    12fc:	98 2f       	mov	r25, r24
    12fe:	92 95       	swap	r25
    1300:	90 7f       	andi	r25, 0xF0	; 240
    1302:	82 81       	ldd	r24, Z+2	; 0x02
    1304:	8f 7e       	andi	r24, 0xEF	; 239
    1306:	89 2b       	or	r24, r25
    1308:	82 83       	std	Z+2, r24	; 0x02
    130a:	29 c0       	rjmp	.+82     	; 0x135e <DIO_voidSetPinValue+0x156>
		break;
	case 5:
		ptr->PORT.Bitfield.B5=Copy_u8Value;
    130c:	8c 81       	ldd	r24, Y+4	; 0x04
    130e:	81 70       	andi	r24, 0x01	; 1
    1310:	e9 81       	ldd	r30, Y+1	; 0x01
    1312:	fa 81       	ldd	r31, Y+2	; 0x02
    1314:	81 70       	andi	r24, 0x01	; 1
    1316:	98 2f       	mov	r25, r24
    1318:	92 95       	swap	r25
    131a:	99 0f       	add	r25, r25
    131c:	90 7e       	andi	r25, 0xE0	; 224
    131e:	82 81       	ldd	r24, Z+2	; 0x02
    1320:	8f 7d       	andi	r24, 0xDF	; 223
    1322:	89 2b       	or	r24, r25
    1324:	82 83       	std	Z+2, r24	; 0x02
    1326:	1b c0       	rjmp	.+54     	; 0x135e <DIO_voidSetPinValue+0x156>
		break;
	case 6:
		ptr->PORT.Bitfield.B6=Copy_u8Value;
    1328:	8c 81       	ldd	r24, Y+4	; 0x04
    132a:	81 70       	andi	r24, 0x01	; 1
    132c:	e9 81       	ldd	r30, Y+1	; 0x01
    132e:	fa 81       	ldd	r31, Y+2	; 0x02
    1330:	81 70       	andi	r24, 0x01	; 1
    1332:	98 2f       	mov	r25, r24
    1334:	92 95       	swap	r25
    1336:	99 0f       	add	r25, r25
    1338:	99 0f       	add	r25, r25
    133a:	90 7c       	andi	r25, 0xC0	; 192
    133c:	82 81       	ldd	r24, Z+2	; 0x02
    133e:	8f 7b       	andi	r24, 0xBF	; 191
    1340:	89 2b       	or	r24, r25
    1342:	82 83       	std	Z+2, r24	; 0x02
    1344:	0c c0       	rjmp	.+24     	; 0x135e <DIO_voidSetPinValue+0x156>
		break;
	case 7:
		ptr->PORT.Bitfield.B7=Copy_u8Value;
    1346:	8c 81       	ldd	r24, Y+4	; 0x04
    1348:	81 70       	andi	r24, 0x01	; 1
    134a:	e9 81       	ldd	r30, Y+1	; 0x01
    134c:	fa 81       	ldd	r31, Y+2	; 0x02
    134e:	98 2f       	mov	r25, r24
    1350:	97 95       	ror	r25
    1352:	99 27       	eor	r25, r25
    1354:	97 95       	ror	r25
    1356:	82 81       	ldd	r24, Z+2	; 0x02
    1358:	8f 77       	andi	r24, 0x7F	; 127
    135a:	89 2b       	or	r24, r25
    135c:	82 83       	std	Z+2, r24	; 0x02
		break;

	}
}
    135e:	26 96       	adiw	r28, 0x06	; 6
    1360:	0f b6       	in	r0, 0x3f	; 63
    1362:	f8 94       	cli
    1364:	de bf       	out	0x3e, r29	; 62
    1366:	0f be       	out	0x3f, r0	; 63
    1368:	cd bf       	out	0x3d, r28	; 61
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <DIO_voidGetPinValue>:
 * @retval
 * Note			-none
 */

uint8 DIO_voidGetPinValue(Port_Def* ptr,Pin_ID_t Copy_u8PinId)
{
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	00 d0       	rcall	.+0      	; 0x1376 <DIO_voidGetPinValue+0x6>
    1376:	00 d0       	rcall	.+0      	; 0x1378 <DIO_voidGetPinValue+0x8>
    1378:	00 d0       	rcall	.+0      	; 0x137a <DIO_voidGetPinValue+0xa>
    137a:	cd b7       	in	r28, 0x3d	; 61
    137c:	de b7       	in	r29, 0x3e	; 62
    137e:	9b 83       	std	Y+3, r25	; 0x03
    1380:	8a 83       	std	Y+2, r24	; 0x02
    1382:	6c 83       	std	Y+4, r22	; 0x04
	uint8 value=0;
    1384:	19 82       	std	Y+1, r1	; 0x01

	switch (Copy_u8PinId)
    1386:	8c 81       	ldd	r24, Y+4	; 0x04
    1388:	28 2f       	mov	r18, r24
    138a:	30 e0       	ldi	r19, 0x00	; 0
    138c:	3e 83       	std	Y+6, r19	; 0x06
    138e:	2d 83       	std	Y+5, r18	; 0x05
    1390:	8d 81       	ldd	r24, Y+5	; 0x05
    1392:	9e 81       	ldd	r25, Y+6	; 0x06
    1394:	83 30       	cpi	r24, 0x03	; 3
    1396:	91 05       	cpc	r25, r1
    1398:	09 f4       	brne	.+2      	; 0x139c <DIO_voidGetPinValue+0x2c>
    139a:	3e c0       	rjmp	.+124    	; 0x1418 <DIO_voidGetPinValue+0xa8>
    139c:	2d 81       	ldd	r18, Y+5	; 0x05
    139e:	3e 81       	ldd	r19, Y+6	; 0x06
    13a0:	24 30       	cpi	r18, 0x04	; 4
    13a2:	31 05       	cpc	r19, r1
    13a4:	7c f4       	brge	.+30     	; 0x13c4 <DIO_voidGetPinValue+0x54>
    13a6:	8d 81       	ldd	r24, Y+5	; 0x05
    13a8:	9e 81       	ldd	r25, Y+6	; 0x06
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	91 05       	cpc	r25, r1
    13ae:	29 f1       	breq	.+74     	; 0x13fa <DIO_voidGetPinValue+0x8a>
    13b0:	2d 81       	ldd	r18, Y+5	; 0x05
    13b2:	3e 81       	ldd	r19, Y+6	; 0x06
    13b4:	22 30       	cpi	r18, 0x02	; 2
    13b6:	31 05       	cpc	r19, r1
    13b8:	3c f5       	brge	.+78     	; 0x1408 <DIO_voidGetPinValue+0x98>
    13ba:	8d 81       	ldd	r24, Y+5	; 0x05
    13bc:	9e 81       	ldd	r25, Y+6	; 0x06
    13be:	00 97       	sbiw	r24, 0x00	; 0
    13c0:	b1 f0       	breq	.+44     	; 0x13ee <DIO_voidGetPinValue+0x7e>
    13c2:	55 c0       	rjmp	.+170    	; 0x146e <DIO_voidGetPinValue+0xfe>
    13c4:	2d 81       	ldd	r18, Y+5	; 0x05
    13c6:	3e 81       	ldd	r19, Y+6	; 0x06
    13c8:	25 30       	cpi	r18, 0x05	; 5
    13ca:	31 05       	cpc	r19, r1
    13cc:	b1 f1       	breq	.+108    	; 0x143a <DIO_voidGetPinValue+0xca>
    13ce:	8d 81       	ldd	r24, Y+5	; 0x05
    13d0:	9e 81       	ldd	r25, Y+6	; 0x06
    13d2:	85 30       	cpi	r24, 0x05	; 5
    13d4:	91 05       	cpc	r25, r1
    13d6:	4c f1       	brlt	.+82     	; 0x142a <DIO_voidGetPinValue+0xba>
    13d8:	2d 81       	ldd	r18, Y+5	; 0x05
    13da:	3e 81       	ldd	r19, Y+6	; 0x06
    13dc:	26 30       	cpi	r18, 0x06	; 6
    13de:	31 05       	cpc	r19, r1
    13e0:	a9 f1       	breq	.+106    	; 0x144c <DIO_voidGetPinValue+0xdc>
    13e2:	8d 81       	ldd	r24, Y+5	; 0x05
    13e4:	9e 81       	ldd	r25, Y+6	; 0x06
    13e6:	87 30       	cpi	r24, 0x07	; 7
    13e8:	91 05       	cpc	r25, r1
    13ea:	d1 f1       	breq	.+116    	; 0x1460 <DIO_voidGetPinValue+0xf0>
    13ec:	40 c0       	rjmp	.+128    	; 0x146e <DIO_voidGetPinValue+0xfe>
	{
	case 0:
		value=ptr->Pin.Bitfield.B0;
    13ee:	ea 81       	ldd	r30, Y+2	; 0x02
    13f0:	fb 81       	ldd	r31, Y+3	; 0x03
    13f2:	80 81       	ld	r24, Z
    13f4:	81 70       	andi	r24, 0x01	; 1
    13f6:	89 83       	std	Y+1, r24	; 0x01
    13f8:	3a c0       	rjmp	.+116    	; 0x146e <DIO_voidGetPinValue+0xfe>
		break;
	case 1:
		value=ptr->Pin.Bitfield.B1;
    13fa:	ea 81       	ldd	r30, Y+2	; 0x02
    13fc:	fb 81       	ldd	r31, Y+3	; 0x03
    13fe:	80 81       	ld	r24, Z
    1400:	86 95       	lsr	r24
    1402:	81 70       	andi	r24, 0x01	; 1
    1404:	89 83       	std	Y+1, r24	; 0x01
    1406:	33 c0       	rjmp	.+102    	; 0x146e <DIO_voidGetPinValue+0xfe>
		break;
	case 2:
		value=ptr->Pin.Bitfield.B2;
    1408:	ea 81       	ldd	r30, Y+2	; 0x02
    140a:	fb 81       	ldd	r31, Y+3	; 0x03
    140c:	80 81       	ld	r24, Z
    140e:	86 95       	lsr	r24
    1410:	86 95       	lsr	r24
    1412:	81 70       	andi	r24, 0x01	; 1
    1414:	89 83       	std	Y+1, r24	; 0x01
    1416:	2b c0       	rjmp	.+86     	; 0x146e <DIO_voidGetPinValue+0xfe>
		break;
	case 3:
		value=ptr->Pin.Bitfield.B3;
    1418:	ea 81       	ldd	r30, Y+2	; 0x02
    141a:	fb 81       	ldd	r31, Y+3	; 0x03
    141c:	80 81       	ld	r24, Z
    141e:	86 95       	lsr	r24
    1420:	86 95       	lsr	r24
    1422:	86 95       	lsr	r24
    1424:	81 70       	andi	r24, 0x01	; 1
    1426:	89 83       	std	Y+1, r24	; 0x01
    1428:	22 c0       	rjmp	.+68     	; 0x146e <DIO_voidGetPinValue+0xfe>
		break;
	case 4:
		value=ptr->Pin.Bitfield.B4;
    142a:	ea 81       	ldd	r30, Y+2	; 0x02
    142c:	fb 81       	ldd	r31, Y+3	; 0x03
    142e:	80 81       	ld	r24, Z
    1430:	82 95       	swap	r24
    1432:	8f 70       	andi	r24, 0x0F	; 15
    1434:	81 70       	andi	r24, 0x01	; 1
    1436:	89 83       	std	Y+1, r24	; 0x01
    1438:	1a c0       	rjmp	.+52     	; 0x146e <DIO_voidGetPinValue+0xfe>
		break;
	case 5:
		value=ptr->Pin.Bitfield.B5;
    143a:	ea 81       	ldd	r30, Y+2	; 0x02
    143c:	fb 81       	ldd	r31, Y+3	; 0x03
    143e:	80 81       	ld	r24, Z
    1440:	82 95       	swap	r24
    1442:	86 95       	lsr	r24
    1444:	87 70       	andi	r24, 0x07	; 7
    1446:	81 70       	andi	r24, 0x01	; 1
    1448:	89 83       	std	Y+1, r24	; 0x01
    144a:	11 c0       	rjmp	.+34     	; 0x146e <DIO_voidGetPinValue+0xfe>
		break;
	case 6:
		value=ptr->Pin.Bitfield.B6;
    144c:	ea 81       	ldd	r30, Y+2	; 0x02
    144e:	fb 81       	ldd	r31, Y+3	; 0x03
    1450:	80 81       	ld	r24, Z
    1452:	82 95       	swap	r24
    1454:	86 95       	lsr	r24
    1456:	86 95       	lsr	r24
    1458:	83 70       	andi	r24, 0x03	; 3
    145a:	81 70       	andi	r24, 0x01	; 1
    145c:	89 83       	std	Y+1, r24	; 0x01
    145e:	07 c0       	rjmp	.+14     	; 0x146e <DIO_voidGetPinValue+0xfe>
		break;
	case 7:
		value=ptr->Pin.Bitfield.B7;
    1460:	ea 81       	ldd	r30, Y+2	; 0x02
    1462:	fb 81       	ldd	r31, Y+3	; 0x03
    1464:	80 81       	ld	r24, Z
    1466:	88 1f       	adc	r24, r24
    1468:	88 27       	eor	r24, r24
    146a:	88 1f       	adc	r24, r24
    146c:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	return value;
    146e:	89 81       	ldd	r24, Y+1	; 0x01
}
    1470:	26 96       	adiw	r28, 0x06	; 6
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	f8 94       	cli
    1476:	de bf       	out	0x3e, r29	; 62
    1478:	0f be       	out	0x3f, r0	; 63
    147a:	cd bf       	out	0x3d, r28	; 61
    147c:	cf 91       	pop	r28
    147e:	df 91       	pop	r29
    1480:	08 95       	ret

00001482 <DIO_voidSetPortDirection>:
 *@param [in] 			-Copy_u8Direction:  specifies the port bit to Make direction. Set by @ref GPIO_PORT_Value
 * @retval 			-none
 * Note				-none
 */
void DIO_voidSetPortDirection(Port_Def* ptr,Port_Direction_t Copy_u8Direction)
{
    1482:	df 93       	push	r29
    1484:	cf 93       	push	r28
    1486:	00 d0       	rcall	.+0      	; 0x1488 <DIO_voidSetPortDirection+0x6>
    1488:	0f 92       	push	r0
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	9a 83       	std	Y+2, r25	; 0x02
    1490:	89 83       	std	Y+1, r24	; 0x01
    1492:	6b 83       	std	Y+3, r22	; 0x03
	ptr->DDR.Reg=Copy_u8Direction;
    1494:	e9 81       	ldd	r30, Y+1	; 0x01
    1496:	fa 81       	ldd	r31, Y+2	; 0x02
    1498:	8b 81       	ldd	r24, Y+3	; 0x03
    149a:	81 83       	std	Z+1, r24	; 0x01
}
    149c:	0f 90       	pop	r0
    149e:	0f 90       	pop	r0
    14a0:	0f 90       	pop	r0
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	08 95       	ret

000014a8 <DIO_voidSetPortValue>:
 *
 * @retval 				-none
 * Note					-none
 */
void DIO_voidSetPortValue(Port_Def* ptr,PORT_VALUE_t Copy_u8Value)
{
    14a8:	df 93       	push	r29
    14aa:	cf 93       	push	r28
    14ac:	00 d0       	rcall	.+0      	; 0x14ae <DIO_voidSetPortValue+0x6>
    14ae:	0f 92       	push	r0
    14b0:	cd b7       	in	r28, 0x3d	; 61
    14b2:	de b7       	in	r29, 0x3e	; 62
    14b4:	9a 83       	std	Y+2, r25	; 0x02
    14b6:	89 83       	std	Y+1, r24	; 0x01
    14b8:	6b 83       	std	Y+3, r22	; 0x03
	ptr->PORT.Reg=Copy_u8Value;
    14ba:	e9 81       	ldd	r30, Y+1	; 0x01
    14bc:	fa 81       	ldd	r31, Y+2	; 0x02
    14be:	8b 81       	ldd	r24, Y+3	; 0x03
    14c0:	82 83       	std	Z+2, r24	; 0x02
}
    14c2:	0f 90       	pop	r0
    14c4:	0f 90       	pop	r0
    14c6:	0f 90       	pop	r0
    14c8:	cf 91       	pop	r28
    14ca:	df 91       	pop	r29
    14cc:	08 95       	ret

000014ce <DIO_voidGetPortValue>:



uint8 DIO_voidGetPortValue(Port_Def* ptr)
{
    14ce:	df 93       	push	r29
    14d0:	cf 93       	push	r28
    14d2:	00 d0       	rcall	.+0      	; 0x14d4 <DIO_voidGetPortValue+0x6>
    14d4:	cd b7       	in	r28, 0x3d	; 61
    14d6:	de b7       	in	r29, 0x3e	; 62
    14d8:	9a 83       	std	Y+2, r25	; 0x02
    14da:	89 83       	std	Y+1, r24	; 0x01
	return ptr->Pin.Reg;
    14dc:	e9 81       	ldd	r30, Y+1	; 0x01
    14de:	fa 81       	ldd	r31, Y+2	; 0x02
    14e0:	80 81       	ld	r24, Z
}
    14e2:	0f 90       	pop	r0
    14e4:	0f 90       	pop	r0
    14e6:	cf 91       	pop	r28
    14e8:	df 91       	pop	r29
    14ea:	08 95       	ret

000014ec <MCAL_EXTI_INIT>:

void (* EXT_INT_POINTERS [3]) (void) ;


void MCAL_EXTI_INIT(EXTI_CONFIG_t* EXTI_Config)
{
    14ec:	df 93       	push	r29
    14ee:	cf 93       	push	r28
    14f0:	00 d0       	rcall	.+0      	; 0x14f2 <MCAL_EXTI_INIT+0x6>
    14f2:	00 d0       	rcall	.+0      	; 0x14f4 <MCAL_EXTI_INIT+0x8>
    14f4:	cd b7       	in	r28, 0x3d	; 61
    14f6:	de b7       	in	r29, 0x3e	; 62
    14f8:	9a 83       	std	Y+2, r25	; 0x02
    14fa:	89 83       	std	Y+1, r24	; 0x01
	ENABLE_GIC();
    14fc:	0e 94 18 0c 	call	0x1830	; 0x1830 <ENABLE_GIC>


	SET_BIT(EXTI_BASE->GICR_Reg.Reg, EXTI_Config->external_number);
    1500:	a4 e5       	ldi	r26, 0x54	; 84
    1502:	b0 e0       	ldi	r27, 0x00	; 0
    1504:	e4 e5       	ldi	r30, 0x54	; 84
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	87 81       	ldd	r24, Z+7	; 0x07
    150a:	48 2f       	mov	r20, r24
    150c:	e9 81       	ldd	r30, Y+1	; 0x01
    150e:	fa 81       	ldd	r31, Y+2	; 0x02
    1510:	80 81       	ld	r24, Z
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	02 c0       	rjmp	.+4      	; 0x1520 <MCAL_EXTI_INIT+0x34>
    151c:	88 0f       	add	r24, r24
    151e:	99 1f       	adc	r25, r25
    1520:	2a 95       	dec	r18
    1522:	e2 f7       	brpl	.-8      	; 0x151c <MCAL_EXTI_INIT+0x30>
    1524:	84 2b       	or	r24, r20
    1526:	17 96       	adiw	r26, 0x07	; 7
    1528:	8c 93       	st	X, r24
    152a:	17 97       	sbiw	r26, 0x07	; 7

	switch (EXTI_Config->external_number)
    152c:	e9 81       	ldd	r30, Y+1	; 0x01
    152e:	fa 81       	ldd	r31, Y+2	; 0x02
    1530:	80 81       	ld	r24, Z
    1532:	28 2f       	mov	r18, r24
    1534:	30 e0       	ldi	r19, 0x00	; 0
    1536:	3c 83       	std	Y+4, r19	; 0x04
    1538:	2b 83       	std	Y+3, r18	; 0x03
    153a:	8b 81       	ldd	r24, Y+3	; 0x03
    153c:	9c 81       	ldd	r25, Y+4	; 0x04
    153e:	86 30       	cpi	r24, 0x06	; 6
    1540:	91 05       	cpc	r25, r1
    1542:	61 f0       	breq	.+24     	; 0x155c <MCAL_EXTI_INIT+0x70>
    1544:	2b 81       	ldd	r18, Y+3	; 0x03
    1546:	3c 81       	ldd	r19, Y+4	; 0x04
    1548:	27 30       	cpi	r18, 0x07	; 7
    154a:	31 05       	cpc	r19, r1
    154c:	19 f1       	breq	.+70     	; 0x1594 <MCAL_EXTI_INIT+0xa8>
    154e:	8b 81       	ldd	r24, Y+3	; 0x03
    1550:	9c 81       	ldd	r25, Y+4	; 0x04
    1552:	85 30       	cpi	r24, 0x05	; 5
    1554:	91 05       	cpc	r25, r1
    1556:	09 f4       	brne	.+2      	; 0x155a <MCAL_EXTI_INIT+0x6e>
    1558:	41 c0       	rjmp	.+130    	; 0x15dc <MCAL_EXTI_INIT+0xf0>
    155a:	66 c0       	rjmp	.+204    	; 0x1628 <MCAL_EXTI_INIT+0x13c>
	{
	case EXTI_NUM_0:
		EXTI_BASE->MCUCR_Reg.Reg &= ~(INT0_MASK);
    155c:	a4 e5       	ldi	r26, 0x54	; 84
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e4 e5       	ldi	r30, 0x54	; 84
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	81 81       	ldd	r24, Z+1	; 0x01
    1566:	11 96       	adiw	r26, 0x01	; 1
    1568:	8c 93       	st	X, r24
		EXTI_BASE->MCUCR_Reg.Reg |= EXTI_Config->trigger_edge;
    156a:	a4 e5       	ldi	r26, 0x54	; 84
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e4 e5       	ldi	r30, 0x54	; 84
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	91 81       	ldd	r25, Z+1	; 0x01
    1574:	e9 81       	ldd	r30, Y+1	; 0x01
    1576:	fa 81       	ldd	r31, Y+2	; 0x02
    1578:	81 81       	ldd	r24, Z+1	; 0x01
    157a:	89 2b       	or	r24, r25
    157c:	11 96       	adiw	r26, 0x01	; 1
    157e:	8c 93       	st	X, r24
    1580:	11 97       	sbiw	r26, 0x01	; 1
		EXT_INT_POINTERS[0]  = EXTI_Config->P_IRQ_CallBack;
    1582:	e9 81       	ldd	r30, Y+1	; 0x01
    1584:	fa 81       	ldd	r31, Y+2	; 0x02
    1586:	82 81       	ldd	r24, Z+2	; 0x02
    1588:	93 81       	ldd	r25, Z+3	; 0x03
    158a:	90 93 12 02 	sts	0x0212, r25
    158e:	80 93 11 02 	sts	0x0211, r24
    1592:	4a c0       	rjmp	.+148    	; 0x1628 <MCAL_EXTI_INIT+0x13c>
		break;
	case EXTI_NUM_1:
		EXTI_BASE->MCUCR_Reg.Reg &= (INT1_MASK);
    1594:	a4 e5       	ldi	r26, 0x54	; 84
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	e4 e5       	ldi	r30, 0x54	; 84
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	81 81       	ldd	r24, Z+1	; 0x01
    159e:	81 71       	andi	r24, 0x11	; 17
    15a0:	11 96       	adiw	r26, 0x01	; 1
    15a2:	8c 93       	st	X, r24
		EXTI_BASE->MCUCR_Reg.Reg |= (EXTI_Config->trigger_edge)<<2 ;
    15a4:	a4 e5       	ldi	r26, 0x54	; 84
    15a6:	b0 e0       	ldi	r27, 0x00	; 0
    15a8:	e4 e5       	ldi	r30, 0x54	; 84
    15aa:	f0 e0       	ldi	r31, 0x00	; 0
    15ac:	81 81       	ldd	r24, Z+1	; 0x01
    15ae:	28 2f       	mov	r18, r24
    15b0:	e9 81       	ldd	r30, Y+1	; 0x01
    15b2:	fa 81       	ldd	r31, Y+2	; 0x02
    15b4:	81 81       	ldd	r24, Z+1	; 0x01
    15b6:	88 2f       	mov	r24, r24
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	88 0f       	add	r24, r24
    15bc:	99 1f       	adc	r25, r25
    15be:	88 0f       	add	r24, r24
    15c0:	99 1f       	adc	r25, r25
    15c2:	82 2b       	or	r24, r18
    15c4:	11 96       	adiw	r26, 0x01	; 1
    15c6:	8c 93       	st	X, r24
    15c8:	11 97       	sbiw	r26, 0x01	; 1
		EXT_INT_POINTERS[1]  = EXTI_Config->P_IRQ_CallBack;
    15ca:	e9 81       	ldd	r30, Y+1	; 0x01
    15cc:	fa 81       	ldd	r31, Y+2	; 0x02
    15ce:	82 81       	ldd	r24, Z+2	; 0x02
    15d0:	93 81       	ldd	r25, Z+3	; 0x03
    15d2:	90 93 14 02 	sts	0x0214, r25
    15d6:	80 93 13 02 	sts	0x0213, r24
    15da:	26 c0       	rjmp	.+76     	; 0x1628 <MCAL_EXTI_INIT+0x13c>

		break;
	case EXTI_NUM_2:
		EXTI_BASE->MCUCSR_Reg.Reg &= (INT2_MASK);
    15dc:	a4 e5       	ldi	r26, 0x54	; 84
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e4 e5       	ldi	r30, 0x54	; 84
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	81 71       	andi	r24, 0x11	; 17
    15e8:	8c 93       	st	X, r24
		EXTI_BASE->MCUCSR_Reg.Reg |= (EXTI_Config->trigger_edge - 2)<<6;
    15ea:	a4 e5       	ldi	r26, 0x54	; 84
    15ec:	b0 e0       	ldi	r27, 0x00	; 0
    15ee:	e4 e5       	ldi	r30, 0x54	; 84
    15f0:	f0 e0       	ldi	r31, 0x00	; 0
    15f2:	80 81       	ld	r24, Z
    15f4:	28 2f       	mov	r18, r24
    15f6:	e9 81       	ldd	r30, Y+1	; 0x01
    15f8:	fa 81       	ldd	r31, Y+2	; 0x02
    15fa:	81 81       	ldd	r24, Z+1	; 0x01
    15fc:	88 2f       	mov	r24, r24
    15fe:	90 e0       	ldi	r25, 0x00	; 0
    1600:	02 97       	sbiw	r24, 0x02	; 2
    1602:	00 24       	eor	r0, r0
    1604:	96 95       	lsr	r25
    1606:	87 95       	ror	r24
    1608:	07 94       	ror	r0
    160a:	96 95       	lsr	r25
    160c:	87 95       	ror	r24
    160e:	07 94       	ror	r0
    1610:	98 2f       	mov	r25, r24
    1612:	80 2d       	mov	r24, r0
    1614:	82 2b       	or	r24, r18
    1616:	8c 93       	st	X, r24
		EXT_INT_POINTERS[2]  = EXTI_Config->P_IRQ_CallBack;
    1618:	e9 81       	ldd	r30, Y+1	; 0x01
    161a:	fa 81       	ldd	r31, Y+2	; 0x02
    161c:	82 81       	ldd	r24, Z+2	; 0x02
    161e:	93 81       	ldd	r25, Z+3	; 0x03
    1620:	90 93 16 02 	sts	0x0216, r25
    1624:	80 93 15 02 	sts	0x0215, r24
		break;

	}
}
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	0f 90       	pop	r0
    162e:	0f 90       	pop	r0
    1630:	cf 91       	pop	r28
    1632:	df 91       	pop	r29
    1634:	08 95       	ret

00001636 <MCAL_EXTI_GPIO_DeInit>:



void MCAL_EXTI_GPIO_DeInit (EXTI_CONFIG_t* EXTI_Config)
{
    1636:	df 93       	push	r29
    1638:	cf 93       	push	r28
    163a:	00 d0       	rcall	.+0      	; 0x163c <MCAL_EXTI_GPIO_DeInit+0x6>
    163c:	00 d0       	rcall	.+0      	; 0x163e <MCAL_EXTI_GPIO_DeInit+0x8>
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	9a 83       	std	Y+2, r25	; 0x02
    1644:	89 83       	std	Y+1, r24	; 0x01
	switch(EXTI_Config->external_number)
    1646:	e9 81       	ldd	r30, Y+1	; 0x01
    1648:	fa 81       	ldd	r31, Y+2	; 0x02
    164a:	80 81       	ld	r24, Z
    164c:	28 2f       	mov	r18, r24
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	3c 83       	std	Y+4, r19	; 0x04
    1652:	2b 83       	std	Y+3, r18	; 0x03
    1654:	8b 81       	ldd	r24, Y+3	; 0x03
    1656:	9c 81       	ldd	r25, Y+4	; 0x04
    1658:	86 30       	cpi	r24, 0x06	; 6
    165a:	91 05       	cpc	r25, r1
    165c:	59 f0       	breq	.+22     	; 0x1674 <MCAL_EXTI_GPIO_DeInit+0x3e>
    165e:	2b 81       	ldd	r18, Y+3	; 0x03
    1660:	3c 81       	ldd	r19, Y+4	; 0x04
    1662:	27 30       	cpi	r18, 0x07	; 7
    1664:	31 05       	cpc	r19, r1
    1666:	f9 f0       	breq	.+62     	; 0x16a6 <MCAL_EXTI_GPIO_DeInit+0x70>
    1668:	8b 81       	ldd	r24, Y+3	; 0x03
    166a:	9c 81       	ldd	r25, Y+4	; 0x04
    166c:	85 30       	cpi	r24, 0x05	; 5
    166e:	91 05       	cpc	r25, r1
    1670:	99 f1       	breq	.+102    	; 0x16d8 <MCAL_EXTI_GPIO_DeInit+0xa2>
    1672:	4a c0       	rjmp	.+148    	; 0x1708 <MCAL_EXTI_GPIO_DeInit+0xd2>
	{
	case EXTI_NUM_0:

		CLR_BIT(EXTI_BASE->GICR_Reg.Reg,EXTI_Config->external_number);
    1674:	a4 e5       	ldi	r26, 0x54	; 84
    1676:	b0 e0       	ldi	r27, 0x00	; 0
    1678:	e4 e5       	ldi	r30, 0x54	; 84
    167a:	f0 e0       	ldi	r31, 0x00	; 0
    167c:	87 81       	ldd	r24, Z+7	; 0x07
    167e:	48 2f       	mov	r20, r24
    1680:	e9 81       	ldd	r30, Y+1	; 0x01
    1682:	fa 81       	ldd	r31, Y+2	; 0x02
    1684:	80 81       	ld	r24, Z
    1686:	28 2f       	mov	r18, r24
    1688:	30 e0       	ldi	r19, 0x00	; 0
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	90 e0       	ldi	r25, 0x00	; 0
    168e:	02 2e       	mov	r0, r18
    1690:	02 c0       	rjmp	.+4      	; 0x1696 <MCAL_EXTI_GPIO_DeInit+0x60>
    1692:	88 0f       	add	r24, r24
    1694:	99 1f       	adc	r25, r25
    1696:	0a 94       	dec	r0
    1698:	e2 f7       	brpl	.-8      	; 0x1692 <MCAL_EXTI_GPIO_DeInit+0x5c>
    169a:	80 95       	com	r24
    169c:	84 23       	and	r24, r20
    169e:	17 96       	adiw	r26, 0x07	; 7
    16a0:	8c 93       	st	X, r24
    16a2:	17 97       	sbiw	r26, 0x07	; 7
    16a4:	31 c0       	rjmp	.+98     	; 0x1708 <MCAL_EXTI_GPIO_DeInit+0xd2>
		break;
	case EXTI_NUM_1:

		CLR_BIT(EXTI_BASE->GICR_Reg.Reg,EXTI_Config->external_number);
    16a6:	a4 e5       	ldi	r26, 0x54	; 84
    16a8:	b0 e0       	ldi	r27, 0x00	; 0
    16aa:	e4 e5       	ldi	r30, 0x54	; 84
    16ac:	f0 e0       	ldi	r31, 0x00	; 0
    16ae:	87 81       	ldd	r24, Z+7	; 0x07
    16b0:	48 2f       	mov	r20, r24
    16b2:	e9 81       	ldd	r30, Y+1	; 0x01
    16b4:	fa 81       	ldd	r31, Y+2	; 0x02
    16b6:	80 81       	ld	r24, Z
    16b8:	28 2f       	mov	r18, r24
    16ba:	30 e0       	ldi	r19, 0x00	; 0
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	02 2e       	mov	r0, r18
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <MCAL_EXTI_GPIO_DeInit+0x92>
    16c4:	88 0f       	add	r24, r24
    16c6:	99 1f       	adc	r25, r25
    16c8:	0a 94       	dec	r0
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <MCAL_EXTI_GPIO_DeInit+0x8e>
    16cc:	80 95       	com	r24
    16ce:	84 23       	and	r24, r20
    16d0:	17 96       	adiw	r26, 0x07	; 7
    16d2:	8c 93       	st	X, r24
    16d4:	17 97       	sbiw	r26, 0x07	; 7
    16d6:	18 c0       	rjmp	.+48     	; 0x1708 <MCAL_EXTI_GPIO_DeInit+0xd2>
		break;

	case EXTI_NUM_2:

		CLR_BIT(EXTI_BASE->GICR_Reg.Reg,EXTI_Config->external_number);
    16d8:	a4 e5       	ldi	r26, 0x54	; 84
    16da:	b0 e0       	ldi	r27, 0x00	; 0
    16dc:	e4 e5       	ldi	r30, 0x54	; 84
    16de:	f0 e0       	ldi	r31, 0x00	; 0
    16e0:	87 81       	ldd	r24, Z+7	; 0x07
    16e2:	48 2f       	mov	r20, r24
    16e4:	e9 81       	ldd	r30, Y+1	; 0x01
    16e6:	fa 81       	ldd	r31, Y+2	; 0x02
    16e8:	80 81       	ld	r24, Z
    16ea:	28 2f       	mov	r18, r24
    16ec:	30 e0       	ldi	r19, 0x00	; 0
    16ee:	81 e0       	ldi	r24, 0x01	; 1
    16f0:	90 e0       	ldi	r25, 0x00	; 0
    16f2:	02 2e       	mov	r0, r18
    16f4:	02 c0       	rjmp	.+4      	; 0x16fa <MCAL_EXTI_GPIO_DeInit+0xc4>
    16f6:	88 0f       	add	r24, r24
    16f8:	99 1f       	adc	r25, r25
    16fa:	0a 94       	dec	r0
    16fc:	e2 f7       	brpl	.-8      	; 0x16f6 <MCAL_EXTI_GPIO_DeInit+0xc0>
    16fe:	80 95       	com	r24
    1700:	84 23       	and	r24, r20
    1702:	17 96       	adiw	r26, 0x07	; 7
    1704:	8c 93       	st	X, r24
    1706:	17 97       	sbiw	r26, 0x07	; 7
		break;


	}
}
    1708:	0f 90       	pop	r0
    170a:	0f 90       	pop	r0
    170c:	0f 90       	pop	r0
    170e:	0f 90       	pop	r0
    1710:	cf 91       	pop	r28
    1712:	df 91       	pop	r29
    1714:	08 95       	ret

00001716 <__vector_1>:



void __vector_1 (void)
{
    1716:	1f 92       	push	r1
    1718:	0f 92       	push	r0
    171a:	0f b6       	in	r0, 0x3f	; 63
    171c:	0f 92       	push	r0
    171e:	11 24       	eor	r1, r1
    1720:	2f 93       	push	r18
    1722:	3f 93       	push	r19
    1724:	4f 93       	push	r20
    1726:	5f 93       	push	r21
    1728:	6f 93       	push	r22
    172a:	7f 93       	push	r23
    172c:	8f 93       	push	r24
    172e:	9f 93       	push	r25
    1730:	af 93       	push	r26
    1732:	bf 93       	push	r27
    1734:	ef 93       	push	r30
    1736:	ff 93       	push	r31
    1738:	df 93       	push	r29
    173a:	cf 93       	push	r28
    173c:	cd b7       	in	r28, 0x3d	; 61
    173e:	de b7       	in	r29, 0x3e	; 62
	DISABLE_GIC();
    1740:	0e 94 26 0c 	call	0x184c	; 0x184c <DISABLE_GIC>
	EXT_INT_POINTERS[0]();
    1744:	e0 91 11 02 	lds	r30, 0x0211
    1748:	f0 91 12 02 	lds	r31, 0x0212
    174c:	09 95       	icall
}
    174e:	cf 91       	pop	r28
    1750:	df 91       	pop	r29
    1752:	ff 91       	pop	r31
    1754:	ef 91       	pop	r30
    1756:	bf 91       	pop	r27
    1758:	af 91       	pop	r26
    175a:	9f 91       	pop	r25
    175c:	8f 91       	pop	r24
    175e:	7f 91       	pop	r23
    1760:	6f 91       	pop	r22
    1762:	5f 91       	pop	r21
    1764:	4f 91       	pop	r20
    1766:	3f 91       	pop	r19
    1768:	2f 91       	pop	r18
    176a:	0f 90       	pop	r0
    176c:	0f be       	out	0x3f, r0	; 63
    176e:	0f 90       	pop	r0
    1770:	1f 90       	pop	r1
    1772:	18 95       	reti

00001774 <__vector_2>:



void __vector_2 (void)
{
    1774:	1f 92       	push	r1
    1776:	0f 92       	push	r0
    1778:	0f b6       	in	r0, 0x3f	; 63
    177a:	0f 92       	push	r0
    177c:	11 24       	eor	r1, r1
    177e:	2f 93       	push	r18
    1780:	3f 93       	push	r19
    1782:	4f 93       	push	r20
    1784:	5f 93       	push	r21
    1786:	6f 93       	push	r22
    1788:	7f 93       	push	r23
    178a:	8f 93       	push	r24
    178c:	9f 93       	push	r25
    178e:	af 93       	push	r26
    1790:	bf 93       	push	r27
    1792:	ef 93       	push	r30
    1794:	ff 93       	push	r31
    1796:	df 93       	push	r29
    1798:	cf 93       	push	r28
    179a:	cd b7       	in	r28, 0x3d	; 61
    179c:	de b7       	in	r29, 0x3e	; 62
	DISABLE_GIC();
    179e:	0e 94 26 0c 	call	0x184c	; 0x184c <DISABLE_GIC>
	EXT_INT_POINTERS[1]();
    17a2:	e0 91 13 02 	lds	r30, 0x0213
    17a6:	f0 91 14 02 	lds	r31, 0x0214
    17aa:	09 95       	icall
}
    17ac:	cf 91       	pop	r28
    17ae:	df 91       	pop	r29
    17b0:	ff 91       	pop	r31
    17b2:	ef 91       	pop	r30
    17b4:	bf 91       	pop	r27
    17b6:	af 91       	pop	r26
    17b8:	9f 91       	pop	r25
    17ba:	8f 91       	pop	r24
    17bc:	7f 91       	pop	r23
    17be:	6f 91       	pop	r22
    17c0:	5f 91       	pop	r21
    17c2:	4f 91       	pop	r20
    17c4:	3f 91       	pop	r19
    17c6:	2f 91       	pop	r18
    17c8:	0f 90       	pop	r0
    17ca:	0f be       	out	0x3f, r0	; 63
    17cc:	0f 90       	pop	r0
    17ce:	1f 90       	pop	r1
    17d0:	18 95       	reti

000017d2 <__vector_3>:




void __vector_3 (void)
{
    17d2:	1f 92       	push	r1
    17d4:	0f 92       	push	r0
    17d6:	0f b6       	in	r0, 0x3f	; 63
    17d8:	0f 92       	push	r0
    17da:	11 24       	eor	r1, r1
    17dc:	2f 93       	push	r18
    17de:	3f 93       	push	r19
    17e0:	4f 93       	push	r20
    17e2:	5f 93       	push	r21
    17e4:	6f 93       	push	r22
    17e6:	7f 93       	push	r23
    17e8:	8f 93       	push	r24
    17ea:	9f 93       	push	r25
    17ec:	af 93       	push	r26
    17ee:	bf 93       	push	r27
    17f0:	ef 93       	push	r30
    17f2:	ff 93       	push	r31
    17f4:	df 93       	push	r29
    17f6:	cf 93       	push	r28
    17f8:	cd b7       	in	r28, 0x3d	; 61
    17fa:	de b7       	in	r29, 0x3e	; 62
	DISABLE_GIC();
    17fc:	0e 94 26 0c 	call	0x184c	; 0x184c <DISABLE_GIC>
	EXT_INT_POINTERS[2]();
    1800:	e0 91 15 02 	lds	r30, 0x0215
    1804:	f0 91 16 02 	lds	r31, 0x0216
    1808:	09 95       	icall
}
    180a:	cf 91       	pop	r28
    180c:	df 91       	pop	r29
    180e:	ff 91       	pop	r31
    1810:	ef 91       	pop	r30
    1812:	bf 91       	pop	r27
    1814:	af 91       	pop	r26
    1816:	9f 91       	pop	r25
    1818:	8f 91       	pop	r24
    181a:	7f 91       	pop	r23
    181c:	6f 91       	pop	r22
    181e:	5f 91       	pop	r21
    1820:	4f 91       	pop	r20
    1822:	3f 91       	pop	r19
    1824:	2f 91       	pop	r18
    1826:	0f 90       	pop	r0
    1828:	0f be       	out	0x3f, r0	; 63
    182a:	0f 90       	pop	r0
    182c:	1f 90       	pop	r1
    182e:	18 95       	reti

00001830 <ENABLE_GIC>:
 *******************************************************************************/
#include "GIC.h"


void ENABLE_GIC()
{
    1830:	df 93       	push	r29
    1832:	cf 93       	push	r28
    1834:	cd b7       	in	r28, 0x3d	; 61
    1836:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG,I);
    1838:	af e5       	ldi	r26, 0x5F	; 95
    183a:	b0 e0       	ldi	r27, 0x00	; 0
    183c:	ef e5       	ldi	r30, 0x5F	; 95
    183e:	f0 e0       	ldi	r31, 0x00	; 0
    1840:	80 81       	ld	r24, Z
    1842:	80 68       	ori	r24, 0x80	; 128
    1844:	8c 93       	st	X, r24
}
    1846:	cf 91       	pop	r28
    1848:	df 91       	pop	r29
    184a:	08 95       	ret

0000184c <DISABLE_GIC>:

void DISABLE_GIC()
{
    184c:	df 93       	push	r29
    184e:	cf 93       	push	r28
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    1854:	af e5       	ldi	r26, 0x5F	; 95
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	ef e5       	ldi	r30, 0x5F	; 95
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	8f 77       	andi	r24, 0x7F	; 127
    1860:	8c 93       	st	X, r24
}
    1862:	cf 91       	pop	r28
    1864:	df 91       	pop	r29
    1866:	08 95       	ret

00001868 <__vector_11>:
#include <avr/interrupt.h>

void (* gTimer0_Call_BackPOINTER) (void) ;

ISR(TIMER0_OVF_vect)
{
    1868:	1f 92       	push	r1
    186a:	0f 92       	push	r0
    186c:	0f b6       	in	r0, 0x3f	; 63
    186e:	0f 92       	push	r0
    1870:	11 24       	eor	r1, r1
    1872:	2f 93       	push	r18
    1874:	3f 93       	push	r19
    1876:	4f 93       	push	r20
    1878:	5f 93       	push	r21
    187a:	6f 93       	push	r22
    187c:	7f 93       	push	r23
    187e:	8f 93       	push	r24
    1880:	9f 93       	push	r25
    1882:	af 93       	push	r26
    1884:	bf 93       	push	r27
    1886:	ef 93       	push	r30
    1888:	ff 93       	push	r31
    188a:	df 93       	push	r29
    188c:	cf 93       	push	r28
    188e:	cd b7       	in	r28, 0x3d	; 61
    1890:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG,I);
    1892:	af e5       	ldi	r26, 0x5F	; 95
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	ef e5       	ldi	r30, 0x5F	; 95
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	8f 77       	andi	r24, 0x7F	; 127
    189e:	8c 93       	st	X, r24
	gTimer0_Call_BackPOINTER();
    18a0:	e0 91 17 02 	lds	r30, 0x0217
    18a4:	f0 91 18 02 	lds	r31, 0x0218
    18a8:	09 95       	icall
}
    18aa:	cf 91       	pop	r28
    18ac:	df 91       	pop	r29
    18ae:	ff 91       	pop	r31
    18b0:	ef 91       	pop	r30
    18b2:	bf 91       	pop	r27
    18b4:	af 91       	pop	r26
    18b6:	9f 91       	pop	r25
    18b8:	8f 91       	pop	r24
    18ba:	7f 91       	pop	r23
    18bc:	6f 91       	pop	r22
    18be:	5f 91       	pop	r21
    18c0:	4f 91       	pop	r20
    18c2:	3f 91       	pop	r19
    18c4:	2f 91       	pop	r18
    18c6:	0f 90       	pop	r0
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	0f 90       	pop	r0
    18cc:	1f 90       	pop	r1
    18ce:	18 95       	reti

000018d0 <Timer_Init>:



void Timer_Init(Timer_Config *Config_ptr)
{
    18d0:	df 93       	push	r29
    18d2:	cf 93       	push	r28
    18d4:	00 d0       	rcall	.+0      	; 0x18d6 <Timer_Init+0x6>
    18d6:	00 d0       	rcall	.+0      	; 0x18d8 <Timer_Init+0x8>
    18d8:	cd b7       	in	r28, 0x3d	; 61
    18da:	de b7       	in	r29, 0x3e	; 62
    18dc:	9a 83       	std	Y+2, r25	; 0x02
    18de:	89 83       	std	Y+1, r24	; 0x01
	switch(Config_ptr->mode)
    18e0:	e9 81       	ldd	r30, Y+1	; 0x01
    18e2:	fa 81       	ldd	r31, Y+2	; 0x02
    18e4:	80 81       	ld	r24, Z
    18e6:	28 2f       	mov	r18, r24
    18e8:	30 e0       	ldi	r19, 0x00	; 0
    18ea:	3c 83       	std	Y+4, r19	; 0x04
    18ec:	2b 83       	std	Y+3, r18	; 0x03
    18ee:	8b 81       	ldd	r24, Y+3	; 0x03
    18f0:	9c 81       	ldd	r25, Y+4	; 0x04
    18f2:	81 30       	cpi	r24, 0x01	; 1
    18f4:	91 05       	cpc	r25, r1
    18f6:	09 f4       	brne	.+2      	; 0x18fa <Timer_Init+0x2a>
    18f8:	69 c0       	rjmp	.+210    	; 0x19cc <Timer_Init+0xfc>
    18fa:	2b 81       	ldd	r18, Y+3	; 0x03
    18fc:	3c 81       	ldd	r19, Y+4	; 0x04
    18fe:	22 30       	cpi	r18, 0x02	; 2
    1900:	31 05       	cpc	r19, r1
    1902:	2c f4       	brge	.+10     	; 0x190e <Timer_Init+0x3e>
    1904:	8b 81       	ldd	r24, Y+3	; 0x03
    1906:	9c 81       	ldd	r25, Y+4	; 0x04
    1908:	00 97       	sbiw	r24, 0x00	; 0
    190a:	69 f0       	breq	.+26     	; 0x1926 <Timer_Init+0x56>
    190c:	b8 c0       	rjmp	.+368    	; 0x1a7e <Timer_Init+0x1ae>
    190e:	2b 81       	ldd	r18, Y+3	; 0x03
    1910:	3c 81       	ldd	r19, Y+4	; 0x04
    1912:	22 30       	cpi	r18, 0x02	; 2
    1914:	31 05       	cpc	r19, r1
    1916:	11 f1       	breq	.+68     	; 0x195c <Timer_Init+0x8c>
    1918:	8b 81       	ldd	r24, Y+3	; 0x03
    191a:	9c 81       	ldd	r25, Y+4	; 0x04
    191c:	83 30       	cpi	r24, 0x03	; 3
    191e:	91 05       	cpc	r25, r1
    1920:	09 f4       	brne	.+2      	; 0x1924 <Timer_Init+0x54>
    1922:	7d c0       	rjmp	.+250    	; 0x1a1e <Timer_Init+0x14e>
    1924:	ac c0       	rjmp	.+344    	; 0x1a7e <Timer_Init+0x1ae>
	{
	case NORMAL:

		SET_BIT(Timer0_BASE->TCCR0_Reg.Reg,FOC0);
    1926:	a2 e5       	ldi	r26, 0x52	; 82
    1928:	b0 e0       	ldi	r27, 0x00	; 0
    192a:	e2 e5       	ldi	r30, 0x52	; 82
    192c:	f0 e0       	ldi	r31, 0x00	; 0
    192e:	81 81       	ldd	r24, Z+1	; 0x01
    1930:	80 68       	ori	r24, 0x80	; 128
    1932:	11 96       	adiw	r26, 0x01	; 1
    1934:	8c 93       	st	X, r24
		//Timer0_BASE->TCCR0_Reg.Reg = 0;

		/* Inserting Clock Sourc */
		Timer0_BASE->TCCR0_Reg.Reg |= Config_ptr->prescalar;
    1936:	a2 e5       	ldi	r26, 0x52	; 82
    1938:	b0 e0       	ldi	r27, 0x00	; 0
    193a:	e2 e5       	ldi	r30, 0x52	; 82
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	91 81       	ldd	r25, Z+1	; 0x01
    1940:	e9 81       	ldd	r30, Y+1	; 0x01
    1942:	fa 81       	ldd	r31, Y+2	; 0x02
    1944:	81 81       	ldd	r24, Z+1	; 0x01
    1946:	89 2b       	or	r24, r25
    1948:	11 96       	adiw	r26, 0x01	; 1
    194a:	8c 93       	st	X, r24

		Timer0_BASE->TCNT0_Reg.Reg =Config_ptr -> reload_value;
    194c:	a2 e5       	ldi	r26, 0x52	; 82
    194e:	b0 e0       	ldi	r27, 0x00	; 0
    1950:	e9 81       	ldd	r30, Y+1	; 0x01
    1952:	fa 81       	ldd	r31, Y+2	; 0x02
    1954:	85 81       	ldd	r24, Z+5	; 0x05
    1956:	96 81       	ldd	r25, Z+6	; 0x06
    1958:	8c 93       	st	X, r24
    195a:	91 c0       	rjmp	.+290    	; 0x1a7e <Timer_Init+0x1ae>

		break;

	case CTC:
		SET_BIT(Timer0_BASE->TCCR0_Reg.Reg,FOC0);
    195c:	a2 e5       	ldi	r26, 0x52	; 82
    195e:	b0 e0       	ldi	r27, 0x00	; 0
    1960:	e2 e5       	ldi	r30, 0x52	; 82
    1962:	f0 e0       	ldi	r31, 0x00	; 0
    1964:	81 81       	ldd	r24, Z+1	; 0x01
    1966:	80 68       	ori	r24, 0x80	; 128
    1968:	11 96       	adiw	r26, 0x01	; 1
    196a:	8c 93       	st	X, r24

		SET_BIT(Timer0_BASE->TCCR0_Reg.Reg,WGM01);
    196c:	a2 e5       	ldi	r26, 0x52	; 82
    196e:	b0 e0       	ldi	r27, 0x00	; 0
    1970:	e2 e5       	ldi	r30, 0x52	; 82
    1972:	f0 e0       	ldi	r31, 0x00	; 0
    1974:	81 81       	ldd	r24, Z+1	; 0x01
    1976:	88 60       	ori	r24, 0x08	; 8
    1978:	11 96       	adiw	r26, 0x01	; 1
    197a:	8c 93       	st	X, r24
		/* Inserting Clock Sourc */
		Timer0_BASE->TCCR0_Reg.Reg |= Config_ptr->prescalar;
    197c:	a2 e5       	ldi	r26, 0x52	; 82
    197e:	b0 e0       	ldi	r27, 0x00	; 0
    1980:	e2 e5       	ldi	r30, 0x52	; 82
    1982:	f0 e0       	ldi	r31, 0x00	; 0
    1984:	91 81       	ldd	r25, Z+1	; 0x01
    1986:	e9 81       	ldd	r30, Y+1	; 0x01
    1988:	fa 81       	ldd	r31, Y+2	; 0x02
    198a:	81 81       	ldd	r24, Z+1	; 0x01
    198c:	89 2b       	or	r24, r25
    198e:	11 96       	adiw	r26, 0x01	; 1
    1990:	8c 93       	st	X, r24

		Timer0_BASE->TCCR0_Reg.Reg |= ((Config_ptr->signal_output.ctc) )<< COM00;
    1992:	a2 e5       	ldi	r26, 0x52	; 82
    1994:	b0 e0       	ldi	r27, 0x00	; 0
    1996:	e2 e5       	ldi	r30, 0x52	; 82
    1998:	f0 e0       	ldi	r31, 0x00	; 0
    199a:	81 81       	ldd	r24, Z+1	; 0x01
    199c:	28 2f       	mov	r18, r24
    199e:	e9 81       	ldd	r30, Y+1	; 0x01
    19a0:	fa 81       	ldd	r31, Y+2	; 0x02
    19a2:	83 81       	ldd	r24, Z+3	; 0x03
    19a4:	88 2f       	mov	r24, r24
    19a6:	90 e0       	ldi	r25, 0x00	; 0
    19a8:	82 95       	swap	r24
    19aa:	92 95       	swap	r25
    19ac:	90 7f       	andi	r25, 0xF0	; 240
    19ae:	98 27       	eor	r25, r24
    19b0:	80 7f       	andi	r24, 0xF0	; 240
    19b2:	98 27       	eor	r25, r24
    19b4:	82 2b       	or	r24, r18
    19b6:	11 96       	adiw	r26, 0x01	; 1
    19b8:	8c 93       	st	X, r24
		Timer0_BASE->OCR0_Reg.Reg = Config_ptr->compare_value;
    19ba:	a2 e5       	ldi	r26, 0x52	; 82
    19bc:	b0 e0       	ldi	r27, 0x00	; 0
    19be:	e9 81       	ldd	r30, Y+1	; 0x01
    19c0:	fa 81       	ldd	r31, Y+2	; 0x02
    19c2:	87 81       	ldd	r24, Z+7	; 0x07
    19c4:	1a 96       	adiw	r26, 0x0a	; 10
    19c6:	8c 93       	st	X, r24
    19c8:	1a 97       	sbiw	r26, 0x0a	; 10
    19ca:	59 c0       	rjmp	.+178    	; 0x1a7e <Timer_Init+0x1ae>
		break;

	case PWM:
		SET_BIT(Timer0_BASE->TCCR0_Reg.Reg,WGM00);
    19cc:	a2 e5       	ldi	r26, 0x52	; 82
    19ce:	b0 e0       	ldi	r27, 0x00	; 0
    19d0:	e2 e5       	ldi	r30, 0x52	; 82
    19d2:	f0 e0       	ldi	r31, 0x00	; 0
    19d4:	81 81       	ldd	r24, Z+1	; 0x01
    19d6:	80 64       	ori	r24, 0x40	; 64
    19d8:	11 96       	adiw	r26, 0x01	; 1
    19da:	8c 93       	st	X, r24

		/* Inserting Clock Sourc */
		Timer0_BASE->TCCR0_Reg.Reg |= Config_ptr->prescalar;
    19dc:	a2 e5       	ldi	r26, 0x52	; 82
    19de:	b0 e0       	ldi	r27, 0x00	; 0
    19e0:	e2 e5       	ldi	r30, 0x52	; 82
    19e2:	f0 e0       	ldi	r31, 0x00	; 0
    19e4:	91 81       	ldd	r25, Z+1	; 0x01
    19e6:	e9 81       	ldd	r30, Y+1	; 0x01
    19e8:	fa 81       	ldd	r31, Y+2	; 0x02
    19ea:	81 81       	ldd	r24, Z+1	; 0x01
    19ec:	89 2b       	or	r24, r25
    19ee:	11 96       	adiw	r26, 0x01	; 1
    19f0:	8c 93       	st	X, r24

		Timer0_BASE->TCCR0_Reg.Reg |= ((Config_ptr->signal_output.phase_correct) )<< COM00;
    19f2:	a2 e5       	ldi	r26, 0x52	; 82
    19f4:	b0 e0       	ldi	r27, 0x00	; 0
    19f6:	e2 e5       	ldi	r30, 0x52	; 82
    19f8:	f0 e0       	ldi	r31, 0x00	; 0
    19fa:	81 81       	ldd	r24, Z+1	; 0x01
    19fc:	28 2f       	mov	r18, r24
    19fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1a00:	fa 81       	ldd	r31, Y+2	; 0x02
    1a02:	84 81       	ldd	r24, Z+4	; 0x04
    1a04:	88 2f       	mov	r24, r24
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	82 95       	swap	r24
    1a0a:	92 95       	swap	r25
    1a0c:	90 7f       	andi	r25, 0xF0	; 240
    1a0e:	98 27       	eor	r25, r24
    1a10:	80 7f       	andi	r24, 0xF0	; 240
    1a12:	98 27       	eor	r25, r24
    1a14:	82 2b       	or	r24, r18
    1a16:	11 96       	adiw	r26, 0x01	; 1
    1a18:	8c 93       	st	X, r24
    1a1a:	11 97       	sbiw	r26, 0x01	; 1
    1a1c:	30 c0       	rjmp	.+96     	; 0x1a7e <Timer_Init+0x1ae>



	case FAST_PWM:

		SET_BIT(Timer0_BASE->TCCR0_Reg.Reg,WGM01);
    1a1e:	a2 e5       	ldi	r26, 0x52	; 82
    1a20:	b0 e0       	ldi	r27, 0x00	; 0
    1a22:	e2 e5       	ldi	r30, 0x52	; 82
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	81 81       	ldd	r24, Z+1	; 0x01
    1a28:	88 60       	ori	r24, 0x08	; 8
    1a2a:	11 96       	adiw	r26, 0x01	; 1
    1a2c:	8c 93       	st	X, r24
		SET_BIT(Timer0_BASE->TCCR0_Reg.Reg,WGM00);
    1a2e:	a2 e5       	ldi	r26, 0x52	; 82
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	e2 e5       	ldi	r30, 0x52	; 82
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	81 81       	ldd	r24, Z+1	; 0x01
    1a38:	80 64       	ori	r24, 0x40	; 64
    1a3a:	11 96       	adiw	r26, 0x01	; 1
    1a3c:	8c 93       	st	X, r24

		/* Inserting Clock Sourc */
		Timer0_BASE->TCCR0_Reg.Reg |= Config_ptr->prescalar;
    1a3e:	a2 e5       	ldi	r26, 0x52	; 82
    1a40:	b0 e0       	ldi	r27, 0x00	; 0
    1a42:	e2 e5       	ldi	r30, 0x52	; 82
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	91 81       	ldd	r25, Z+1	; 0x01
    1a48:	e9 81       	ldd	r30, Y+1	; 0x01
    1a4a:	fa 81       	ldd	r31, Y+2	; 0x02
    1a4c:	81 81       	ldd	r24, Z+1	; 0x01
    1a4e:	89 2b       	or	r24, r25
    1a50:	11 96       	adiw	r26, 0x01	; 1
    1a52:	8c 93       	st	X, r24

		Timer0_BASE->TCCR0_Reg.Reg |= ((Config_ptr->signal_output.fast_pwm) )<< COM00;
    1a54:	a2 e5       	ldi	r26, 0x52	; 82
    1a56:	b0 e0       	ldi	r27, 0x00	; 0
    1a58:	e2 e5       	ldi	r30, 0x52	; 82
    1a5a:	f0 e0       	ldi	r31, 0x00	; 0
    1a5c:	81 81       	ldd	r24, Z+1	; 0x01
    1a5e:	28 2f       	mov	r18, r24
    1a60:	e9 81       	ldd	r30, Y+1	; 0x01
    1a62:	fa 81       	ldd	r31, Y+2	; 0x02
    1a64:	82 81       	ldd	r24, Z+2	; 0x02
    1a66:	88 2f       	mov	r24, r24
    1a68:	90 e0       	ldi	r25, 0x00	; 0
    1a6a:	82 95       	swap	r24
    1a6c:	92 95       	swap	r25
    1a6e:	90 7f       	andi	r25, 0xF0	; 240
    1a70:	98 27       	eor	r25, r24
    1a72:	80 7f       	andi	r24, 0xF0	; 240
    1a74:	98 27       	eor	r25, r24
    1a76:	82 2b       	or	r24, r18
    1a78:	11 96       	adiw	r26, 0x01	; 1
    1a7a:	8c 93       	st	X, r24
    1a7c:	11 97       	sbiw	r26, 0x01	; 1
		break;

	}

}
    1a7e:	0f 90       	pop	r0
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	cf 91       	pop	r28
    1a88:	df 91       	pop	r29
    1a8a:	08 95       	ret

00001a8c <Timer_start>:


void Timer_start(Timer_Config *Config_ptr)
{
    1a8c:	df 93       	push	r29
    1a8e:	cf 93       	push	r28
    1a90:	00 d0       	rcall	.+0      	; 0x1a92 <Timer_start+0x6>
    1a92:	cd b7       	in	r28, 0x3d	; 61
    1a94:	de b7       	in	r29, 0x3e	; 62
    1a96:	9a 83       	std	Y+2, r25	; 0x02
    1a98:	89 83       	std	Y+1, r24	; 0x01
	Timer0_BASE->TCCR0_Reg.Reg |= Config_ptr->prescalar;
    1a9a:	a2 e5       	ldi	r26, 0x52	; 82
    1a9c:	b0 e0       	ldi	r27, 0x00	; 0
    1a9e:	e2 e5       	ldi	r30, 0x52	; 82
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	91 81       	ldd	r25, Z+1	; 0x01
    1aa4:	e9 81       	ldd	r30, Y+1	; 0x01
    1aa6:	fa 81       	ldd	r31, Y+2	; 0x02
    1aa8:	81 81       	ldd	r24, Z+1	; 0x01
    1aaa:	89 2b       	or	r24, r25
    1aac:	11 96       	adiw	r26, 0x01	; 1
    1aae:	8c 93       	st	X, r24
    1ab0:	11 97       	sbiw	r26, 0x01	; 1

}
    1ab2:	0f 90       	pop	r0
    1ab4:	0f 90       	pop	r0
    1ab6:	cf 91       	pop	r28
    1ab8:	df 91       	pop	r29
    1aba:	08 95       	ret

00001abc <Timer_stop>:


void Timer_stop()
{
    1abc:	df 93       	push	r29
    1abe:	cf 93       	push	r28
    1ac0:	cd b7       	in	r28, 0x3d	; 61
    1ac2:	de b7       	in	r29, 0x3e	; 62
	Timer0_BASE->TCCR0_Reg.Reg &= 0xF8;
    1ac4:	a2 e5       	ldi	r26, 0x52	; 82
    1ac6:	b0 e0       	ldi	r27, 0x00	; 0
    1ac8:	e2 e5       	ldi	r30, 0x52	; 82
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	81 81       	ldd	r24, Z+1	; 0x01
    1ace:	88 7f       	andi	r24, 0xF8	; 248
    1ad0:	11 96       	adiw	r26, 0x01	; 1
    1ad2:	8c 93       	st	X, r24
    1ad4:	11 97       	sbiw	r26, 0x01	; 1

}
    1ad6:	cf 91       	pop	r28
    1ad8:	df 91       	pop	r29
    1ada:	08 95       	ret

00001adc <setCallBack>:


void setCallBack(void(*a_ptr)(void))
{
    1adc:	df 93       	push	r29
    1ade:	cf 93       	push	r28
    1ae0:	00 d0       	rcall	.+0      	; 0x1ae2 <setCallBack+0x6>
    1ae2:	cd b7       	in	r28, 0x3d	; 61
    1ae4:	de b7       	in	r29, 0x3e	; 62
    1ae6:	9a 83       	std	Y+2, r25	; 0x02
    1ae8:	89 83       	std	Y+1, r24	; 0x01
	gTimer0_Call_BackPOINTER = a_ptr;
    1aea:	89 81       	ldd	r24, Y+1	; 0x01
    1aec:	9a 81       	ldd	r25, Y+2	; 0x02
    1aee:	90 93 18 02 	sts	0x0218, r25
    1af2:	80 93 17 02 	sts	0x0217, r24
}
    1af6:	0f 90       	pop	r0
    1af8:	0f 90       	pop	r0
    1afa:	cf 91       	pop	r28
    1afc:	df 91       	pop	r29
    1afe:	08 95       	ret

00001b00 <EnableInt>:


void EnableInt(	Timer_Config *Config_ptr,void(*fnptr)(void))
{
    1b00:	df 93       	push	r29
    1b02:	cf 93       	push	r28
    1b04:	00 d0       	rcall	.+0      	; 0x1b06 <EnableInt+0x6>
    1b06:	00 d0       	rcall	.+0      	; 0x1b08 <EnableInt+0x8>
    1b08:	00 d0       	rcall	.+0      	; 0x1b0a <EnableInt+0xa>
    1b0a:	cd b7       	in	r28, 0x3d	; 61
    1b0c:	de b7       	in	r29, 0x3e	; 62
    1b0e:	9a 83       	std	Y+2, r25	; 0x02
    1b10:	89 83       	std	Y+1, r24	; 0x01
    1b12:	7c 83       	std	Y+4, r23	; 0x04
    1b14:	6b 83       	std	Y+3, r22	; 0x03
	switch(Config_ptr->mode)
    1b16:	e9 81       	ldd	r30, Y+1	; 0x01
    1b18:	fa 81       	ldd	r31, Y+2	; 0x02
    1b1a:	80 81       	ld	r24, Z
    1b1c:	28 2f       	mov	r18, r24
    1b1e:	30 e0       	ldi	r19, 0x00	; 0
    1b20:	3e 83       	std	Y+6, r19	; 0x06
    1b22:	2d 83       	std	Y+5, r18	; 0x05
    1b24:	8d 81       	ldd	r24, Y+5	; 0x05
    1b26:	9e 81       	ldd	r25, Y+6	; 0x06
    1b28:	00 97       	sbiw	r24, 0x00	; 0
    1b2a:	31 f0       	breq	.+12     	; 0x1b38 <EnableInt+0x38>
    1b2c:	2d 81       	ldd	r18, Y+5	; 0x05
    1b2e:	3e 81       	ldd	r19, Y+6	; 0x06
    1b30:	22 30       	cpi	r18, 0x02	; 2
    1b32:	31 05       	cpc	r19, r1
    1b34:	a9 f0       	breq	.+42     	; 0x1b60 <EnableInt+0x60>
    1b36:	27 c0       	rjmp	.+78     	; 0x1b86 <EnableInt+0x86>
	{
	case NORMAL:

		SET_BIT(Timer0_BASE->TIMSK_Reg.Reg,TOIE0); /* enable interrupts for overflow mode */
    1b38:	a2 e5       	ldi	r26, 0x52	; 82
    1b3a:	b0 e0       	ldi	r27, 0x00	; 0
    1b3c:	e2 e5       	ldi	r30, 0x52	; 82
    1b3e:	f0 e0       	ldi	r31, 0x00	; 0
    1b40:	87 81       	ldd	r24, Z+7	; 0x07
    1b42:	81 60       	ori	r24, 0x01	; 1
    1b44:	17 96       	adiw	r26, 0x07	; 7
    1b46:	8c 93       	st	X, r24
		//SET_BIT(Timer0_BASE->TIFR_Reg.Reg,TOV0); /* enable overflow flag */
		SET_BIT(SREG,I);
    1b48:	af e5       	ldi	r26, 0x5F	; 95
    1b4a:	b0 e0       	ldi	r27, 0x00	; 0
    1b4c:	ef e5       	ldi	r30, 0x5F	; 95
    1b4e:	f0 e0       	ldi	r31, 0x00	; 0
    1b50:	80 81       	ld	r24, Z
    1b52:	80 68       	ori	r24, 0x80	; 128
    1b54:	8c 93       	st	X, r24
		setCallBack(fnptr);
    1b56:	8b 81       	ldd	r24, Y+3	; 0x03
    1b58:	9c 81       	ldd	r25, Y+4	; 0x04
    1b5a:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <setCallBack>
    1b5e:	13 c0       	rjmp	.+38     	; 0x1b86 <EnableInt+0x86>
	break;

	case CTC:


		SET_BIT(Timer0_BASE->TIMSK_Reg.Reg,OCIE0); /* enable interrupts for overflow mode */
    1b60:	a2 e5       	ldi	r26, 0x52	; 82
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	e2 e5       	ldi	r30, 0x52	; 82
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	87 81       	ldd	r24, Z+7	; 0x07
    1b6a:	82 60       	ori	r24, 0x02	; 2
    1b6c:	17 96       	adiw	r26, 0x07	; 7
    1b6e:	8c 93       	st	X, r24
	//	SET_BIT(Timer0_BASE->TIFR_Reg.Reg,OCF0); /* enable overflow flag */
		SET_BIT(SREG,I);
    1b70:	af e5       	ldi	r26, 0x5F	; 95
    1b72:	b0 e0       	ldi	r27, 0x00	; 0
    1b74:	ef e5       	ldi	r30, 0x5F	; 95
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	80 81       	ld	r24, Z
    1b7a:	80 68       	ori	r24, 0x80	; 128
    1b7c:	8c 93       	st	X, r24
		setCallBack(fnptr);
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	9c 81       	ldd	r25, Y+4	; 0x04
    1b82:	0e 94 6e 0d 	call	0x1adc	; 0x1adc <setCallBack>



	}

}
    1b86:	26 96       	adiw	r28, 0x06	; 6
    1b88:	0f b6       	in	r0, 0x3f	; 63
    1b8a:	f8 94       	cli
    1b8c:	de bf       	out	0x3e, r29	; 62
    1b8e:	0f be       	out	0x3f, r0	; 63
    1b90:	cd bf       	out	0x3d, r28	; 61
    1b92:	cf 91       	pop	r28
    1b94:	df 91       	pop	r29
    1b96:	08 95       	ret

00001b98 <DisableInt>:

void DisableInt(Timer_Config *Config_ptr,void(*fnptr)(void))
{
    1b98:	df 93       	push	r29
    1b9a:	cf 93       	push	r28
    1b9c:	00 d0       	rcall	.+0      	; 0x1b9e <DisableInt+0x6>
    1b9e:	00 d0       	rcall	.+0      	; 0x1ba0 <DisableInt+0x8>
    1ba0:	cd b7       	in	r28, 0x3d	; 61
    1ba2:	de b7       	in	r29, 0x3e	; 62
    1ba4:	9a 83       	std	Y+2, r25	; 0x02
    1ba6:	89 83       	std	Y+1, r24	; 0x01
    1ba8:	7c 83       	std	Y+4, r23	; 0x04
    1baa:	6b 83       	std	Y+3, r22	; 0x03


}
    1bac:	0f 90       	pop	r0
    1bae:	0f 90       	pop	r0
    1bb0:	0f 90       	pop	r0
    1bb2:	0f 90       	pop	r0
    1bb4:	cf 91       	pop	r28
    1bb6:	df 91       	pop	r29
    1bb8:	08 95       	ret

00001bba <setFastPWM>:

void setFastPWM(duty)
{
    1bba:	df 93       	push	r29
    1bbc:	cf 93       	push	r28
    1bbe:	00 d0       	rcall	.+0      	; 0x1bc0 <setFastPWM+0x6>
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
    1bc4:	9a 83       	std	Y+2, r25	; 0x02
    1bc6:	89 83       	std	Y+1, r24	; 0x01


	Timer0_BASE->OCR0_Reg.Reg  = duty;
    1bc8:	e2 e5       	ldi	r30, 0x52	; 82
    1bca:	f0 e0       	ldi	r31, 0x00	; 0
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	82 87       	std	Z+10, r24	; 0x0a


}
    1bd0:	0f 90       	pop	r0
    1bd2:	0f 90       	pop	r0
    1bd4:	cf 91       	pop	r28
    1bd6:	df 91       	pop	r29
    1bd8:	08 95       	ret

00001bda <setphaseCorrectPWM>:


void setphaseCorrectPWM(frequency , duty)
{
    1bda:	df 93       	push	r29
    1bdc:	cf 93       	push	r28
    1bde:	00 d0       	rcall	.+0      	; 0x1be0 <setphaseCorrectPWM+0x6>
    1be0:	00 d0       	rcall	.+0      	; 0x1be2 <setphaseCorrectPWM+0x8>
    1be2:	cd b7       	in	r28, 0x3d	; 61
    1be4:	de b7       	in	r29, 0x3e	; 62
    1be6:	9a 83       	std	Y+2, r25	; 0x02
    1be8:	89 83       	std	Y+1, r24	; 0x01
    1bea:	7c 83       	std	Y+4, r23	; 0x04
    1bec:	6b 83       	std	Y+3, r22	; 0x03

}
    1bee:	0f 90       	pop	r0
    1bf0:	0f 90       	pop	r0
    1bf2:	0f 90       	pop	r0
    1bf4:	0f 90       	pop	r0
    1bf6:	cf 91       	pop	r28
    1bf8:	df 91       	pop	r29
    1bfa:	08 95       	ret

00001bfc <Button_Init>:

#include "Button.h"
#include <util/delay.h>

void Button_Init(Port_Def* GPIOx,Pin_ID_t pin)
{
    1bfc:	df 93       	push	r29
    1bfe:	cf 93       	push	r28
    1c00:	00 d0       	rcall	.+0      	; 0x1c02 <Button_Init+0x6>
    1c02:	0f 92       	push	r0
    1c04:	cd b7       	in	r28, 0x3d	; 61
    1c06:	de b7       	in	r29, 0x3e	; 62
    1c08:	9a 83       	std	Y+2, r25	; 0x02
    1c0a:	89 83       	std	Y+1, r24	; 0x01
    1c0c:	6b 83       	std	Y+3, r22	; 0x03
	DIO_voidSetPinDirection(GPIOx, pin, PIN_INPUT);
    1c0e:	89 81       	ldd	r24, Y+1	; 0x01
    1c10:	9a 81       	ldd	r25, Y+2	; 0x02
    1c12:	6b 81       	ldd	r22, Y+3	; 0x03
    1c14:	40 e0       	ldi	r20, 0x00	; 0
    1c16:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
}
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	cf 91       	pop	r28
    1c22:	df 91       	pop	r29
    1c24:	08 95       	ret

00001c26 <Single_press>:



Key_status Single_press(Port_Def* GPIOx, Pin_ID_t pin)
{
    1c26:	df 93       	push	r29
    1c28:	cf 93       	push	r28
    1c2a:	cd b7       	in	r28, 0x3d	; 61
    1c2c:	de b7       	in	r29, 0x3e	; 62
    1c2e:	62 97       	sbiw	r28, 0x12	; 18
    1c30:	0f b6       	in	r0, 0x3f	; 63
    1c32:	f8 94       	cli
    1c34:	de bf       	out	0x3e, r29	; 62
    1c36:	0f be       	out	0x3f, r0	; 63
    1c38:	cd bf       	out	0x3d, r28	; 61
    1c3a:	98 8b       	std	Y+16, r25	; 0x10
    1c3c:	8f 87       	std	Y+15, r24	; 0x0f
    1c3e:	69 8b       	std	Y+17, r22	; 0x11
	DIO_voidSetPinDirection(GPIOx, pin, PIN_INPUT);
    1c40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c42:	98 89       	ldd	r25, Y+16	; 0x10
    1c44:	69 89       	ldd	r22, Y+17	; 0x11
    1c46:	40 e0       	ldi	r20, 0x00	; 0
    1c48:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
	static uint8 flag ;
	if(!DIO_voidGetPinValue(GPIOx, pin))
    1c4c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1c4e:	98 89       	ldd	r25, Y+16	; 0x10
    1c50:	69 89       	ldd	r22, Y+17	; 0x11
    1c52:	0e 94 b8 09 	call	0x1370	; 0x1370 <DIO_voidGetPinValue>
    1c56:	88 23       	and	r24, r24
    1c58:	09 f0       	breq	.+2      	; 0x1c5c <Single_press+0x36>
    1c5a:	83 c0       	rjmp	.+262    	; 0x1d62 <Single_press+0x13c>
    1c5c:	80 e0       	ldi	r24, 0x00	; 0
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	a8 e4       	ldi	r26, 0x48	; 72
    1c62:	b2 e4       	ldi	r27, 0x42	; 66
    1c64:	8b 87       	std	Y+11, r24	; 0x0b
    1c66:	9c 87       	std	Y+12, r25	; 0x0c
    1c68:	ad 87       	std	Y+13, r26	; 0x0d
    1c6a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c6c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c6e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c70:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c72:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	30 e0       	ldi	r19, 0x00	; 0
    1c78:	4a e7       	ldi	r20, 0x7A	; 122
    1c7a:	55 e4       	ldi	r21, 0x45	; 69
    1c7c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c80:	dc 01       	movw	r26, r24
    1c82:	cb 01       	movw	r24, r22
    1c84:	8f 83       	std	Y+7, r24	; 0x07
    1c86:	98 87       	std	Y+8, r25	; 0x08
    1c88:	a9 87       	std	Y+9, r26	; 0x09
    1c8a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c8c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c8e:	78 85       	ldd	r23, Y+8	; 0x08
    1c90:	89 85       	ldd	r24, Y+9	; 0x09
    1c92:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c94:	20 e0       	ldi	r18, 0x00	; 0
    1c96:	30 e0       	ldi	r19, 0x00	; 0
    1c98:	40 e8       	ldi	r20, 0x80	; 128
    1c9a:	5f e3       	ldi	r21, 0x3F	; 63
    1c9c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1ca0:	88 23       	and	r24, r24
    1ca2:	2c f4       	brge	.+10     	; 0x1cae <Single_press+0x88>
		__ticks = 1;
    1ca4:	81 e0       	ldi	r24, 0x01	; 1
    1ca6:	90 e0       	ldi	r25, 0x00	; 0
    1ca8:	9e 83       	std	Y+6, r25	; 0x06
    1caa:	8d 83       	std	Y+5, r24	; 0x05
    1cac:	3f c0       	rjmp	.+126    	; 0x1d2c <Single_press+0x106>
	else if (__tmp > 65535)
    1cae:	6f 81       	ldd	r22, Y+7	; 0x07
    1cb0:	78 85       	ldd	r23, Y+8	; 0x08
    1cb2:	89 85       	ldd	r24, Y+9	; 0x09
    1cb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cb6:	20 e0       	ldi	r18, 0x00	; 0
    1cb8:	3f ef       	ldi	r19, 0xFF	; 255
    1cba:	4f e7       	ldi	r20, 0x7F	; 127
    1cbc:	57 e4       	ldi	r21, 0x47	; 71
    1cbe:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1cc2:	18 16       	cp	r1, r24
    1cc4:	4c f5       	brge	.+82     	; 0x1d18 <Single_press+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cc6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cc8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cca:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ccc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cce:	20 e0       	ldi	r18, 0x00	; 0
    1cd0:	30 e0       	ldi	r19, 0x00	; 0
    1cd2:	40 e2       	ldi	r20, 0x20	; 32
    1cd4:	51 e4       	ldi	r21, 0x41	; 65
    1cd6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cda:	dc 01       	movw	r26, r24
    1cdc:	cb 01       	movw	r24, r22
    1cde:	bc 01       	movw	r22, r24
    1ce0:	cd 01       	movw	r24, r26
    1ce2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ce6:	dc 01       	movw	r26, r24
    1ce8:	cb 01       	movw	r24, r22
    1cea:	9e 83       	std	Y+6, r25	; 0x06
    1cec:	8d 83       	std	Y+5, r24	; 0x05
    1cee:	0f c0       	rjmp	.+30     	; 0x1d0e <Single_press+0xe8>
    1cf0:	80 e9       	ldi	r24, 0x90	; 144
    1cf2:	91 e0       	ldi	r25, 0x01	; 1
    1cf4:	9c 83       	std	Y+4, r25	; 0x04
    1cf6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1cf8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cfa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfc:	01 97       	sbiw	r24, 0x01	; 1
    1cfe:	f1 f7       	brne	.-4      	; 0x1cfc <Single_press+0xd6>
    1d00:	9c 83       	std	Y+4, r25	; 0x04
    1d02:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d04:	8d 81       	ldd	r24, Y+5	; 0x05
    1d06:	9e 81       	ldd	r25, Y+6	; 0x06
    1d08:	01 97       	sbiw	r24, 0x01	; 1
    1d0a:	9e 83       	std	Y+6, r25	; 0x06
    1d0c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d10:	9e 81       	ldd	r25, Y+6	; 0x06
    1d12:	00 97       	sbiw	r24, 0x00	; 0
    1d14:	69 f7       	brne	.-38     	; 0x1cf0 <Single_press+0xca>
    1d16:	14 c0       	rjmp	.+40     	; 0x1d40 <Single_press+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d18:	6f 81       	ldd	r22, Y+7	; 0x07
    1d1a:	78 85       	ldd	r23, Y+8	; 0x08
    1d1c:	89 85       	ldd	r24, Y+9	; 0x09
    1d1e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d24:	dc 01       	movw	r26, r24
    1d26:	cb 01       	movw	r24, r22
    1d28:	9e 83       	std	Y+6, r25	; 0x06
    1d2a:	8d 83       	std	Y+5, r24	; 0x05
    1d2c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d2e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d30:	9a 83       	std	Y+2, r25	; 0x02
    1d32:	89 83       	std	Y+1, r24	; 0x01
    1d34:	89 81       	ldd	r24, Y+1	; 0x01
    1d36:	9a 81       	ldd	r25, Y+2	; 0x02
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	f1 f7       	brne	.-4      	; 0x1d38 <Single_press+0x112>
    1d3c:	9a 83       	std	Y+2, r25	; 0x02
    1d3e:	89 83       	std	Y+1, r24	; 0x01
	{

		_delay_ms(50);
		if(!DIO_voidGetPinValue(GPIOx, pin))
    1d40:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d42:	98 89       	ldd	r25, Y+16	; 0x10
    1d44:	69 89       	ldd	r22, Y+17	; 0x11
    1d46:	0e 94 b8 09 	call	0x1370	; 0x1370 <DIO_voidGetPinValue>
    1d4a:	88 23       	and	r24, r24
    1d4c:	61 f4       	brne	.+24     	; 0x1d66 <Single_press+0x140>
		{
			if(flag == 0)
    1d4e:	80 91 0e 02 	lds	r24, 0x020E
    1d52:	88 23       	and	r24, r24
    1d54:	41 f4       	brne	.+16     	; 0x1d66 <Single_press+0x140>
			{
				flag =1;
    1d56:	81 e0       	ldi	r24, 0x01	; 1
    1d58:	80 93 0e 02 	sts	0x020E, r24
				return pressed;
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	8a 8b       	std	Y+18, r24	; 0x12
    1d60:	03 c0       	rjmp	.+6      	; 0x1d68 <Single_press+0x142>
		}

	}
	else
	{
		flag = 0;
    1d62:	10 92 0e 02 	sts	0x020E, r1
	}

	return released;
    1d66:	1a 8a       	std	Y+18, r1	; 0x12
    1d68:	8a 89       	ldd	r24, Y+18	; 0x12
}
    1d6a:	62 96       	adiw	r28, 0x12	; 18
    1d6c:	0f b6       	in	r0, 0x3f	; 63
    1d6e:	f8 94       	cli
    1d70:	de bf       	out	0x3e, r29	; 62
    1d72:	0f be       	out	0x3f, r0	; 63
    1d74:	cd bf       	out	0x3d, r28	; 61
    1d76:	cf 91       	pop	r28
    1d78:	df 91       	pop	r29
    1d7a:	08 95       	ret

00001d7c <KEYPAD_INIT>:
uint8_t arr [4][4] = 		{{'1','2','3','+'},	//keypad layout design for calculator app
		{'4','5','6','-'},
		{'7','8','9','*'},
		{					'0','=','c','/' } };
void KEYPAD_INIT()
{
    1d7c:	df 93       	push	r29
    1d7e:	cf 93       	push	r28
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
	/* do nothing */
	DIO_voidSetPinDirection(COL_PORT, C1_PIN, PIN_INPUT);
    1d84:	80 e3       	ldi	r24, 0x30	; 48
    1d86:	90 e0       	ldi	r25, 0x00	; 0
    1d88:	67 e0       	ldi	r22, 0x07	; 7
    1d8a:	40 e0       	ldi	r20, 0x00	; 0
    1d8c:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(COL_PORT, C2_PIN, PIN_INPUT);
    1d90:	80 e3       	ldi	r24, 0x30	; 48
    1d92:	90 e0       	ldi	r25, 0x00	; 0
    1d94:	66 e0       	ldi	r22, 0x06	; 6
    1d96:	40 e0       	ldi	r20, 0x00	; 0
    1d98:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(COL_PORT, C3_PIN, PIN_INPUT);
    1d9c:	80 e3       	ldi	r24, 0x30	; 48
    1d9e:	90 e0       	ldi	r25, 0x00	; 0
    1da0:	65 e0       	ldi	r22, 0x05	; 5
    1da2:	40 e0       	ldi	r20, 0x00	; 0
    1da4:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(COL_PORT, C4_PIN, PIN_INPUT);
    1da8:	80 e3       	ldi	r24, 0x30	; 48
    1daa:	90 e0       	ldi	r25, 0x00	; 0
    1dac:	63 e0       	ldi	r22, 0x03	; 3
    1dae:	40 e0       	ldi	r20, 0x00	; 0
    1db0:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>


	DIO_voidSetPinDirection(ROW_PORT, R4_PIN, Pin_OUTPUT);
    1db4:	83 e3       	ldi	r24, 0x33	; 51
    1db6:	90 e0       	ldi	r25, 0x00	; 0
    1db8:	62 e0       	ldi	r22, 0x02	; 2
    1dba:	41 e0       	ldi	r20, 0x01	; 1
    1dbc:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ROW_PORT, R3_PIN, Pin_OUTPUT);
    1dc0:	83 e3       	ldi	r24, 0x33	; 51
    1dc2:	90 e0       	ldi	r25, 0x00	; 0
    1dc4:	63 e0       	ldi	r22, 0x03	; 3
    1dc6:	41 e0       	ldi	r20, 0x01	; 1
    1dc8:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(ROW_PORT, R2_PIN, Pin_OUTPUT);
    1dcc:	83 e3       	ldi	r24, 0x33	; 51
    1dce:	90 e0       	ldi	r25, 0x00	; 0
    1dd0:	64 e0       	ldi	r22, 0x04	; 4
    1dd2:	41 e0       	ldi	r20, 0x01	; 1
    1dd4:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>

	DIO_voidSetPinDirection(ROW_PORT, R1_PIN, Pin_OUTPUT);
    1dd8:	83 e3       	ldi	r24, 0x33	; 51
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	65 e0       	ldi	r22, 0x05	; 5
    1dde:	41 e0       	ldi	r20, 0x01	; 1
    1de0:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>




}
    1de4:	cf 91       	pop	r28
    1de6:	df 91       	pop	r29
    1de8:	08 95       	ret

00001dea <KEYPAD_Get_Pressed_Key>:


uint8_t KEYPAD_Get_Pressed_Key(void)
{
    1dea:	df 93       	push	r29
    1dec:	cf 93       	push	r28
    1dee:	cd b7       	in	r28, 0x3d	; 61
    1df0:	de b7       	in	r29, 0x3e	; 62
    1df2:	af 97       	sbiw	r28, 0x2f	; 47
    1df4:	0f b6       	in	r0, 0x3f	; 63
    1df6:	f8 94       	cli
    1df8:	de bf       	out	0x3e, r29	; 62
    1dfa:	0f be       	out	0x3f, r0	; 63
    1dfc:	cd bf       	out	0x3d, r28	; 61
	uint8_t  i,j;
	uint8_t rows[]={R1_PIN,R2_PIN,R3_PIN,R4_PIN};
    1dfe:	85 e0       	ldi	r24, 0x05	; 5
    1e00:	8b 8b       	std	Y+19, r24	; 0x13
    1e02:	84 e0       	ldi	r24, 0x04	; 4
    1e04:	8c 8b       	std	Y+20, r24	; 0x14
    1e06:	83 e0       	ldi	r24, 0x03	; 3
    1e08:	8d 8b       	std	Y+21, r24	; 0x15
    1e0a:	82 e0       	ldi	r24, 0x02	; 2
    1e0c:	8e 8b       	std	Y+22, r24	; 0x16
	uint8_t cols[]={C1_PIN,C2_PIN,C3_PIN,C4_PIN};
    1e0e:	87 e0       	ldi	r24, 0x07	; 7
    1e10:	8f 8b       	std	Y+23, r24	; 0x17
    1e12:	86 e0       	ldi	r24, 0x06	; 6
    1e14:	88 8f       	std	Y+24, r24	; 0x18
    1e16:	85 e0       	ldi	r24, 0x05	; 5
    1e18:	89 8f       	std	Y+25, r24	; 0x19
    1e1a:	83 e0       	ldi	r24, 0x03	; 3
    1e1c:	8a 8f       	std	Y+26, r24	; 0x1a
	uint8_t KEYPAD_ARR[4][4] = KEYPAD;
    1e1e:	ce 01       	movw	r24, r28
    1e20:	4b 96       	adiw	r24, 0x1b	; 27
    1e22:	9c a7       	std	Y+44, r25	; 0x2c
    1e24:	8b a7       	std	Y+43, r24	; 0x2b
    1e26:	e6 ef       	ldi	r30, 0xF6	; 246
    1e28:	f1 e0       	ldi	r31, 0x01	; 1
    1e2a:	fe a7       	std	Y+46, r31	; 0x2e
    1e2c:	ed a7       	std	Y+45, r30	; 0x2d
    1e2e:	f0 e1       	ldi	r31, 0x10	; 16
    1e30:	ff a7       	std	Y+47, r31	; 0x2f
    1e32:	ed a5       	ldd	r30, Y+45	; 0x2d
    1e34:	fe a5       	ldd	r31, Y+46	; 0x2e
    1e36:	00 80       	ld	r0, Z
    1e38:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e3a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e3c:	01 96       	adiw	r24, 0x01	; 1
    1e3e:	9e a7       	std	Y+46, r25	; 0x2e
    1e40:	8d a7       	std	Y+45, r24	; 0x2d
    1e42:	eb a5       	ldd	r30, Y+43	; 0x2b
    1e44:	fc a5       	ldd	r31, Y+44	; 0x2c
    1e46:	00 82       	st	Z, r0
    1e48:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e4a:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e4c:	01 96       	adiw	r24, 0x01	; 1
    1e4e:	9c a7       	std	Y+44, r25	; 0x2c
    1e50:	8b a7       	std	Y+43, r24	; 0x2b
    1e52:	9f a5       	ldd	r25, Y+47	; 0x2f
    1e54:	91 50       	subi	r25, 0x01	; 1
    1e56:	9f a7       	std	Y+47, r25	; 0x2f
    1e58:	ef a5       	ldd	r30, Y+47	; 0x2f
    1e5a:	ee 23       	and	r30, r30
    1e5c:	51 f7       	brne	.-44     	; 0x1e32 <KEYPAD_Get_Pressed_Key+0x48>
	uint8_t key ;

	 uint8_t flag;
	while(1)
	{
	for(i = 0; i<=4; i++)
    1e5e:	1a 8a       	std	Y+18, r1	; 0x12
    1e60:	cb c0       	rjmp	.+406    	; 0x1ff8 <KEYPAD_Get_Pressed_Key+0x20e>
	{
		DIO_voidSetPinValue(ROW_PORT, rows[i], LOW);
    1e62:	8a 89       	ldd	r24, Y+18	; 0x12
    1e64:	28 2f       	mov	r18, r24
    1e66:	30 e0       	ldi	r19, 0x00	; 0
    1e68:	ce 01       	movw	r24, r28
    1e6a:	43 96       	adiw	r24, 0x13	; 19
    1e6c:	fc 01       	movw	r30, r24
    1e6e:	e2 0f       	add	r30, r18
    1e70:	f3 1f       	adc	r31, r19
    1e72:	20 81       	ld	r18, Z
    1e74:	83 e3       	ldi	r24, 0x33	; 51
    1e76:	90 e0       	ldi	r25, 0x00	; 0
    1e78:	62 2f       	mov	r22, r18
    1e7a:	40 e0       	ldi	r20, 0x00	; 0
    1e7c:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>

		for(j = 0; j<=4; j++)
    1e80:	19 8a       	std	Y+17, r1	; 0x11
    1e82:	33 c0       	rjmp	.+102    	; 0x1eea <KEYPAD_Get_Pressed_Key+0x100>
		{
		flag = Single_press(COL_PORT, cols[j]);
    1e84:	89 89       	ldd	r24, Y+17	; 0x11
    1e86:	28 2f       	mov	r18, r24
    1e88:	30 e0       	ldi	r19, 0x00	; 0
    1e8a:	ce 01       	movw	r24, r28
    1e8c:	47 96       	adiw	r24, 0x17	; 23
    1e8e:	fc 01       	movw	r30, r24
    1e90:	e2 0f       	add	r30, r18
    1e92:	f3 1f       	adc	r31, r19
    1e94:	20 81       	ld	r18, Z
    1e96:	80 e3       	ldi	r24, 0x30	; 48
    1e98:	90 e0       	ldi	r25, 0x00	; 0
    1e9a:	62 2f       	mov	r22, r18
    1e9c:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <Single_press>
    1ea0:	8f 87       	std	Y+15, r24	; 0x0f
			if(flag == pressed)
    1ea2:	8f 85       	ldd	r24, Y+15	; 0x0f
    1ea4:	81 30       	cpi	r24, 0x01	; 1
    1ea6:	f1 f4       	brne	.+60     	; 0x1ee4 <KEYPAD_Get_Pressed_Key+0xfa>
			{
				key = KEYPAD_ARR[i][j];
    1ea8:	8a 89       	ldd	r24, Y+18	; 0x12
    1eaa:	28 2f       	mov	r18, r24
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	89 89       	ldd	r24, Y+17	; 0x11
    1eb0:	48 2f       	mov	r20, r24
    1eb2:	50 e0       	ldi	r21, 0x00	; 0
    1eb4:	22 0f       	add	r18, r18
    1eb6:	33 1f       	adc	r19, r19
    1eb8:	22 0f       	add	r18, r18
    1eba:	33 1f       	adc	r19, r19
    1ebc:	ce 01       	movw	r24, r28
    1ebe:	01 96       	adiw	r24, 0x01	; 1
    1ec0:	82 0f       	add	r24, r18
    1ec2:	93 1f       	adc	r25, r19
    1ec4:	84 0f       	add	r24, r20
    1ec6:	95 1f       	adc	r25, r21
    1ec8:	fc 01       	movw	r30, r24
    1eca:	7a 96       	adiw	r30, 0x1a	; 26
    1ecc:	80 81       	ld	r24, Z
    1ece:	88 8b       	std	Y+16, r24	; 0x10
				return key;
    1ed0:	88 89       	ldd	r24, Y+16	; 0x10
		DIO_voidSetPinValue(ROW_PORT, rows[i], HIGH);
		_delay_ms(10);

	}
}
}
    1ed2:	af 96       	adiw	r28, 0x2f	; 47
    1ed4:	0f b6       	in	r0, 0x3f	; 63
    1ed6:	f8 94       	cli
    1ed8:	de bf       	out	0x3e, r29	; 62
    1eda:	0f be       	out	0x3f, r0	; 63
    1edc:	cd bf       	out	0x3d, r28	; 61
    1ede:	cf 91       	pop	r28
    1ee0:	df 91       	pop	r29
    1ee2:	08 95       	ret
	{
	for(i = 0; i<=4; i++)
	{
		DIO_voidSetPinValue(ROW_PORT, rows[i], LOW);

		for(j = 0; j<=4; j++)
    1ee4:	89 89       	ldd	r24, Y+17	; 0x11
    1ee6:	8f 5f       	subi	r24, 0xFF	; 255
    1ee8:	89 8b       	std	Y+17, r24	; 0x11
    1eea:	89 89       	ldd	r24, Y+17	; 0x11
    1eec:	85 30       	cpi	r24, 0x05	; 5
    1eee:	50 f2       	brcs	.-108    	; 0x1e84 <KEYPAD_Get_Pressed_Key+0x9a>
				return key;

			}

		}
		DIO_voidSetPinValue(ROW_PORT, rows[i], HIGH);
    1ef0:	8a 89       	ldd	r24, Y+18	; 0x12
    1ef2:	28 2f       	mov	r18, r24
    1ef4:	30 e0       	ldi	r19, 0x00	; 0
    1ef6:	ce 01       	movw	r24, r28
    1ef8:	43 96       	adiw	r24, 0x13	; 19
    1efa:	fc 01       	movw	r30, r24
    1efc:	e2 0f       	add	r30, r18
    1efe:	f3 1f       	adc	r31, r19
    1f00:	20 81       	ld	r18, Z
    1f02:	83 e3       	ldi	r24, 0x33	; 51
    1f04:	90 e0       	ldi	r25, 0x00	; 0
    1f06:	62 2f       	mov	r22, r18
    1f08:	41 e0       	ldi	r20, 0x01	; 1
    1f0a:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    1f0e:	80 e0       	ldi	r24, 0x00	; 0
    1f10:	90 e0       	ldi	r25, 0x00	; 0
    1f12:	a0 e2       	ldi	r26, 0x20	; 32
    1f14:	b1 e4       	ldi	r27, 0x41	; 65
    1f16:	8b 87       	std	Y+11, r24	; 0x0b
    1f18:	9c 87       	std	Y+12, r25	; 0x0c
    1f1a:	ad 87       	std	Y+13, r26	; 0x0d
    1f1c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f1e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f20:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f22:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f24:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f26:	20 e0       	ldi	r18, 0x00	; 0
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	4a e7       	ldi	r20, 0x7A	; 122
    1f2c:	55 e4       	ldi	r21, 0x45	; 69
    1f2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f32:	dc 01       	movw	r26, r24
    1f34:	cb 01       	movw	r24, r22
    1f36:	8f 83       	std	Y+7, r24	; 0x07
    1f38:	98 87       	std	Y+8, r25	; 0x08
    1f3a:	a9 87       	std	Y+9, r26	; 0x09
    1f3c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f3e:	6f 81       	ldd	r22, Y+7	; 0x07
    1f40:	78 85       	ldd	r23, Y+8	; 0x08
    1f42:	89 85       	ldd	r24, Y+9	; 0x09
    1f44:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f46:	20 e0       	ldi	r18, 0x00	; 0
    1f48:	30 e0       	ldi	r19, 0x00	; 0
    1f4a:	40 e8       	ldi	r20, 0x80	; 128
    1f4c:	5f e3       	ldi	r21, 0x3F	; 63
    1f4e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1f52:	88 23       	and	r24, r24
    1f54:	2c f4       	brge	.+10     	; 0x1f60 <KEYPAD_Get_Pressed_Key+0x176>
		__ticks = 1;
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	9e 83       	std	Y+6, r25	; 0x06
    1f5c:	8d 83       	std	Y+5, r24	; 0x05
    1f5e:	3f c0       	rjmp	.+126    	; 0x1fde <KEYPAD_Get_Pressed_Key+0x1f4>
	else if (__tmp > 65535)
    1f60:	6f 81       	ldd	r22, Y+7	; 0x07
    1f62:	78 85       	ldd	r23, Y+8	; 0x08
    1f64:	89 85       	ldd	r24, Y+9	; 0x09
    1f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f68:	20 e0       	ldi	r18, 0x00	; 0
    1f6a:	3f ef       	ldi	r19, 0xFF	; 255
    1f6c:	4f e7       	ldi	r20, 0x7F	; 127
    1f6e:	57 e4       	ldi	r21, 0x47	; 71
    1f70:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1f74:	18 16       	cp	r1, r24
    1f76:	4c f5       	brge	.+82     	; 0x1fca <KEYPAD_Get_Pressed_Key+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f78:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f7a:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f7c:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f7e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f80:	20 e0       	ldi	r18, 0x00	; 0
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	40 e2       	ldi	r20, 0x20	; 32
    1f86:	51 e4       	ldi	r21, 0x41	; 65
    1f88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	bc 01       	movw	r22, r24
    1f92:	cd 01       	movw	r24, r26
    1f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	9e 83       	std	Y+6, r25	; 0x06
    1f9e:	8d 83       	std	Y+5, r24	; 0x05
    1fa0:	0f c0       	rjmp	.+30     	; 0x1fc0 <KEYPAD_Get_Pressed_Key+0x1d6>
    1fa2:	80 e9       	ldi	r24, 0x90	; 144
    1fa4:	91 e0       	ldi	r25, 0x01	; 1
    1fa6:	9c 83       	std	Y+4, r25	; 0x04
    1fa8:	8b 83       	std	Y+3, r24	; 0x03
    1faa:	8b 81       	ldd	r24, Y+3	; 0x03
    1fac:	9c 81       	ldd	r25, Y+4	; 0x04
    1fae:	01 97       	sbiw	r24, 0x01	; 1
    1fb0:	f1 f7       	brne	.-4      	; 0x1fae <KEYPAD_Get_Pressed_Key+0x1c4>
    1fb2:	9c 83       	std	Y+4, r25	; 0x04
    1fb4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fb6:	8d 81       	ldd	r24, Y+5	; 0x05
    1fb8:	9e 81       	ldd	r25, Y+6	; 0x06
    1fba:	01 97       	sbiw	r24, 0x01	; 1
    1fbc:	9e 83       	std	Y+6, r25	; 0x06
    1fbe:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fc0:	8d 81       	ldd	r24, Y+5	; 0x05
    1fc2:	9e 81       	ldd	r25, Y+6	; 0x06
    1fc4:	00 97       	sbiw	r24, 0x00	; 0
    1fc6:	69 f7       	brne	.-38     	; 0x1fa2 <KEYPAD_Get_Pressed_Key+0x1b8>
    1fc8:	14 c0       	rjmp	.+40     	; 0x1ff2 <KEYPAD_Get_Pressed_Key+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fca:	6f 81       	ldd	r22, Y+7	; 0x07
    1fcc:	78 85       	ldd	r23, Y+8	; 0x08
    1fce:	89 85       	ldd	r24, Y+9	; 0x09
    1fd0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1fd2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fd6:	dc 01       	movw	r26, r24
    1fd8:	cb 01       	movw	r24, r22
    1fda:	9e 83       	std	Y+6, r25	; 0x06
    1fdc:	8d 83       	std	Y+5, r24	; 0x05
    1fde:	8d 81       	ldd	r24, Y+5	; 0x05
    1fe0:	9e 81       	ldd	r25, Y+6	; 0x06
    1fe2:	9a 83       	std	Y+2, r25	; 0x02
    1fe4:	89 83       	std	Y+1, r24	; 0x01
    1fe6:	89 81       	ldd	r24, Y+1	; 0x01
    1fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    1fea:	01 97       	sbiw	r24, 0x01	; 1
    1fec:	f1 f7       	brne	.-4      	; 0x1fea <KEYPAD_Get_Pressed_Key+0x200>
    1fee:	9a 83       	std	Y+2, r25	; 0x02
    1ff0:	89 83       	std	Y+1, r24	; 0x01
	uint8_t key ;

	 uint8_t flag;
	while(1)
	{
	for(i = 0; i<=4; i++)
    1ff2:	8a 89       	ldd	r24, Y+18	; 0x12
    1ff4:	8f 5f       	subi	r24, 0xFF	; 255
    1ff6:	8a 8b       	std	Y+18, r24	; 0x12
    1ff8:	8a 89       	ldd	r24, Y+18	; 0x12
    1ffa:	85 30       	cpi	r24, 0x05	; 5
    1ffc:	08 f4       	brcc	.+2      	; 0x2000 <KEYPAD_Get_Pressed_Key+0x216>
    1ffe:	31 cf       	rjmp	.-414    	; 0x1e62 <KEYPAD_Get_Pressed_Key+0x78>
    2000:	2e cf       	rjmp	.-420    	; 0x1e5e <KEYPAD_Get_Pressed_Key+0x74>

00002002 <TURN_ON_OFF_LED>:


#include "LED_INTERFACING.h"

void TURN_ON_OFF_LED(Port_Def* GPIOx ,LED_Status_t state,Pin_ID_t pin )
{
    2002:	df 93       	push	r29
    2004:	cf 93       	push	r28
    2006:	00 d0       	rcall	.+0      	; 0x2008 <TURN_ON_OFF_LED+0x6>
    2008:	00 d0       	rcall	.+0      	; 0x200a <TURN_ON_OFF_LED+0x8>
    200a:	00 d0       	rcall	.+0      	; 0x200c <TURN_ON_OFF_LED+0xa>
    200c:	cd b7       	in	r28, 0x3d	; 61
    200e:	de b7       	in	r29, 0x3e	; 62
    2010:	9a 83       	std	Y+2, r25	; 0x02
    2012:	89 83       	std	Y+1, r24	; 0x01
    2014:	6b 83       	std	Y+3, r22	; 0x03
    2016:	4c 83       	std	Y+4, r20	; 0x04
	DIO_voidSetPinDirection(GPIOx, pin, Pin_OUTPUT);
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	9a 81       	ldd	r25, Y+2	; 0x02
    201c:	6c 81       	ldd	r22, Y+4	; 0x04
    201e:	41 e0       	ldi	r20, 0x01	; 1
    2020:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>

	switch(state)
    2024:	8b 81       	ldd	r24, Y+3	; 0x03
    2026:	28 2f       	mov	r18, r24
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	3e 83       	std	Y+6, r19	; 0x06
    202c:	2d 83       	std	Y+5, r18	; 0x05
    202e:	8d 81       	ldd	r24, Y+5	; 0x05
    2030:	9e 81       	ldd	r25, Y+6	; 0x06
    2032:	00 97       	sbiw	r24, 0x00	; 0
    2034:	61 f0       	breq	.+24     	; 0x204e <TURN_ON_OFF_LED+0x4c>
    2036:	2d 81       	ldd	r18, Y+5	; 0x05
    2038:	3e 81       	ldd	r19, Y+6	; 0x06
    203a:	21 30       	cpi	r18, 0x01	; 1
    203c:	31 05       	cpc	r19, r1
    203e:	69 f4       	brne	.+26     	; 0x205a <TURN_ON_OFF_LED+0x58>
	{
	case ACTIVE_HIGH:
		DIO_voidSetPinValue(GPIOx, pin, HIGH);
    2040:	89 81       	ldd	r24, Y+1	; 0x01
    2042:	9a 81       	ldd	r25, Y+2	; 0x02
    2044:	6c 81       	ldd	r22, Y+4	; 0x04
    2046:	41 e0       	ldi	r20, 0x01	; 1
    2048:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    204c:	06 c0       	rjmp	.+12     	; 0x205a <TURN_ON_OFF_LED+0x58>
		break;
	case ACTIVE_LOW:
		DIO_voidSetPinValue(GPIOx, pin, LOW);
    204e:	89 81       	ldd	r24, Y+1	; 0x01
    2050:	9a 81       	ldd	r25, Y+2	; 0x02
    2052:	6c 81       	ldd	r22, Y+4	; 0x04
    2054:	40 e0       	ldi	r20, 0x00	; 0
    2056:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		break;

	}
}
    205a:	26 96       	adiw	r28, 0x06	; 6
    205c:	0f b6       	in	r0, 0x3f	; 63
    205e:	f8 94       	cli
    2060:	de bf       	out	0x3e, r29	; 62
    2062:	0f be       	out	0x3f, r0	; 63
    2064:	cd bf       	out	0x3d, r28	; 61
    2066:	cf 91       	pop	r28
    2068:	df 91       	pop	r29
    206a:	08 95       	ret

0000206c <LM35_read_temperature>:
 *      Author: Ahmed Yasser
 */

#include "LM35_INTERFACE.h"

uint16 LM35_read_temperature() {
    206c:	df 93       	push	r29
    206e:	cf 93       	push	r28
    2070:	00 d0       	rcall	.+0      	; 0x2072 <LM35_read_temperature+0x6>
    2072:	00 d0       	rcall	.+0      	; 0x2074 <LM35_read_temperature+0x8>
    2074:	00 d0       	rcall	.+0      	; 0x2076 <LM35_read_temperature+0xa>
    2076:	cd b7       	in	r28, 0x3d	; 61
    2078:	de b7       	in	r29, 0x3e	; 62

    // Read the ADC result.
	uint16 raw_adc = ADC_getDigitalValueSynchNonBlocking(ADC2);
    207a:	82 e0       	ldi	r24, 0x02	; 2
    207c:	0e 94 df 07 	call	0xfbe	; 0xfbe <ADC_getDigitalValueSynchNonBlocking>
    2080:	9e 83       	std	Y+6, r25	; 0x06
    2082:	8d 83       	std	Y+5, r24	; 0x05

    // Calculate temperature in Celsius.
    // LM35 has a sensitivity of 10 mV per degree Celsius.
    float temperature = (raw_adc * 100.0) / 10.0;
    2084:	8d 81       	ldd	r24, Y+5	; 0x05
    2086:	9e 81       	ldd	r25, Y+6	; 0x06
    2088:	cc 01       	movw	r24, r24
    208a:	a0 e0       	ldi	r26, 0x00	; 0
    208c:	b0 e0       	ldi	r27, 0x00	; 0
    208e:	bc 01       	movw	r22, r24
    2090:	cd 01       	movw	r24, r26
    2092:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2096:	dc 01       	movw	r26, r24
    2098:	cb 01       	movw	r24, r22
    209a:	bc 01       	movw	r22, r24
    209c:	cd 01       	movw	r24, r26
    209e:	20 e0       	ldi	r18, 0x00	; 0
    20a0:	30 e0       	ldi	r19, 0x00	; 0
    20a2:	48 ec       	ldi	r20, 0xC8	; 200
    20a4:	52 e4       	ldi	r21, 0x42	; 66
    20a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20aa:	dc 01       	movw	r26, r24
    20ac:	cb 01       	movw	r24, r22
    20ae:	bc 01       	movw	r22, r24
    20b0:	cd 01       	movw	r24, r26
    20b2:	20 e0       	ldi	r18, 0x00	; 0
    20b4:	30 e0       	ldi	r19, 0x00	; 0
    20b6:	40 e2       	ldi	r20, 0x20	; 32
    20b8:	51 e4       	ldi	r21, 0x41	; 65
    20ba:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    20be:	dc 01       	movw	r26, r24
    20c0:	cb 01       	movw	r24, r22
    20c2:	89 83       	std	Y+1, r24	; 0x01
    20c4:	9a 83       	std	Y+2, r25	; 0x02
    20c6:	ab 83       	std	Y+3, r26	; 0x03
    20c8:	bc 83       	std	Y+4, r27	; 0x04

    return (uint16)temperature;
    20ca:	69 81       	ldd	r22, Y+1	; 0x01
    20cc:	7a 81       	ldd	r23, Y+2	; 0x02
    20ce:	8b 81       	ldd	r24, Y+3	; 0x03
    20d0:	9c 81       	ldd	r25, Y+4	; 0x04
    20d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20d6:	dc 01       	movw	r26, r24
    20d8:	cb 01       	movw	r24, r22
}
    20da:	26 96       	adiw	r28, 0x06	; 6
    20dc:	0f b6       	in	r0, 0x3f	; 63
    20de:	f8 94       	cli
    20e0:	de bf       	out	0x3e, r29	; 62
    20e2:	0f be       	out	0x3f, r0	; 63
    20e4:	cd bf       	out	0x3d, r28	; 61
    20e6:	cf 91       	pop	r28
    20e8:	df 91       	pop	r29
    20ea:	08 95       	ret

000020ec <latchbyte>:
#include "LCD_Private.h"
#include "stdlib.h"


static void latchbyte(uint8_t copy_u8Byte)
{
    20ec:	0f 93       	push	r16
    20ee:	1f 93       	push	r17
    20f0:	df 93       	push	r29
    20f2:	cf 93       	push	r28
    20f4:	cd b7       	in	r28, 0x3d	; 61
    20f6:	de b7       	in	r29, 0x3e	; 62
    20f8:	c7 54       	subi	r28, 0x47	; 71
    20fa:	d0 40       	sbci	r29, 0x00	; 0
    20fc:	0f b6       	in	r0, 0x3f	; 63
    20fe:	f8 94       	cli
    2100:	de bf       	out	0x3e, r29	; 62
    2102:	0f be       	out	0x3f, r0	; 63
    2104:	cd bf       	out	0x3d, r28	; 61
    2106:	fe 01       	movw	r30, r28
    2108:	e9 5b       	subi	r30, 0xB9	; 185
    210a:	ff 4f       	sbci	r31, 0xFF	; 255
    210c:	80 83       	st	Z, r24

	}
#elif(MODE == _4_BIT_MODE)
	{

		DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, LOW);
    210e:	89 e3       	ldi	r24, 0x39	; 57
    2110:	90 e0       	ldi	r25, 0x00	; 0
    2112:	62 e0       	ldi	r22, 0x02	; 2
    2114:	40 e0       	ldi	r20, 0x00	; 0
    2116:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    211a:	fe 01       	movw	r30, r28
    211c:	ed 5b       	subi	r30, 0xBD	; 189
    211e:	ff 4f       	sbci	r31, 0xFF	; 255
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	90 e0       	ldi	r25, 0x00	; 0
    2124:	a0 e2       	ldi	r26, 0x20	; 32
    2126:	b1 e4       	ldi	r27, 0x41	; 65
    2128:	80 83       	st	Z, r24
    212a:	91 83       	std	Z+1, r25	; 0x01
    212c:	a2 83       	std	Z+2, r26	; 0x02
    212e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2130:	8e 01       	movw	r16, r28
    2132:	01 5c       	subi	r16, 0xC1	; 193
    2134:	1f 4f       	sbci	r17, 0xFF	; 255
    2136:	fe 01       	movw	r30, r28
    2138:	ed 5b       	subi	r30, 0xBD	; 189
    213a:	ff 4f       	sbci	r31, 0xFF	; 255
    213c:	60 81       	ld	r22, Z
    213e:	71 81       	ldd	r23, Z+1	; 0x01
    2140:	82 81       	ldd	r24, Z+2	; 0x02
    2142:	93 81       	ldd	r25, Z+3	; 0x03
    2144:	20 e0       	ldi	r18, 0x00	; 0
    2146:	30 e0       	ldi	r19, 0x00	; 0
    2148:	4a e7       	ldi	r20, 0x7A	; 122
    214a:	55 e4       	ldi	r21, 0x45	; 69
    214c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2150:	dc 01       	movw	r26, r24
    2152:	cb 01       	movw	r24, r22
    2154:	f8 01       	movw	r30, r16
    2156:	80 83       	st	Z, r24
    2158:	91 83       	std	Z+1, r25	; 0x01
    215a:	a2 83       	std	Z+2, r26	; 0x02
    215c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    215e:	fe 01       	movw	r30, r28
    2160:	ff 96       	adiw	r30, 0x3f	; 63
    2162:	60 81       	ld	r22, Z
    2164:	71 81       	ldd	r23, Z+1	; 0x01
    2166:	82 81       	ldd	r24, Z+2	; 0x02
    2168:	93 81       	ldd	r25, Z+3	; 0x03
    216a:	20 e0       	ldi	r18, 0x00	; 0
    216c:	30 e0       	ldi	r19, 0x00	; 0
    216e:	40 e8       	ldi	r20, 0x80	; 128
    2170:	5f e3       	ldi	r21, 0x3F	; 63
    2172:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2176:	88 23       	and	r24, r24
    2178:	2c f4       	brge	.+10     	; 0x2184 <latchbyte+0x98>
		__ticks = 1;
    217a:	81 e0       	ldi	r24, 0x01	; 1
    217c:	90 e0       	ldi	r25, 0x00	; 0
    217e:	9e af       	std	Y+62, r25	; 0x3e
    2180:	8d af       	std	Y+61, r24	; 0x3d
    2182:	46 c0       	rjmp	.+140    	; 0x2210 <latchbyte+0x124>
	else if (__tmp > 65535)
    2184:	fe 01       	movw	r30, r28
    2186:	ff 96       	adiw	r30, 0x3f	; 63
    2188:	60 81       	ld	r22, Z
    218a:	71 81       	ldd	r23, Z+1	; 0x01
    218c:	82 81       	ldd	r24, Z+2	; 0x02
    218e:	93 81       	ldd	r25, Z+3	; 0x03
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	3f ef       	ldi	r19, 0xFF	; 255
    2194:	4f e7       	ldi	r20, 0x7F	; 127
    2196:	57 e4       	ldi	r21, 0x47	; 71
    2198:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    219c:	18 16       	cp	r1, r24
    219e:	64 f5       	brge	.+88     	; 0x21f8 <latchbyte+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a0:	fe 01       	movw	r30, r28
    21a2:	ed 5b       	subi	r30, 0xBD	; 189
    21a4:	ff 4f       	sbci	r31, 0xFF	; 255
    21a6:	60 81       	ld	r22, Z
    21a8:	71 81       	ldd	r23, Z+1	; 0x01
    21aa:	82 81       	ldd	r24, Z+2	; 0x02
    21ac:	93 81       	ldd	r25, Z+3	; 0x03
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	40 e2       	ldi	r20, 0x20	; 32
    21b4:	51 e4       	ldi	r21, 0x41	; 65
    21b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	bc 01       	movw	r22, r24
    21c0:	cd 01       	movw	r24, r26
    21c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	9e af       	std	Y+62, r25	; 0x3e
    21cc:	8d af       	std	Y+61, r24	; 0x3d
    21ce:	0f c0       	rjmp	.+30     	; 0x21ee <latchbyte+0x102>
    21d0:	80 e9       	ldi	r24, 0x90	; 144
    21d2:	91 e0       	ldi	r25, 0x01	; 1
    21d4:	9c af       	std	Y+60, r25	; 0x3c
    21d6:	8b af       	std	Y+59, r24	; 0x3b
    21d8:	8b ad       	ldd	r24, Y+59	; 0x3b
    21da:	9c ad       	ldd	r25, Y+60	; 0x3c
    21dc:	01 97       	sbiw	r24, 0x01	; 1
    21de:	f1 f7       	brne	.-4      	; 0x21dc <latchbyte+0xf0>
    21e0:	9c af       	std	Y+60, r25	; 0x3c
    21e2:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e4:	8d ad       	ldd	r24, Y+61	; 0x3d
    21e6:	9e ad       	ldd	r25, Y+62	; 0x3e
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	9e af       	std	Y+62, r25	; 0x3e
    21ec:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    21f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    21f2:	00 97       	sbiw	r24, 0x00	; 0
    21f4:	69 f7       	brne	.-38     	; 0x21d0 <latchbyte+0xe4>
    21f6:	16 c0       	rjmp	.+44     	; 0x2224 <latchbyte+0x138>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f8:	fe 01       	movw	r30, r28
    21fa:	ff 96       	adiw	r30, 0x3f	; 63
    21fc:	60 81       	ld	r22, Z
    21fe:	71 81       	ldd	r23, Z+1	; 0x01
    2200:	82 81       	ldd	r24, Z+2	; 0x02
    2202:	93 81       	ldd	r25, Z+3	; 0x03
    2204:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2208:	dc 01       	movw	r26, r24
    220a:	cb 01       	movw	r24, r22
    220c:	9e af       	std	Y+62, r25	; 0x3e
    220e:	8d af       	std	Y+61, r24	; 0x3d
    2210:	8d ad       	ldd	r24, Y+61	; 0x3d
    2212:	9e ad       	ldd	r25, Y+62	; 0x3e
    2214:	9a af       	std	Y+58, r25	; 0x3a
    2216:	89 af       	std	Y+57, r24	; 0x39
    2218:	89 ad       	ldd	r24, Y+57	; 0x39
    221a:	9a ad       	ldd	r25, Y+58	; 0x3a
    221c:	01 97       	sbiw	r24, 0x01	; 1
    221e:	f1 f7       	brne	.-4      	; 0x221c <latchbyte+0x130>
    2220:	9a af       	std	Y+58, r25	; 0x3a
    2222:	89 af       	std	Y+57, r24	; 0x39

		_delay_ms(10);
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(copy_u8Byte,4));
    2224:	fe 01       	movw	r30, r28
    2226:	e9 5b       	subi	r30, 0xB9	; 185
    2228:	ff 4f       	sbci	r31, 0xFF	; 255
    222a:	80 81       	ld	r24, Z
    222c:	88 2f       	mov	r24, r24
    222e:	90 e0       	ldi	r25, 0x00	; 0
    2230:	80 71       	andi	r24, 0x10	; 16
    2232:	90 70       	andi	r25, 0x00	; 0
    2234:	95 95       	asr	r25
    2236:	87 95       	ror	r24
    2238:	95 95       	asr	r25
    223a:	87 95       	ror	r24
    223c:	95 95       	asr	r25
    223e:	87 95       	ror	r24
    2240:	95 95       	asr	r25
    2242:	87 95       	ror	r24
    2244:	28 2f       	mov	r18, r24
    2246:	86 e3       	ldi	r24, 0x36	; 54
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	60 e0       	ldi	r22, 0x00	; 0
    224c:	42 2f       	mov	r20, r18
    224e:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(copy_u8Byte,5));
    2252:	fe 01       	movw	r30, r28
    2254:	e9 5b       	subi	r30, 0xB9	; 185
    2256:	ff 4f       	sbci	r31, 0xFF	; 255
    2258:	80 81       	ld	r24, Z
    225a:	88 2f       	mov	r24, r24
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	80 72       	andi	r24, 0x20	; 32
    2260:	90 70       	andi	r25, 0x00	; 0
    2262:	95 95       	asr	r25
    2264:	87 95       	ror	r24
    2266:	95 95       	asr	r25
    2268:	87 95       	ror	r24
    226a:	95 95       	asr	r25
    226c:	87 95       	ror	r24
    226e:	95 95       	asr	r25
    2270:	87 95       	ror	r24
    2272:	95 95       	asr	r25
    2274:	87 95       	ror	r24
    2276:	28 2f       	mov	r18, r24
    2278:	86 e3       	ldi	r24, 0x36	; 54
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	61 e0       	ldi	r22, 0x01	; 1
    227e:	42 2f       	mov	r20, r18
    2280:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(copy_u8Byte,6));
    2284:	fe 01       	movw	r30, r28
    2286:	e9 5b       	subi	r30, 0xB9	; 185
    2288:	ff 4f       	sbci	r31, 0xFF	; 255
    228a:	80 81       	ld	r24, Z
    228c:	88 2f       	mov	r24, r24
    228e:	90 e0       	ldi	r25, 0x00	; 0
    2290:	80 74       	andi	r24, 0x40	; 64
    2292:	90 70       	andi	r25, 0x00	; 0
    2294:	08 2e       	mov	r0, r24
    2296:	89 2f       	mov	r24, r25
    2298:	00 0c       	add	r0, r0
    229a:	88 1f       	adc	r24, r24
    229c:	99 0b       	sbc	r25, r25
    229e:	00 0c       	add	r0, r0
    22a0:	88 1f       	adc	r24, r24
    22a2:	99 1f       	adc	r25, r25
    22a4:	28 2f       	mov	r18, r24
    22a6:	86 e3       	ldi	r24, 0x36	; 54
    22a8:	90 e0       	ldi	r25, 0x00	; 0
    22aa:	62 e0       	ldi	r22, 0x02	; 2
    22ac:	42 2f       	mov	r20, r18
    22ae:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(copy_u8Byte,7));
    22b2:	fe 01       	movw	r30, r28
    22b4:	e9 5b       	subi	r30, 0xB9	; 185
    22b6:	ff 4f       	sbci	r31, 0xFF	; 255
    22b8:	80 81       	ld	r24, Z
    22ba:	28 2f       	mov	r18, r24
    22bc:	22 1f       	adc	r18, r18
    22be:	22 27       	eor	r18, r18
    22c0:	22 1f       	adc	r18, r18
    22c2:	86 e3       	ldi	r24, 0x36	; 54
    22c4:	90 e0       	ldi	r25, 0x00	; 0
    22c6:	64 e0       	ldi	r22, 0x04	; 4
    22c8:	42 2f       	mov	r20, r18
    22ca:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, HIGH);
    22ce:	89 e3       	ldi	r24, 0x39	; 57
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	62 e0       	ldi	r22, 0x02	; 2
    22d4:	41 e0       	ldi	r20, 0x01	; 1
    22d6:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    22da:	80 e0       	ldi	r24, 0x00	; 0
    22dc:	90 e0       	ldi	r25, 0x00	; 0
    22de:	a0 e2       	ldi	r26, 0x20	; 32
    22e0:	b1 e4       	ldi	r27, 0x41	; 65
    22e2:	8d ab       	std	Y+53, r24	; 0x35
    22e4:	9e ab       	std	Y+54, r25	; 0x36
    22e6:	af ab       	std	Y+55, r26	; 0x37
    22e8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22ea:	6d a9       	ldd	r22, Y+53	; 0x35
    22ec:	7e a9       	ldd	r23, Y+54	; 0x36
    22ee:	8f a9       	ldd	r24, Y+55	; 0x37
    22f0:	98 ad       	ldd	r25, Y+56	; 0x38
    22f2:	20 e0       	ldi	r18, 0x00	; 0
    22f4:	30 e0       	ldi	r19, 0x00	; 0
    22f6:	4a e7       	ldi	r20, 0x7A	; 122
    22f8:	55 e4       	ldi	r21, 0x45	; 69
    22fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	89 ab       	std	Y+49, r24	; 0x31
    2304:	9a ab       	std	Y+50, r25	; 0x32
    2306:	ab ab       	std	Y+51, r26	; 0x33
    2308:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    230a:	69 a9       	ldd	r22, Y+49	; 0x31
    230c:	7a a9       	ldd	r23, Y+50	; 0x32
    230e:	8b a9       	ldd	r24, Y+51	; 0x33
    2310:	9c a9       	ldd	r25, Y+52	; 0x34
    2312:	20 e0       	ldi	r18, 0x00	; 0
    2314:	30 e0       	ldi	r19, 0x00	; 0
    2316:	40 e8       	ldi	r20, 0x80	; 128
    2318:	5f e3       	ldi	r21, 0x3F	; 63
    231a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    231e:	88 23       	and	r24, r24
    2320:	2c f4       	brge	.+10     	; 0x232c <latchbyte+0x240>
		__ticks = 1;
    2322:	81 e0       	ldi	r24, 0x01	; 1
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	98 ab       	std	Y+48, r25	; 0x30
    2328:	8f a7       	std	Y+47, r24	; 0x2f
    232a:	3f c0       	rjmp	.+126    	; 0x23aa <latchbyte+0x2be>
	else if (__tmp > 65535)
    232c:	69 a9       	ldd	r22, Y+49	; 0x31
    232e:	7a a9       	ldd	r23, Y+50	; 0x32
    2330:	8b a9       	ldd	r24, Y+51	; 0x33
    2332:	9c a9       	ldd	r25, Y+52	; 0x34
    2334:	20 e0       	ldi	r18, 0x00	; 0
    2336:	3f ef       	ldi	r19, 0xFF	; 255
    2338:	4f e7       	ldi	r20, 0x7F	; 127
    233a:	57 e4       	ldi	r21, 0x47	; 71
    233c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2340:	18 16       	cp	r1, r24
    2342:	4c f5       	brge	.+82     	; 0x2396 <latchbyte+0x2aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2344:	6d a9       	ldd	r22, Y+53	; 0x35
    2346:	7e a9       	ldd	r23, Y+54	; 0x36
    2348:	8f a9       	ldd	r24, Y+55	; 0x37
    234a:	98 ad       	ldd	r25, Y+56	; 0x38
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	30 e0       	ldi	r19, 0x00	; 0
    2350:	40 e2       	ldi	r20, 0x20	; 32
    2352:	51 e4       	ldi	r21, 0x41	; 65
    2354:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2358:	dc 01       	movw	r26, r24
    235a:	cb 01       	movw	r24, r22
    235c:	bc 01       	movw	r22, r24
    235e:	cd 01       	movw	r24, r26
    2360:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2364:	dc 01       	movw	r26, r24
    2366:	cb 01       	movw	r24, r22
    2368:	98 ab       	std	Y+48, r25	; 0x30
    236a:	8f a7       	std	Y+47, r24	; 0x2f
    236c:	0f c0       	rjmp	.+30     	; 0x238c <latchbyte+0x2a0>
    236e:	80 e9       	ldi	r24, 0x90	; 144
    2370:	91 e0       	ldi	r25, 0x01	; 1
    2372:	9e a7       	std	Y+46, r25	; 0x2e
    2374:	8d a7       	std	Y+45, r24	; 0x2d
    2376:	8d a5       	ldd	r24, Y+45	; 0x2d
    2378:	9e a5       	ldd	r25, Y+46	; 0x2e
    237a:	01 97       	sbiw	r24, 0x01	; 1
    237c:	f1 f7       	brne	.-4      	; 0x237a <latchbyte+0x28e>
    237e:	9e a7       	std	Y+46, r25	; 0x2e
    2380:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2382:	8f a5       	ldd	r24, Y+47	; 0x2f
    2384:	98 a9       	ldd	r25, Y+48	; 0x30
    2386:	01 97       	sbiw	r24, 0x01	; 1
    2388:	98 ab       	std	Y+48, r25	; 0x30
    238a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    238c:	8f a5       	ldd	r24, Y+47	; 0x2f
    238e:	98 a9       	ldd	r25, Y+48	; 0x30
    2390:	00 97       	sbiw	r24, 0x00	; 0
    2392:	69 f7       	brne	.-38     	; 0x236e <latchbyte+0x282>
    2394:	14 c0       	rjmp	.+40     	; 0x23be <latchbyte+0x2d2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2396:	69 a9       	ldd	r22, Y+49	; 0x31
    2398:	7a a9       	ldd	r23, Y+50	; 0x32
    239a:	8b a9       	ldd	r24, Y+51	; 0x33
    239c:	9c a9       	ldd	r25, Y+52	; 0x34
    239e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23a2:	dc 01       	movw	r26, r24
    23a4:	cb 01       	movw	r24, r22
    23a6:	98 ab       	std	Y+48, r25	; 0x30
    23a8:	8f a7       	std	Y+47, r24	; 0x2f
    23aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    23ac:	98 a9       	ldd	r25, Y+48	; 0x30
    23ae:	9c a7       	std	Y+44, r25	; 0x2c
    23b0:	8b a7       	std	Y+43, r24	; 0x2b
    23b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    23b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    23b6:	01 97       	sbiw	r24, 0x01	; 1
    23b8:	f1 f7       	brne	.-4      	; 0x23b6 <latchbyte+0x2ca>
    23ba:	9c a7       	std	Y+44, r25	; 0x2c
    23bc:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10);
		DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, LOW);
    23be:	89 e3       	ldi	r24, 0x39	; 57
    23c0:	90 e0       	ldi	r25, 0x00	; 0
    23c2:	62 e0       	ldi	r22, 0x02	; 2
    23c4:	40 e0       	ldi	r20, 0x00	; 0
    23c6:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    23ca:	80 e0       	ldi	r24, 0x00	; 0
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	a0 e2       	ldi	r26, 0x20	; 32
    23d0:	b1 e4       	ldi	r27, 0x41	; 65
    23d2:	8f a3       	std	Y+39, r24	; 0x27
    23d4:	98 a7       	std	Y+40, r25	; 0x28
    23d6:	a9 a7       	std	Y+41, r26	; 0x29
    23d8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23da:	6f a1       	ldd	r22, Y+39	; 0x27
    23dc:	78 a5       	ldd	r23, Y+40	; 0x28
    23de:	89 a5       	ldd	r24, Y+41	; 0x29
    23e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    23e2:	20 e0       	ldi	r18, 0x00	; 0
    23e4:	30 e0       	ldi	r19, 0x00	; 0
    23e6:	4a e7       	ldi	r20, 0x7A	; 122
    23e8:	55 e4       	ldi	r21, 0x45	; 69
    23ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ee:	dc 01       	movw	r26, r24
    23f0:	cb 01       	movw	r24, r22
    23f2:	8b a3       	std	Y+35, r24	; 0x23
    23f4:	9c a3       	std	Y+36, r25	; 0x24
    23f6:	ad a3       	std	Y+37, r26	; 0x25
    23f8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    23fa:	6b a1       	ldd	r22, Y+35	; 0x23
    23fc:	7c a1       	ldd	r23, Y+36	; 0x24
    23fe:	8d a1       	ldd	r24, Y+37	; 0x25
    2400:	9e a1       	ldd	r25, Y+38	; 0x26
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e8       	ldi	r20, 0x80	; 128
    2408:	5f e3       	ldi	r21, 0x3F	; 63
    240a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    240e:	88 23       	and	r24, r24
    2410:	2c f4       	brge	.+10     	; 0x241c <latchbyte+0x330>
		__ticks = 1;
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	90 e0       	ldi	r25, 0x00	; 0
    2416:	9a a3       	std	Y+34, r25	; 0x22
    2418:	89 a3       	std	Y+33, r24	; 0x21
    241a:	3f c0       	rjmp	.+126    	; 0x249a <latchbyte+0x3ae>
	else if (__tmp > 65535)
    241c:	6b a1       	ldd	r22, Y+35	; 0x23
    241e:	7c a1       	ldd	r23, Y+36	; 0x24
    2420:	8d a1       	ldd	r24, Y+37	; 0x25
    2422:	9e a1       	ldd	r25, Y+38	; 0x26
    2424:	20 e0       	ldi	r18, 0x00	; 0
    2426:	3f ef       	ldi	r19, 0xFF	; 255
    2428:	4f e7       	ldi	r20, 0x7F	; 127
    242a:	57 e4       	ldi	r21, 0x47	; 71
    242c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2430:	18 16       	cp	r1, r24
    2432:	4c f5       	brge	.+82     	; 0x2486 <latchbyte+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2434:	6f a1       	ldd	r22, Y+39	; 0x27
    2436:	78 a5       	ldd	r23, Y+40	; 0x28
    2438:	89 a5       	ldd	r24, Y+41	; 0x29
    243a:	9a a5       	ldd	r25, Y+42	; 0x2a
    243c:	20 e0       	ldi	r18, 0x00	; 0
    243e:	30 e0       	ldi	r19, 0x00	; 0
    2440:	40 e2       	ldi	r20, 0x20	; 32
    2442:	51 e4       	ldi	r21, 0x41	; 65
    2444:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2448:	dc 01       	movw	r26, r24
    244a:	cb 01       	movw	r24, r22
    244c:	bc 01       	movw	r22, r24
    244e:	cd 01       	movw	r24, r26
    2450:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2454:	dc 01       	movw	r26, r24
    2456:	cb 01       	movw	r24, r22
    2458:	9a a3       	std	Y+34, r25	; 0x22
    245a:	89 a3       	std	Y+33, r24	; 0x21
    245c:	0f c0       	rjmp	.+30     	; 0x247c <latchbyte+0x390>
    245e:	80 e9       	ldi	r24, 0x90	; 144
    2460:	91 e0       	ldi	r25, 0x01	; 1
    2462:	98 a3       	std	Y+32, r25	; 0x20
    2464:	8f 8f       	std	Y+31, r24	; 0x1f
    2466:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2468:	98 a1       	ldd	r25, Y+32	; 0x20
    246a:	01 97       	sbiw	r24, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <latchbyte+0x37e>
    246e:	98 a3       	std	Y+32, r25	; 0x20
    2470:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2472:	89 a1       	ldd	r24, Y+33	; 0x21
    2474:	9a a1       	ldd	r25, Y+34	; 0x22
    2476:	01 97       	sbiw	r24, 0x01	; 1
    2478:	9a a3       	std	Y+34, r25	; 0x22
    247a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    247c:	89 a1       	ldd	r24, Y+33	; 0x21
    247e:	9a a1       	ldd	r25, Y+34	; 0x22
    2480:	00 97       	sbiw	r24, 0x00	; 0
    2482:	69 f7       	brne	.-38     	; 0x245e <latchbyte+0x372>
    2484:	14 c0       	rjmp	.+40     	; 0x24ae <latchbyte+0x3c2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2486:	6b a1       	ldd	r22, Y+35	; 0x23
    2488:	7c a1       	ldd	r23, Y+36	; 0x24
    248a:	8d a1       	ldd	r24, Y+37	; 0x25
    248c:	9e a1       	ldd	r25, Y+38	; 0x26
    248e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2492:	dc 01       	movw	r26, r24
    2494:	cb 01       	movw	r24, r22
    2496:	9a a3       	std	Y+34, r25	; 0x22
    2498:	89 a3       	std	Y+33, r24	; 0x21
    249a:	89 a1       	ldd	r24, Y+33	; 0x21
    249c:	9a a1       	ldd	r25, Y+34	; 0x22
    249e:	9e 8f       	std	Y+30, r25	; 0x1e
    24a0:	8d 8f       	std	Y+29, r24	; 0x1d
    24a2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    24a4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    24a6:	01 97       	sbiw	r24, 0x01	; 1
    24a8:	f1 f7       	brne	.-4      	; 0x24a6 <latchbyte+0x3ba>
    24aa:	9e 8f       	std	Y+30, r25	; 0x1e
    24ac:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(10);
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D4_PIN, GET_BIT(copy_u8Byte,0));
    24ae:	fe 01       	movw	r30, r28
    24b0:	e9 5b       	subi	r30, 0xB9	; 185
    24b2:	ff 4f       	sbci	r31, 0xFF	; 255
    24b4:	80 81       	ld	r24, Z
    24b6:	28 2f       	mov	r18, r24
    24b8:	21 70       	andi	r18, 0x01	; 1
    24ba:	86 e3       	ldi	r24, 0x36	; 54
    24bc:	90 e0       	ldi	r25, 0x00	; 0
    24be:	60 e0       	ldi	r22, 0x00	; 0
    24c0:	42 2f       	mov	r20, r18
    24c2:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D5_PIN, GET_BIT(copy_u8Byte,1));
    24c6:	fe 01       	movw	r30, r28
    24c8:	e9 5b       	subi	r30, 0xB9	; 185
    24ca:	ff 4f       	sbci	r31, 0xFF	; 255
    24cc:	80 81       	ld	r24, Z
    24ce:	88 2f       	mov	r24, r24
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	82 70       	andi	r24, 0x02	; 2
    24d4:	90 70       	andi	r25, 0x00	; 0
    24d6:	95 95       	asr	r25
    24d8:	87 95       	ror	r24
    24da:	28 2f       	mov	r18, r24
    24dc:	86 e3       	ldi	r24, 0x36	; 54
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	61 e0       	ldi	r22, 0x01	; 1
    24e2:	42 2f       	mov	r20, r18
    24e4:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D6_PIN, GET_BIT(copy_u8Byte,2));
    24e8:	fe 01       	movw	r30, r28
    24ea:	e9 5b       	subi	r30, 0xB9	; 185
    24ec:	ff 4f       	sbci	r31, 0xFF	; 255
    24ee:	80 81       	ld	r24, Z
    24f0:	88 2f       	mov	r24, r24
    24f2:	90 e0       	ldi	r25, 0x00	; 0
    24f4:	84 70       	andi	r24, 0x04	; 4
    24f6:	90 70       	andi	r25, 0x00	; 0
    24f8:	95 95       	asr	r25
    24fa:	87 95       	ror	r24
    24fc:	95 95       	asr	r25
    24fe:	87 95       	ror	r24
    2500:	28 2f       	mov	r18, r24
    2502:	86 e3       	ldi	r24, 0x36	; 54
    2504:	90 e0       	ldi	r25, 0x00	; 0
    2506:	62 e0       	ldi	r22, 0x02	; 2
    2508:	42 2f       	mov	r20, r18
    250a:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_DATA_PORT, LCD_D7_PIN, GET_BIT(copy_u8Byte,3));
    250e:	fe 01       	movw	r30, r28
    2510:	e9 5b       	subi	r30, 0xB9	; 185
    2512:	ff 4f       	sbci	r31, 0xFF	; 255
    2514:	80 81       	ld	r24, Z
    2516:	88 2f       	mov	r24, r24
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	88 70       	andi	r24, 0x08	; 8
    251c:	90 70       	andi	r25, 0x00	; 0
    251e:	95 95       	asr	r25
    2520:	87 95       	ror	r24
    2522:	95 95       	asr	r25
    2524:	87 95       	ror	r24
    2526:	95 95       	asr	r25
    2528:	87 95       	ror	r24
    252a:	28 2f       	mov	r18, r24
    252c:	86 e3       	ldi	r24, 0x36	; 54
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	64 e0       	ldi	r22, 0x04	; 4
    2532:	42 2f       	mov	r20, r18
    2534:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, HIGH);
    2538:	89 e3       	ldi	r24, 0x39	; 57
    253a:	90 e0       	ldi	r25, 0x00	; 0
    253c:	62 e0       	ldi	r22, 0x02	; 2
    253e:	41 e0       	ldi	r20, 0x01	; 1
    2540:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    2544:	80 e0       	ldi	r24, 0x00	; 0
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	a0 e2       	ldi	r26, 0x20	; 32
    254a:	b1 e4       	ldi	r27, 0x41	; 65
    254c:	89 8f       	std	Y+25, r24	; 0x19
    254e:	9a 8f       	std	Y+26, r25	; 0x1a
    2550:	ab 8f       	std	Y+27, r26	; 0x1b
    2552:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2554:	69 8d       	ldd	r22, Y+25	; 0x19
    2556:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2558:	8b 8d       	ldd	r24, Y+27	; 0x1b
    255a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	4a e7       	ldi	r20, 0x7A	; 122
    2562:	55 e4       	ldi	r21, 0x45	; 69
    2564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	8d 8b       	std	Y+21, r24	; 0x15
    256e:	9e 8b       	std	Y+22, r25	; 0x16
    2570:	af 8b       	std	Y+23, r26	; 0x17
    2572:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2574:	6d 89       	ldd	r22, Y+21	; 0x15
    2576:	7e 89       	ldd	r23, Y+22	; 0x16
    2578:	8f 89       	ldd	r24, Y+23	; 0x17
    257a:	98 8d       	ldd	r25, Y+24	; 0x18
    257c:	20 e0       	ldi	r18, 0x00	; 0
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	40 e8       	ldi	r20, 0x80	; 128
    2582:	5f e3       	ldi	r21, 0x3F	; 63
    2584:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2588:	88 23       	and	r24, r24
    258a:	2c f4       	brge	.+10     	; 0x2596 <latchbyte+0x4aa>
		__ticks = 1;
    258c:	81 e0       	ldi	r24, 0x01	; 1
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	9c 8b       	std	Y+20, r25	; 0x14
    2592:	8b 8b       	std	Y+19, r24	; 0x13
    2594:	3f c0       	rjmp	.+126    	; 0x2614 <latchbyte+0x528>
	else if (__tmp > 65535)
    2596:	6d 89       	ldd	r22, Y+21	; 0x15
    2598:	7e 89       	ldd	r23, Y+22	; 0x16
    259a:	8f 89       	ldd	r24, Y+23	; 0x17
    259c:	98 8d       	ldd	r25, Y+24	; 0x18
    259e:	20 e0       	ldi	r18, 0x00	; 0
    25a0:	3f ef       	ldi	r19, 0xFF	; 255
    25a2:	4f e7       	ldi	r20, 0x7F	; 127
    25a4:	57 e4       	ldi	r21, 0x47	; 71
    25a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25aa:	18 16       	cp	r1, r24
    25ac:	4c f5       	brge	.+82     	; 0x2600 <latchbyte+0x514>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ae:	69 8d       	ldd	r22, Y+25	; 0x19
    25b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25b6:	20 e0       	ldi	r18, 0x00	; 0
    25b8:	30 e0       	ldi	r19, 0x00	; 0
    25ba:	40 e2       	ldi	r20, 0x20	; 32
    25bc:	51 e4       	ldi	r21, 0x41	; 65
    25be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c2:	dc 01       	movw	r26, r24
    25c4:	cb 01       	movw	r24, r22
    25c6:	bc 01       	movw	r22, r24
    25c8:	cd 01       	movw	r24, r26
    25ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25ce:	dc 01       	movw	r26, r24
    25d0:	cb 01       	movw	r24, r22
    25d2:	9c 8b       	std	Y+20, r25	; 0x14
    25d4:	8b 8b       	std	Y+19, r24	; 0x13
    25d6:	0f c0       	rjmp	.+30     	; 0x25f6 <latchbyte+0x50a>
    25d8:	80 e9       	ldi	r24, 0x90	; 144
    25da:	91 e0       	ldi	r25, 0x01	; 1
    25dc:	9a 8b       	std	Y+18, r25	; 0x12
    25de:	89 8b       	std	Y+17, r24	; 0x11
    25e0:	89 89       	ldd	r24, Y+17	; 0x11
    25e2:	9a 89       	ldd	r25, Y+18	; 0x12
    25e4:	01 97       	sbiw	r24, 0x01	; 1
    25e6:	f1 f7       	brne	.-4      	; 0x25e4 <latchbyte+0x4f8>
    25e8:	9a 8b       	std	Y+18, r25	; 0x12
    25ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25ec:	8b 89       	ldd	r24, Y+19	; 0x13
    25ee:	9c 89       	ldd	r25, Y+20	; 0x14
    25f0:	01 97       	sbiw	r24, 0x01	; 1
    25f2:	9c 8b       	std	Y+20, r25	; 0x14
    25f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25f6:	8b 89       	ldd	r24, Y+19	; 0x13
    25f8:	9c 89       	ldd	r25, Y+20	; 0x14
    25fa:	00 97       	sbiw	r24, 0x00	; 0
    25fc:	69 f7       	brne	.-38     	; 0x25d8 <latchbyte+0x4ec>
    25fe:	14 c0       	rjmp	.+40     	; 0x2628 <latchbyte+0x53c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2600:	6d 89       	ldd	r22, Y+21	; 0x15
    2602:	7e 89       	ldd	r23, Y+22	; 0x16
    2604:	8f 89       	ldd	r24, Y+23	; 0x17
    2606:	98 8d       	ldd	r25, Y+24	; 0x18
    2608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	9c 8b       	std	Y+20, r25	; 0x14
    2612:	8b 8b       	std	Y+19, r24	; 0x13
    2614:	8b 89       	ldd	r24, Y+19	; 0x13
    2616:	9c 89       	ldd	r25, Y+20	; 0x14
    2618:	98 8b       	std	Y+16, r25	; 0x10
    261a:	8f 87       	std	Y+15, r24	; 0x0f
    261c:	8f 85       	ldd	r24, Y+15	; 0x0f
    261e:	98 89       	ldd	r25, Y+16	; 0x10
    2620:	01 97       	sbiw	r24, 0x01	; 1
    2622:	f1 f7       	brne	.-4      	; 0x2620 <latchbyte+0x534>
    2624:	98 8b       	std	Y+16, r25	; 0x10
    2626:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(10);
		DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_EN_PIN, LOW);
    2628:	89 e3       	ldi	r24, 0x39	; 57
    262a:	90 e0       	ldi	r25, 0x00	; 0
    262c:	62 e0       	ldi	r22, 0x02	; 2
    262e:	40 e0       	ldi	r20, 0x00	; 0
    2630:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    2634:	80 e0       	ldi	r24, 0x00	; 0
    2636:	90 e0       	ldi	r25, 0x00	; 0
    2638:	a8 e4       	ldi	r26, 0x48	; 72
    263a:	b2 e4       	ldi	r27, 0x42	; 66
    263c:	8b 87       	std	Y+11, r24	; 0x0b
    263e:	9c 87       	std	Y+12, r25	; 0x0c
    2640:	ad 87       	std	Y+13, r26	; 0x0d
    2642:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2644:	6b 85       	ldd	r22, Y+11	; 0x0b
    2646:	7c 85       	ldd	r23, Y+12	; 0x0c
    2648:	8d 85       	ldd	r24, Y+13	; 0x0d
    264a:	9e 85       	ldd	r25, Y+14	; 0x0e
    264c:	20 e0       	ldi	r18, 0x00	; 0
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	4a e7       	ldi	r20, 0x7A	; 122
    2652:	55 e4       	ldi	r21, 0x45	; 69
    2654:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2658:	dc 01       	movw	r26, r24
    265a:	cb 01       	movw	r24, r22
    265c:	8f 83       	std	Y+7, r24	; 0x07
    265e:	98 87       	std	Y+8, r25	; 0x08
    2660:	a9 87       	std	Y+9, r26	; 0x09
    2662:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2664:	6f 81       	ldd	r22, Y+7	; 0x07
    2666:	78 85       	ldd	r23, Y+8	; 0x08
    2668:	89 85       	ldd	r24, Y+9	; 0x09
    266a:	9a 85       	ldd	r25, Y+10	; 0x0a
    266c:	20 e0       	ldi	r18, 0x00	; 0
    266e:	30 e0       	ldi	r19, 0x00	; 0
    2670:	40 e8       	ldi	r20, 0x80	; 128
    2672:	5f e3       	ldi	r21, 0x3F	; 63
    2674:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2678:	88 23       	and	r24, r24
    267a:	2c f4       	brge	.+10     	; 0x2686 <latchbyte+0x59a>
		__ticks = 1;
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	90 e0       	ldi	r25, 0x00	; 0
    2680:	9e 83       	std	Y+6, r25	; 0x06
    2682:	8d 83       	std	Y+5, r24	; 0x05
    2684:	3f c0       	rjmp	.+126    	; 0x2704 <latchbyte+0x618>
	else if (__tmp > 65535)
    2686:	6f 81       	ldd	r22, Y+7	; 0x07
    2688:	78 85       	ldd	r23, Y+8	; 0x08
    268a:	89 85       	ldd	r24, Y+9	; 0x09
    268c:	9a 85       	ldd	r25, Y+10	; 0x0a
    268e:	20 e0       	ldi	r18, 0x00	; 0
    2690:	3f ef       	ldi	r19, 0xFF	; 255
    2692:	4f e7       	ldi	r20, 0x7F	; 127
    2694:	57 e4       	ldi	r21, 0x47	; 71
    2696:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    269a:	18 16       	cp	r1, r24
    269c:	4c f5       	brge	.+82     	; 0x26f0 <latchbyte+0x604>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    269e:	6b 85       	ldd	r22, Y+11	; 0x0b
    26a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    26a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    26a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    26a6:	20 e0       	ldi	r18, 0x00	; 0
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	40 e2       	ldi	r20, 0x20	; 32
    26ac:	51 e4       	ldi	r21, 0x41	; 65
    26ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26b2:	dc 01       	movw	r26, r24
    26b4:	cb 01       	movw	r24, r22
    26b6:	bc 01       	movw	r22, r24
    26b8:	cd 01       	movw	r24, r26
    26ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26be:	dc 01       	movw	r26, r24
    26c0:	cb 01       	movw	r24, r22
    26c2:	9e 83       	std	Y+6, r25	; 0x06
    26c4:	8d 83       	std	Y+5, r24	; 0x05
    26c6:	0f c0       	rjmp	.+30     	; 0x26e6 <latchbyte+0x5fa>
    26c8:	80 e9       	ldi	r24, 0x90	; 144
    26ca:	91 e0       	ldi	r25, 0x01	; 1
    26cc:	9c 83       	std	Y+4, r25	; 0x04
    26ce:	8b 83       	std	Y+3, r24	; 0x03
    26d0:	8b 81       	ldd	r24, Y+3	; 0x03
    26d2:	9c 81       	ldd	r25, Y+4	; 0x04
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	f1 f7       	brne	.-4      	; 0x26d4 <latchbyte+0x5e8>
    26d8:	9c 83       	std	Y+4, r25	; 0x04
    26da:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26dc:	8d 81       	ldd	r24, Y+5	; 0x05
    26de:	9e 81       	ldd	r25, Y+6	; 0x06
    26e0:	01 97       	sbiw	r24, 0x01	; 1
    26e2:	9e 83       	std	Y+6, r25	; 0x06
    26e4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26e6:	8d 81       	ldd	r24, Y+5	; 0x05
    26e8:	9e 81       	ldd	r25, Y+6	; 0x06
    26ea:	00 97       	sbiw	r24, 0x00	; 0
    26ec:	69 f7       	brne	.-38     	; 0x26c8 <latchbyte+0x5dc>
    26ee:	14 c0       	rjmp	.+40     	; 0x2718 <latchbyte+0x62c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26f0:	6f 81       	ldd	r22, Y+7	; 0x07
    26f2:	78 85       	ldd	r23, Y+8	; 0x08
    26f4:	89 85       	ldd	r24, Y+9	; 0x09
    26f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fc:	dc 01       	movw	r26, r24
    26fe:	cb 01       	movw	r24, r22
    2700:	9e 83       	std	Y+6, r25	; 0x06
    2702:	8d 83       	std	Y+5, r24	; 0x05
    2704:	8d 81       	ldd	r24, Y+5	; 0x05
    2706:	9e 81       	ldd	r25, Y+6	; 0x06
    2708:	9a 83       	std	Y+2, r25	; 0x02
    270a:	89 83       	std	Y+1, r24	; 0x01
    270c:	89 81       	ldd	r24, Y+1	; 0x01
    270e:	9a 81       	ldd	r25, Y+2	; 0x02
    2710:	01 97       	sbiw	r24, 0x01	; 1
    2712:	f1 f7       	brne	.-4      	; 0x2710 <latchbyte+0x624>
    2714:	9a 83       	std	Y+2, r25	; 0x02
    2716:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(50);

	}
#endif
}
    2718:	c9 5b       	subi	r28, 0xB9	; 185
    271a:	df 4f       	sbci	r29, 0xFF	; 255
    271c:	0f b6       	in	r0, 0x3f	; 63
    271e:	f8 94       	cli
    2720:	de bf       	out	0x3e, r29	; 62
    2722:	0f be       	out	0x3f, r0	; 63
    2724:	cd bf       	out	0x3d, r28	; 61
    2726:	cf 91       	pop	r28
    2728:	df 91       	pop	r29
    272a:	1f 91       	pop	r17
    272c:	0f 91       	pop	r16
    272e:	08 95       	ret

00002730 <H_LCD_void_IniT>:



/*Initialization of LCD with the required mode and configuration*/
void H_LCD_void_IniT (void)
{
    2730:	df 93       	push	r29
    2732:	cf 93       	push	r28
    2734:	cd b7       	in	r28, 0x3d	; 61
    2736:	de b7       	in	r29, 0x3e	; 62
    2738:	6c 97       	sbiw	r28, 0x1c	; 28
    273a:	0f b6       	in	r0, 0x3f	; 63
    273c:	f8 94       	cli
    273e:	de bf       	out	0x3e, r29	; 62
    2740:	0f be       	out	0x3f, r0	; 63
    2742:	cd bf       	out	0x3d, r28	; 61
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	a0 ef       	ldi	r26, 0xF0	; 240
    274a:	b1 e4       	ldi	r27, 0x41	; 65
    274c:	89 8f       	std	Y+25, r24	; 0x19
    274e:	9a 8f       	std	Y+26, r25	; 0x1a
    2750:	ab 8f       	std	Y+27, r26	; 0x1b
    2752:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2754:	69 8d       	ldd	r22, Y+25	; 0x19
    2756:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2758:	8b 8d       	ldd	r24, Y+27	; 0x1b
    275a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    275c:	20 e0       	ldi	r18, 0x00	; 0
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	4a e7       	ldi	r20, 0x7A	; 122
    2762:	55 e4       	ldi	r21, 0x45	; 69
    2764:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	8d 8b       	std	Y+21, r24	; 0x15
    276e:	9e 8b       	std	Y+22, r25	; 0x16
    2770:	af 8b       	std	Y+23, r26	; 0x17
    2772:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2774:	6d 89       	ldd	r22, Y+21	; 0x15
    2776:	7e 89       	ldd	r23, Y+22	; 0x16
    2778:	8f 89       	ldd	r24, Y+23	; 0x17
    277a:	98 8d       	ldd	r25, Y+24	; 0x18
    277c:	20 e0       	ldi	r18, 0x00	; 0
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	40 e8       	ldi	r20, 0x80	; 128
    2782:	5f e3       	ldi	r21, 0x3F	; 63
    2784:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2788:	88 23       	and	r24, r24
    278a:	2c f4       	brge	.+10     	; 0x2796 <H_LCD_void_IniT+0x66>
		__ticks = 1;
    278c:	81 e0       	ldi	r24, 0x01	; 1
    278e:	90 e0       	ldi	r25, 0x00	; 0
    2790:	9c 8b       	std	Y+20, r25	; 0x14
    2792:	8b 8b       	std	Y+19, r24	; 0x13
    2794:	3f c0       	rjmp	.+126    	; 0x2814 <H_LCD_void_IniT+0xe4>
	else if (__tmp > 65535)
    2796:	6d 89       	ldd	r22, Y+21	; 0x15
    2798:	7e 89       	ldd	r23, Y+22	; 0x16
    279a:	8f 89       	ldd	r24, Y+23	; 0x17
    279c:	98 8d       	ldd	r25, Y+24	; 0x18
    279e:	20 e0       	ldi	r18, 0x00	; 0
    27a0:	3f ef       	ldi	r19, 0xFF	; 255
    27a2:	4f e7       	ldi	r20, 0x7F	; 127
    27a4:	57 e4       	ldi	r21, 0x47	; 71
    27a6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27aa:	18 16       	cp	r1, r24
    27ac:	4c f5       	brge	.+82     	; 0x2800 <H_LCD_void_IniT+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27ae:	69 8d       	ldd	r22, Y+25	; 0x19
    27b0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27b2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27b4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27b6:	20 e0       	ldi	r18, 0x00	; 0
    27b8:	30 e0       	ldi	r19, 0x00	; 0
    27ba:	40 e2       	ldi	r20, 0x20	; 32
    27bc:	51 e4       	ldi	r21, 0x41	; 65
    27be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27c2:	dc 01       	movw	r26, r24
    27c4:	cb 01       	movw	r24, r22
    27c6:	bc 01       	movw	r22, r24
    27c8:	cd 01       	movw	r24, r26
    27ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ce:	dc 01       	movw	r26, r24
    27d0:	cb 01       	movw	r24, r22
    27d2:	9c 8b       	std	Y+20, r25	; 0x14
    27d4:	8b 8b       	std	Y+19, r24	; 0x13
    27d6:	0f c0       	rjmp	.+30     	; 0x27f6 <H_LCD_void_IniT+0xc6>
    27d8:	80 e9       	ldi	r24, 0x90	; 144
    27da:	91 e0       	ldi	r25, 0x01	; 1
    27dc:	9a 8b       	std	Y+18, r25	; 0x12
    27de:	89 8b       	std	Y+17, r24	; 0x11
    27e0:	89 89       	ldd	r24, Y+17	; 0x11
    27e2:	9a 89       	ldd	r25, Y+18	; 0x12
    27e4:	01 97       	sbiw	r24, 0x01	; 1
    27e6:	f1 f7       	brne	.-4      	; 0x27e4 <H_LCD_void_IniT+0xb4>
    27e8:	9a 8b       	std	Y+18, r25	; 0x12
    27ea:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ec:	8b 89       	ldd	r24, Y+19	; 0x13
    27ee:	9c 89       	ldd	r25, Y+20	; 0x14
    27f0:	01 97       	sbiw	r24, 0x01	; 1
    27f2:	9c 8b       	std	Y+20, r25	; 0x14
    27f4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27f6:	8b 89       	ldd	r24, Y+19	; 0x13
    27f8:	9c 89       	ldd	r25, Y+20	; 0x14
    27fa:	00 97       	sbiw	r24, 0x00	; 0
    27fc:	69 f7       	brne	.-38     	; 0x27d8 <H_LCD_void_IniT+0xa8>
    27fe:	14 c0       	rjmp	.+40     	; 0x2828 <H_LCD_void_IniT+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2800:	6d 89       	ldd	r22, Y+21	; 0x15
    2802:	7e 89       	ldd	r23, Y+22	; 0x16
    2804:	8f 89       	ldd	r24, Y+23	; 0x17
    2806:	98 8d       	ldd	r25, Y+24	; 0x18
    2808:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    280c:	dc 01       	movw	r26, r24
    280e:	cb 01       	movw	r24, r22
    2810:	9c 8b       	std	Y+20, r25	; 0x14
    2812:	8b 8b       	std	Y+19, r24	; 0x13
    2814:	8b 89       	ldd	r24, Y+19	; 0x13
    2816:	9c 89       	ldd	r25, Y+20	; 0x14
    2818:	98 8b       	std	Y+16, r25	; 0x10
    281a:	8f 87       	std	Y+15, r24	; 0x0f
    281c:	8f 85       	ldd	r24, Y+15	; 0x0f
    281e:	98 89       	ldd	r25, Y+16	; 0x10
    2820:	01 97       	sbiw	r24, 0x01	; 1
    2822:	f1 f7       	brne	.-4      	; 0x2820 <H_LCD_void_IniT+0xf0>
    2824:	98 8b       	std	Y+16, r25	; 0x10
    2826:	8f 87       	std	Y+15, r24	; 0x0f
	/*Configure the direction of RS and E pins as o/p pins*/
	_delay_ms(30);
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, LCD_RS_PIN, Pin_OUTPUT);
    2828:	89 e3       	ldi	r24, 0x39	; 57
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	63 e0       	ldi	r22, 0x03	; 3
    282e:	41 e0       	ldi	r20, 0x01	; 1
    2830:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(LCD_CONTROL_PORT, LCD_EN_PIN, Pin_OUTPUT);
    2834:	89 e3       	ldi	r24, 0x39	; 57
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	62 e0       	ldi	r22, 0x02	; 2
    283a:	41 e0       	ldi	r20, 0x01	; 1
    283c:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	a0 ea       	ldi	r26, 0xA0	; 160
    2846:	b1 e4       	ldi	r27, 0x41	; 65
    2848:	8b 87       	std	Y+11, r24	; 0x0b
    284a:	9c 87       	std	Y+12, r25	; 0x0c
    284c:	ad 87       	std	Y+13, r26	; 0x0d
    284e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2850:	6b 85       	ldd	r22, Y+11	; 0x0b
    2852:	7c 85       	ldd	r23, Y+12	; 0x0c
    2854:	8d 85       	ldd	r24, Y+13	; 0x0d
    2856:	9e 85       	ldd	r25, Y+14	; 0x0e
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	4a e7       	ldi	r20, 0x7A	; 122
    285e:	55 e4       	ldi	r21, 0x45	; 69
    2860:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	8f 83       	std	Y+7, r24	; 0x07
    286a:	98 87       	std	Y+8, r25	; 0x08
    286c:	a9 87       	std	Y+9, r26	; 0x09
    286e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2870:	6f 81       	ldd	r22, Y+7	; 0x07
    2872:	78 85       	ldd	r23, Y+8	; 0x08
    2874:	89 85       	ldd	r24, Y+9	; 0x09
    2876:	9a 85       	ldd	r25, Y+10	; 0x0a
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e8       	ldi	r20, 0x80	; 128
    287e:	5f e3       	ldi	r21, 0x3F	; 63
    2880:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2884:	88 23       	and	r24, r24
    2886:	2c f4       	brge	.+10     	; 0x2892 <H_LCD_void_IniT+0x162>
		__ticks = 1;
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	9e 83       	std	Y+6, r25	; 0x06
    288e:	8d 83       	std	Y+5, r24	; 0x05
    2890:	3f c0       	rjmp	.+126    	; 0x2910 <H_LCD_void_IniT+0x1e0>
	else if (__tmp > 65535)
    2892:	6f 81       	ldd	r22, Y+7	; 0x07
    2894:	78 85       	ldd	r23, Y+8	; 0x08
    2896:	89 85       	ldd	r24, Y+9	; 0x09
    2898:	9a 85       	ldd	r25, Y+10	; 0x0a
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	3f ef       	ldi	r19, 0xFF	; 255
    289e:	4f e7       	ldi	r20, 0x7F	; 127
    28a0:	57 e4       	ldi	r21, 0x47	; 71
    28a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28a6:	18 16       	cp	r1, r24
    28a8:	4c f5       	brge	.+82     	; 0x28fc <H_LCD_void_IniT+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28aa:	6b 85       	ldd	r22, Y+11	; 0x0b
    28ac:	7c 85       	ldd	r23, Y+12	; 0x0c
    28ae:	8d 85       	ldd	r24, Y+13	; 0x0d
    28b0:	9e 85       	ldd	r25, Y+14	; 0x0e
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	40 e2       	ldi	r20, 0x20	; 32
    28b8:	51 e4       	ldi	r21, 0x41	; 65
    28ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	bc 01       	movw	r22, r24
    28c4:	cd 01       	movw	r24, r26
    28c6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	9e 83       	std	Y+6, r25	; 0x06
    28d0:	8d 83       	std	Y+5, r24	; 0x05
    28d2:	0f c0       	rjmp	.+30     	; 0x28f2 <H_LCD_void_IniT+0x1c2>
    28d4:	80 e9       	ldi	r24, 0x90	; 144
    28d6:	91 e0       	ldi	r25, 0x01	; 1
    28d8:	9c 83       	std	Y+4, r25	; 0x04
    28da:	8b 83       	std	Y+3, r24	; 0x03
    28dc:	8b 81       	ldd	r24, Y+3	; 0x03
    28de:	9c 81       	ldd	r25, Y+4	; 0x04
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	f1 f7       	brne	.-4      	; 0x28e0 <H_LCD_void_IniT+0x1b0>
    28e4:	9c 83       	std	Y+4, r25	; 0x04
    28e6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ea:	9e 81       	ldd	r25, Y+6	; 0x06
    28ec:	01 97       	sbiw	r24, 0x01	; 1
    28ee:	9e 83       	std	Y+6, r25	; 0x06
    28f0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f2:	8d 81       	ldd	r24, Y+5	; 0x05
    28f4:	9e 81       	ldd	r25, Y+6	; 0x06
    28f6:	00 97       	sbiw	r24, 0x00	; 0
    28f8:	69 f7       	brne	.-38     	; 0x28d4 <H_LCD_void_IniT+0x1a4>
    28fa:	14 c0       	rjmp	.+40     	; 0x2924 <H_LCD_void_IniT+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28fc:	6f 81       	ldd	r22, Y+7	; 0x07
    28fe:	78 85       	ldd	r23, Y+8	; 0x08
    2900:	89 85       	ldd	r24, Y+9	; 0x09
    2902:	9a 85       	ldd	r25, Y+10	; 0x0a
    2904:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	9e 83       	std	Y+6, r25	; 0x06
    290e:	8d 83       	std	Y+5, r24	; 0x05
    2910:	8d 81       	ldd	r24, Y+5	; 0x05
    2912:	9e 81       	ldd	r25, Y+6	; 0x06
    2914:	9a 83       	std	Y+2, r25	; 0x02
    2916:	89 83       	std	Y+1, r24	; 0x01
    2918:	89 81       	ldd	r24, Y+1	; 0x01
    291a:	9a 81       	ldd	r25, Y+2	; 0x02
    291c:	01 97       	sbiw	r24, 0x01	; 1
    291e:	f1 f7       	brne	.-4      	; 0x291c <H_LCD_void_IniT+0x1ec>
    2920:	9a 83       	std	Y+2, r25	; 0x02
    2922:	89 83       	std	Y+1, r24	; 0x01

	/*LCD power ON delay is always 15 ms*/
	_delay_ms(20);
#if(MODE == _4_BIT_MODE)
	{
		DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D4_PIN, Pin_OUTPUT);
    2924:	86 e3       	ldi	r24, 0x36	; 54
    2926:	90 e0       	ldi	r25, 0x00	; 0
    2928:	60 e0       	ldi	r22, 0x00	; 0
    292a:	41 e0       	ldi	r20, 0x01	; 1
    292c:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D5_PIN, Pin_OUTPUT);
    2930:	86 e3       	ldi	r24, 0x36	; 54
    2932:	90 e0       	ldi	r25, 0x00	; 0
    2934:	61 e0       	ldi	r22, 0x01	; 1
    2936:	41 e0       	ldi	r20, 0x01	; 1
    2938:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D6_PIN, Pin_OUTPUT);
    293c:	86 e3       	ldi	r24, 0x36	; 54
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	62 e0       	ldi	r22, 0x02	; 2
    2942:	41 e0       	ldi	r20, 0x01	; 1
    2944:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
		DIO_voidSetPinDirection(LCD_DATA_PORT, LCD_D7_PIN, Pin_OUTPUT);
    2948:	86 e3       	ldi	r24, 0x36	; 54
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	64 e0       	ldi	r22, 0x04	; 4
    294e:	41 e0       	ldi	r20, 0x01	; 1
    2950:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
		/*Send initialization commands for 4 bit mode*/
		H_LCD_void_sendCommand(LCD_MODE_2LINES_4BITS_INIT1);
    2954:	83 e3       	ldi	r24, 0x33	; 51
    2956:	0e 94 c2 14 	call	0x2984	; 0x2984 <H_LCD_void_sendCommand>
		H_LCD_void_sendCommand(LCD_MODE_2LINES_4BITS_INIT2);
    295a:	82 e3       	ldi	r24, 0x32	; 50
    295c:	0e 94 c2 14 	call	0x2984	; 0x2984 <H_LCD_void_sendCommand>

		/*choose the mode of operation of LCD*/
		H_LCD_void_sendCommand(LCD_MODE_2LINES_4BITS);
    2960:	88 e2       	ldi	r24, 0x28	; 40
    2962:	0e 94 c2 14 	call	0x2984	; 0x2984 <H_LCD_void_sendCommand>
		H_LCD_void_sendCommand(LCD_MODE_2LINES_8BITS);
	}
#endif

		/*Send initialization display commands*/
	H_LCD_void_sendCommand(LCD_DISPLAY_ON_CURSOR_OFF);
    2966:	8c e0       	ldi	r24, 0x0C	; 12
    2968:	0e 94 c2 14 	call	0x2984	; 0x2984 <H_LCD_void_sendCommand>
	H_LCD_void_sendCommand(LCD_CLEAR_DISPLAY_SCREEN);
    296c:	81 e0       	ldi	r24, 0x01	; 1
    296e:	0e 94 c2 14 	call	0x2984	; 0x2984 <H_LCD_void_sendCommand>
	}
    2972:	6c 96       	adiw	r28, 0x1c	; 28
    2974:	0f b6       	in	r0, 0x3f	; 63
    2976:	f8 94       	cli
    2978:	de bf       	out	0x3e, r29	; 62
    297a:	0f be       	out	0x3f, r0	; 63
    297c:	cd bf       	out	0x3d, r28	; 61
    297e:	cf 91       	pop	r28
    2980:	df 91       	pop	r29
    2982:	08 95       	ret

00002984 <H_LCD_void_sendCommand>:



/*Send the required command to the LCD*/
void H_LCD_void_sendCommand (uint8_t copy_u8command)
{
    2984:	df 93       	push	r29
    2986:	cf 93       	push	r28
    2988:	cd b7       	in	r28, 0x3d	; 61
    298a:	de b7       	in	r29, 0x3e	; 62
    298c:	2f 97       	sbiw	r28, 0x0f	; 15
    298e:	0f b6       	in	r0, 0x3f	; 63
    2990:	f8 94       	cli
    2992:	de bf       	out	0x3e, r29	; 62
    2994:	0f be       	out	0x3f, r0	; 63
    2996:	cd bf       	out	0x3d, r28	; 61
    2998:	8f 87       	std	Y+15, r24	; 0x0f
	/*RS = 0 for sending command*/
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, LOW);
    299a:	89 e3       	ldi	r24, 0x39	; 57
    299c:	90 e0       	ldi	r25, 0x00	; 0
    299e:	63 e0       	ldi	r22, 0x03	; 3
    29a0:	40 e0       	ldi	r20, 0x00	; 0
    29a2:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    29a6:	80 e0       	ldi	r24, 0x00	; 0
    29a8:	90 e0       	ldi	r25, 0x00	; 0
    29aa:	a0 e8       	ldi	r26, 0x80	; 128
    29ac:	bf e3       	ldi	r27, 0x3F	; 63
    29ae:	8b 87       	std	Y+11, r24	; 0x0b
    29b0:	9c 87       	std	Y+12, r25	; 0x0c
    29b2:	ad 87       	std	Y+13, r26	; 0x0d
    29b4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29b6:	6b 85       	ldd	r22, Y+11	; 0x0b
    29b8:	7c 85       	ldd	r23, Y+12	; 0x0c
    29ba:	8d 85       	ldd	r24, Y+13	; 0x0d
    29bc:	9e 85       	ldd	r25, Y+14	; 0x0e
    29be:	20 e0       	ldi	r18, 0x00	; 0
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	4a e7       	ldi	r20, 0x7A	; 122
    29c4:	55 e4       	ldi	r21, 0x45	; 69
    29c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29ca:	dc 01       	movw	r26, r24
    29cc:	cb 01       	movw	r24, r22
    29ce:	8f 83       	std	Y+7, r24	; 0x07
    29d0:	98 87       	std	Y+8, r25	; 0x08
    29d2:	a9 87       	std	Y+9, r26	; 0x09
    29d4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29d6:	6f 81       	ldd	r22, Y+7	; 0x07
    29d8:	78 85       	ldd	r23, Y+8	; 0x08
    29da:	89 85       	ldd	r24, Y+9	; 0x09
    29dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    29de:	20 e0       	ldi	r18, 0x00	; 0
    29e0:	30 e0       	ldi	r19, 0x00	; 0
    29e2:	40 e8       	ldi	r20, 0x80	; 128
    29e4:	5f e3       	ldi	r21, 0x3F	; 63
    29e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    29ea:	88 23       	and	r24, r24
    29ec:	2c f4       	brge	.+10     	; 0x29f8 <H_LCD_void_sendCommand+0x74>
		__ticks = 1;
    29ee:	81 e0       	ldi	r24, 0x01	; 1
    29f0:	90 e0       	ldi	r25, 0x00	; 0
    29f2:	9e 83       	std	Y+6, r25	; 0x06
    29f4:	8d 83       	std	Y+5, r24	; 0x05
    29f6:	3f c0       	rjmp	.+126    	; 0x2a76 <H_LCD_void_sendCommand+0xf2>
	else if (__tmp > 65535)
    29f8:	6f 81       	ldd	r22, Y+7	; 0x07
    29fa:	78 85       	ldd	r23, Y+8	; 0x08
    29fc:	89 85       	ldd	r24, Y+9	; 0x09
    29fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a00:	20 e0       	ldi	r18, 0x00	; 0
    2a02:	3f ef       	ldi	r19, 0xFF	; 255
    2a04:	4f e7       	ldi	r20, 0x7F	; 127
    2a06:	57 e4       	ldi	r21, 0x47	; 71
    2a08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a0c:	18 16       	cp	r1, r24
    2a0e:	4c f5       	brge	.+82     	; 0x2a62 <H_LCD_void_sendCommand+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a10:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a12:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a14:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a16:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a18:	20 e0       	ldi	r18, 0x00	; 0
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	40 e2       	ldi	r20, 0x20	; 32
    2a1e:	51 e4       	ldi	r21, 0x41	; 65
    2a20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a24:	dc 01       	movw	r26, r24
    2a26:	cb 01       	movw	r24, r22
    2a28:	bc 01       	movw	r22, r24
    2a2a:	cd 01       	movw	r24, r26
    2a2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	9e 83       	std	Y+6, r25	; 0x06
    2a36:	8d 83       	std	Y+5, r24	; 0x05
    2a38:	0f c0       	rjmp	.+30     	; 0x2a58 <H_LCD_void_sendCommand+0xd4>
    2a3a:	80 e9       	ldi	r24, 0x90	; 144
    2a3c:	91 e0       	ldi	r25, 0x01	; 1
    2a3e:	9c 83       	std	Y+4, r25	; 0x04
    2a40:	8b 83       	std	Y+3, r24	; 0x03
    2a42:	8b 81       	ldd	r24, Y+3	; 0x03
    2a44:	9c 81       	ldd	r25, Y+4	; 0x04
    2a46:	01 97       	sbiw	r24, 0x01	; 1
    2a48:	f1 f7       	brne	.-4      	; 0x2a46 <H_LCD_void_sendCommand+0xc2>
    2a4a:	9c 83       	std	Y+4, r25	; 0x04
    2a4c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a50:	9e 81       	ldd	r25, Y+6	; 0x06
    2a52:	01 97       	sbiw	r24, 0x01	; 1
    2a54:	9e 83       	std	Y+6, r25	; 0x06
    2a56:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a58:	8d 81       	ldd	r24, Y+5	; 0x05
    2a5a:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5c:	00 97       	sbiw	r24, 0x00	; 0
    2a5e:	69 f7       	brne	.-38     	; 0x2a3a <H_LCD_void_sendCommand+0xb6>
    2a60:	14 c0       	rjmp	.+40     	; 0x2a8a <H_LCD_void_sendCommand+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a62:	6f 81       	ldd	r22, Y+7	; 0x07
    2a64:	78 85       	ldd	r23, Y+8	; 0x08
    2a66:	89 85       	ldd	r24, Y+9	; 0x09
    2a68:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	9e 83       	std	Y+6, r25	; 0x06
    2a74:	8d 83       	std	Y+5, r24	; 0x05
    2a76:	8d 81       	ldd	r24, Y+5	; 0x05
    2a78:	9e 81       	ldd	r25, Y+6	; 0x06
    2a7a:	9a 83       	std	Y+2, r25	; 0x02
    2a7c:	89 83       	std	Y+1, r24	; 0x01
    2a7e:	89 81       	ldd	r24, Y+1	; 0x01
    2a80:	9a 81       	ldd	r25, Y+2	; 0x02
    2a82:	01 97       	sbiw	r24, 0x01	; 1
    2a84:	f1 f7       	brne	.-4      	; 0x2a82 <H_LCD_void_sendCommand+0xfe>
    2a86:	9a 83       	std	Y+2, r25	; 0x02
    2a88:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
	latchbyte(copy_u8command);
    2a8a:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a8c:	0e 94 76 10 	call	0x20ec	; 0x20ec <latchbyte>
}
    2a90:	2f 96       	adiw	r28, 0x0f	; 15
    2a92:	0f b6       	in	r0, 0x3f	; 63
    2a94:	f8 94       	cli
    2a96:	de bf       	out	0x3e, r29	; 62
    2a98:	0f be       	out	0x3f, r0	; 63
    2a9a:	cd bf       	out	0x3d, r28	; 61
    2a9c:	cf 91       	pop	r28
    2a9e:	df 91       	pop	r29
    2aa0:	08 95       	ret

00002aa2 <H_LCD_void_sendData>:


/*Display the required character on the LCD*/
void H_LCD_void_sendData(uint8_t copy_u8data)
{
    2aa2:	df 93       	push	r29
    2aa4:	cf 93       	push	r28
    2aa6:	0f 92       	push	r0
    2aa8:	cd b7       	in	r28, 0x3d	; 61
    2aaa:	de b7       	in	r29, 0x3e	; 62
    2aac:	89 83       	std	Y+1, r24	; 0x01
	DIO_voidSetPinValue(LCD_CONTROL_PORT, LCD_RS_PIN, HIGH);
    2aae:	89 e3       	ldi	r24, 0x39	; 57
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	63 e0       	ldi	r22, 0x03	; 3
    2ab4:	41 e0       	ldi	r20, 0x01	; 1
    2ab6:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
	latchbyte(copy_u8data);
    2aba:	89 81       	ldd	r24, Y+1	; 0x01
    2abc:	0e 94 76 10 	call	0x20ec	; 0x20ec <latchbyte>

}
    2ac0:	0f 90       	pop	r0
    2ac2:	cf 91       	pop	r28
    2ac4:	df 91       	pop	r29
    2ac6:	08 95       	ret

00002ac8 <H_LCD_void_sendString>:

/*Display the required string on the lCD*/
void H_LCD_void_sendString(const uint8_t *pstr)
{
    2ac8:	df 93       	push	r29
    2aca:	cf 93       	push	r28
    2acc:	00 d0       	rcall	.+0      	; 0x2ace <H_LCD_void_sendString+0x6>
    2ace:	cd b7       	in	r28, 0x3d	; 61
    2ad0:	de b7       	in	r29, 0x3e	; 62
    2ad2:	9a 83       	std	Y+2, r25	; 0x02
    2ad4:	89 83       	std	Y+1, r24	; 0x01
    2ad6:	0a c0       	rjmp	.+20     	; 0x2aec <H_LCD_void_sendString+0x24>
	while (*(pstr)!= NULL)
	{
		H_LCD_void_sendData(*pstr);
    2ad8:	e9 81       	ldd	r30, Y+1	; 0x01
    2ada:	fa 81       	ldd	r31, Y+2	; 0x02
    2adc:	80 81       	ld	r24, Z
    2ade:	0e 94 51 15 	call	0x2aa2	; 0x2aa2 <H_LCD_void_sendData>
		pstr++;
    2ae2:	89 81       	ldd	r24, Y+1	; 0x01
    2ae4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae6:	01 96       	adiw	r24, 0x01	; 1
    2ae8:	9a 83       	std	Y+2, r25	; 0x02
    2aea:	89 83       	std	Y+1, r24	; 0x01
}

/*Display the required string on the lCD*/
void H_LCD_void_sendString(const uint8_t *pstr)
{
	while (*(pstr)!= NULL)
    2aec:	e9 81       	ldd	r30, Y+1	; 0x01
    2aee:	fa 81       	ldd	r31, Y+2	; 0x02
    2af0:	80 81       	ld	r24, Z
    2af2:	88 2f       	mov	r24, r24
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	00 97       	sbiw	r24, 0x00	; 0
    2af8:	79 f7       	brne	.-34     	; 0x2ad8 <H_LCD_void_sendString+0x10>
	{
		H_LCD_void_sendData(*pstr);
		pstr++;
	}
}
    2afa:	0f 90       	pop	r0
    2afc:	0f 90       	pop	r0
    2afe:	cf 91       	pop	r28
    2b00:	df 91       	pop	r29
    2b02:	08 95       	ret

00002b04 <H_LCD_int_to_string>:


void H_LCD_int_to_string(int data)
{
    2b04:	df 93       	push	r29
    2b06:	cf 93       	push	r28
    2b08:	cd b7       	in	r28, 0x3d	; 61
    2b0a:	de b7       	in	r29, 0x3e	; 62
    2b0c:	62 97       	sbiw	r28, 0x12	; 18
    2b0e:	0f b6       	in	r0, 0x3f	; 63
    2b10:	f8 94       	cli
    2b12:	de bf       	out	0x3e, r29	; 62
    2b14:	0f be       	out	0x3f, r0	; 63
    2b16:	cd bf       	out	0x3d, r28	; 61
    2b18:	9a 8b       	std	Y+18, r25	; 0x12
    2b1a:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /*array to hold the ASCII result of each number*/
		itoa(data,buff,10); /*itoa c function to convert the integer data to corresponding ASCII vale, 10 --> base 10 for decimal*/
    2b1c:	89 89       	ldd	r24, Y+17	; 0x11
    2b1e:	9a 89       	ldd	r25, Y+18	; 0x12
    2b20:	9e 01       	movw	r18, r28
    2b22:	2f 5f       	subi	r18, 0xFF	; 255
    2b24:	3f 4f       	sbci	r19, 0xFF	; 255
    2b26:	b9 01       	movw	r22, r18
    2b28:	4a e0       	ldi	r20, 0x0A	; 10
    2b2a:	50 e0       	ldi	r21, 0x00	; 0
    2b2c:	0e 94 f9 20 	call	0x41f2	; 0x41f2 <itoa>
		H_LCD_void_sendString(buff);
    2b30:	ce 01       	movw	r24, r28
    2b32:	01 96       	adiw	r24, 0x01	; 1
    2b34:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <H_LCD_void_sendString>
}
    2b38:	62 96       	adiw	r28, 0x12	; 18
    2b3a:	0f b6       	in	r0, 0x3f	; 63
    2b3c:	f8 94       	cli
    2b3e:	de bf       	out	0x3e, r29	; 62
    2b40:	0f be       	out	0x3f, r0	; 63
    2b42:	cd bf       	out	0x3d, r28	; 61
    2b44:	cf 91       	pop	r28
    2b46:	df 91       	pop	r29
    2b48:	08 95       	ret

00002b4a <H_LCD_void_gotoXY>:

void H_LCD_void_gotoXY(uint8_t copy_u8Row, uint8_t copy_u8Col)
{
    2b4a:	df 93       	push	r29
    2b4c:	cf 93       	push	r28
    2b4e:	00 d0       	rcall	.+0      	; 0x2b50 <H_LCD_void_gotoXY+0x6>
    2b50:	00 d0       	rcall	.+0      	; 0x2b52 <H_LCD_void_gotoXY+0x8>
    2b52:	00 d0       	rcall	.+0      	; 0x2b54 <H_LCD_void_gotoXY+0xa>
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62
    2b58:	8d 83       	std	Y+5, r24	; 0x05
    2b5a:	6e 83       	std	Y+6, r22	; 0x06
	uint8_t Local_U8_Arr [4] = {LCD_R0_COMMAND , LCD_R1_COMMAND , LCD_R2_COMMAND , LCD_R3_COMMAND};
    2b5c:	80 e8       	ldi	r24, 0x80	; 128
    2b5e:	89 83       	std	Y+1, r24	; 0x01
    2b60:	80 ec       	ldi	r24, 0xC0	; 192
    2b62:	8a 83       	std	Y+2, r24	; 0x02
    2b64:	84 e9       	ldi	r24, 0x94	; 148
    2b66:	8b 83       	std	Y+3, r24	; 0x03
    2b68:	84 ed       	ldi	r24, 0xD4	; 212
    2b6a:	8c 83       	std	Y+4, r24	; 0x04
	H_LCD_void_sendCommand(Local_U8_Arr[copy_u8Row] + copy_u8Col);
    2b6c:	8d 81       	ldd	r24, Y+5	; 0x05
    2b6e:	28 2f       	mov	r18, r24
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	ce 01       	movw	r24, r28
    2b74:	01 96       	adiw	r24, 0x01	; 1
    2b76:	fc 01       	movw	r30, r24
    2b78:	e2 0f       	add	r30, r18
    2b7a:	f3 1f       	adc	r31, r19
    2b7c:	90 81       	ld	r25, Z
    2b7e:	8e 81       	ldd	r24, Y+6	; 0x06
    2b80:	89 0f       	add	r24, r25
    2b82:	0e 94 c2 14 	call	0x2984	; 0x2984 <H_LCD_void_sendCommand>
}
    2b86:	26 96       	adiw	r28, 0x06	; 6
    2b88:	0f b6       	in	r0, 0x3f	; 63
    2b8a:	f8 94       	cli
    2b8c:	de bf       	out	0x3e, r29	; 62
    2b8e:	0f be       	out	0x3f, r0	; 63
    2b90:	cd bf       	out	0x3d, r28	; 61
    2b92:	cf 91       	pop	r28
    2b94:	df 91       	pop	r29
    2b96:	08 95       	ret

00002b98 <H_Lcd_Void_Clear>:


void H_Lcd_Void_Clear()
{
    2b98:	df 93       	push	r29
    2b9a:	cf 93       	push	r28
    2b9c:	cd b7       	in	r28, 0x3d	; 61
    2b9e:	de b7       	in	r29, 0x3e	; 62
	H_LCD_void_sendCommand(LCD_CLEAR_DISPLAY_SCREEN);
    2ba0:	81 e0       	ldi	r24, 0x01	; 1
    2ba2:	0e 94 c2 14 	call	0x2984	; 0x2984 <H_LCD_void_sendCommand>
}
    2ba6:	cf 91       	pop	r28
    2ba8:	df 91       	pop	r29
    2baa:	08 95       	ret

00002bac <Segment_init>:
 * The Channel Numbers refers to how many segment do you want to enable
 *
 * you can choose it from  @ref Seven_Segment Number
 */
void Segment_init(channel_numbers ch_num)
{
    2bac:	0f 93       	push	r16
    2bae:	1f 93       	push	r17
    2bb0:	df 93       	push	r29
    2bb2:	cf 93       	push	r28
    2bb4:	cd b7       	in	r28, 0x3d	; 61
    2bb6:	de b7       	in	r29, 0x3e	; 62
    2bb8:	cb 5a       	subi	r28, 0xAB	; 171
    2bba:	d0 40       	sbci	r29, 0x00	; 0
    2bbc:	0f b6       	in	r0, 0x3f	; 63
    2bbe:	f8 94       	cli
    2bc0:	de bf       	out	0x3e, r29	; 62
    2bc2:	0f be       	out	0x3f, r0	; 63
    2bc4:	cd bf       	out	0x3d, r28	; 61
    2bc6:	fe 01       	movw	r30, r28
    2bc8:	e7 55       	subi	r30, 0x57	; 87
    2bca:	ff 4f       	sbci	r31, 0xFF	; 255
    2bcc:	80 83       	st	Z, r24
	DIO_voidSetPinDirection(GPIOB_BASE,PIN0_ID,Pin_OUTPUT);
    2bce:	86 e3       	ldi	r24, 0x36	; 54
    2bd0:	90 e0       	ldi	r25, 0x00	; 0
    2bd2:	60 e0       	ldi	r22, 0x00	; 0
    2bd4:	41 e0       	ldi	r20, 0x01	; 1
    2bd6:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GPIOB_BASE,PIN1_ID,Pin_OUTPUT);
    2bda:	86 e3       	ldi	r24, 0x36	; 54
    2bdc:	90 e0       	ldi	r25, 0x00	; 0
    2bde:	61 e0       	ldi	r22, 0x01	; 1
    2be0:	41 e0       	ldi	r20, 0x01	; 1
    2be2:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GPIOB_BASE,PIN2_ID,Pin_OUTPUT);
    2be6:	86 e3       	ldi	r24, 0x36	; 54
    2be8:	90 e0       	ldi	r25, 0x00	; 0
    2bea:	62 e0       	ldi	r22, 0x02	; 2
    2bec:	41 e0       	ldi	r20, 0x01	; 1
    2bee:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GPIOB_BASE,PIN4_ID,Pin_OUTPUT);
    2bf2:	86 e3       	ldi	r24, 0x36	; 54
    2bf4:	90 e0       	ldi	r25, 0x00	; 0
    2bf6:	64 e0       	ldi	r22, 0x04	; 4
    2bf8:	41 e0       	ldi	r20, 0x01	; 1
    2bfa:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>


	DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,LOW);
    2bfe:	86 e3       	ldi	r24, 0x36	; 54
    2c00:	90 e0       	ldi	r25, 0x00	; 0
    2c02:	60 e0       	ldi	r22, 0x00	; 0
    2c04:	40 e0       	ldi	r20, 0x00	; 0
    2c06:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,LOW);
    2c0a:	86 e3       	ldi	r24, 0x36	; 54
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	61 e0       	ldi	r22, 0x01	; 1
    2c10:	40 e0       	ldi	r20, 0x00	; 0
    2c12:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,LOW);
    2c16:	86 e3       	ldi	r24, 0x36	; 54
    2c18:	90 e0       	ldi	r25, 0x00	; 0
    2c1a:	62 e0       	ldi	r22, 0x02	; 2
    2c1c:	40 e0       	ldi	r20, 0x00	; 0
    2c1e:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
	DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,LOW);
    2c22:	86 e3       	ldi	r24, 0x36	; 54
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	64 e0       	ldi	r22, 0x04	; 4
    2c28:	40 e0       	ldi	r20, 0x00	; 0
    2c2a:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>

	DIO_voidSetPinDirection(GPIOA_BASE,PIN3_ID,Pin_OUTPUT);
    2c2e:	89 e3       	ldi	r24, 0x39	; 57
    2c30:	90 e0       	ldi	r25, 0x00	; 0
    2c32:	63 e0       	ldi	r22, 0x03	; 3
    2c34:	41 e0       	ldi	r20, 0x01	; 1
    2c36:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GPIOA_BASE,PIN2_ID,Pin_OUTPUT);
    2c3a:	89 e3       	ldi	r24, 0x39	; 57
    2c3c:	90 e0       	ldi	r25, 0x00	; 0
    2c3e:	62 e0       	ldi	r22, 0x02	; 2
    2c40:	41 e0       	ldi	r20, 0x01	; 1
    2c42:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GPIOB_BASE,PIN5_ID,Pin_OUTPUT);
    2c46:	86 e3       	ldi	r24, 0x36	; 54
    2c48:	90 e0       	ldi	r25, 0x00	; 0
    2c4a:	65 e0       	ldi	r22, 0x05	; 5
    2c4c:	41 e0       	ldi	r20, 0x01	; 1
    2c4e:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
	DIO_voidSetPinDirection(GPIOB_BASE,PIN6_ID,Pin_OUTPUT);
    2c52:	86 e3       	ldi	r24, 0x36	; 54
    2c54:	90 e0       	ldi	r25, 0x00	; 0
    2c56:	66 e0       	ldi	r22, 0x06	; 6
    2c58:	41 e0       	ldi	r20, 0x01	; 1
    2c5a:	0e 94 50 08 	call	0x10a0	; 0x10a0 <DIO_voidSetPinDirection>
	switch(ch_num)
    2c5e:	fe 01       	movw	r30, r28
    2c60:	e7 55       	subi	r30, 0x57	; 87
    2c62:	ff 4f       	sbci	r31, 0xFF	; 255
    2c64:	80 81       	ld	r24, Z
    2c66:	28 2f       	mov	r18, r24
    2c68:	30 e0       	ldi	r19, 0x00	; 0
    2c6a:	c6 55       	subi	r28, 0x56	; 86
    2c6c:	df 4f       	sbci	r29, 0xFF	; 255
    2c6e:	39 83       	std	Y+1, r19	; 0x01
    2c70:	28 83       	st	Y, r18
    2c72:	ca 5a       	subi	r28, 0xAA	; 170
    2c74:	d0 40       	sbci	r29, 0x00	; 0
    2c76:	c6 55       	subi	r28, 0x56	; 86
    2c78:	df 4f       	sbci	r29, 0xFF	; 255
    2c7a:	88 81       	ld	r24, Y
    2c7c:	99 81       	ldd	r25, Y+1	; 0x01
    2c7e:	ca 5a       	subi	r28, 0xAA	; 170
    2c80:	d0 40       	sbci	r29, 0x00	; 0
    2c82:	81 30       	cpi	r24, 0x01	; 1
    2c84:	91 05       	cpc	r25, r1
    2c86:	09 f4       	brne	.+2      	; 0x2c8a <Segment_init+0xde>
    2c88:	5c c2       	rjmp	.+1208   	; 0x3142 <Segment_init+0x596>
    2c8a:	c6 55       	subi	r28, 0x56	; 86
    2c8c:	df 4f       	sbci	r29, 0xFF	; 255
    2c8e:	e8 81       	ld	r30, Y
    2c90:	f9 81       	ldd	r31, Y+1	; 0x01
    2c92:	ca 5a       	subi	r28, 0xAA	; 170
    2c94:	d0 40       	sbci	r29, 0x00	; 0
    2c96:	e2 30       	cpi	r30, 0x02	; 2
    2c98:	f1 05       	cpc	r31, r1
    2c9a:	5c f4       	brge	.+22     	; 0x2cb2 <Segment_init+0x106>
    2c9c:	c6 55       	subi	r28, 0x56	; 86
    2c9e:	df 4f       	sbci	r29, 0xFF	; 255
    2ca0:	28 81       	ld	r18, Y
    2ca2:	39 81       	ldd	r19, Y+1	; 0x01
    2ca4:	ca 5a       	subi	r28, 0xAA	; 170
    2ca6:	d0 40       	sbci	r29, 0x00	; 0
    2ca8:	21 15       	cp	r18, r1
    2caa:	31 05       	cpc	r19, r1
    2cac:	c1 f0       	breq	.+48     	; 0x2cde <Segment_init+0x132>
    2cae:	0c 94 04 1e 	jmp	0x3c08	; 0x3c08 <Segment_init+0x105c>
    2cb2:	c6 55       	subi	r28, 0x56	; 86
    2cb4:	df 4f       	sbci	r29, 0xFF	; 255
    2cb6:	88 81       	ld	r24, Y
    2cb8:	99 81       	ldd	r25, Y+1	; 0x01
    2cba:	ca 5a       	subi	r28, 0xAA	; 170
    2cbc:	d0 40       	sbci	r29, 0x00	; 0
    2cbe:	82 30       	cpi	r24, 0x02	; 2
    2cc0:	91 05       	cpc	r25, r1
    2cc2:	09 f4       	brne	.+2      	; 0x2cc6 <Segment_init+0x11a>
    2cc4:	70 c4       	rjmp	.+2272   	; 0x35a6 <Segment_init+0x9fa>
    2cc6:	c6 55       	subi	r28, 0x56	; 86
    2cc8:	df 4f       	sbci	r29, 0xFF	; 255
    2cca:	e8 81       	ld	r30, Y
    2ccc:	f9 81       	ldd	r31, Y+1	; 0x01
    2cce:	ca 5a       	subi	r28, 0xAA	; 170
    2cd0:	d0 40       	sbci	r29, 0x00	; 0
    2cd2:	e3 30       	cpi	r30, 0x03	; 3
    2cd4:	f1 05       	cpc	r31, r1
    2cd6:	09 f4       	brne	.+2      	; 0x2cda <Segment_init+0x12e>
    2cd8:	29 c6       	rjmp	.+3154   	; 0x392c <Segment_init+0xd80>
    2cda:	0c 94 04 1e 	jmp	0x3c08	; 0x3c08 <Segment_init+0x105c>
	{
	case FIRST_SEG:
		DIO_voidSetPinValue(GPIOA_BASE,PIN3_ID,LOW);
    2cde:	89 e3       	ldi	r24, 0x39	; 57
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	63 e0       	ldi	r22, 0x03	; 3
    2ce4:	40 e0       	ldi	r20, 0x00	; 0
    2ce6:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    2cea:	fe 01       	movw	r30, r28
    2cec:	eb 55       	subi	r30, 0x5B	; 91
    2cee:	ff 4f       	sbci	r31, 0xFF	; 255
    2cf0:	80 e0       	ldi	r24, 0x00	; 0
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	a0 e0       	ldi	r26, 0x00	; 0
    2cf6:	b0 e4       	ldi	r27, 0x40	; 64
    2cf8:	80 83       	st	Z, r24
    2cfa:	91 83       	std	Z+1, r25	; 0x01
    2cfc:	a2 83       	std	Z+2, r26	; 0x02
    2cfe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d00:	8e 01       	movw	r16, r28
    2d02:	0f 55       	subi	r16, 0x5F	; 95
    2d04:	1f 4f       	sbci	r17, 0xFF	; 255
    2d06:	fe 01       	movw	r30, r28
    2d08:	eb 55       	subi	r30, 0x5B	; 91
    2d0a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d0c:	60 81       	ld	r22, Z
    2d0e:	71 81       	ldd	r23, Z+1	; 0x01
    2d10:	82 81       	ldd	r24, Z+2	; 0x02
    2d12:	93 81       	ldd	r25, Z+3	; 0x03
    2d14:	20 e0       	ldi	r18, 0x00	; 0
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	4a e7       	ldi	r20, 0x7A	; 122
    2d1a:	55 e4       	ldi	r21, 0x45	; 69
    2d1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d20:	dc 01       	movw	r26, r24
    2d22:	cb 01       	movw	r24, r22
    2d24:	f8 01       	movw	r30, r16
    2d26:	80 83       	st	Z, r24
    2d28:	91 83       	std	Z+1, r25	; 0x01
    2d2a:	a2 83       	std	Z+2, r26	; 0x02
    2d2c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d2e:	fe 01       	movw	r30, r28
    2d30:	ef 55       	subi	r30, 0x5F	; 95
    2d32:	ff 4f       	sbci	r31, 0xFF	; 255
    2d34:	60 81       	ld	r22, Z
    2d36:	71 81       	ldd	r23, Z+1	; 0x01
    2d38:	82 81       	ldd	r24, Z+2	; 0x02
    2d3a:	93 81       	ldd	r25, Z+3	; 0x03
    2d3c:	20 e0       	ldi	r18, 0x00	; 0
    2d3e:	30 e0       	ldi	r19, 0x00	; 0
    2d40:	40 e8       	ldi	r20, 0x80	; 128
    2d42:	5f e3       	ldi	r21, 0x3F	; 63
    2d44:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d48:	88 23       	and	r24, r24
    2d4a:	44 f4       	brge	.+16     	; 0x2d5c <Segment_init+0x1b0>
		__ticks = 1;
    2d4c:	fe 01       	movw	r30, r28
    2d4e:	e1 56       	subi	r30, 0x61	; 97
    2d50:	ff 4f       	sbci	r31, 0xFF	; 255
    2d52:	81 e0       	ldi	r24, 0x01	; 1
    2d54:	90 e0       	ldi	r25, 0x00	; 0
    2d56:	91 83       	std	Z+1, r25	; 0x01
    2d58:	80 83       	st	Z, r24
    2d5a:	64 c0       	rjmp	.+200    	; 0x2e24 <Segment_init+0x278>
	else if (__tmp > 65535)
    2d5c:	fe 01       	movw	r30, r28
    2d5e:	ef 55       	subi	r30, 0x5F	; 95
    2d60:	ff 4f       	sbci	r31, 0xFF	; 255
    2d62:	60 81       	ld	r22, Z
    2d64:	71 81       	ldd	r23, Z+1	; 0x01
    2d66:	82 81       	ldd	r24, Z+2	; 0x02
    2d68:	93 81       	ldd	r25, Z+3	; 0x03
    2d6a:	20 e0       	ldi	r18, 0x00	; 0
    2d6c:	3f ef       	ldi	r19, 0xFF	; 255
    2d6e:	4f e7       	ldi	r20, 0x7F	; 127
    2d70:	57 e4       	ldi	r21, 0x47	; 71
    2d72:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d76:	18 16       	cp	r1, r24
    2d78:	0c f0       	brlt	.+2      	; 0x2d7c <Segment_init+0x1d0>
    2d7a:	43 c0       	rjmp	.+134    	; 0x2e02 <Segment_init+0x256>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d7c:	fe 01       	movw	r30, r28
    2d7e:	eb 55       	subi	r30, 0x5B	; 91
    2d80:	ff 4f       	sbci	r31, 0xFF	; 255
    2d82:	60 81       	ld	r22, Z
    2d84:	71 81       	ldd	r23, Z+1	; 0x01
    2d86:	82 81       	ldd	r24, Z+2	; 0x02
    2d88:	93 81       	ldd	r25, Z+3	; 0x03
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	40 e2       	ldi	r20, 0x20	; 32
    2d90:	51 e4       	ldi	r21, 0x41	; 65
    2d92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	8e 01       	movw	r16, r28
    2d9c:	01 56       	subi	r16, 0x61	; 97
    2d9e:	1f 4f       	sbci	r17, 0xFF	; 255
    2da0:	bc 01       	movw	r22, r24
    2da2:	cd 01       	movw	r24, r26
    2da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	f8 01       	movw	r30, r16
    2dae:	91 83       	std	Z+1, r25	; 0x01
    2db0:	80 83       	st	Z, r24
    2db2:	1f c0       	rjmp	.+62     	; 0x2df2 <Segment_init+0x246>
    2db4:	fe 01       	movw	r30, r28
    2db6:	e3 56       	subi	r30, 0x63	; 99
    2db8:	ff 4f       	sbci	r31, 0xFF	; 255
    2dba:	80 e9       	ldi	r24, 0x90	; 144
    2dbc:	91 e0       	ldi	r25, 0x01	; 1
    2dbe:	91 83       	std	Z+1, r25	; 0x01
    2dc0:	80 83       	st	Z, r24
    2dc2:	fe 01       	movw	r30, r28
    2dc4:	e3 56       	subi	r30, 0x63	; 99
    2dc6:	ff 4f       	sbci	r31, 0xFF	; 255
    2dc8:	80 81       	ld	r24, Z
    2dca:	91 81       	ldd	r25, Z+1	; 0x01
    2dcc:	01 97       	sbiw	r24, 0x01	; 1
    2dce:	f1 f7       	brne	.-4      	; 0x2dcc <Segment_init+0x220>
    2dd0:	fe 01       	movw	r30, r28
    2dd2:	e3 56       	subi	r30, 0x63	; 99
    2dd4:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd6:	91 83       	std	Z+1, r25	; 0x01
    2dd8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dda:	de 01       	movw	r26, r28
    2ddc:	a1 56       	subi	r26, 0x61	; 97
    2dde:	bf 4f       	sbci	r27, 0xFF	; 255
    2de0:	fe 01       	movw	r30, r28
    2de2:	e1 56       	subi	r30, 0x61	; 97
    2de4:	ff 4f       	sbci	r31, 0xFF	; 255
    2de6:	80 81       	ld	r24, Z
    2de8:	91 81       	ldd	r25, Z+1	; 0x01
    2dea:	01 97       	sbiw	r24, 0x01	; 1
    2dec:	11 96       	adiw	r26, 0x01	; 1
    2dee:	9c 93       	st	X, r25
    2df0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2df2:	fe 01       	movw	r30, r28
    2df4:	e1 56       	subi	r30, 0x61	; 97
    2df6:	ff 4f       	sbci	r31, 0xFF	; 255
    2df8:	80 81       	ld	r24, Z
    2dfa:	91 81       	ldd	r25, Z+1	; 0x01
    2dfc:	00 97       	sbiw	r24, 0x00	; 0
    2dfe:	d1 f6       	brne	.-76     	; 0x2db4 <Segment_init+0x208>
    2e00:	27 c0       	rjmp	.+78     	; 0x2e50 <Segment_init+0x2a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e02:	8e 01       	movw	r16, r28
    2e04:	01 56       	subi	r16, 0x61	; 97
    2e06:	1f 4f       	sbci	r17, 0xFF	; 255
    2e08:	fe 01       	movw	r30, r28
    2e0a:	ef 55       	subi	r30, 0x5F	; 95
    2e0c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e0e:	60 81       	ld	r22, Z
    2e10:	71 81       	ldd	r23, Z+1	; 0x01
    2e12:	82 81       	ldd	r24, Z+2	; 0x02
    2e14:	93 81       	ldd	r25, Z+3	; 0x03
    2e16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e1a:	dc 01       	movw	r26, r24
    2e1c:	cb 01       	movw	r24, r22
    2e1e:	f8 01       	movw	r30, r16
    2e20:	91 83       	std	Z+1, r25	; 0x01
    2e22:	80 83       	st	Z, r24
    2e24:	de 01       	movw	r26, r28
    2e26:	a5 56       	subi	r26, 0x65	; 101
    2e28:	bf 4f       	sbci	r27, 0xFF	; 255
    2e2a:	fe 01       	movw	r30, r28
    2e2c:	e1 56       	subi	r30, 0x61	; 97
    2e2e:	ff 4f       	sbci	r31, 0xFF	; 255
    2e30:	80 81       	ld	r24, Z
    2e32:	91 81       	ldd	r25, Z+1	; 0x01
    2e34:	8d 93       	st	X+, r24
    2e36:	9c 93       	st	X, r25
    2e38:	fe 01       	movw	r30, r28
    2e3a:	e5 56       	subi	r30, 0x65	; 101
    2e3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e3e:	80 81       	ld	r24, Z
    2e40:	91 81       	ldd	r25, Z+1	; 0x01
    2e42:	01 97       	sbiw	r24, 0x01	; 1
    2e44:	f1 f7       	brne	.-4      	; 0x2e42 <Segment_init+0x296>
    2e46:	fe 01       	movw	r30, r28
    2e48:	e5 56       	subi	r30, 0x65	; 101
    2e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e4c:	91 83       	std	Z+1, r25	; 0x01
    2e4e:	80 83       	st	Z, r24
		_delay_ms(2);
		DIO_voidSetPinValue(GPIOA_BASE,PIN2_ID,HIGH);
    2e50:	89 e3       	ldi	r24, 0x39	; 57
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	62 e0       	ldi	r22, 0x02	; 2
    2e56:	41 e0       	ldi	r20, 0x01	; 1
    2e58:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    2e5c:	fe 01       	movw	r30, r28
    2e5e:	e9 56       	subi	r30, 0x69	; 105
    2e60:	ff 4f       	sbci	r31, 0xFF	; 255
    2e62:	80 e0       	ldi	r24, 0x00	; 0
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	a0 e0       	ldi	r26, 0x00	; 0
    2e68:	b0 e4       	ldi	r27, 0x40	; 64
    2e6a:	80 83       	st	Z, r24
    2e6c:	91 83       	std	Z+1, r25	; 0x01
    2e6e:	a2 83       	std	Z+2, r26	; 0x02
    2e70:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e72:	8e 01       	movw	r16, r28
    2e74:	0d 56       	subi	r16, 0x6D	; 109
    2e76:	1f 4f       	sbci	r17, 0xFF	; 255
    2e78:	fe 01       	movw	r30, r28
    2e7a:	e9 56       	subi	r30, 0x69	; 105
    2e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7e:	60 81       	ld	r22, Z
    2e80:	71 81       	ldd	r23, Z+1	; 0x01
    2e82:	82 81       	ldd	r24, Z+2	; 0x02
    2e84:	93 81       	ldd	r25, Z+3	; 0x03
    2e86:	20 e0       	ldi	r18, 0x00	; 0
    2e88:	30 e0       	ldi	r19, 0x00	; 0
    2e8a:	4a e7       	ldi	r20, 0x7A	; 122
    2e8c:	55 e4       	ldi	r21, 0x45	; 69
    2e8e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e92:	dc 01       	movw	r26, r24
    2e94:	cb 01       	movw	r24, r22
    2e96:	f8 01       	movw	r30, r16
    2e98:	80 83       	st	Z, r24
    2e9a:	91 83       	std	Z+1, r25	; 0x01
    2e9c:	a2 83       	std	Z+2, r26	; 0x02
    2e9e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2ea0:	fe 01       	movw	r30, r28
    2ea2:	ed 56       	subi	r30, 0x6D	; 109
    2ea4:	ff 4f       	sbci	r31, 0xFF	; 255
    2ea6:	60 81       	ld	r22, Z
    2ea8:	71 81       	ldd	r23, Z+1	; 0x01
    2eaa:	82 81       	ldd	r24, Z+2	; 0x02
    2eac:	93 81       	ldd	r25, Z+3	; 0x03
    2eae:	20 e0       	ldi	r18, 0x00	; 0
    2eb0:	30 e0       	ldi	r19, 0x00	; 0
    2eb2:	40 e8       	ldi	r20, 0x80	; 128
    2eb4:	5f e3       	ldi	r21, 0x3F	; 63
    2eb6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eba:	88 23       	and	r24, r24
    2ebc:	44 f4       	brge	.+16     	; 0x2ece <Segment_init+0x322>
		__ticks = 1;
    2ebe:	fe 01       	movw	r30, r28
    2ec0:	ef 56       	subi	r30, 0x6F	; 111
    2ec2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	90 e0       	ldi	r25, 0x00	; 0
    2ec8:	91 83       	std	Z+1, r25	; 0x01
    2eca:	80 83       	st	Z, r24
    2ecc:	64 c0       	rjmp	.+200    	; 0x2f96 <Segment_init+0x3ea>
	else if (__tmp > 65535)
    2ece:	fe 01       	movw	r30, r28
    2ed0:	ed 56       	subi	r30, 0x6D	; 109
    2ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ed4:	60 81       	ld	r22, Z
    2ed6:	71 81       	ldd	r23, Z+1	; 0x01
    2ed8:	82 81       	ldd	r24, Z+2	; 0x02
    2eda:	93 81       	ldd	r25, Z+3	; 0x03
    2edc:	20 e0       	ldi	r18, 0x00	; 0
    2ede:	3f ef       	ldi	r19, 0xFF	; 255
    2ee0:	4f e7       	ldi	r20, 0x7F	; 127
    2ee2:	57 e4       	ldi	r21, 0x47	; 71
    2ee4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2ee8:	18 16       	cp	r1, r24
    2eea:	0c f0       	brlt	.+2      	; 0x2eee <Segment_init+0x342>
    2eec:	43 c0       	rjmp	.+134    	; 0x2f74 <Segment_init+0x3c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2eee:	fe 01       	movw	r30, r28
    2ef0:	e9 56       	subi	r30, 0x69	; 105
    2ef2:	ff 4f       	sbci	r31, 0xFF	; 255
    2ef4:	60 81       	ld	r22, Z
    2ef6:	71 81       	ldd	r23, Z+1	; 0x01
    2ef8:	82 81       	ldd	r24, Z+2	; 0x02
    2efa:	93 81       	ldd	r25, Z+3	; 0x03
    2efc:	20 e0       	ldi	r18, 0x00	; 0
    2efe:	30 e0       	ldi	r19, 0x00	; 0
    2f00:	40 e2       	ldi	r20, 0x20	; 32
    2f02:	51 e4       	ldi	r21, 0x41	; 65
    2f04:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f08:	dc 01       	movw	r26, r24
    2f0a:	cb 01       	movw	r24, r22
    2f0c:	8e 01       	movw	r16, r28
    2f0e:	0f 56       	subi	r16, 0x6F	; 111
    2f10:	1f 4f       	sbci	r17, 0xFF	; 255
    2f12:	bc 01       	movw	r22, r24
    2f14:	cd 01       	movw	r24, r26
    2f16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	f8 01       	movw	r30, r16
    2f20:	91 83       	std	Z+1, r25	; 0x01
    2f22:	80 83       	st	Z, r24
    2f24:	1f c0       	rjmp	.+62     	; 0x2f64 <Segment_init+0x3b8>
    2f26:	fe 01       	movw	r30, r28
    2f28:	e1 57       	subi	r30, 0x71	; 113
    2f2a:	ff 4f       	sbci	r31, 0xFF	; 255
    2f2c:	80 e9       	ldi	r24, 0x90	; 144
    2f2e:	91 e0       	ldi	r25, 0x01	; 1
    2f30:	91 83       	std	Z+1, r25	; 0x01
    2f32:	80 83       	st	Z, r24
    2f34:	fe 01       	movw	r30, r28
    2f36:	e1 57       	subi	r30, 0x71	; 113
    2f38:	ff 4f       	sbci	r31, 0xFF	; 255
    2f3a:	80 81       	ld	r24, Z
    2f3c:	91 81       	ldd	r25, Z+1	; 0x01
    2f3e:	01 97       	sbiw	r24, 0x01	; 1
    2f40:	f1 f7       	brne	.-4      	; 0x2f3e <Segment_init+0x392>
    2f42:	fe 01       	movw	r30, r28
    2f44:	e1 57       	subi	r30, 0x71	; 113
    2f46:	ff 4f       	sbci	r31, 0xFF	; 255
    2f48:	91 83       	std	Z+1, r25	; 0x01
    2f4a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f4c:	de 01       	movw	r26, r28
    2f4e:	af 56       	subi	r26, 0x6F	; 111
    2f50:	bf 4f       	sbci	r27, 0xFF	; 255
    2f52:	fe 01       	movw	r30, r28
    2f54:	ef 56       	subi	r30, 0x6F	; 111
    2f56:	ff 4f       	sbci	r31, 0xFF	; 255
    2f58:	80 81       	ld	r24, Z
    2f5a:	91 81       	ldd	r25, Z+1	; 0x01
    2f5c:	01 97       	sbiw	r24, 0x01	; 1
    2f5e:	11 96       	adiw	r26, 0x01	; 1
    2f60:	9c 93       	st	X, r25
    2f62:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f64:	fe 01       	movw	r30, r28
    2f66:	ef 56       	subi	r30, 0x6F	; 111
    2f68:	ff 4f       	sbci	r31, 0xFF	; 255
    2f6a:	80 81       	ld	r24, Z
    2f6c:	91 81       	ldd	r25, Z+1	; 0x01
    2f6e:	00 97       	sbiw	r24, 0x00	; 0
    2f70:	d1 f6       	brne	.-76     	; 0x2f26 <Segment_init+0x37a>
    2f72:	27 c0       	rjmp	.+78     	; 0x2fc2 <Segment_init+0x416>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f74:	8e 01       	movw	r16, r28
    2f76:	0f 56       	subi	r16, 0x6F	; 111
    2f78:	1f 4f       	sbci	r17, 0xFF	; 255
    2f7a:	fe 01       	movw	r30, r28
    2f7c:	ed 56       	subi	r30, 0x6D	; 109
    2f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    2f80:	60 81       	ld	r22, Z
    2f82:	71 81       	ldd	r23, Z+1	; 0x01
    2f84:	82 81       	ldd	r24, Z+2	; 0x02
    2f86:	93 81       	ldd	r25, Z+3	; 0x03
    2f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f8c:	dc 01       	movw	r26, r24
    2f8e:	cb 01       	movw	r24, r22
    2f90:	f8 01       	movw	r30, r16
    2f92:	91 83       	std	Z+1, r25	; 0x01
    2f94:	80 83       	st	Z, r24
    2f96:	de 01       	movw	r26, r28
    2f98:	a3 57       	subi	r26, 0x73	; 115
    2f9a:	bf 4f       	sbci	r27, 0xFF	; 255
    2f9c:	fe 01       	movw	r30, r28
    2f9e:	ef 56       	subi	r30, 0x6F	; 111
    2fa0:	ff 4f       	sbci	r31, 0xFF	; 255
    2fa2:	80 81       	ld	r24, Z
    2fa4:	91 81       	ldd	r25, Z+1	; 0x01
    2fa6:	8d 93       	st	X+, r24
    2fa8:	9c 93       	st	X, r25
    2faa:	fe 01       	movw	r30, r28
    2fac:	e3 57       	subi	r30, 0x73	; 115
    2fae:	ff 4f       	sbci	r31, 0xFF	; 255
    2fb0:	80 81       	ld	r24, Z
    2fb2:	91 81       	ldd	r25, Z+1	; 0x01
    2fb4:	01 97       	sbiw	r24, 0x01	; 1
    2fb6:	f1 f7       	brne	.-4      	; 0x2fb4 <Segment_init+0x408>
    2fb8:	fe 01       	movw	r30, r28
    2fba:	e3 57       	subi	r30, 0x73	; 115
    2fbc:	ff 4f       	sbci	r31, 0xFF	; 255
    2fbe:	91 83       	std	Z+1, r25	; 0x01
    2fc0:	80 83       	st	Z, r24
		_delay_ms(2);
		DIO_voidSetPinValue(GPIOB_BASE,PIN5_ID,HIGH);
    2fc2:	86 e3       	ldi	r24, 0x36	; 54
    2fc4:	90 e0       	ldi	r25, 0x00	; 0
    2fc6:	65 e0       	ldi	r22, 0x05	; 5
    2fc8:	41 e0       	ldi	r20, 0x01	; 1
    2fca:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    2fce:	fe 01       	movw	r30, r28
    2fd0:	e7 57       	subi	r30, 0x77	; 119
    2fd2:	ff 4f       	sbci	r31, 0xFF	; 255
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	a0 e0       	ldi	r26, 0x00	; 0
    2fda:	b0 e4       	ldi	r27, 0x40	; 64
    2fdc:	80 83       	st	Z, r24
    2fde:	91 83       	std	Z+1, r25	; 0x01
    2fe0:	a2 83       	std	Z+2, r26	; 0x02
    2fe2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fe4:	8e 01       	movw	r16, r28
    2fe6:	0b 57       	subi	r16, 0x7B	; 123
    2fe8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fea:	fe 01       	movw	r30, r28
    2fec:	e7 57       	subi	r30, 0x77	; 119
    2fee:	ff 4f       	sbci	r31, 0xFF	; 255
    2ff0:	60 81       	ld	r22, Z
    2ff2:	71 81       	ldd	r23, Z+1	; 0x01
    2ff4:	82 81       	ldd	r24, Z+2	; 0x02
    2ff6:	93 81       	ldd	r25, Z+3	; 0x03
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	30 e0       	ldi	r19, 0x00	; 0
    2ffc:	4a e7       	ldi	r20, 0x7A	; 122
    2ffe:	55 e4       	ldi	r21, 0x45	; 69
    3000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3004:	dc 01       	movw	r26, r24
    3006:	cb 01       	movw	r24, r22
    3008:	f8 01       	movw	r30, r16
    300a:	80 83       	st	Z, r24
    300c:	91 83       	std	Z+1, r25	; 0x01
    300e:	a2 83       	std	Z+2, r26	; 0x02
    3010:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3012:	fe 01       	movw	r30, r28
    3014:	eb 57       	subi	r30, 0x7B	; 123
    3016:	ff 4f       	sbci	r31, 0xFF	; 255
    3018:	60 81       	ld	r22, Z
    301a:	71 81       	ldd	r23, Z+1	; 0x01
    301c:	82 81       	ldd	r24, Z+2	; 0x02
    301e:	93 81       	ldd	r25, Z+3	; 0x03
    3020:	20 e0       	ldi	r18, 0x00	; 0
    3022:	30 e0       	ldi	r19, 0x00	; 0
    3024:	40 e8       	ldi	r20, 0x80	; 128
    3026:	5f e3       	ldi	r21, 0x3F	; 63
    3028:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    302c:	88 23       	and	r24, r24
    302e:	44 f4       	brge	.+16     	; 0x3040 <Segment_init+0x494>
		__ticks = 1;
    3030:	fe 01       	movw	r30, r28
    3032:	ed 57       	subi	r30, 0x7D	; 125
    3034:	ff 4f       	sbci	r31, 0xFF	; 255
    3036:	81 e0       	ldi	r24, 0x01	; 1
    3038:	90 e0       	ldi	r25, 0x00	; 0
    303a:	91 83       	std	Z+1, r25	; 0x01
    303c:	80 83       	st	Z, r24
    303e:	64 c0       	rjmp	.+200    	; 0x3108 <Segment_init+0x55c>
	else if (__tmp > 65535)
    3040:	fe 01       	movw	r30, r28
    3042:	eb 57       	subi	r30, 0x7B	; 123
    3044:	ff 4f       	sbci	r31, 0xFF	; 255
    3046:	60 81       	ld	r22, Z
    3048:	71 81       	ldd	r23, Z+1	; 0x01
    304a:	82 81       	ldd	r24, Z+2	; 0x02
    304c:	93 81       	ldd	r25, Z+3	; 0x03
    304e:	20 e0       	ldi	r18, 0x00	; 0
    3050:	3f ef       	ldi	r19, 0xFF	; 255
    3052:	4f e7       	ldi	r20, 0x7F	; 127
    3054:	57 e4       	ldi	r21, 0x47	; 71
    3056:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    305a:	18 16       	cp	r1, r24
    305c:	0c f0       	brlt	.+2      	; 0x3060 <Segment_init+0x4b4>
    305e:	43 c0       	rjmp	.+134    	; 0x30e6 <Segment_init+0x53a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3060:	fe 01       	movw	r30, r28
    3062:	e7 57       	subi	r30, 0x77	; 119
    3064:	ff 4f       	sbci	r31, 0xFF	; 255
    3066:	60 81       	ld	r22, Z
    3068:	71 81       	ldd	r23, Z+1	; 0x01
    306a:	82 81       	ldd	r24, Z+2	; 0x02
    306c:	93 81       	ldd	r25, Z+3	; 0x03
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	40 e2       	ldi	r20, 0x20	; 32
    3074:	51 e4       	ldi	r21, 0x41	; 65
    3076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307a:	dc 01       	movw	r26, r24
    307c:	cb 01       	movw	r24, r22
    307e:	8e 01       	movw	r16, r28
    3080:	0d 57       	subi	r16, 0x7D	; 125
    3082:	1f 4f       	sbci	r17, 0xFF	; 255
    3084:	bc 01       	movw	r22, r24
    3086:	cd 01       	movw	r24, r26
    3088:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    308c:	dc 01       	movw	r26, r24
    308e:	cb 01       	movw	r24, r22
    3090:	f8 01       	movw	r30, r16
    3092:	91 83       	std	Z+1, r25	; 0x01
    3094:	80 83       	st	Z, r24
    3096:	1f c0       	rjmp	.+62     	; 0x30d6 <Segment_init+0x52a>
    3098:	fe 01       	movw	r30, r28
    309a:	ef 57       	subi	r30, 0x7F	; 127
    309c:	ff 4f       	sbci	r31, 0xFF	; 255
    309e:	80 e9       	ldi	r24, 0x90	; 144
    30a0:	91 e0       	ldi	r25, 0x01	; 1
    30a2:	91 83       	std	Z+1, r25	; 0x01
    30a4:	80 83       	st	Z, r24
    30a6:	fe 01       	movw	r30, r28
    30a8:	ef 57       	subi	r30, 0x7F	; 127
    30aa:	ff 4f       	sbci	r31, 0xFF	; 255
    30ac:	80 81       	ld	r24, Z
    30ae:	91 81       	ldd	r25, Z+1	; 0x01
    30b0:	01 97       	sbiw	r24, 0x01	; 1
    30b2:	f1 f7       	brne	.-4      	; 0x30b0 <Segment_init+0x504>
    30b4:	fe 01       	movw	r30, r28
    30b6:	ef 57       	subi	r30, 0x7F	; 127
    30b8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ba:	91 83       	std	Z+1, r25	; 0x01
    30bc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30be:	de 01       	movw	r26, r28
    30c0:	ad 57       	subi	r26, 0x7D	; 125
    30c2:	bf 4f       	sbci	r27, 0xFF	; 255
    30c4:	fe 01       	movw	r30, r28
    30c6:	ed 57       	subi	r30, 0x7D	; 125
    30c8:	ff 4f       	sbci	r31, 0xFF	; 255
    30ca:	80 81       	ld	r24, Z
    30cc:	91 81       	ldd	r25, Z+1	; 0x01
    30ce:	01 97       	sbiw	r24, 0x01	; 1
    30d0:	11 96       	adiw	r26, 0x01	; 1
    30d2:	9c 93       	st	X, r25
    30d4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30d6:	fe 01       	movw	r30, r28
    30d8:	ed 57       	subi	r30, 0x7D	; 125
    30da:	ff 4f       	sbci	r31, 0xFF	; 255
    30dc:	80 81       	ld	r24, Z
    30de:	91 81       	ldd	r25, Z+1	; 0x01
    30e0:	00 97       	sbiw	r24, 0x00	; 0
    30e2:	d1 f6       	brne	.-76     	; 0x3098 <Segment_init+0x4ec>
    30e4:	27 c0       	rjmp	.+78     	; 0x3134 <Segment_init+0x588>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30e6:	8e 01       	movw	r16, r28
    30e8:	0d 57       	subi	r16, 0x7D	; 125
    30ea:	1f 4f       	sbci	r17, 0xFF	; 255
    30ec:	fe 01       	movw	r30, r28
    30ee:	eb 57       	subi	r30, 0x7B	; 123
    30f0:	ff 4f       	sbci	r31, 0xFF	; 255
    30f2:	60 81       	ld	r22, Z
    30f4:	71 81       	ldd	r23, Z+1	; 0x01
    30f6:	82 81       	ldd	r24, Z+2	; 0x02
    30f8:	93 81       	ldd	r25, Z+3	; 0x03
    30fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30fe:	dc 01       	movw	r26, r24
    3100:	cb 01       	movw	r24, r22
    3102:	f8 01       	movw	r30, r16
    3104:	91 83       	std	Z+1, r25	; 0x01
    3106:	80 83       	st	Z, r24
    3108:	de 01       	movw	r26, r28
    310a:	a1 58       	subi	r26, 0x81	; 129
    310c:	bf 4f       	sbci	r27, 0xFF	; 255
    310e:	fe 01       	movw	r30, r28
    3110:	ed 57       	subi	r30, 0x7D	; 125
    3112:	ff 4f       	sbci	r31, 0xFF	; 255
    3114:	80 81       	ld	r24, Z
    3116:	91 81       	ldd	r25, Z+1	; 0x01
    3118:	8d 93       	st	X+, r24
    311a:	9c 93       	st	X, r25
    311c:	fe 01       	movw	r30, r28
    311e:	e1 58       	subi	r30, 0x81	; 129
    3120:	ff 4f       	sbci	r31, 0xFF	; 255
    3122:	80 81       	ld	r24, Z
    3124:	91 81       	ldd	r25, Z+1	; 0x01
    3126:	01 97       	sbiw	r24, 0x01	; 1
    3128:	f1 f7       	brne	.-4      	; 0x3126 <Segment_init+0x57a>
    312a:	fe 01       	movw	r30, r28
    312c:	e1 58       	subi	r30, 0x81	; 129
    312e:	ff 4f       	sbci	r31, 0xFF	; 255
    3130:	91 83       	std	Z+1, r25	; 0x01
    3132:	80 83       	st	Z, r24
		_delay_ms(2);
		DIO_voidSetPinValue(GPIOB_BASE,PIN6_ID,HIGH);
    3134:	86 e3       	ldi	r24, 0x36	; 54
    3136:	90 e0       	ldi	r25, 0x00	; 0
    3138:	66 e0       	ldi	r22, 0x06	; 6
    313a:	41 e0       	ldi	r20, 0x01	; 1
    313c:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    3140:	63 c5       	rjmp	.+2758   	; 0x3c08 <Segment_init+0x105c>
		break;
	case TWO_SEGs:
			DIO_voidSetPinValue(GPIOA_BASE,PIN3_ID,LOW);
    3142:	89 e3       	ldi	r24, 0x39	; 57
    3144:	90 e0       	ldi	r25, 0x00	; 0
    3146:	63 e0       	ldi	r22, 0x03	; 3
    3148:	40 e0       	ldi	r20, 0x00	; 0
    314a:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    314e:	fe 01       	movw	r30, r28
    3150:	e5 58       	subi	r30, 0x85	; 133
    3152:	ff 4f       	sbci	r31, 0xFF	; 255
    3154:	80 e0       	ldi	r24, 0x00	; 0
    3156:	90 e0       	ldi	r25, 0x00	; 0
    3158:	a0 e0       	ldi	r26, 0x00	; 0
    315a:	b0 e4       	ldi	r27, 0x40	; 64
    315c:	80 83       	st	Z, r24
    315e:	91 83       	std	Z+1, r25	; 0x01
    3160:	a2 83       	std	Z+2, r26	; 0x02
    3162:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3164:	8e 01       	movw	r16, r28
    3166:	09 58       	subi	r16, 0x89	; 137
    3168:	1f 4f       	sbci	r17, 0xFF	; 255
    316a:	fe 01       	movw	r30, r28
    316c:	e5 58       	subi	r30, 0x85	; 133
    316e:	ff 4f       	sbci	r31, 0xFF	; 255
    3170:	60 81       	ld	r22, Z
    3172:	71 81       	ldd	r23, Z+1	; 0x01
    3174:	82 81       	ldd	r24, Z+2	; 0x02
    3176:	93 81       	ldd	r25, Z+3	; 0x03
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	30 e0       	ldi	r19, 0x00	; 0
    317c:	4a e7       	ldi	r20, 0x7A	; 122
    317e:	55 e4       	ldi	r21, 0x45	; 69
    3180:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3184:	dc 01       	movw	r26, r24
    3186:	cb 01       	movw	r24, r22
    3188:	f8 01       	movw	r30, r16
    318a:	80 83       	st	Z, r24
    318c:	91 83       	std	Z+1, r25	; 0x01
    318e:	a2 83       	std	Z+2, r26	; 0x02
    3190:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3192:	fe 01       	movw	r30, r28
    3194:	e9 58       	subi	r30, 0x89	; 137
    3196:	ff 4f       	sbci	r31, 0xFF	; 255
    3198:	60 81       	ld	r22, Z
    319a:	71 81       	ldd	r23, Z+1	; 0x01
    319c:	82 81       	ldd	r24, Z+2	; 0x02
    319e:	93 81       	ldd	r25, Z+3	; 0x03
    31a0:	20 e0       	ldi	r18, 0x00	; 0
    31a2:	30 e0       	ldi	r19, 0x00	; 0
    31a4:	40 e8       	ldi	r20, 0x80	; 128
    31a6:	5f e3       	ldi	r21, 0x3F	; 63
    31a8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    31ac:	88 23       	and	r24, r24
    31ae:	44 f4       	brge	.+16     	; 0x31c0 <Segment_init+0x614>
		__ticks = 1;
    31b0:	fe 01       	movw	r30, r28
    31b2:	eb 58       	subi	r30, 0x8B	; 139
    31b4:	ff 4f       	sbci	r31, 0xFF	; 255
    31b6:	81 e0       	ldi	r24, 0x01	; 1
    31b8:	90 e0       	ldi	r25, 0x00	; 0
    31ba:	91 83       	std	Z+1, r25	; 0x01
    31bc:	80 83       	st	Z, r24
    31be:	64 c0       	rjmp	.+200    	; 0x3288 <Segment_init+0x6dc>
	else if (__tmp > 65535)
    31c0:	fe 01       	movw	r30, r28
    31c2:	e9 58       	subi	r30, 0x89	; 137
    31c4:	ff 4f       	sbci	r31, 0xFF	; 255
    31c6:	60 81       	ld	r22, Z
    31c8:	71 81       	ldd	r23, Z+1	; 0x01
    31ca:	82 81       	ldd	r24, Z+2	; 0x02
    31cc:	93 81       	ldd	r25, Z+3	; 0x03
    31ce:	20 e0       	ldi	r18, 0x00	; 0
    31d0:	3f ef       	ldi	r19, 0xFF	; 255
    31d2:	4f e7       	ldi	r20, 0x7F	; 127
    31d4:	57 e4       	ldi	r21, 0x47	; 71
    31d6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    31da:	18 16       	cp	r1, r24
    31dc:	0c f0       	brlt	.+2      	; 0x31e0 <Segment_init+0x634>
    31de:	43 c0       	rjmp	.+134    	; 0x3266 <Segment_init+0x6ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    31e0:	fe 01       	movw	r30, r28
    31e2:	e5 58       	subi	r30, 0x85	; 133
    31e4:	ff 4f       	sbci	r31, 0xFF	; 255
    31e6:	60 81       	ld	r22, Z
    31e8:	71 81       	ldd	r23, Z+1	; 0x01
    31ea:	82 81       	ldd	r24, Z+2	; 0x02
    31ec:	93 81       	ldd	r25, Z+3	; 0x03
    31ee:	20 e0       	ldi	r18, 0x00	; 0
    31f0:	30 e0       	ldi	r19, 0x00	; 0
    31f2:	40 e2       	ldi	r20, 0x20	; 32
    31f4:	51 e4       	ldi	r21, 0x41	; 65
    31f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31fa:	dc 01       	movw	r26, r24
    31fc:	cb 01       	movw	r24, r22
    31fe:	8e 01       	movw	r16, r28
    3200:	0b 58       	subi	r16, 0x8B	; 139
    3202:	1f 4f       	sbci	r17, 0xFF	; 255
    3204:	bc 01       	movw	r22, r24
    3206:	cd 01       	movw	r24, r26
    3208:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    320c:	dc 01       	movw	r26, r24
    320e:	cb 01       	movw	r24, r22
    3210:	f8 01       	movw	r30, r16
    3212:	91 83       	std	Z+1, r25	; 0x01
    3214:	80 83       	st	Z, r24
    3216:	1f c0       	rjmp	.+62     	; 0x3256 <Segment_init+0x6aa>
    3218:	fe 01       	movw	r30, r28
    321a:	ed 58       	subi	r30, 0x8D	; 141
    321c:	ff 4f       	sbci	r31, 0xFF	; 255
    321e:	80 e9       	ldi	r24, 0x90	; 144
    3220:	91 e0       	ldi	r25, 0x01	; 1
    3222:	91 83       	std	Z+1, r25	; 0x01
    3224:	80 83       	st	Z, r24
    3226:	fe 01       	movw	r30, r28
    3228:	ed 58       	subi	r30, 0x8D	; 141
    322a:	ff 4f       	sbci	r31, 0xFF	; 255
    322c:	80 81       	ld	r24, Z
    322e:	91 81       	ldd	r25, Z+1	; 0x01
    3230:	01 97       	sbiw	r24, 0x01	; 1
    3232:	f1 f7       	brne	.-4      	; 0x3230 <Segment_init+0x684>
    3234:	fe 01       	movw	r30, r28
    3236:	ed 58       	subi	r30, 0x8D	; 141
    3238:	ff 4f       	sbci	r31, 0xFF	; 255
    323a:	91 83       	std	Z+1, r25	; 0x01
    323c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    323e:	de 01       	movw	r26, r28
    3240:	ab 58       	subi	r26, 0x8B	; 139
    3242:	bf 4f       	sbci	r27, 0xFF	; 255
    3244:	fe 01       	movw	r30, r28
    3246:	eb 58       	subi	r30, 0x8B	; 139
    3248:	ff 4f       	sbci	r31, 0xFF	; 255
    324a:	80 81       	ld	r24, Z
    324c:	91 81       	ldd	r25, Z+1	; 0x01
    324e:	01 97       	sbiw	r24, 0x01	; 1
    3250:	11 96       	adiw	r26, 0x01	; 1
    3252:	9c 93       	st	X, r25
    3254:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3256:	fe 01       	movw	r30, r28
    3258:	eb 58       	subi	r30, 0x8B	; 139
    325a:	ff 4f       	sbci	r31, 0xFF	; 255
    325c:	80 81       	ld	r24, Z
    325e:	91 81       	ldd	r25, Z+1	; 0x01
    3260:	00 97       	sbiw	r24, 0x00	; 0
    3262:	d1 f6       	brne	.-76     	; 0x3218 <Segment_init+0x66c>
    3264:	27 c0       	rjmp	.+78     	; 0x32b4 <Segment_init+0x708>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3266:	8e 01       	movw	r16, r28
    3268:	0b 58       	subi	r16, 0x8B	; 139
    326a:	1f 4f       	sbci	r17, 0xFF	; 255
    326c:	fe 01       	movw	r30, r28
    326e:	e9 58       	subi	r30, 0x89	; 137
    3270:	ff 4f       	sbci	r31, 0xFF	; 255
    3272:	60 81       	ld	r22, Z
    3274:	71 81       	ldd	r23, Z+1	; 0x01
    3276:	82 81       	ldd	r24, Z+2	; 0x02
    3278:	93 81       	ldd	r25, Z+3	; 0x03
    327a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327e:	dc 01       	movw	r26, r24
    3280:	cb 01       	movw	r24, r22
    3282:	f8 01       	movw	r30, r16
    3284:	91 83       	std	Z+1, r25	; 0x01
    3286:	80 83       	st	Z, r24
    3288:	de 01       	movw	r26, r28
    328a:	af 58       	subi	r26, 0x8F	; 143
    328c:	bf 4f       	sbci	r27, 0xFF	; 255
    328e:	fe 01       	movw	r30, r28
    3290:	eb 58       	subi	r30, 0x8B	; 139
    3292:	ff 4f       	sbci	r31, 0xFF	; 255
    3294:	80 81       	ld	r24, Z
    3296:	91 81       	ldd	r25, Z+1	; 0x01
    3298:	8d 93       	st	X+, r24
    329a:	9c 93       	st	X, r25
    329c:	fe 01       	movw	r30, r28
    329e:	ef 58       	subi	r30, 0x8F	; 143
    32a0:	ff 4f       	sbci	r31, 0xFF	; 255
    32a2:	80 81       	ld	r24, Z
    32a4:	91 81       	ldd	r25, Z+1	; 0x01
    32a6:	01 97       	sbiw	r24, 0x01	; 1
    32a8:	f1 f7       	brne	.-4      	; 0x32a6 <Segment_init+0x6fa>
    32aa:	fe 01       	movw	r30, r28
    32ac:	ef 58       	subi	r30, 0x8F	; 143
    32ae:	ff 4f       	sbci	r31, 0xFF	; 255
    32b0:	91 83       	std	Z+1, r25	; 0x01
    32b2:	80 83       	st	Z, r24
			_delay_ms(2);
			DIO_voidSetPinValue(GPIOA_BASE,PIN2_ID,LOW);
    32b4:	89 e3       	ldi	r24, 0x39	; 57
    32b6:	90 e0       	ldi	r25, 0x00	; 0
    32b8:	62 e0       	ldi	r22, 0x02	; 2
    32ba:	40 e0       	ldi	r20, 0x00	; 0
    32bc:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    32c0:	fe 01       	movw	r30, r28
    32c2:	e3 59       	subi	r30, 0x93	; 147
    32c4:	ff 4f       	sbci	r31, 0xFF	; 255
    32c6:	80 e0       	ldi	r24, 0x00	; 0
    32c8:	90 e0       	ldi	r25, 0x00	; 0
    32ca:	a0 e0       	ldi	r26, 0x00	; 0
    32cc:	b0 e4       	ldi	r27, 0x40	; 64
    32ce:	80 83       	st	Z, r24
    32d0:	91 83       	std	Z+1, r25	; 0x01
    32d2:	a2 83       	std	Z+2, r26	; 0x02
    32d4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32d6:	8e 01       	movw	r16, r28
    32d8:	07 59       	subi	r16, 0x97	; 151
    32da:	1f 4f       	sbci	r17, 0xFF	; 255
    32dc:	fe 01       	movw	r30, r28
    32de:	e3 59       	subi	r30, 0x93	; 147
    32e0:	ff 4f       	sbci	r31, 0xFF	; 255
    32e2:	60 81       	ld	r22, Z
    32e4:	71 81       	ldd	r23, Z+1	; 0x01
    32e6:	82 81       	ldd	r24, Z+2	; 0x02
    32e8:	93 81       	ldd	r25, Z+3	; 0x03
    32ea:	20 e0       	ldi	r18, 0x00	; 0
    32ec:	30 e0       	ldi	r19, 0x00	; 0
    32ee:	4a e7       	ldi	r20, 0x7A	; 122
    32f0:	55 e4       	ldi	r21, 0x45	; 69
    32f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32f6:	dc 01       	movw	r26, r24
    32f8:	cb 01       	movw	r24, r22
    32fa:	f8 01       	movw	r30, r16
    32fc:	80 83       	st	Z, r24
    32fe:	91 83       	std	Z+1, r25	; 0x01
    3300:	a2 83       	std	Z+2, r26	; 0x02
    3302:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3304:	fe 01       	movw	r30, r28
    3306:	e7 59       	subi	r30, 0x97	; 151
    3308:	ff 4f       	sbci	r31, 0xFF	; 255
    330a:	60 81       	ld	r22, Z
    330c:	71 81       	ldd	r23, Z+1	; 0x01
    330e:	82 81       	ldd	r24, Z+2	; 0x02
    3310:	93 81       	ldd	r25, Z+3	; 0x03
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	30 e0       	ldi	r19, 0x00	; 0
    3316:	40 e8       	ldi	r20, 0x80	; 128
    3318:	5f e3       	ldi	r21, 0x3F	; 63
    331a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    331e:	88 23       	and	r24, r24
    3320:	44 f4       	brge	.+16     	; 0x3332 <Segment_init+0x786>
		__ticks = 1;
    3322:	fe 01       	movw	r30, r28
    3324:	e9 59       	subi	r30, 0x99	; 153
    3326:	ff 4f       	sbci	r31, 0xFF	; 255
    3328:	81 e0       	ldi	r24, 0x01	; 1
    332a:	90 e0       	ldi	r25, 0x00	; 0
    332c:	91 83       	std	Z+1, r25	; 0x01
    332e:	80 83       	st	Z, r24
    3330:	64 c0       	rjmp	.+200    	; 0x33fa <Segment_init+0x84e>
	else if (__tmp > 65535)
    3332:	fe 01       	movw	r30, r28
    3334:	e7 59       	subi	r30, 0x97	; 151
    3336:	ff 4f       	sbci	r31, 0xFF	; 255
    3338:	60 81       	ld	r22, Z
    333a:	71 81       	ldd	r23, Z+1	; 0x01
    333c:	82 81       	ldd	r24, Z+2	; 0x02
    333e:	93 81       	ldd	r25, Z+3	; 0x03
    3340:	20 e0       	ldi	r18, 0x00	; 0
    3342:	3f ef       	ldi	r19, 0xFF	; 255
    3344:	4f e7       	ldi	r20, 0x7F	; 127
    3346:	57 e4       	ldi	r21, 0x47	; 71
    3348:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    334c:	18 16       	cp	r1, r24
    334e:	0c f0       	brlt	.+2      	; 0x3352 <Segment_init+0x7a6>
    3350:	43 c0       	rjmp	.+134    	; 0x33d8 <Segment_init+0x82c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3352:	fe 01       	movw	r30, r28
    3354:	e3 59       	subi	r30, 0x93	; 147
    3356:	ff 4f       	sbci	r31, 0xFF	; 255
    3358:	60 81       	ld	r22, Z
    335a:	71 81       	ldd	r23, Z+1	; 0x01
    335c:	82 81       	ldd	r24, Z+2	; 0x02
    335e:	93 81       	ldd	r25, Z+3	; 0x03
    3360:	20 e0       	ldi	r18, 0x00	; 0
    3362:	30 e0       	ldi	r19, 0x00	; 0
    3364:	40 e2       	ldi	r20, 0x20	; 32
    3366:	51 e4       	ldi	r21, 0x41	; 65
    3368:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    336c:	dc 01       	movw	r26, r24
    336e:	cb 01       	movw	r24, r22
    3370:	8e 01       	movw	r16, r28
    3372:	09 59       	subi	r16, 0x99	; 153
    3374:	1f 4f       	sbci	r17, 0xFF	; 255
    3376:	bc 01       	movw	r22, r24
    3378:	cd 01       	movw	r24, r26
    337a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    337e:	dc 01       	movw	r26, r24
    3380:	cb 01       	movw	r24, r22
    3382:	f8 01       	movw	r30, r16
    3384:	91 83       	std	Z+1, r25	; 0x01
    3386:	80 83       	st	Z, r24
    3388:	1f c0       	rjmp	.+62     	; 0x33c8 <Segment_init+0x81c>
    338a:	fe 01       	movw	r30, r28
    338c:	eb 59       	subi	r30, 0x9B	; 155
    338e:	ff 4f       	sbci	r31, 0xFF	; 255
    3390:	80 e9       	ldi	r24, 0x90	; 144
    3392:	91 e0       	ldi	r25, 0x01	; 1
    3394:	91 83       	std	Z+1, r25	; 0x01
    3396:	80 83       	st	Z, r24
    3398:	fe 01       	movw	r30, r28
    339a:	eb 59       	subi	r30, 0x9B	; 155
    339c:	ff 4f       	sbci	r31, 0xFF	; 255
    339e:	80 81       	ld	r24, Z
    33a0:	91 81       	ldd	r25, Z+1	; 0x01
    33a2:	01 97       	sbiw	r24, 0x01	; 1
    33a4:	f1 f7       	brne	.-4      	; 0x33a2 <Segment_init+0x7f6>
    33a6:	fe 01       	movw	r30, r28
    33a8:	eb 59       	subi	r30, 0x9B	; 155
    33aa:	ff 4f       	sbci	r31, 0xFF	; 255
    33ac:	91 83       	std	Z+1, r25	; 0x01
    33ae:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33b0:	de 01       	movw	r26, r28
    33b2:	a9 59       	subi	r26, 0x99	; 153
    33b4:	bf 4f       	sbci	r27, 0xFF	; 255
    33b6:	fe 01       	movw	r30, r28
    33b8:	e9 59       	subi	r30, 0x99	; 153
    33ba:	ff 4f       	sbci	r31, 0xFF	; 255
    33bc:	80 81       	ld	r24, Z
    33be:	91 81       	ldd	r25, Z+1	; 0x01
    33c0:	01 97       	sbiw	r24, 0x01	; 1
    33c2:	11 96       	adiw	r26, 0x01	; 1
    33c4:	9c 93       	st	X, r25
    33c6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33c8:	fe 01       	movw	r30, r28
    33ca:	e9 59       	subi	r30, 0x99	; 153
    33cc:	ff 4f       	sbci	r31, 0xFF	; 255
    33ce:	80 81       	ld	r24, Z
    33d0:	91 81       	ldd	r25, Z+1	; 0x01
    33d2:	00 97       	sbiw	r24, 0x00	; 0
    33d4:	d1 f6       	brne	.-76     	; 0x338a <Segment_init+0x7de>
    33d6:	27 c0       	rjmp	.+78     	; 0x3426 <Segment_init+0x87a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33d8:	8e 01       	movw	r16, r28
    33da:	09 59       	subi	r16, 0x99	; 153
    33dc:	1f 4f       	sbci	r17, 0xFF	; 255
    33de:	fe 01       	movw	r30, r28
    33e0:	e7 59       	subi	r30, 0x97	; 151
    33e2:	ff 4f       	sbci	r31, 0xFF	; 255
    33e4:	60 81       	ld	r22, Z
    33e6:	71 81       	ldd	r23, Z+1	; 0x01
    33e8:	82 81       	ldd	r24, Z+2	; 0x02
    33ea:	93 81       	ldd	r25, Z+3	; 0x03
    33ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33f0:	dc 01       	movw	r26, r24
    33f2:	cb 01       	movw	r24, r22
    33f4:	f8 01       	movw	r30, r16
    33f6:	91 83       	std	Z+1, r25	; 0x01
    33f8:	80 83       	st	Z, r24
    33fa:	de 01       	movw	r26, r28
    33fc:	ad 59       	subi	r26, 0x9D	; 157
    33fe:	bf 4f       	sbci	r27, 0xFF	; 255
    3400:	fe 01       	movw	r30, r28
    3402:	e9 59       	subi	r30, 0x99	; 153
    3404:	ff 4f       	sbci	r31, 0xFF	; 255
    3406:	80 81       	ld	r24, Z
    3408:	91 81       	ldd	r25, Z+1	; 0x01
    340a:	8d 93       	st	X+, r24
    340c:	9c 93       	st	X, r25
    340e:	fe 01       	movw	r30, r28
    3410:	ed 59       	subi	r30, 0x9D	; 157
    3412:	ff 4f       	sbci	r31, 0xFF	; 255
    3414:	80 81       	ld	r24, Z
    3416:	91 81       	ldd	r25, Z+1	; 0x01
    3418:	01 97       	sbiw	r24, 0x01	; 1
    341a:	f1 f7       	brne	.-4      	; 0x3418 <Segment_init+0x86c>
    341c:	fe 01       	movw	r30, r28
    341e:	ed 59       	subi	r30, 0x9D	; 157
    3420:	ff 4f       	sbci	r31, 0xFF	; 255
    3422:	91 83       	std	Z+1, r25	; 0x01
    3424:	80 83       	st	Z, r24
			_delay_ms(2);
			DIO_voidSetPinValue(GPIOB_BASE,PIN5_ID,HIGH);
    3426:	86 e3       	ldi	r24, 0x36	; 54
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	65 e0       	ldi	r22, 0x05	; 5
    342c:	41 e0       	ldi	r20, 0x01	; 1
    342e:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    3432:	fe 01       	movw	r30, r28
    3434:	e1 5a       	subi	r30, 0xA1	; 161
    3436:	ff 4f       	sbci	r31, 0xFF	; 255
    3438:	80 e0       	ldi	r24, 0x00	; 0
    343a:	90 e0       	ldi	r25, 0x00	; 0
    343c:	a0 e0       	ldi	r26, 0x00	; 0
    343e:	b0 e4       	ldi	r27, 0x40	; 64
    3440:	80 83       	st	Z, r24
    3442:	91 83       	std	Z+1, r25	; 0x01
    3444:	a2 83       	std	Z+2, r26	; 0x02
    3446:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3448:	8e 01       	movw	r16, r28
    344a:	05 5a       	subi	r16, 0xA5	; 165
    344c:	1f 4f       	sbci	r17, 0xFF	; 255
    344e:	fe 01       	movw	r30, r28
    3450:	e1 5a       	subi	r30, 0xA1	; 161
    3452:	ff 4f       	sbci	r31, 0xFF	; 255
    3454:	60 81       	ld	r22, Z
    3456:	71 81       	ldd	r23, Z+1	; 0x01
    3458:	82 81       	ldd	r24, Z+2	; 0x02
    345a:	93 81       	ldd	r25, Z+3	; 0x03
    345c:	20 e0       	ldi	r18, 0x00	; 0
    345e:	30 e0       	ldi	r19, 0x00	; 0
    3460:	4a e7       	ldi	r20, 0x7A	; 122
    3462:	55 e4       	ldi	r21, 0x45	; 69
    3464:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3468:	dc 01       	movw	r26, r24
    346a:	cb 01       	movw	r24, r22
    346c:	f8 01       	movw	r30, r16
    346e:	80 83       	st	Z, r24
    3470:	91 83       	std	Z+1, r25	; 0x01
    3472:	a2 83       	std	Z+2, r26	; 0x02
    3474:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3476:	fe 01       	movw	r30, r28
    3478:	e5 5a       	subi	r30, 0xA5	; 165
    347a:	ff 4f       	sbci	r31, 0xFF	; 255
    347c:	60 81       	ld	r22, Z
    347e:	71 81       	ldd	r23, Z+1	; 0x01
    3480:	82 81       	ldd	r24, Z+2	; 0x02
    3482:	93 81       	ldd	r25, Z+3	; 0x03
    3484:	20 e0       	ldi	r18, 0x00	; 0
    3486:	30 e0       	ldi	r19, 0x00	; 0
    3488:	40 e8       	ldi	r20, 0x80	; 128
    348a:	5f e3       	ldi	r21, 0x3F	; 63
    348c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3490:	88 23       	and	r24, r24
    3492:	44 f4       	brge	.+16     	; 0x34a4 <Segment_init+0x8f8>
		__ticks = 1;
    3494:	fe 01       	movw	r30, r28
    3496:	e7 5a       	subi	r30, 0xA7	; 167
    3498:	ff 4f       	sbci	r31, 0xFF	; 255
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	91 83       	std	Z+1, r25	; 0x01
    34a0:	80 83       	st	Z, r24
    34a2:	64 c0       	rjmp	.+200    	; 0x356c <Segment_init+0x9c0>
	else if (__tmp > 65535)
    34a4:	fe 01       	movw	r30, r28
    34a6:	e5 5a       	subi	r30, 0xA5	; 165
    34a8:	ff 4f       	sbci	r31, 0xFF	; 255
    34aa:	60 81       	ld	r22, Z
    34ac:	71 81       	ldd	r23, Z+1	; 0x01
    34ae:	82 81       	ldd	r24, Z+2	; 0x02
    34b0:	93 81       	ldd	r25, Z+3	; 0x03
    34b2:	20 e0       	ldi	r18, 0x00	; 0
    34b4:	3f ef       	ldi	r19, 0xFF	; 255
    34b6:	4f e7       	ldi	r20, 0x7F	; 127
    34b8:	57 e4       	ldi	r21, 0x47	; 71
    34ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    34be:	18 16       	cp	r1, r24
    34c0:	0c f0       	brlt	.+2      	; 0x34c4 <Segment_init+0x918>
    34c2:	43 c0       	rjmp	.+134    	; 0x354a <Segment_init+0x99e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34c4:	fe 01       	movw	r30, r28
    34c6:	e1 5a       	subi	r30, 0xA1	; 161
    34c8:	ff 4f       	sbci	r31, 0xFF	; 255
    34ca:	60 81       	ld	r22, Z
    34cc:	71 81       	ldd	r23, Z+1	; 0x01
    34ce:	82 81       	ldd	r24, Z+2	; 0x02
    34d0:	93 81       	ldd	r25, Z+3	; 0x03
    34d2:	20 e0       	ldi	r18, 0x00	; 0
    34d4:	30 e0       	ldi	r19, 0x00	; 0
    34d6:	40 e2       	ldi	r20, 0x20	; 32
    34d8:	51 e4       	ldi	r21, 0x41	; 65
    34da:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34de:	dc 01       	movw	r26, r24
    34e0:	cb 01       	movw	r24, r22
    34e2:	8e 01       	movw	r16, r28
    34e4:	07 5a       	subi	r16, 0xA7	; 167
    34e6:	1f 4f       	sbci	r17, 0xFF	; 255
    34e8:	bc 01       	movw	r22, r24
    34ea:	cd 01       	movw	r24, r26
    34ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34f0:	dc 01       	movw	r26, r24
    34f2:	cb 01       	movw	r24, r22
    34f4:	f8 01       	movw	r30, r16
    34f6:	91 83       	std	Z+1, r25	; 0x01
    34f8:	80 83       	st	Z, r24
    34fa:	1f c0       	rjmp	.+62     	; 0x353a <Segment_init+0x98e>
    34fc:	fe 01       	movw	r30, r28
    34fe:	e9 5a       	subi	r30, 0xA9	; 169
    3500:	ff 4f       	sbci	r31, 0xFF	; 255
    3502:	80 e9       	ldi	r24, 0x90	; 144
    3504:	91 e0       	ldi	r25, 0x01	; 1
    3506:	91 83       	std	Z+1, r25	; 0x01
    3508:	80 83       	st	Z, r24
    350a:	fe 01       	movw	r30, r28
    350c:	e9 5a       	subi	r30, 0xA9	; 169
    350e:	ff 4f       	sbci	r31, 0xFF	; 255
    3510:	80 81       	ld	r24, Z
    3512:	91 81       	ldd	r25, Z+1	; 0x01
    3514:	01 97       	sbiw	r24, 0x01	; 1
    3516:	f1 f7       	brne	.-4      	; 0x3514 <Segment_init+0x968>
    3518:	fe 01       	movw	r30, r28
    351a:	e9 5a       	subi	r30, 0xA9	; 169
    351c:	ff 4f       	sbci	r31, 0xFF	; 255
    351e:	91 83       	std	Z+1, r25	; 0x01
    3520:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3522:	de 01       	movw	r26, r28
    3524:	a7 5a       	subi	r26, 0xA7	; 167
    3526:	bf 4f       	sbci	r27, 0xFF	; 255
    3528:	fe 01       	movw	r30, r28
    352a:	e7 5a       	subi	r30, 0xA7	; 167
    352c:	ff 4f       	sbci	r31, 0xFF	; 255
    352e:	80 81       	ld	r24, Z
    3530:	91 81       	ldd	r25, Z+1	; 0x01
    3532:	01 97       	sbiw	r24, 0x01	; 1
    3534:	11 96       	adiw	r26, 0x01	; 1
    3536:	9c 93       	st	X, r25
    3538:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    353a:	fe 01       	movw	r30, r28
    353c:	e7 5a       	subi	r30, 0xA7	; 167
    353e:	ff 4f       	sbci	r31, 0xFF	; 255
    3540:	80 81       	ld	r24, Z
    3542:	91 81       	ldd	r25, Z+1	; 0x01
    3544:	00 97       	sbiw	r24, 0x00	; 0
    3546:	d1 f6       	brne	.-76     	; 0x34fc <Segment_init+0x950>
    3548:	27 c0       	rjmp	.+78     	; 0x3598 <Segment_init+0x9ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    354a:	8e 01       	movw	r16, r28
    354c:	07 5a       	subi	r16, 0xA7	; 167
    354e:	1f 4f       	sbci	r17, 0xFF	; 255
    3550:	fe 01       	movw	r30, r28
    3552:	e5 5a       	subi	r30, 0xA5	; 165
    3554:	ff 4f       	sbci	r31, 0xFF	; 255
    3556:	60 81       	ld	r22, Z
    3558:	71 81       	ldd	r23, Z+1	; 0x01
    355a:	82 81       	ldd	r24, Z+2	; 0x02
    355c:	93 81       	ldd	r25, Z+3	; 0x03
    355e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3562:	dc 01       	movw	r26, r24
    3564:	cb 01       	movw	r24, r22
    3566:	f8 01       	movw	r30, r16
    3568:	91 83       	std	Z+1, r25	; 0x01
    356a:	80 83       	st	Z, r24
    356c:	de 01       	movw	r26, r28
    356e:	ab 5a       	subi	r26, 0xAB	; 171
    3570:	bf 4f       	sbci	r27, 0xFF	; 255
    3572:	fe 01       	movw	r30, r28
    3574:	e7 5a       	subi	r30, 0xA7	; 167
    3576:	ff 4f       	sbci	r31, 0xFF	; 255
    3578:	80 81       	ld	r24, Z
    357a:	91 81       	ldd	r25, Z+1	; 0x01
    357c:	8d 93       	st	X+, r24
    357e:	9c 93       	st	X, r25
    3580:	fe 01       	movw	r30, r28
    3582:	eb 5a       	subi	r30, 0xAB	; 171
    3584:	ff 4f       	sbci	r31, 0xFF	; 255
    3586:	80 81       	ld	r24, Z
    3588:	91 81       	ldd	r25, Z+1	; 0x01
    358a:	01 97       	sbiw	r24, 0x01	; 1
    358c:	f1 f7       	brne	.-4      	; 0x358a <Segment_init+0x9de>
    358e:	fe 01       	movw	r30, r28
    3590:	eb 5a       	subi	r30, 0xAB	; 171
    3592:	ff 4f       	sbci	r31, 0xFF	; 255
    3594:	91 83       	std	Z+1, r25	; 0x01
    3596:	80 83       	st	Z, r24
			_delay_ms(2);
			DIO_voidSetPinValue(GPIOB_BASE,PIN6_ID,HIGH);
    3598:	86 e3       	ldi	r24, 0x36	; 54
    359a:	90 e0       	ldi	r25, 0x00	; 0
    359c:	66 e0       	ldi	r22, 0x06	; 6
    359e:	41 e0       	ldi	r20, 0x01	; 1
    35a0:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    35a4:	31 c3       	rjmp	.+1634   	; 0x3c08 <Segment_init+0x105c>
			break;
	case THREE_SEGs:
			DIO_voidSetPinValue(GPIOA_BASE,PIN3_ID,LOW);
    35a6:	89 e3       	ldi	r24, 0x39	; 57
    35a8:	90 e0       	ldi	r25, 0x00	; 0
    35aa:	63 e0       	ldi	r22, 0x03	; 3
    35ac:	40 e0       	ldi	r20, 0x00	; 0
    35ae:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    35b2:	fe 01       	movw	r30, r28
    35b4:	ef 5a       	subi	r30, 0xAF	; 175
    35b6:	ff 4f       	sbci	r31, 0xFF	; 255
    35b8:	80 e0       	ldi	r24, 0x00	; 0
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	a0 e0       	ldi	r26, 0x00	; 0
    35be:	b0 e4       	ldi	r27, 0x40	; 64
    35c0:	80 83       	st	Z, r24
    35c2:	91 83       	std	Z+1, r25	; 0x01
    35c4:	a2 83       	std	Z+2, r26	; 0x02
    35c6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    35c8:	8e 01       	movw	r16, r28
    35ca:	03 5b       	subi	r16, 0xB3	; 179
    35cc:	1f 4f       	sbci	r17, 0xFF	; 255
    35ce:	fe 01       	movw	r30, r28
    35d0:	ef 5a       	subi	r30, 0xAF	; 175
    35d2:	ff 4f       	sbci	r31, 0xFF	; 255
    35d4:	60 81       	ld	r22, Z
    35d6:	71 81       	ldd	r23, Z+1	; 0x01
    35d8:	82 81       	ldd	r24, Z+2	; 0x02
    35da:	93 81       	ldd	r25, Z+3	; 0x03
    35dc:	20 e0       	ldi	r18, 0x00	; 0
    35de:	30 e0       	ldi	r19, 0x00	; 0
    35e0:	4a e7       	ldi	r20, 0x7A	; 122
    35e2:	55 e4       	ldi	r21, 0x45	; 69
    35e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35e8:	dc 01       	movw	r26, r24
    35ea:	cb 01       	movw	r24, r22
    35ec:	f8 01       	movw	r30, r16
    35ee:	80 83       	st	Z, r24
    35f0:	91 83       	std	Z+1, r25	; 0x01
    35f2:	a2 83       	std	Z+2, r26	; 0x02
    35f4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    35f6:	fe 01       	movw	r30, r28
    35f8:	e3 5b       	subi	r30, 0xB3	; 179
    35fa:	ff 4f       	sbci	r31, 0xFF	; 255
    35fc:	60 81       	ld	r22, Z
    35fe:	71 81       	ldd	r23, Z+1	; 0x01
    3600:	82 81       	ldd	r24, Z+2	; 0x02
    3602:	93 81       	ldd	r25, Z+3	; 0x03
    3604:	20 e0       	ldi	r18, 0x00	; 0
    3606:	30 e0       	ldi	r19, 0x00	; 0
    3608:	40 e8       	ldi	r20, 0x80	; 128
    360a:	5f e3       	ldi	r21, 0x3F	; 63
    360c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3610:	88 23       	and	r24, r24
    3612:	44 f4       	brge	.+16     	; 0x3624 <Segment_init+0xa78>
		__ticks = 1;
    3614:	fe 01       	movw	r30, r28
    3616:	e5 5b       	subi	r30, 0xB5	; 181
    3618:	ff 4f       	sbci	r31, 0xFF	; 255
    361a:	81 e0       	ldi	r24, 0x01	; 1
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	91 83       	std	Z+1, r25	; 0x01
    3620:	80 83       	st	Z, r24
    3622:	64 c0       	rjmp	.+200    	; 0x36ec <Segment_init+0xb40>
	else if (__tmp > 65535)
    3624:	fe 01       	movw	r30, r28
    3626:	e3 5b       	subi	r30, 0xB3	; 179
    3628:	ff 4f       	sbci	r31, 0xFF	; 255
    362a:	60 81       	ld	r22, Z
    362c:	71 81       	ldd	r23, Z+1	; 0x01
    362e:	82 81       	ldd	r24, Z+2	; 0x02
    3630:	93 81       	ldd	r25, Z+3	; 0x03
    3632:	20 e0       	ldi	r18, 0x00	; 0
    3634:	3f ef       	ldi	r19, 0xFF	; 255
    3636:	4f e7       	ldi	r20, 0x7F	; 127
    3638:	57 e4       	ldi	r21, 0x47	; 71
    363a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    363e:	18 16       	cp	r1, r24
    3640:	0c f0       	brlt	.+2      	; 0x3644 <Segment_init+0xa98>
    3642:	43 c0       	rjmp	.+134    	; 0x36ca <Segment_init+0xb1e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3644:	fe 01       	movw	r30, r28
    3646:	ef 5a       	subi	r30, 0xAF	; 175
    3648:	ff 4f       	sbci	r31, 0xFF	; 255
    364a:	60 81       	ld	r22, Z
    364c:	71 81       	ldd	r23, Z+1	; 0x01
    364e:	82 81       	ldd	r24, Z+2	; 0x02
    3650:	93 81       	ldd	r25, Z+3	; 0x03
    3652:	20 e0       	ldi	r18, 0x00	; 0
    3654:	30 e0       	ldi	r19, 0x00	; 0
    3656:	40 e2       	ldi	r20, 0x20	; 32
    3658:	51 e4       	ldi	r21, 0x41	; 65
    365a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    365e:	dc 01       	movw	r26, r24
    3660:	cb 01       	movw	r24, r22
    3662:	8e 01       	movw	r16, r28
    3664:	05 5b       	subi	r16, 0xB5	; 181
    3666:	1f 4f       	sbci	r17, 0xFF	; 255
    3668:	bc 01       	movw	r22, r24
    366a:	cd 01       	movw	r24, r26
    366c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3670:	dc 01       	movw	r26, r24
    3672:	cb 01       	movw	r24, r22
    3674:	f8 01       	movw	r30, r16
    3676:	91 83       	std	Z+1, r25	; 0x01
    3678:	80 83       	st	Z, r24
    367a:	1f c0       	rjmp	.+62     	; 0x36ba <Segment_init+0xb0e>
    367c:	fe 01       	movw	r30, r28
    367e:	e7 5b       	subi	r30, 0xB7	; 183
    3680:	ff 4f       	sbci	r31, 0xFF	; 255
    3682:	80 e9       	ldi	r24, 0x90	; 144
    3684:	91 e0       	ldi	r25, 0x01	; 1
    3686:	91 83       	std	Z+1, r25	; 0x01
    3688:	80 83       	st	Z, r24
    368a:	fe 01       	movw	r30, r28
    368c:	e7 5b       	subi	r30, 0xB7	; 183
    368e:	ff 4f       	sbci	r31, 0xFF	; 255
    3690:	80 81       	ld	r24, Z
    3692:	91 81       	ldd	r25, Z+1	; 0x01
    3694:	01 97       	sbiw	r24, 0x01	; 1
    3696:	f1 f7       	brne	.-4      	; 0x3694 <Segment_init+0xae8>
    3698:	fe 01       	movw	r30, r28
    369a:	e7 5b       	subi	r30, 0xB7	; 183
    369c:	ff 4f       	sbci	r31, 0xFF	; 255
    369e:	91 83       	std	Z+1, r25	; 0x01
    36a0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    36a2:	de 01       	movw	r26, r28
    36a4:	a5 5b       	subi	r26, 0xB5	; 181
    36a6:	bf 4f       	sbci	r27, 0xFF	; 255
    36a8:	fe 01       	movw	r30, r28
    36aa:	e5 5b       	subi	r30, 0xB5	; 181
    36ac:	ff 4f       	sbci	r31, 0xFF	; 255
    36ae:	80 81       	ld	r24, Z
    36b0:	91 81       	ldd	r25, Z+1	; 0x01
    36b2:	01 97       	sbiw	r24, 0x01	; 1
    36b4:	11 96       	adiw	r26, 0x01	; 1
    36b6:	9c 93       	st	X, r25
    36b8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    36ba:	fe 01       	movw	r30, r28
    36bc:	e5 5b       	subi	r30, 0xB5	; 181
    36be:	ff 4f       	sbci	r31, 0xFF	; 255
    36c0:	80 81       	ld	r24, Z
    36c2:	91 81       	ldd	r25, Z+1	; 0x01
    36c4:	00 97       	sbiw	r24, 0x00	; 0
    36c6:	d1 f6       	brne	.-76     	; 0x367c <Segment_init+0xad0>
    36c8:	27 c0       	rjmp	.+78     	; 0x3718 <Segment_init+0xb6c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    36ca:	8e 01       	movw	r16, r28
    36cc:	05 5b       	subi	r16, 0xB5	; 181
    36ce:	1f 4f       	sbci	r17, 0xFF	; 255
    36d0:	fe 01       	movw	r30, r28
    36d2:	e3 5b       	subi	r30, 0xB3	; 179
    36d4:	ff 4f       	sbci	r31, 0xFF	; 255
    36d6:	60 81       	ld	r22, Z
    36d8:	71 81       	ldd	r23, Z+1	; 0x01
    36da:	82 81       	ldd	r24, Z+2	; 0x02
    36dc:	93 81       	ldd	r25, Z+3	; 0x03
    36de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    36e2:	dc 01       	movw	r26, r24
    36e4:	cb 01       	movw	r24, r22
    36e6:	f8 01       	movw	r30, r16
    36e8:	91 83       	std	Z+1, r25	; 0x01
    36ea:	80 83       	st	Z, r24
    36ec:	de 01       	movw	r26, r28
    36ee:	a9 5b       	subi	r26, 0xB9	; 185
    36f0:	bf 4f       	sbci	r27, 0xFF	; 255
    36f2:	fe 01       	movw	r30, r28
    36f4:	e5 5b       	subi	r30, 0xB5	; 181
    36f6:	ff 4f       	sbci	r31, 0xFF	; 255
    36f8:	80 81       	ld	r24, Z
    36fa:	91 81       	ldd	r25, Z+1	; 0x01
    36fc:	8d 93       	st	X+, r24
    36fe:	9c 93       	st	X, r25
    3700:	fe 01       	movw	r30, r28
    3702:	e9 5b       	subi	r30, 0xB9	; 185
    3704:	ff 4f       	sbci	r31, 0xFF	; 255
    3706:	80 81       	ld	r24, Z
    3708:	91 81       	ldd	r25, Z+1	; 0x01
    370a:	01 97       	sbiw	r24, 0x01	; 1
    370c:	f1 f7       	brne	.-4      	; 0x370a <Segment_init+0xb5e>
    370e:	fe 01       	movw	r30, r28
    3710:	e9 5b       	subi	r30, 0xB9	; 185
    3712:	ff 4f       	sbci	r31, 0xFF	; 255
    3714:	91 83       	std	Z+1, r25	; 0x01
    3716:	80 83       	st	Z, r24
			_delay_ms(2);
			DIO_voidSetPinValue(GPIOA_BASE,PIN2_ID,LOW);
    3718:	89 e3       	ldi	r24, 0x39	; 57
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	62 e0       	ldi	r22, 0x02	; 2
    371e:	40 e0       	ldi	r20, 0x00	; 0
    3720:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    3724:	fe 01       	movw	r30, r28
    3726:	ed 5b       	subi	r30, 0xBD	; 189
    3728:	ff 4f       	sbci	r31, 0xFF	; 255
    372a:	80 e0       	ldi	r24, 0x00	; 0
    372c:	90 e0       	ldi	r25, 0x00	; 0
    372e:	a0 e0       	ldi	r26, 0x00	; 0
    3730:	b0 e4       	ldi	r27, 0x40	; 64
    3732:	80 83       	st	Z, r24
    3734:	91 83       	std	Z+1, r25	; 0x01
    3736:	a2 83       	std	Z+2, r26	; 0x02
    3738:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    373a:	8e 01       	movw	r16, r28
    373c:	01 5c       	subi	r16, 0xC1	; 193
    373e:	1f 4f       	sbci	r17, 0xFF	; 255
    3740:	fe 01       	movw	r30, r28
    3742:	ed 5b       	subi	r30, 0xBD	; 189
    3744:	ff 4f       	sbci	r31, 0xFF	; 255
    3746:	60 81       	ld	r22, Z
    3748:	71 81       	ldd	r23, Z+1	; 0x01
    374a:	82 81       	ldd	r24, Z+2	; 0x02
    374c:	93 81       	ldd	r25, Z+3	; 0x03
    374e:	20 e0       	ldi	r18, 0x00	; 0
    3750:	30 e0       	ldi	r19, 0x00	; 0
    3752:	4a e7       	ldi	r20, 0x7A	; 122
    3754:	55 e4       	ldi	r21, 0x45	; 69
    3756:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    375a:	dc 01       	movw	r26, r24
    375c:	cb 01       	movw	r24, r22
    375e:	f8 01       	movw	r30, r16
    3760:	80 83       	st	Z, r24
    3762:	91 83       	std	Z+1, r25	; 0x01
    3764:	a2 83       	std	Z+2, r26	; 0x02
    3766:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3768:	fe 01       	movw	r30, r28
    376a:	ff 96       	adiw	r30, 0x3f	; 63
    376c:	60 81       	ld	r22, Z
    376e:	71 81       	ldd	r23, Z+1	; 0x01
    3770:	82 81       	ldd	r24, Z+2	; 0x02
    3772:	93 81       	ldd	r25, Z+3	; 0x03
    3774:	20 e0       	ldi	r18, 0x00	; 0
    3776:	30 e0       	ldi	r19, 0x00	; 0
    3778:	40 e8       	ldi	r20, 0x80	; 128
    377a:	5f e3       	ldi	r21, 0x3F	; 63
    377c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3780:	88 23       	and	r24, r24
    3782:	2c f4       	brge	.+10     	; 0x378e <Segment_init+0xbe2>
		__ticks = 1;
    3784:	81 e0       	ldi	r24, 0x01	; 1
    3786:	90 e0       	ldi	r25, 0x00	; 0
    3788:	9e af       	std	Y+62, r25	; 0x3e
    378a:	8d af       	std	Y+61, r24	; 0x3d
    378c:	46 c0       	rjmp	.+140    	; 0x381a <Segment_init+0xc6e>
	else if (__tmp > 65535)
    378e:	fe 01       	movw	r30, r28
    3790:	ff 96       	adiw	r30, 0x3f	; 63
    3792:	60 81       	ld	r22, Z
    3794:	71 81       	ldd	r23, Z+1	; 0x01
    3796:	82 81       	ldd	r24, Z+2	; 0x02
    3798:	93 81       	ldd	r25, Z+3	; 0x03
    379a:	20 e0       	ldi	r18, 0x00	; 0
    379c:	3f ef       	ldi	r19, 0xFF	; 255
    379e:	4f e7       	ldi	r20, 0x7F	; 127
    37a0:	57 e4       	ldi	r21, 0x47	; 71
    37a2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    37a6:	18 16       	cp	r1, r24
    37a8:	64 f5       	brge	.+88     	; 0x3802 <Segment_init+0xc56>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    37aa:	fe 01       	movw	r30, r28
    37ac:	ed 5b       	subi	r30, 0xBD	; 189
    37ae:	ff 4f       	sbci	r31, 0xFF	; 255
    37b0:	60 81       	ld	r22, Z
    37b2:	71 81       	ldd	r23, Z+1	; 0x01
    37b4:	82 81       	ldd	r24, Z+2	; 0x02
    37b6:	93 81       	ldd	r25, Z+3	; 0x03
    37b8:	20 e0       	ldi	r18, 0x00	; 0
    37ba:	30 e0       	ldi	r19, 0x00	; 0
    37bc:	40 e2       	ldi	r20, 0x20	; 32
    37be:	51 e4       	ldi	r21, 0x41	; 65
    37c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    37c4:	dc 01       	movw	r26, r24
    37c6:	cb 01       	movw	r24, r22
    37c8:	bc 01       	movw	r22, r24
    37ca:	cd 01       	movw	r24, r26
    37cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    37d0:	dc 01       	movw	r26, r24
    37d2:	cb 01       	movw	r24, r22
    37d4:	9e af       	std	Y+62, r25	; 0x3e
    37d6:	8d af       	std	Y+61, r24	; 0x3d
    37d8:	0f c0       	rjmp	.+30     	; 0x37f8 <Segment_init+0xc4c>
    37da:	80 e9       	ldi	r24, 0x90	; 144
    37dc:	91 e0       	ldi	r25, 0x01	; 1
    37de:	9c af       	std	Y+60, r25	; 0x3c
    37e0:	8b af       	std	Y+59, r24	; 0x3b
    37e2:	8b ad       	ldd	r24, Y+59	; 0x3b
    37e4:	9c ad       	ldd	r25, Y+60	; 0x3c
    37e6:	01 97       	sbiw	r24, 0x01	; 1
    37e8:	f1 f7       	brne	.-4      	; 0x37e6 <Segment_init+0xc3a>
    37ea:	9c af       	std	Y+60, r25	; 0x3c
    37ec:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    37ee:	8d ad       	ldd	r24, Y+61	; 0x3d
    37f0:	9e ad       	ldd	r25, Y+62	; 0x3e
    37f2:	01 97       	sbiw	r24, 0x01	; 1
    37f4:	9e af       	std	Y+62, r25	; 0x3e
    37f6:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    37f8:	8d ad       	ldd	r24, Y+61	; 0x3d
    37fa:	9e ad       	ldd	r25, Y+62	; 0x3e
    37fc:	00 97       	sbiw	r24, 0x00	; 0
    37fe:	69 f7       	brne	.-38     	; 0x37da <Segment_init+0xc2e>
    3800:	16 c0       	rjmp	.+44     	; 0x382e <Segment_init+0xc82>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3802:	fe 01       	movw	r30, r28
    3804:	ff 96       	adiw	r30, 0x3f	; 63
    3806:	60 81       	ld	r22, Z
    3808:	71 81       	ldd	r23, Z+1	; 0x01
    380a:	82 81       	ldd	r24, Z+2	; 0x02
    380c:	93 81       	ldd	r25, Z+3	; 0x03
    380e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3812:	dc 01       	movw	r26, r24
    3814:	cb 01       	movw	r24, r22
    3816:	9e af       	std	Y+62, r25	; 0x3e
    3818:	8d af       	std	Y+61, r24	; 0x3d
    381a:	8d ad       	ldd	r24, Y+61	; 0x3d
    381c:	9e ad       	ldd	r25, Y+62	; 0x3e
    381e:	9a af       	std	Y+58, r25	; 0x3a
    3820:	89 af       	std	Y+57, r24	; 0x39
    3822:	89 ad       	ldd	r24, Y+57	; 0x39
    3824:	9a ad       	ldd	r25, Y+58	; 0x3a
    3826:	01 97       	sbiw	r24, 0x01	; 1
    3828:	f1 f7       	brne	.-4      	; 0x3826 <Segment_init+0xc7a>
    382a:	9a af       	std	Y+58, r25	; 0x3a
    382c:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(2);
			DIO_voidSetPinValue(GPIOB_BASE,PIN5_ID,LOW);
    382e:	86 e3       	ldi	r24, 0x36	; 54
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	65 e0       	ldi	r22, 0x05	; 5
    3834:	40 e0       	ldi	r20, 0x00	; 0
    3836:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    383a:	80 e0       	ldi	r24, 0x00	; 0
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	a0 e0       	ldi	r26, 0x00	; 0
    3840:	b0 e4       	ldi	r27, 0x40	; 64
    3842:	8d ab       	std	Y+53, r24	; 0x35
    3844:	9e ab       	std	Y+54, r25	; 0x36
    3846:	af ab       	std	Y+55, r26	; 0x37
    3848:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    384a:	6d a9       	ldd	r22, Y+53	; 0x35
    384c:	7e a9       	ldd	r23, Y+54	; 0x36
    384e:	8f a9       	ldd	r24, Y+55	; 0x37
    3850:	98 ad       	ldd	r25, Y+56	; 0x38
    3852:	20 e0       	ldi	r18, 0x00	; 0
    3854:	30 e0       	ldi	r19, 0x00	; 0
    3856:	4a e7       	ldi	r20, 0x7A	; 122
    3858:	55 e4       	ldi	r21, 0x45	; 69
    385a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    385e:	dc 01       	movw	r26, r24
    3860:	cb 01       	movw	r24, r22
    3862:	89 ab       	std	Y+49, r24	; 0x31
    3864:	9a ab       	std	Y+50, r25	; 0x32
    3866:	ab ab       	std	Y+51, r26	; 0x33
    3868:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    386a:	69 a9       	ldd	r22, Y+49	; 0x31
    386c:	7a a9       	ldd	r23, Y+50	; 0x32
    386e:	8b a9       	ldd	r24, Y+51	; 0x33
    3870:	9c a9       	ldd	r25, Y+52	; 0x34
    3872:	20 e0       	ldi	r18, 0x00	; 0
    3874:	30 e0       	ldi	r19, 0x00	; 0
    3876:	40 e8       	ldi	r20, 0x80	; 128
    3878:	5f e3       	ldi	r21, 0x3F	; 63
    387a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    387e:	88 23       	and	r24, r24
    3880:	2c f4       	brge	.+10     	; 0x388c <Segment_init+0xce0>
		__ticks = 1;
    3882:	81 e0       	ldi	r24, 0x01	; 1
    3884:	90 e0       	ldi	r25, 0x00	; 0
    3886:	98 ab       	std	Y+48, r25	; 0x30
    3888:	8f a7       	std	Y+47, r24	; 0x2f
    388a:	3f c0       	rjmp	.+126    	; 0x390a <Segment_init+0xd5e>
	else if (__tmp > 65535)
    388c:	69 a9       	ldd	r22, Y+49	; 0x31
    388e:	7a a9       	ldd	r23, Y+50	; 0x32
    3890:	8b a9       	ldd	r24, Y+51	; 0x33
    3892:	9c a9       	ldd	r25, Y+52	; 0x34
    3894:	20 e0       	ldi	r18, 0x00	; 0
    3896:	3f ef       	ldi	r19, 0xFF	; 255
    3898:	4f e7       	ldi	r20, 0x7F	; 127
    389a:	57 e4       	ldi	r21, 0x47	; 71
    389c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    38a0:	18 16       	cp	r1, r24
    38a2:	4c f5       	brge	.+82     	; 0x38f6 <Segment_init+0xd4a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    38a4:	6d a9       	ldd	r22, Y+53	; 0x35
    38a6:	7e a9       	ldd	r23, Y+54	; 0x36
    38a8:	8f a9       	ldd	r24, Y+55	; 0x37
    38aa:	98 ad       	ldd	r25, Y+56	; 0x38
    38ac:	20 e0       	ldi	r18, 0x00	; 0
    38ae:	30 e0       	ldi	r19, 0x00	; 0
    38b0:	40 e2       	ldi	r20, 0x20	; 32
    38b2:	51 e4       	ldi	r21, 0x41	; 65
    38b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38b8:	dc 01       	movw	r26, r24
    38ba:	cb 01       	movw	r24, r22
    38bc:	bc 01       	movw	r22, r24
    38be:	cd 01       	movw	r24, r26
    38c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    38c4:	dc 01       	movw	r26, r24
    38c6:	cb 01       	movw	r24, r22
    38c8:	98 ab       	std	Y+48, r25	; 0x30
    38ca:	8f a7       	std	Y+47, r24	; 0x2f
    38cc:	0f c0       	rjmp	.+30     	; 0x38ec <Segment_init+0xd40>
    38ce:	80 e9       	ldi	r24, 0x90	; 144
    38d0:	91 e0       	ldi	r25, 0x01	; 1
    38d2:	9e a7       	std	Y+46, r25	; 0x2e
    38d4:	8d a7       	std	Y+45, r24	; 0x2d
    38d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    38d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    38da:	01 97       	sbiw	r24, 0x01	; 1
    38dc:	f1 f7       	brne	.-4      	; 0x38da <Segment_init+0xd2e>
    38de:	9e a7       	std	Y+46, r25	; 0x2e
    38e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    38e4:	98 a9       	ldd	r25, Y+48	; 0x30
    38e6:	01 97       	sbiw	r24, 0x01	; 1
    38e8:	98 ab       	std	Y+48, r25	; 0x30
    38ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    38ee:	98 a9       	ldd	r25, Y+48	; 0x30
    38f0:	00 97       	sbiw	r24, 0x00	; 0
    38f2:	69 f7       	brne	.-38     	; 0x38ce <Segment_init+0xd22>
    38f4:	14 c0       	rjmp	.+40     	; 0x391e <Segment_init+0xd72>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38f6:	69 a9       	ldd	r22, Y+49	; 0x31
    38f8:	7a a9       	ldd	r23, Y+50	; 0x32
    38fa:	8b a9       	ldd	r24, Y+51	; 0x33
    38fc:	9c a9       	ldd	r25, Y+52	; 0x34
    38fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3902:	dc 01       	movw	r26, r24
    3904:	cb 01       	movw	r24, r22
    3906:	98 ab       	std	Y+48, r25	; 0x30
    3908:	8f a7       	std	Y+47, r24	; 0x2f
    390a:	8f a5       	ldd	r24, Y+47	; 0x2f
    390c:	98 a9       	ldd	r25, Y+48	; 0x30
    390e:	9c a7       	std	Y+44, r25	; 0x2c
    3910:	8b a7       	std	Y+43, r24	; 0x2b
    3912:	8b a5       	ldd	r24, Y+43	; 0x2b
    3914:	9c a5       	ldd	r25, Y+44	; 0x2c
    3916:	01 97       	sbiw	r24, 0x01	; 1
    3918:	f1 f7       	brne	.-4      	; 0x3916 <Segment_init+0xd6a>
    391a:	9c a7       	std	Y+44, r25	; 0x2c
    391c:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(2);
			DIO_voidSetPinValue(GPIOB_BASE,PIN6_ID,HIGH);
    391e:	86 e3       	ldi	r24, 0x36	; 54
    3920:	90 e0       	ldi	r25, 0x00	; 0
    3922:	66 e0       	ldi	r22, 0x06	; 6
    3924:	41 e0       	ldi	r20, 0x01	; 1
    3926:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    392a:	6e c1       	rjmp	.+732    	; 0x3c08 <Segment_init+0x105c>
			break;
	case FOUR_SEGs:
			DIO_voidSetPinValue(GPIOA_BASE,PIN3_ID,LOW);
    392c:	89 e3       	ldi	r24, 0x39	; 57
    392e:	90 e0       	ldi	r25, 0x00	; 0
    3930:	63 e0       	ldi	r22, 0x03	; 3
    3932:	40 e0       	ldi	r20, 0x00	; 0
    3934:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    3938:	80 e0       	ldi	r24, 0x00	; 0
    393a:	90 e0       	ldi	r25, 0x00	; 0
    393c:	a0 e0       	ldi	r26, 0x00	; 0
    393e:	b0 e4       	ldi	r27, 0x40	; 64
    3940:	8f a3       	std	Y+39, r24	; 0x27
    3942:	98 a7       	std	Y+40, r25	; 0x28
    3944:	a9 a7       	std	Y+41, r26	; 0x29
    3946:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3948:	6f a1       	ldd	r22, Y+39	; 0x27
    394a:	78 a5       	ldd	r23, Y+40	; 0x28
    394c:	89 a5       	ldd	r24, Y+41	; 0x29
    394e:	9a a5       	ldd	r25, Y+42	; 0x2a
    3950:	20 e0       	ldi	r18, 0x00	; 0
    3952:	30 e0       	ldi	r19, 0x00	; 0
    3954:	4a e7       	ldi	r20, 0x7A	; 122
    3956:	55 e4       	ldi	r21, 0x45	; 69
    3958:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    395c:	dc 01       	movw	r26, r24
    395e:	cb 01       	movw	r24, r22
    3960:	8b a3       	std	Y+35, r24	; 0x23
    3962:	9c a3       	std	Y+36, r25	; 0x24
    3964:	ad a3       	std	Y+37, r26	; 0x25
    3966:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3968:	6b a1       	ldd	r22, Y+35	; 0x23
    396a:	7c a1       	ldd	r23, Y+36	; 0x24
    396c:	8d a1       	ldd	r24, Y+37	; 0x25
    396e:	9e a1       	ldd	r25, Y+38	; 0x26
    3970:	20 e0       	ldi	r18, 0x00	; 0
    3972:	30 e0       	ldi	r19, 0x00	; 0
    3974:	40 e8       	ldi	r20, 0x80	; 128
    3976:	5f e3       	ldi	r21, 0x3F	; 63
    3978:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    397c:	88 23       	and	r24, r24
    397e:	2c f4       	brge	.+10     	; 0x398a <Segment_init+0xdde>
		__ticks = 1;
    3980:	81 e0       	ldi	r24, 0x01	; 1
    3982:	90 e0       	ldi	r25, 0x00	; 0
    3984:	9a a3       	std	Y+34, r25	; 0x22
    3986:	89 a3       	std	Y+33, r24	; 0x21
    3988:	3f c0       	rjmp	.+126    	; 0x3a08 <Segment_init+0xe5c>
	else if (__tmp > 65535)
    398a:	6b a1       	ldd	r22, Y+35	; 0x23
    398c:	7c a1       	ldd	r23, Y+36	; 0x24
    398e:	8d a1       	ldd	r24, Y+37	; 0x25
    3990:	9e a1       	ldd	r25, Y+38	; 0x26
    3992:	20 e0       	ldi	r18, 0x00	; 0
    3994:	3f ef       	ldi	r19, 0xFF	; 255
    3996:	4f e7       	ldi	r20, 0x7F	; 127
    3998:	57 e4       	ldi	r21, 0x47	; 71
    399a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    399e:	18 16       	cp	r1, r24
    39a0:	4c f5       	brge	.+82     	; 0x39f4 <Segment_init+0xe48>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39a2:	6f a1       	ldd	r22, Y+39	; 0x27
    39a4:	78 a5       	ldd	r23, Y+40	; 0x28
    39a6:	89 a5       	ldd	r24, Y+41	; 0x29
    39a8:	9a a5       	ldd	r25, Y+42	; 0x2a
    39aa:	20 e0       	ldi	r18, 0x00	; 0
    39ac:	30 e0       	ldi	r19, 0x00	; 0
    39ae:	40 e2       	ldi	r20, 0x20	; 32
    39b0:	51 e4       	ldi	r21, 0x41	; 65
    39b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39b6:	dc 01       	movw	r26, r24
    39b8:	cb 01       	movw	r24, r22
    39ba:	bc 01       	movw	r22, r24
    39bc:	cd 01       	movw	r24, r26
    39be:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39c2:	dc 01       	movw	r26, r24
    39c4:	cb 01       	movw	r24, r22
    39c6:	9a a3       	std	Y+34, r25	; 0x22
    39c8:	89 a3       	std	Y+33, r24	; 0x21
    39ca:	0f c0       	rjmp	.+30     	; 0x39ea <Segment_init+0xe3e>
    39cc:	80 e9       	ldi	r24, 0x90	; 144
    39ce:	91 e0       	ldi	r25, 0x01	; 1
    39d0:	98 a3       	std	Y+32, r25	; 0x20
    39d2:	8f 8f       	std	Y+31, r24	; 0x1f
    39d4:	8f 8d       	ldd	r24, Y+31	; 0x1f
    39d6:	98 a1       	ldd	r25, Y+32	; 0x20
    39d8:	01 97       	sbiw	r24, 0x01	; 1
    39da:	f1 f7       	brne	.-4      	; 0x39d8 <Segment_init+0xe2c>
    39dc:	98 a3       	std	Y+32, r25	; 0x20
    39de:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    39e0:	89 a1       	ldd	r24, Y+33	; 0x21
    39e2:	9a a1       	ldd	r25, Y+34	; 0x22
    39e4:	01 97       	sbiw	r24, 0x01	; 1
    39e6:	9a a3       	std	Y+34, r25	; 0x22
    39e8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39ea:	89 a1       	ldd	r24, Y+33	; 0x21
    39ec:	9a a1       	ldd	r25, Y+34	; 0x22
    39ee:	00 97       	sbiw	r24, 0x00	; 0
    39f0:	69 f7       	brne	.-38     	; 0x39cc <Segment_init+0xe20>
    39f2:	14 c0       	rjmp	.+40     	; 0x3a1c <Segment_init+0xe70>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39f4:	6b a1       	ldd	r22, Y+35	; 0x23
    39f6:	7c a1       	ldd	r23, Y+36	; 0x24
    39f8:	8d a1       	ldd	r24, Y+37	; 0x25
    39fa:	9e a1       	ldd	r25, Y+38	; 0x26
    39fc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a00:	dc 01       	movw	r26, r24
    3a02:	cb 01       	movw	r24, r22
    3a04:	9a a3       	std	Y+34, r25	; 0x22
    3a06:	89 a3       	std	Y+33, r24	; 0x21
    3a08:	89 a1       	ldd	r24, Y+33	; 0x21
    3a0a:	9a a1       	ldd	r25, Y+34	; 0x22
    3a0c:	9e 8f       	std	Y+30, r25	; 0x1e
    3a0e:	8d 8f       	std	Y+29, r24	; 0x1d
    3a10:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3a12:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3a14:	01 97       	sbiw	r24, 0x01	; 1
    3a16:	f1 f7       	brne	.-4      	; 0x3a14 <Segment_init+0xe68>
    3a18:	9e 8f       	std	Y+30, r25	; 0x1e
    3a1a:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(2);
			DIO_voidSetPinValue(GPIOA_BASE,PIN2_ID,LOW);
    3a1c:	89 e3       	ldi	r24, 0x39	; 57
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	62 e0       	ldi	r22, 0x02	; 2
    3a22:	40 e0       	ldi	r20, 0x00	; 0
    3a24:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    3a28:	80 e0       	ldi	r24, 0x00	; 0
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	a0 e0       	ldi	r26, 0x00	; 0
    3a2e:	b0 e4       	ldi	r27, 0x40	; 64
    3a30:	89 8f       	std	Y+25, r24	; 0x19
    3a32:	9a 8f       	std	Y+26, r25	; 0x1a
    3a34:	ab 8f       	std	Y+27, r26	; 0x1b
    3a36:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3a38:	69 8d       	ldd	r22, Y+25	; 0x19
    3a3a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a3c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a3e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a40:	20 e0       	ldi	r18, 0x00	; 0
    3a42:	30 e0       	ldi	r19, 0x00	; 0
    3a44:	4a e7       	ldi	r20, 0x7A	; 122
    3a46:	55 e4       	ldi	r21, 0x45	; 69
    3a48:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3a4c:	dc 01       	movw	r26, r24
    3a4e:	cb 01       	movw	r24, r22
    3a50:	8d 8b       	std	Y+21, r24	; 0x15
    3a52:	9e 8b       	std	Y+22, r25	; 0x16
    3a54:	af 8b       	std	Y+23, r26	; 0x17
    3a56:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a58:	6d 89       	ldd	r22, Y+21	; 0x15
    3a5a:	7e 89       	ldd	r23, Y+22	; 0x16
    3a5c:	8f 89       	ldd	r24, Y+23	; 0x17
    3a5e:	98 8d       	ldd	r25, Y+24	; 0x18
    3a60:	20 e0       	ldi	r18, 0x00	; 0
    3a62:	30 e0       	ldi	r19, 0x00	; 0
    3a64:	40 e8       	ldi	r20, 0x80	; 128
    3a66:	5f e3       	ldi	r21, 0x3F	; 63
    3a68:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3a6c:	88 23       	and	r24, r24
    3a6e:	2c f4       	brge	.+10     	; 0x3a7a <Segment_init+0xece>
		__ticks = 1;
    3a70:	81 e0       	ldi	r24, 0x01	; 1
    3a72:	90 e0       	ldi	r25, 0x00	; 0
    3a74:	9c 8b       	std	Y+20, r25	; 0x14
    3a76:	8b 8b       	std	Y+19, r24	; 0x13
    3a78:	3f c0       	rjmp	.+126    	; 0x3af8 <Segment_init+0xf4c>
	else if (__tmp > 65535)
    3a7a:	6d 89       	ldd	r22, Y+21	; 0x15
    3a7c:	7e 89       	ldd	r23, Y+22	; 0x16
    3a7e:	8f 89       	ldd	r24, Y+23	; 0x17
    3a80:	98 8d       	ldd	r25, Y+24	; 0x18
    3a82:	20 e0       	ldi	r18, 0x00	; 0
    3a84:	3f ef       	ldi	r19, 0xFF	; 255
    3a86:	4f e7       	ldi	r20, 0x7F	; 127
    3a88:	57 e4       	ldi	r21, 0x47	; 71
    3a8a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3a8e:	18 16       	cp	r1, r24
    3a90:	4c f5       	brge	.+82     	; 0x3ae4 <Segment_init+0xf38>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a92:	69 8d       	ldd	r22, Y+25	; 0x19
    3a94:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a96:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a98:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a9a:	20 e0       	ldi	r18, 0x00	; 0
    3a9c:	30 e0       	ldi	r19, 0x00	; 0
    3a9e:	40 e2       	ldi	r20, 0x20	; 32
    3aa0:	51 e4       	ldi	r21, 0x41	; 65
    3aa2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3aa6:	dc 01       	movw	r26, r24
    3aa8:	cb 01       	movw	r24, r22
    3aaa:	bc 01       	movw	r22, r24
    3aac:	cd 01       	movw	r24, r26
    3aae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ab2:	dc 01       	movw	r26, r24
    3ab4:	cb 01       	movw	r24, r22
    3ab6:	9c 8b       	std	Y+20, r25	; 0x14
    3ab8:	8b 8b       	std	Y+19, r24	; 0x13
    3aba:	0f c0       	rjmp	.+30     	; 0x3ada <Segment_init+0xf2e>
    3abc:	80 e9       	ldi	r24, 0x90	; 144
    3abe:	91 e0       	ldi	r25, 0x01	; 1
    3ac0:	9a 8b       	std	Y+18, r25	; 0x12
    3ac2:	89 8b       	std	Y+17, r24	; 0x11
    3ac4:	89 89       	ldd	r24, Y+17	; 0x11
    3ac6:	9a 89       	ldd	r25, Y+18	; 0x12
    3ac8:	01 97       	sbiw	r24, 0x01	; 1
    3aca:	f1 f7       	brne	.-4      	; 0x3ac8 <Segment_init+0xf1c>
    3acc:	9a 8b       	std	Y+18, r25	; 0x12
    3ace:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3ad0:	8b 89       	ldd	r24, Y+19	; 0x13
    3ad2:	9c 89       	ldd	r25, Y+20	; 0x14
    3ad4:	01 97       	sbiw	r24, 0x01	; 1
    3ad6:	9c 8b       	std	Y+20, r25	; 0x14
    3ad8:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ada:	8b 89       	ldd	r24, Y+19	; 0x13
    3adc:	9c 89       	ldd	r25, Y+20	; 0x14
    3ade:	00 97       	sbiw	r24, 0x00	; 0
    3ae0:	69 f7       	brne	.-38     	; 0x3abc <Segment_init+0xf10>
    3ae2:	14 c0       	rjmp	.+40     	; 0x3b0c <Segment_init+0xf60>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3ae4:	6d 89       	ldd	r22, Y+21	; 0x15
    3ae6:	7e 89       	ldd	r23, Y+22	; 0x16
    3ae8:	8f 89       	ldd	r24, Y+23	; 0x17
    3aea:	98 8d       	ldd	r25, Y+24	; 0x18
    3aec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3af0:	dc 01       	movw	r26, r24
    3af2:	cb 01       	movw	r24, r22
    3af4:	9c 8b       	std	Y+20, r25	; 0x14
    3af6:	8b 8b       	std	Y+19, r24	; 0x13
    3af8:	8b 89       	ldd	r24, Y+19	; 0x13
    3afa:	9c 89       	ldd	r25, Y+20	; 0x14
    3afc:	98 8b       	std	Y+16, r25	; 0x10
    3afe:	8f 87       	std	Y+15, r24	; 0x0f
    3b00:	8f 85       	ldd	r24, Y+15	; 0x0f
    3b02:	98 89       	ldd	r25, Y+16	; 0x10
    3b04:	01 97       	sbiw	r24, 0x01	; 1
    3b06:	f1 f7       	brne	.-4      	; 0x3b04 <Segment_init+0xf58>
    3b08:	98 8b       	std	Y+16, r25	; 0x10
    3b0a:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(2);
			DIO_voidSetPinValue(GPIOB_BASE,PIN5_ID,LOW);
    3b0c:	86 e3       	ldi	r24, 0x36	; 54
    3b0e:	90 e0       	ldi	r25, 0x00	; 0
    3b10:	65 e0       	ldi	r22, 0x05	; 5
    3b12:	40 e0       	ldi	r20, 0x00	; 0
    3b14:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    3b18:	80 e0       	ldi	r24, 0x00	; 0
    3b1a:	90 e0       	ldi	r25, 0x00	; 0
    3b1c:	a0 e0       	ldi	r26, 0x00	; 0
    3b1e:	b0 e4       	ldi	r27, 0x40	; 64
    3b20:	8b 87       	std	Y+11, r24	; 0x0b
    3b22:	9c 87       	std	Y+12, r25	; 0x0c
    3b24:	ad 87       	std	Y+13, r26	; 0x0d
    3b26:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b28:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b2a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b2c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b2e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b30:	20 e0       	ldi	r18, 0x00	; 0
    3b32:	30 e0       	ldi	r19, 0x00	; 0
    3b34:	4a e7       	ldi	r20, 0x7A	; 122
    3b36:	55 e4       	ldi	r21, 0x45	; 69
    3b38:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b3c:	dc 01       	movw	r26, r24
    3b3e:	cb 01       	movw	r24, r22
    3b40:	8f 83       	std	Y+7, r24	; 0x07
    3b42:	98 87       	std	Y+8, r25	; 0x08
    3b44:	a9 87       	std	Y+9, r26	; 0x09
    3b46:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b48:	6f 81       	ldd	r22, Y+7	; 0x07
    3b4a:	78 85       	ldd	r23, Y+8	; 0x08
    3b4c:	89 85       	ldd	r24, Y+9	; 0x09
    3b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b50:	20 e0       	ldi	r18, 0x00	; 0
    3b52:	30 e0       	ldi	r19, 0x00	; 0
    3b54:	40 e8       	ldi	r20, 0x80	; 128
    3b56:	5f e3       	ldi	r21, 0x3F	; 63
    3b58:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3b5c:	88 23       	and	r24, r24
    3b5e:	2c f4       	brge	.+10     	; 0x3b6a <Segment_init+0xfbe>
		__ticks = 1;
    3b60:	81 e0       	ldi	r24, 0x01	; 1
    3b62:	90 e0       	ldi	r25, 0x00	; 0
    3b64:	9e 83       	std	Y+6, r25	; 0x06
    3b66:	8d 83       	std	Y+5, r24	; 0x05
    3b68:	3f c0       	rjmp	.+126    	; 0x3be8 <Segment_init+0x103c>
	else if (__tmp > 65535)
    3b6a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b6c:	78 85       	ldd	r23, Y+8	; 0x08
    3b6e:	89 85       	ldd	r24, Y+9	; 0x09
    3b70:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b72:	20 e0       	ldi	r18, 0x00	; 0
    3b74:	3f ef       	ldi	r19, 0xFF	; 255
    3b76:	4f e7       	ldi	r20, 0x7F	; 127
    3b78:	57 e4       	ldi	r21, 0x47	; 71
    3b7a:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3b7e:	18 16       	cp	r1, r24
    3b80:	4c f5       	brge	.+82     	; 0x3bd4 <Segment_init+0x1028>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b82:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b84:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b86:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b88:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b8a:	20 e0       	ldi	r18, 0x00	; 0
    3b8c:	30 e0       	ldi	r19, 0x00	; 0
    3b8e:	40 e2       	ldi	r20, 0x20	; 32
    3b90:	51 e4       	ldi	r21, 0x41	; 65
    3b92:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b96:	dc 01       	movw	r26, r24
    3b98:	cb 01       	movw	r24, r22
    3b9a:	bc 01       	movw	r22, r24
    3b9c:	cd 01       	movw	r24, r26
    3b9e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ba2:	dc 01       	movw	r26, r24
    3ba4:	cb 01       	movw	r24, r22
    3ba6:	9e 83       	std	Y+6, r25	; 0x06
    3ba8:	8d 83       	std	Y+5, r24	; 0x05
    3baa:	0f c0       	rjmp	.+30     	; 0x3bca <Segment_init+0x101e>
    3bac:	80 e9       	ldi	r24, 0x90	; 144
    3bae:	91 e0       	ldi	r25, 0x01	; 1
    3bb0:	9c 83       	std	Y+4, r25	; 0x04
    3bb2:	8b 83       	std	Y+3, r24	; 0x03
    3bb4:	8b 81       	ldd	r24, Y+3	; 0x03
    3bb6:	9c 81       	ldd	r25, Y+4	; 0x04
    3bb8:	01 97       	sbiw	r24, 0x01	; 1
    3bba:	f1 f7       	brne	.-4      	; 0x3bb8 <Segment_init+0x100c>
    3bbc:	9c 83       	std	Y+4, r25	; 0x04
    3bbe:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3bc0:	8d 81       	ldd	r24, Y+5	; 0x05
    3bc2:	9e 81       	ldd	r25, Y+6	; 0x06
    3bc4:	01 97       	sbiw	r24, 0x01	; 1
    3bc6:	9e 83       	std	Y+6, r25	; 0x06
    3bc8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bca:	8d 81       	ldd	r24, Y+5	; 0x05
    3bcc:	9e 81       	ldd	r25, Y+6	; 0x06
    3bce:	00 97       	sbiw	r24, 0x00	; 0
    3bd0:	69 f7       	brne	.-38     	; 0x3bac <Segment_init+0x1000>
    3bd2:	14 c0       	rjmp	.+40     	; 0x3bfc <Segment_init+0x1050>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bd4:	6f 81       	ldd	r22, Y+7	; 0x07
    3bd6:	78 85       	ldd	r23, Y+8	; 0x08
    3bd8:	89 85       	ldd	r24, Y+9	; 0x09
    3bda:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3be0:	dc 01       	movw	r26, r24
    3be2:	cb 01       	movw	r24, r22
    3be4:	9e 83       	std	Y+6, r25	; 0x06
    3be6:	8d 83       	std	Y+5, r24	; 0x05
    3be8:	8d 81       	ldd	r24, Y+5	; 0x05
    3bea:	9e 81       	ldd	r25, Y+6	; 0x06
    3bec:	9a 83       	std	Y+2, r25	; 0x02
    3bee:	89 83       	std	Y+1, r24	; 0x01
    3bf0:	89 81       	ldd	r24, Y+1	; 0x01
    3bf2:	9a 81       	ldd	r25, Y+2	; 0x02
    3bf4:	01 97       	sbiw	r24, 0x01	; 1
    3bf6:	f1 f7       	brne	.-4      	; 0x3bf4 <Segment_init+0x1048>
    3bf8:	9a 83       	std	Y+2, r25	; 0x02
    3bfa:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(2);
			DIO_voidSetPinValue(GPIOB_BASE,PIN6_ID,LOW);
    3bfc:	86 e3       	ldi	r24, 0x36	; 54
    3bfe:	90 e0       	ldi	r25, 0x00	; 0
    3c00:	66 e0       	ldi	r22, 0x06	; 6
    3c02:	40 e0       	ldi	r20, 0x00	; 0
    3c04:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
			break;
	}

}
    3c08:	c5 55       	subi	r28, 0x55	; 85
    3c0a:	df 4f       	sbci	r29, 0xFF	; 255
    3c0c:	0f b6       	in	r0, 0x3f	; 63
    3c0e:	f8 94       	cli
    3c10:	de bf       	out	0x3e, r29	; 62
    3c12:	0f be       	out	0x3f, r0	; 63
    3c14:	cd bf       	out	0x3d, r28	; 61
    3c16:	cf 91       	pop	r28
    3c18:	df 91       	pop	r29
    3c1a:	1f 91       	pop	r17
    3c1c:	0f 91       	pop	r16
    3c1e:	08 95       	ret

00003c20 <SevenSeg_Num>:
 * @retval 			-none
 * Note				-none
 * =================================================================*/
void SevenSeg_Num(uint8 num)

{
    3c20:	df 93       	push	r29
    3c22:	cf 93       	push	r28
    3c24:	00 d0       	rcall	.+0      	; 0x3c26 <SevenSeg_Num+0x6>
    3c26:	0f 92       	push	r0
    3c28:	cd b7       	in	r28, 0x3d	; 61
    3c2a:	de b7       	in	r29, 0x3e	; 62
    3c2c:	89 83       	std	Y+1, r24	; 0x01
	switch(num)
    3c2e:	89 81       	ldd	r24, Y+1	; 0x01
    3c30:	28 2f       	mov	r18, r24
    3c32:	30 e0       	ldi	r19, 0x00	; 0
    3c34:	3b 83       	std	Y+3, r19	; 0x03
    3c36:	2a 83       	std	Y+2, r18	; 0x02
    3c38:	8a 81       	ldd	r24, Y+2	; 0x02
    3c3a:	9b 81       	ldd	r25, Y+3	; 0x03
    3c3c:	84 30       	cpi	r24, 0x04	; 4
    3c3e:	91 05       	cpc	r25, r1
    3c40:	09 f4       	brne	.+2      	; 0x3c44 <SevenSeg_Num+0x24>
    3c42:	ab c0       	rjmp	.+342    	; 0x3d9a <SevenSeg_Num+0x17a>
    3c44:	2a 81       	ldd	r18, Y+2	; 0x02
    3c46:	3b 81       	ldd	r19, Y+3	; 0x03
    3c48:	25 30       	cpi	r18, 0x05	; 5
    3c4a:	31 05       	cpc	r19, r1
    3c4c:	ec f4       	brge	.+58     	; 0x3c88 <SevenSeg_Num+0x68>
    3c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c50:	9b 81       	ldd	r25, Y+3	; 0x03
    3c52:	81 30       	cpi	r24, 0x01	; 1
    3c54:	91 05       	cpc	r25, r1
    3c56:	09 f4       	brne	.+2      	; 0x3c5a <SevenSeg_Num+0x3a>
    3c58:	55 c0       	rjmp	.+170    	; 0x3d04 <SevenSeg_Num+0xe4>
    3c5a:	2a 81       	ldd	r18, Y+2	; 0x02
    3c5c:	3b 81       	ldd	r19, Y+3	; 0x03
    3c5e:	22 30       	cpi	r18, 0x02	; 2
    3c60:	31 05       	cpc	r19, r1
    3c62:	2c f4       	brge	.+10     	; 0x3c6e <SevenSeg_Num+0x4e>
    3c64:	8a 81       	ldd	r24, Y+2	; 0x02
    3c66:	9b 81       	ldd	r25, Y+3	; 0x03
    3c68:	00 97       	sbiw	r24, 0x00	; 0
    3c6a:	99 f1       	breq	.+102    	; 0x3cd2 <SevenSeg_Num+0xb2>
    3c6c:	2b c1       	rjmp	.+598    	; 0x3ec4 <SevenSeg_Num+0x2a4>
    3c6e:	2a 81       	ldd	r18, Y+2	; 0x02
    3c70:	3b 81       	ldd	r19, Y+3	; 0x03
    3c72:	22 30       	cpi	r18, 0x02	; 2
    3c74:	31 05       	cpc	r19, r1
    3c76:	09 f4       	brne	.+2      	; 0x3c7a <SevenSeg_Num+0x5a>
    3c78:	5e c0       	rjmp	.+188    	; 0x3d36 <SevenSeg_Num+0x116>
    3c7a:	8a 81       	ldd	r24, Y+2	; 0x02
    3c7c:	9b 81       	ldd	r25, Y+3	; 0x03
    3c7e:	83 30       	cpi	r24, 0x03	; 3
    3c80:	91 05       	cpc	r25, r1
    3c82:	09 f4       	brne	.+2      	; 0x3c86 <SevenSeg_Num+0x66>
    3c84:	71 c0       	rjmp	.+226    	; 0x3d68 <SevenSeg_Num+0x148>
    3c86:	1e c1       	rjmp	.+572    	; 0x3ec4 <SevenSeg_Num+0x2a4>
    3c88:	2a 81       	ldd	r18, Y+2	; 0x02
    3c8a:	3b 81       	ldd	r19, Y+3	; 0x03
    3c8c:	27 30       	cpi	r18, 0x07	; 7
    3c8e:	31 05       	cpc	r19, r1
    3c90:	09 f4       	brne	.+2      	; 0x3c94 <SevenSeg_Num+0x74>
    3c92:	ce c0       	rjmp	.+412    	; 0x3e30 <SevenSeg_Num+0x210>
    3c94:	8a 81       	ldd	r24, Y+2	; 0x02
    3c96:	9b 81       	ldd	r25, Y+3	; 0x03
    3c98:	88 30       	cpi	r24, 0x08	; 8
    3c9a:	91 05       	cpc	r25, r1
    3c9c:	6c f4       	brge	.+26     	; 0x3cb8 <SevenSeg_Num+0x98>
    3c9e:	2a 81       	ldd	r18, Y+2	; 0x02
    3ca0:	3b 81       	ldd	r19, Y+3	; 0x03
    3ca2:	25 30       	cpi	r18, 0x05	; 5
    3ca4:	31 05       	cpc	r19, r1
    3ca6:	09 f4       	brne	.+2      	; 0x3caa <SevenSeg_Num+0x8a>
    3ca8:	91 c0       	rjmp	.+290    	; 0x3dcc <SevenSeg_Num+0x1ac>
    3caa:	8a 81       	ldd	r24, Y+2	; 0x02
    3cac:	9b 81       	ldd	r25, Y+3	; 0x03
    3cae:	86 30       	cpi	r24, 0x06	; 6
    3cb0:	91 05       	cpc	r25, r1
    3cb2:	09 f4       	brne	.+2      	; 0x3cb6 <SevenSeg_Num+0x96>
    3cb4:	a4 c0       	rjmp	.+328    	; 0x3dfe <SevenSeg_Num+0x1de>
    3cb6:	06 c1       	rjmp	.+524    	; 0x3ec4 <SevenSeg_Num+0x2a4>
    3cb8:	2a 81       	ldd	r18, Y+2	; 0x02
    3cba:	3b 81       	ldd	r19, Y+3	; 0x03
    3cbc:	28 30       	cpi	r18, 0x08	; 8
    3cbe:	31 05       	cpc	r19, r1
    3cc0:	09 f4       	brne	.+2      	; 0x3cc4 <SevenSeg_Num+0xa4>
    3cc2:	cf c0       	rjmp	.+414    	; 0x3e62 <SevenSeg_Num+0x242>
    3cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    3cc6:	9b 81       	ldd	r25, Y+3	; 0x03
    3cc8:	89 30       	cpi	r24, 0x09	; 9
    3cca:	91 05       	cpc	r25, r1
    3ccc:	09 f4       	brne	.+2      	; 0x3cd0 <SevenSeg_Num+0xb0>
    3cce:	e2 c0       	rjmp	.+452    	; 0x3e94 <SevenSeg_Num+0x274>
    3cd0:	f9 c0       	rjmp	.+498    	; 0x3ec4 <SevenSeg_Num+0x2a4>
	{
	case 0:
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,LOW);
    3cd2:	86 e3       	ldi	r24, 0x36	; 54
    3cd4:	90 e0       	ldi	r25, 0x00	; 0
    3cd6:	60 e0       	ldi	r22, 0x00	; 0
    3cd8:	40 e0       	ldi	r20, 0x00	; 0
    3cda:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,LOW);
    3cde:	86 e3       	ldi	r24, 0x36	; 54
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	61 e0       	ldi	r22, 0x01	; 1
    3ce4:	40 e0       	ldi	r20, 0x00	; 0
    3ce6:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,LOW);
    3cea:	86 e3       	ldi	r24, 0x36	; 54
    3cec:	90 e0       	ldi	r25, 0x00	; 0
    3cee:	62 e0       	ldi	r22, 0x02	; 2
    3cf0:	40 e0       	ldi	r20, 0x00	; 0
    3cf2:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,LOW);
    3cf6:	86 e3       	ldi	r24, 0x36	; 54
    3cf8:	90 e0       	ldi	r25, 0x00	; 0
    3cfa:	64 e0       	ldi	r22, 0x04	; 4
    3cfc:	40 e0       	ldi	r20, 0x00	; 0
    3cfe:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    3d02:	e0 c0       	rjmp	.+448    	; 0x3ec4 <SevenSeg_Num+0x2a4>
		break;
	case 1 :
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,HIGH);
    3d04:	86 e3       	ldi	r24, 0x36	; 54
    3d06:	90 e0       	ldi	r25, 0x00	; 0
    3d08:	60 e0       	ldi	r22, 0x00	; 0
    3d0a:	41 e0       	ldi	r20, 0x01	; 1
    3d0c:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,LOW);
    3d10:	86 e3       	ldi	r24, 0x36	; 54
    3d12:	90 e0       	ldi	r25, 0x00	; 0
    3d14:	61 e0       	ldi	r22, 0x01	; 1
    3d16:	40 e0       	ldi	r20, 0x00	; 0
    3d18:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,LOW);
    3d1c:	86 e3       	ldi	r24, 0x36	; 54
    3d1e:	90 e0       	ldi	r25, 0x00	; 0
    3d20:	62 e0       	ldi	r22, 0x02	; 2
    3d22:	40 e0       	ldi	r20, 0x00	; 0
    3d24:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,LOW);
    3d28:	86 e3       	ldi	r24, 0x36	; 54
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	64 e0       	ldi	r22, 0x04	; 4
    3d2e:	40 e0       	ldi	r20, 0x00	; 0
    3d30:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    3d34:	c7 c0       	rjmp	.+398    	; 0x3ec4 <SevenSeg_Num+0x2a4>
		break;
	case 2 :
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,LOW);
    3d36:	86 e3       	ldi	r24, 0x36	; 54
    3d38:	90 e0       	ldi	r25, 0x00	; 0
    3d3a:	60 e0       	ldi	r22, 0x00	; 0
    3d3c:	40 e0       	ldi	r20, 0x00	; 0
    3d3e:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,HIGH);
    3d42:	86 e3       	ldi	r24, 0x36	; 54
    3d44:	90 e0       	ldi	r25, 0x00	; 0
    3d46:	61 e0       	ldi	r22, 0x01	; 1
    3d48:	41 e0       	ldi	r20, 0x01	; 1
    3d4a:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,LOW);
    3d4e:	86 e3       	ldi	r24, 0x36	; 54
    3d50:	90 e0       	ldi	r25, 0x00	; 0
    3d52:	62 e0       	ldi	r22, 0x02	; 2
    3d54:	40 e0       	ldi	r20, 0x00	; 0
    3d56:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,LOW);
    3d5a:	86 e3       	ldi	r24, 0x36	; 54
    3d5c:	90 e0       	ldi	r25, 0x00	; 0
    3d5e:	64 e0       	ldi	r22, 0x04	; 4
    3d60:	40 e0       	ldi	r20, 0x00	; 0
    3d62:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    3d66:	ae c0       	rjmp	.+348    	; 0x3ec4 <SevenSeg_Num+0x2a4>
		break;
	case 3 :
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,HIGH);
    3d68:	86 e3       	ldi	r24, 0x36	; 54
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	60 e0       	ldi	r22, 0x00	; 0
    3d6e:	41 e0       	ldi	r20, 0x01	; 1
    3d70:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,HIGH);
    3d74:	86 e3       	ldi	r24, 0x36	; 54
    3d76:	90 e0       	ldi	r25, 0x00	; 0
    3d78:	61 e0       	ldi	r22, 0x01	; 1
    3d7a:	41 e0       	ldi	r20, 0x01	; 1
    3d7c:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,LOW);
    3d80:	86 e3       	ldi	r24, 0x36	; 54
    3d82:	90 e0       	ldi	r25, 0x00	; 0
    3d84:	62 e0       	ldi	r22, 0x02	; 2
    3d86:	40 e0       	ldi	r20, 0x00	; 0
    3d88:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,LOW);
    3d8c:	86 e3       	ldi	r24, 0x36	; 54
    3d8e:	90 e0       	ldi	r25, 0x00	; 0
    3d90:	64 e0       	ldi	r22, 0x04	; 4
    3d92:	40 e0       	ldi	r20, 0x00	; 0
    3d94:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    3d98:	95 c0       	rjmp	.+298    	; 0x3ec4 <SevenSeg_Num+0x2a4>
		break;
	case 4 :
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,LOW);
    3d9a:	86 e3       	ldi	r24, 0x36	; 54
    3d9c:	90 e0       	ldi	r25, 0x00	; 0
    3d9e:	60 e0       	ldi	r22, 0x00	; 0
    3da0:	40 e0       	ldi	r20, 0x00	; 0
    3da2:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,LOW);
    3da6:	86 e3       	ldi	r24, 0x36	; 54
    3da8:	90 e0       	ldi	r25, 0x00	; 0
    3daa:	61 e0       	ldi	r22, 0x01	; 1
    3dac:	40 e0       	ldi	r20, 0x00	; 0
    3dae:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,HIGH);
    3db2:	86 e3       	ldi	r24, 0x36	; 54
    3db4:	90 e0       	ldi	r25, 0x00	; 0
    3db6:	62 e0       	ldi	r22, 0x02	; 2
    3db8:	41 e0       	ldi	r20, 0x01	; 1
    3dba:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,LOW);
    3dbe:	86 e3       	ldi	r24, 0x36	; 54
    3dc0:	90 e0       	ldi	r25, 0x00	; 0
    3dc2:	64 e0       	ldi	r22, 0x04	; 4
    3dc4:	40 e0       	ldi	r20, 0x00	; 0
    3dc6:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    3dca:	7c c0       	rjmp	.+248    	; 0x3ec4 <SevenSeg_Num+0x2a4>
		break;
	case 5 :
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,HIGH);
    3dcc:	86 e3       	ldi	r24, 0x36	; 54
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	60 e0       	ldi	r22, 0x00	; 0
    3dd2:	41 e0       	ldi	r20, 0x01	; 1
    3dd4:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,LOW);
    3dd8:	86 e3       	ldi	r24, 0x36	; 54
    3dda:	90 e0       	ldi	r25, 0x00	; 0
    3ddc:	61 e0       	ldi	r22, 0x01	; 1
    3dde:	40 e0       	ldi	r20, 0x00	; 0
    3de0:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,HIGH);
    3de4:	86 e3       	ldi	r24, 0x36	; 54
    3de6:	90 e0       	ldi	r25, 0x00	; 0
    3de8:	62 e0       	ldi	r22, 0x02	; 2
    3dea:	41 e0       	ldi	r20, 0x01	; 1
    3dec:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,LOW);
    3df0:	86 e3       	ldi	r24, 0x36	; 54
    3df2:	90 e0       	ldi	r25, 0x00	; 0
    3df4:	64 e0       	ldi	r22, 0x04	; 4
    3df6:	40 e0       	ldi	r20, 0x00	; 0
    3df8:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    3dfc:	63 c0       	rjmp	.+198    	; 0x3ec4 <SevenSeg_Num+0x2a4>
		break;
	case 6 :
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,LOW);
    3dfe:	86 e3       	ldi	r24, 0x36	; 54
    3e00:	90 e0       	ldi	r25, 0x00	; 0
    3e02:	60 e0       	ldi	r22, 0x00	; 0
    3e04:	40 e0       	ldi	r20, 0x00	; 0
    3e06:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,HIGH);
    3e0a:	86 e3       	ldi	r24, 0x36	; 54
    3e0c:	90 e0       	ldi	r25, 0x00	; 0
    3e0e:	61 e0       	ldi	r22, 0x01	; 1
    3e10:	41 e0       	ldi	r20, 0x01	; 1
    3e12:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,HIGH);
    3e16:	86 e3       	ldi	r24, 0x36	; 54
    3e18:	90 e0       	ldi	r25, 0x00	; 0
    3e1a:	62 e0       	ldi	r22, 0x02	; 2
    3e1c:	41 e0       	ldi	r20, 0x01	; 1
    3e1e:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,LOW);
    3e22:	86 e3       	ldi	r24, 0x36	; 54
    3e24:	90 e0       	ldi	r25, 0x00	; 0
    3e26:	64 e0       	ldi	r22, 0x04	; 4
    3e28:	40 e0       	ldi	r20, 0x00	; 0
    3e2a:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    3e2e:	4a c0       	rjmp	.+148    	; 0x3ec4 <SevenSeg_Num+0x2a4>
		break;
	case 7 :
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,HIGH);
    3e30:	86 e3       	ldi	r24, 0x36	; 54
    3e32:	90 e0       	ldi	r25, 0x00	; 0
    3e34:	60 e0       	ldi	r22, 0x00	; 0
    3e36:	41 e0       	ldi	r20, 0x01	; 1
    3e38:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,HIGH);
    3e3c:	86 e3       	ldi	r24, 0x36	; 54
    3e3e:	90 e0       	ldi	r25, 0x00	; 0
    3e40:	61 e0       	ldi	r22, 0x01	; 1
    3e42:	41 e0       	ldi	r20, 0x01	; 1
    3e44:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,HIGH);
    3e48:	86 e3       	ldi	r24, 0x36	; 54
    3e4a:	90 e0       	ldi	r25, 0x00	; 0
    3e4c:	62 e0       	ldi	r22, 0x02	; 2
    3e4e:	41 e0       	ldi	r20, 0x01	; 1
    3e50:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,LOW);
    3e54:	86 e3       	ldi	r24, 0x36	; 54
    3e56:	90 e0       	ldi	r25, 0x00	; 0
    3e58:	64 e0       	ldi	r22, 0x04	; 4
    3e5a:	40 e0       	ldi	r20, 0x00	; 0
    3e5c:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    3e60:	31 c0       	rjmp	.+98     	; 0x3ec4 <SevenSeg_Num+0x2a4>
		break;
	case 8 :
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,LOW);
    3e62:	86 e3       	ldi	r24, 0x36	; 54
    3e64:	90 e0       	ldi	r25, 0x00	; 0
    3e66:	60 e0       	ldi	r22, 0x00	; 0
    3e68:	40 e0       	ldi	r20, 0x00	; 0
    3e6a:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,LOW);
    3e6e:	86 e3       	ldi	r24, 0x36	; 54
    3e70:	90 e0       	ldi	r25, 0x00	; 0
    3e72:	61 e0       	ldi	r22, 0x01	; 1
    3e74:	40 e0       	ldi	r20, 0x00	; 0
    3e76:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,LOW);
    3e7a:	86 e3       	ldi	r24, 0x36	; 54
    3e7c:	90 e0       	ldi	r25, 0x00	; 0
    3e7e:	62 e0       	ldi	r22, 0x02	; 2
    3e80:	40 e0       	ldi	r20, 0x00	; 0
    3e82:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,HIGH);
    3e86:	86 e3       	ldi	r24, 0x36	; 54
    3e88:	90 e0       	ldi	r25, 0x00	; 0
    3e8a:	64 e0       	ldi	r22, 0x04	; 4
    3e8c:	41 e0       	ldi	r20, 0x01	; 1
    3e8e:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
    3e92:	18 c0       	rjmp	.+48     	; 0x3ec4 <SevenSeg_Num+0x2a4>
		break;
	case 9 :
		DIO_voidSetPinValue(GPIOB_BASE,PIN0_ID,HIGH);
    3e94:	86 e3       	ldi	r24, 0x36	; 54
    3e96:	90 e0       	ldi	r25, 0x00	; 0
    3e98:	60 e0       	ldi	r22, 0x00	; 0
    3e9a:	41 e0       	ldi	r20, 0x01	; 1
    3e9c:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN1_ID,LOW);
    3ea0:	86 e3       	ldi	r24, 0x36	; 54
    3ea2:	90 e0       	ldi	r25, 0x00	; 0
    3ea4:	61 e0       	ldi	r22, 0x01	; 1
    3ea6:	40 e0       	ldi	r20, 0x00	; 0
    3ea8:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN2_ID,LOW);
    3eac:	86 e3       	ldi	r24, 0x36	; 54
    3eae:	90 e0       	ldi	r25, 0x00	; 0
    3eb0:	62 e0       	ldi	r22, 0x02	; 2
    3eb2:	40 e0       	ldi	r20, 0x00	; 0
    3eb4:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		DIO_voidSetPinValue(GPIOB_BASE,PIN4_ID,HIGH);
    3eb8:	86 e3       	ldi	r24, 0x36	; 54
    3eba:	90 e0       	ldi	r25, 0x00	; 0
    3ebc:	64 e0       	ldi	r22, 0x04	; 4
    3ebe:	41 e0       	ldi	r20, 0x01	; 1
    3ec0:	0e 94 04 09 	call	0x1208	; 0x1208 <DIO_voidSetPinValue>
		break;
	}

}
    3ec4:	0f 90       	pop	r0
    3ec6:	0f 90       	pop	r0
    3ec8:	0f 90       	pop	r0
    3eca:	cf 91       	pop	r28
    3ecc:	df 91       	pop	r29
    3ece:	08 95       	ret

00003ed0 <getID>:
uint8 g_inputID  [4];
uint8 g_inputPass  [4];


void getID(uint8 * arrayName)
{
    3ed0:	df 93       	push	r29
    3ed2:	cf 93       	push	r28
    3ed4:	00 d0       	rcall	.+0      	; 0x3ed6 <getID+0x6>
    3ed6:	00 d0       	rcall	.+0      	; 0x3ed8 <getID+0x8>
    3ed8:	cd b7       	in	r28, 0x3d	; 61
    3eda:	de b7       	in	r29, 0x3e	; 62
    3edc:	9c 83       	std	Y+4, r25	; 0x04
    3ede:	8b 83       	std	Y+3, r24	; 0x03
	H_LCD_void_gotoXY(1, 0);
    3ee0:	81 e0       	ldi	r24, 0x01	; 1
    3ee2:	60 e0       	ldi	r22, 0x00	; 0
    3ee4:	0e 94 a5 15 	call	0x2b4a	; 0x2b4a <H_LCD_void_gotoXY>
	uint8 i = 0;
    3ee8:	1a 82       	std	Y+2, r1	; 0x02
    3eea:	18 c0       	rjmp	.+48     	; 0x3f1c <getID+0x4c>
	uint8 key;

	while(i != 4)
	{
		key = KEYPAD_Get_Pressed_Key();
    3eec:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <KEYPAD_Get_Pressed_Key>
    3ef0:	89 83       	std	Y+1, r24	; 0x01
		if (key >= 0 && key <= 9)
    3ef2:	89 81       	ldd	r24, Y+1	; 0x01
    3ef4:	8a 30       	cpi	r24, 0x0A	; 10
    3ef6:	90 f4       	brcc	.+36     	; 0x3f1c <getID+0x4c>
		{
			H_LCD_int_to_string(key);
    3ef8:	89 81       	ldd	r24, Y+1	; 0x01
    3efa:	88 2f       	mov	r24, r24
    3efc:	90 e0       	ldi	r25, 0x00	; 0
    3efe:	0e 94 82 15 	call	0x2b04	; 0x2b04 <H_LCD_int_to_string>
			*(arrayName + i) = key;
    3f02:	8a 81       	ldd	r24, Y+2	; 0x02
    3f04:	28 2f       	mov	r18, r24
    3f06:	30 e0       	ldi	r19, 0x00	; 0
    3f08:	8b 81       	ldd	r24, Y+3	; 0x03
    3f0a:	9c 81       	ldd	r25, Y+4	; 0x04
    3f0c:	fc 01       	movw	r30, r24
    3f0e:	e2 0f       	add	r30, r18
    3f10:	f3 1f       	adc	r31, r19
    3f12:	89 81       	ldd	r24, Y+1	; 0x01
    3f14:	80 83       	st	Z, r24
			i++;
    3f16:	8a 81       	ldd	r24, Y+2	; 0x02
    3f18:	8f 5f       	subi	r24, 0xFF	; 255
    3f1a:	8a 83       	std	Y+2, r24	; 0x02
{
	H_LCD_void_gotoXY(1, 0);
	uint8 i = 0;
	uint8 key;

	while(i != 4)
    3f1c:	8a 81       	ldd	r24, Y+2	; 0x02
    3f1e:	84 30       	cpi	r24, 0x04	; 4
    3f20:	29 f7       	brne	.-54     	; 0x3eec <getID+0x1c>
			*(arrayName + i) = key;
			i++;
		}

	}
	key = 0;
    3f22:	19 82       	std	Y+1, r1	; 0x01

	/* stay till user pushes Enter */
	while(KEYPAD_Get_Pressed_Key() != 'A');
    3f24:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <KEYPAD_Get_Pressed_Key>
    3f28:	81 34       	cpi	r24, 0x41	; 65
    3f2a:	e1 f7       	brne	.-8      	; 0x3f24 <getID+0x54>
}
    3f2c:	0f 90       	pop	r0
    3f2e:	0f 90       	pop	r0
    3f30:	0f 90       	pop	r0
    3f32:	0f 90       	pop	r0
    3f34:	cf 91       	pop	r28
    3f36:	df 91       	pop	r29
    3f38:	08 95       	ret

00003f3a <compareEnteredID>:

 ;
uint8 compareEnteredID(const uint8_t* enteredID) {
    3f3a:	df 93       	push	r29
    3f3c:	cf 93       	push	r28
    3f3e:	cd b7       	in	r28, 0x3d	; 61
    3f40:	de b7       	in	r29, 0x3e	; 62
    3f42:	27 97       	sbiw	r28, 0x07	; 7
    3f44:	0f b6       	in	r0, 0x3f	; 63
    3f46:	f8 94       	cli
    3f48:	de bf       	out	0x3e, r29	; 62
    3f4a:	0f be       	out	0x3f, r0	; 63
    3f4c:	cd bf       	out	0x3d, r28	; 61
    3f4e:	9e 83       	std	Y+6, r25	; 0x06
    3f50:	8d 83       	std	Y+5, r24	; 0x05
	uint16_t enteredIDValue = 0;
    3f52:	1c 82       	std	Y+4, r1	; 0x04
    3f54:	1b 82       	std	Y+3, r1	; 0x03
	for (uint8_t i = 0; i < 4; i++) {
    3f56:	1a 82       	std	Y+2, r1	; 0x02
    3f58:	1f c0       	rjmp	.+62     	; 0x3f98 <compareEnteredID+0x5e>
		enteredIDValue = enteredIDValue * 10 + enteredID[i];
    3f5a:	8b 81       	ldd	r24, Y+3	; 0x03
    3f5c:	9c 81       	ldd	r25, Y+4	; 0x04
    3f5e:	9c 01       	movw	r18, r24
    3f60:	22 0f       	add	r18, r18
    3f62:	33 1f       	adc	r19, r19
    3f64:	c9 01       	movw	r24, r18
    3f66:	88 0f       	add	r24, r24
    3f68:	99 1f       	adc	r25, r25
    3f6a:	88 0f       	add	r24, r24
    3f6c:	99 1f       	adc	r25, r25
    3f6e:	a9 01       	movw	r20, r18
    3f70:	48 0f       	add	r20, r24
    3f72:	59 1f       	adc	r21, r25
    3f74:	8a 81       	ldd	r24, Y+2	; 0x02
    3f76:	28 2f       	mov	r18, r24
    3f78:	30 e0       	ldi	r19, 0x00	; 0
    3f7a:	8d 81       	ldd	r24, Y+5	; 0x05
    3f7c:	9e 81       	ldd	r25, Y+6	; 0x06
    3f7e:	fc 01       	movw	r30, r24
    3f80:	e2 0f       	add	r30, r18
    3f82:	f3 1f       	adc	r31, r19
    3f84:	80 81       	ld	r24, Z
    3f86:	88 2f       	mov	r24, r24
    3f88:	90 e0       	ldi	r25, 0x00	; 0
    3f8a:	84 0f       	add	r24, r20
    3f8c:	95 1f       	adc	r25, r21
    3f8e:	9c 83       	std	Y+4, r25	; 0x04
    3f90:	8b 83       	std	Y+3, r24	; 0x03
}

 ;
uint8 compareEnteredID(const uint8_t* enteredID) {
	uint16_t enteredIDValue = 0;
	for (uint8_t i = 0; i < 4; i++) {
    3f92:	8a 81       	ldd	r24, Y+2	; 0x02
    3f94:	8f 5f       	subi	r24, 0xFF	; 255
    3f96:	8a 83       	std	Y+2, r24	; 0x02
    3f98:	8a 81       	ldd	r24, Y+2	; 0x02
    3f9a:	84 30       	cpi	r24, 0x04	; 4
    3f9c:	f0 f2       	brcs	.-68     	; 0x3f5a <compareEnteredID+0x20>
		enteredIDValue = enteredIDValue * 10 + enteredID[i];
	}

	for ( uint8_t j = 0; j < DATABASE_SIZE; j++) {
    3f9e:	19 82       	std	Y+1, r1	; 0x01
    3fa0:	17 c0       	rjmp	.+46     	; 0x3fd0 <compareEnteredID+0x96>
		if (enteredIDValue == userIDs[j]) {
    3fa2:	89 81       	ldd	r24, Y+1	; 0x01
    3fa4:	88 2f       	mov	r24, r24
    3fa6:	90 e0       	ldi	r25, 0x00	; 0
    3fa8:	88 0f       	add	r24, r24
    3faa:	99 1f       	adc	r25, r25
    3fac:	fc 01       	movw	r30, r24
    3fae:	ea 5f       	subi	r30, 0xFA	; 250
    3fb0:	fd 4f       	sbci	r31, 0xFD	; 253
    3fb2:	20 81       	ld	r18, Z
    3fb4:	31 81       	ldd	r19, Z+1	; 0x01
    3fb6:	8b 81       	ldd	r24, Y+3	; 0x03
    3fb8:	9c 81       	ldd	r25, Y+4	; 0x04
    3fba:	28 17       	cp	r18, r24
    3fbc:	39 07       	cpc	r19, r25
    3fbe:	29 f4       	brne	.+10     	; 0x3fca <compareEnteredID+0x90>
			return j+1; // Return the index of the matched element
    3fc0:	89 81       	ldd	r24, Y+1	; 0x01
    3fc2:	98 2f       	mov	r25, r24
    3fc4:	9f 5f       	subi	r25, 0xFF	; 255
    3fc6:	9f 83       	std	Y+7, r25	; 0x07
    3fc8:	08 c0       	rjmp	.+16     	; 0x3fda <compareEnteredID+0xa0>
	uint16_t enteredIDValue = 0;
	for (uint8_t i = 0; i < 4; i++) {
		enteredIDValue = enteredIDValue * 10 + enteredID[i];
	}

	for ( uint8_t j = 0; j < DATABASE_SIZE; j++) {
    3fca:	89 81       	ldd	r24, Y+1	; 0x01
    3fcc:	8f 5f       	subi	r24, 0xFF	; 255
    3fce:	89 83       	std	Y+1, r24	; 0x01
    3fd0:	89 81       	ldd	r24, Y+1	; 0x01
    3fd2:	82 30       	cpi	r24, 0x02	; 2
    3fd4:	30 f3       	brcs	.-52     	; 0x3fa2 <compareEnteredID+0x68>
		if (enteredIDValue == userIDs[j]) {
			return j+1; // Return the index of the matched element
		}
	}

	return -1; // No match found
    3fd6:	8f ef       	ldi	r24, 0xFF	; 255
    3fd8:	8f 83       	std	Y+7, r24	; 0x07
    3fda:	8f 81       	ldd	r24, Y+7	; 0x07
}
    3fdc:	27 96       	adiw	r28, 0x07	; 7
    3fde:	0f b6       	in	r0, 0x3f	; 63
    3fe0:	f8 94       	cli
    3fe2:	de bf       	out	0x3e, r29	; 62
    3fe4:	0f be       	out	0x3f, r0	; 63
    3fe6:	cd bf       	out	0x3d, r28	; 61
    3fe8:	cf 91       	pop	r28
    3fea:	df 91       	pop	r29
    3fec:	08 95       	ret

00003fee <compareEnteredPass>:


uint8 compareEnteredPass(const uint8_t* enteredID) {
    3fee:	df 93       	push	r29
    3ff0:	cf 93       	push	r28
    3ff2:	cd b7       	in	r28, 0x3d	; 61
    3ff4:	de b7       	in	r29, 0x3e	; 62
    3ff6:	27 97       	sbiw	r28, 0x07	; 7
    3ff8:	0f b6       	in	r0, 0x3f	; 63
    3ffa:	f8 94       	cli
    3ffc:	de bf       	out	0x3e, r29	; 62
    3ffe:	0f be       	out	0x3f, r0	; 63
    4000:	cd bf       	out	0x3d, r28	; 61
    4002:	9e 83       	std	Y+6, r25	; 0x06
    4004:	8d 83       	std	Y+5, r24	; 0x05
	uint16_t enteredIDValue = 0;
    4006:	1c 82       	std	Y+4, r1	; 0x04
    4008:	1b 82       	std	Y+3, r1	; 0x03
	for (uint8_t i = 0; i < 4; i++) {
    400a:	1a 82       	std	Y+2, r1	; 0x02
    400c:	1f c0       	rjmp	.+62     	; 0x404c <compareEnteredPass+0x5e>
		enteredIDValue = enteredIDValue * 10 + enteredID[i];
    400e:	8b 81       	ldd	r24, Y+3	; 0x03
    4010:	9c 81       	ldd	r25, Y+4	; 0x04
    4012:	9c 01       	movw	r18, r24
    4014:	22 0f       	add	r18, r18
    4016:	33 1f       	adc	r19, r19
    4018:	c9 01       	movw	r24, r18
    401a:	88 0f       	add	r24, r24
    401c:	99 1f       	adc	r25, r25
    401e:	88 0f       	add	r24, r24
    4020:	99 1f       	adc	r25, r25
    4022:	a9 01       	movw	r20, r18
    4024:	48 0f       	add	r20, r24
    4026:	59 1f       	adc	r21, r25
    4028:	8a 81       	ldd	r24, Y+2	; 0x02
    402a:	28 2f       	mov	r18, r24
    402c:	30 e0       	ldi	r19, 0x00	; 0
    402e:	8d 81       	ldd	r24, Y+5	; 0x05
    4030:	9e 81       	ldd	r25, Y+6	; 0x06
    4032:	fc 01       	movw	r30, r24
    4034:	e2 0f       	add	r30, r18
    4036:	f3 1f       	adc	r31, r19
    4038:	80 81       	ld	r24, Z
    403a:	88 2f       	mov	r24, r24
    403c:	90 e0       	ldi	r25, 0x00	; 0
    403e:	84 0f       	add	r24, r20
    4040:	95 1f       	adc	r25, r21
    4042:	9c 83       	std	Y+4, r25	; 0x04
    4044:	8b 83       	std	Y+3, r24	; 0x03
}


uint8 compareEnteredPass(const uint8_t* enteredID) {
	uint16_t enteredIDValue = 0;
	for (uint8_t i = 0; i < 4; i++) {
    4046:	8a 81       	ldd	r24, Y+2	; 0x02
    4048:	8f 5f       	subi	r24, 0xFF	; 255
    404a:	8a 83       	std	Y+2, r24	; 0x02
    404c:	8a 81       	ldd	r24, Y+2	; 0x02
    404e:	84 30       	cpi	r24, 0x04	; 4
    4050:	f0 f2       	brcs	.-68     	; 0x400e <compareEnteredPass+0x20>
		enteredIDValue = enteredIDValue * 10 + enteredID[i];
	}

	for (uint8_t i = 0; i < DATABASE_SIZE; i++) {
    4052:	19 82       	std	Y+1, r1	; 0x01
    4054:	17 c0       	rjmp	.+46     	; 0x4084 <compareEnteredPass+0x96>
		if (enteredIDValue == passwords[i]) {
    4056:	89 81       	ldd	r24, Y+1	; 0x01
    4058:	88 2f       	mov	r24, r24
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	88 0f       	add	r24, r24
    405e:	99 1f       	adc	r25, r25
    4060:	fc 01       	movw	r30, r24
    4062:	e6 5f       	subi	r30, 0xF6	; 246
    4064:	fd 4f       	sbci	r31, 0xFD	; 253
    4066:	20 81       	ld	r18, Z
    4068:	31 81       	ldd	r19, Z+1	; 0x01
    406a:	8b 81       	ldd	r24, Y+3	; 0x03
    406c:	9c 81       	ldd	r25, Y+4	; 0x04
    406e:	28 17       	cp	r18, r24
    4070:	39 07       	cpc	r19, r25
    4072:	29 f4       	brne	.+10     	; 0x407e <compareEnteredPass+0x90>
			return i+1; // Return the index of the matched element
    4074:	89 81       	ldd	r24, Y+1	; 0x01
    4076:	98 2f       	mov	r25, r24
    4078:	9f 5f       	subi	r25, 0xFF	; 255
    407a:	9f 83       	std	Y+7, r25	; 0x07
    407c:	08 c0       	rjmp	.+16     	; 0x408e <compareEnteredPass+0xa0>
	uint16_t enteredIDValue = 0;
	for (uint8_t i = 0; i < 4; i++) {
		enteredIDValue = enteredIDValue * 10 + enteredID[i];
	}

	for (uint8_t i = 0; i < DATABASE_SIZE; i++) {
    407e:	89 81       	ldd	r24, Y+1	; 0x01
    4080:	8f 5f       	subi	r24, 0xFF	; 255
    4082:	89 83       	std	Y+1, r24	; 0x01
    4084:	89 81       	ldd	r24, Y+1	; 0x01
    4086:	82 30       	cpi	r24, 0x02	; 2
    4088:	30 f3       	brcs	.-52     	; 0x4056 <compareEnteredPass+0x68>
		if (enteredIDValue == passwords[i]) {
			return i+1; // Return the index of the matched element
		}
	}

	return -1; // No match found
    408a:	8f ef       	ldi	r24, 0xFF	; 255
    408c:	8f 83       	std	Y+7, r24	; 0x07
    408e:	8f 81       	ldd	r24, Y+7	; 0x07
}
    4090:	27 96       	adiw	r28, 0x07	; 7
    4092:	0f b6       	in	r0, 0x3f	; 63
    4094:	f8 94       	cli
    4096:	de bf       	out	0x3e, r29	; 62
    4098:	0f be       	out	0x3f, r0	; 63
    409a:	cd bf       	out	0x3d, r28	; 61
    409c:	cf 91       	pop	r28
    409e:	df 91       	pop	r29
    40a0:	08 95       	ret

000040a2 <main>:


int main(void)
{
    40a2:	df 93       	push	r29
    40a4:	cf 93       	push	r28
    40a6:	00 d0       	rcall	.+0      	; 0x40a8 <main+0x6>
    40a8:	0f 92       	push	r0
    40aa:	cd b7       	in	r28, 0x3d	; 61
    40ac:	de b7       	in	r29, 0x3e	; 62
	KEYPAD_INIT();
    40ae:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <KEYPAD_INIT>
	H_LCD_void_IniT();
    40b2:	0e 94 98 13 	call	0x2730	; 0x2730 <H_LCD_void_IniT>

	H_LCD_void_sendString("'A' to continue..");
    40b6:	84 e7       	ldi	r24, 0x74	; 116
    40b8:	90 e0       	ldi	r25, 0x00	; 0
    40ba:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <H_LCD_void_sendString>
	uint8 key = 0;
    40be:	1b 82       	std	Y+3, r1	; 0x03
	while (1)
	{
		//H_LCD_void_sendString("'A' to continue..");

		key = KEYPAD_Get_Pressed_Key();
    40c0:	0e 94 f5 0e 	call	0x1dea	; 0x1dea <KEYPAD_Get_Pressed_Key>
    40c4:	8b 83       	std	Y+3, r24	; 0x03
		if(key == 'A')
    40c6:	8b 81       	ldd	r24, Y+3	; 0x03
    40c8:	81 34       	cpi	r24, 0x41	; 65
    40ca:	d1 f7       	brne	.-12     	; 0x40c0 <main+0x1e>
		{
			H_Lcd_Void_Clear();
    40cc:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <H_Lcd_Void_Clear>

			H_LCD_void_sendString("Enter ID : ");
    40d0:	86 e8       	ldi	r24, 0x86	; 134
    40d2:	90 e0       	ldi	r25, 0x00	; 0
    40d4:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <H_LCD_void_sendString>
			getID(g_inputID);
    40d8:	8d e1       	ldi	r24, 0x1D	; 29
    40da:	92 e0       	ldi	r25, 0x02	; 2
    40dc:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <getID>

			uint8 n = compareEnteredID(g_inputID);
    40e0:	8d e1       	ldi	r24, 0x1D	; 29
    40e2:	92 e0       	ldi	r25, 0x02	; 2
    40e4:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <compareEnteredID>
    40e8:	8a 83       	std	Y+2, r24	; 0x02
			if( n== 1 || n == 2 )
    40ea:	8a 81       	ldd	r24, Y+2	; 0x02
    40ec:	81 30       	cpi	r24, 0x01	; 1
    40ee:	19 f0       	breq	.+6      	; 0x40f6 <main+0x54>
    40f0:	8a 81       	ldd	r24, Y+2	; 0x02
    40f2:	82 30       	cpi	r24, 0x02	; 2
    40f4:	99 f4       	brne	.+38     	; 0x411c <main+0x7a>
			{
				H_Lcd_Void_Clear();
    40f6:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <H_Lcd_Void_Clear>
				H_LCD_void_sendString("Enter Password: ");
    40fa:	82 e9       	ldi	r24, 0x92	; 146
    40fc:	90 e0       	ldi	r25, 0x00	; 0
    40fe:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <H_LCD_void_sendString>
				H_Lcd_Void_Clear();
				H_LCD_void_sendString("Wrong ID");
				continue;
			}

			getID(g_inputPass);
    4102:	89 e1       	ldi	r24, 0x19	; 25
    4104:	92 e0       	ldi	r25, 0x02	; 2
    4106:	0e 94 68 1f 	call	0x3ed0	; 0x3ed0 <getID>
			uint8 m = compareEnteredPass(g_inputPass);
    410a:	89 e1       	ldi	r24, 0x19	; 25
    410c:	92 e0       	ldi	r25, 0x02	; 2
    410e:	0e 94 f7 1f 	call	0x3fee	; 0x3fee <compareEnteredPass>
    4112:	89 83       	std	Y+1, r24	; 0x01


			if( m == 1 || m == 2 )
    4114:	89 81       	ldd	r24, Y+1	; 0x01
    4116:	81 30       	cpi	r24, 0x01	; 1
    4118:	59 f0       	breq	.+22     	; 0x4130 <main+0x8e>
    411a:	07 c0       	rjmp	.+14     	; 0x412a <main+0x88>
				H_Lcd_Void_Clear();
				H_LCD_void_sendString("Enter Password: ");
			}
			else
			{
				H_Lcd_Void_Clear();
    411c:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <H_Lcd_Void_Clear>
				H_LCD_void_sendString("Wrong ID");
    4120:	83 ea       	ldi	r24, 0xA3	; 163
    4122:	90 e0       	ldi	r25, 0x00	; 0
    4124:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <H_LCD_void_sendString>
    4128:	cb cf       	rjmp	.-106    	; 0x40c0 <main+0x1e>

			getID(g_inputPass);
			uint8 m = compareEnteredPass(g_inputPass);


			if( m == 1 || m == 2 )
    412a:	89 81       	ldd	r24, Y+1	; 0x01
    412c:	82 30       	cpi	r24, 0x02	; 2
    412e:	19 f5       	brne	.+70     	; 0x4176 <main+0xd4>

			{


				if((m == n) && (m ==1))
    4130:	99 81       	ldd	r25, Y+1	; 0x01
    4132:	8a 81       	ldd	r24, Y+2	; 0x02
    4134:	98 17       	cp	r25, r24
    4136:	51 f4       	brne	.+20     	; 0x414c <main+0xaa>
    4138:	89 81       	ldd	r24, Y+1	; 0x01
    413a:	81 30       	cpi	r24, 0x01	; 1
    413c:	39 f4       	brne	.+14     	; 0x414c <main+0xaa>
				{

					H_Lcd_Void_Clear();
    413e:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <H_Lcd_Void_Clear>
					H_LCD_void_sendString("Welcome Ahmed !!");
    4142:	8c ea       	ldi	r24, 0xAC	; 172
    4144:	90 e0       	ldi	r25, 0x00	; 0
    4146:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <H_LCD_void_sendString>
    414a:	ba cf       	rjmp	.-140    	; 0x40c0 <main+0x1e>
					continue;
				}
				else if ((m == n) && (m==2))
    414c:	99 81       	ldd	r25, Y+1	; 0x01
    414e:	8a 81       	ldd	r24, Y+2	; 0x02
    4150:	98 17       	cp	r25, r24
    4152:	51 f4       	brne	.+20     	; 0x4168 <main+0xc6>
    4154:	89 81       	ldd	r24, Y+1	; 0x01
    4156:	82 30       	cpi	r24, 0x02	; 2
    4158:	39 f4       	brne	.+14     	; 0x4168 <main+0xc6>
				{
					H_Lcd_Void_Clear();
    415a:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <H_Lcd_Void_Clear>
					H_LCD_void_sendString("Welcome Sara !!");
    415e:	8d eb       	ldi	r24, 0xBD	; 189
    4160:	90 e0       	ldi	r25, 0x00	; 0
    4162:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <H_LCD_void_sendString>
    4166:	ac cf       	rjmp	.-168    	; 0x40c0 <main+0x1e>
					continue;
				}
				else
					H_Lcd_Void_Clear();
    4168:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <H_Lcd_Void_Clear>
				H_LCD_void_sendString("Wrong Pass!!");
    416c:	8d ec       	ldi	r24, 0xCD	; 205
    416e:	90 e0       	ldi	r25, 0x00	; 0
    4170:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <H_LCD_void_sendString>
    4174:	a5 cf       	rjmp	.-182    	; 0x40c0 <main+0x1e>
				continue;

			}
			else
			{
				H_Lcd_Void_Clear();
    4176:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <H_Lcd_Void_Clear>
				H_LCD_void_sendString("Wrong Pass!!");
    417a:	8d ec       	ldi	r24, 0xCD	; 205
    417c:	90 e0       	ldi	r25, 0x00	; 0
    417e:	0e 94 64 15 	call	0x2ac8	; 0x2ac8 <H_LCD_void_sendString>
    4182:	9e cf       	rjmp	.-196    	; 0x40c0 <main+0x1e>

00004184 <__prologue_saves__>:
    4184:	2f 92       	push	r2
    4186:	3f 92       	push	r3
    4188:	4f 92       	push	r4
    418a:	5f 92       	push	r5
    418c:	6f 92       	push	r6
    418e:	7f 92       	push	r7
    4190:	8f 92       	push	r8
    4192:	9f 92       	push	r9
    4194:	af 92       	push	r10
    4196:	bf 92       	push	r11
    4198:	cf 92       	push	r12
    419a:	df 92       	push	r13
    419c:	ef 92       	push	r14
    419e:	ff 92       	push	r15
    41a0:	0f 93       	push	r16
    41a2:	1f 93       	push	r17
    41a4:	cf 93       	push	r28
    41a6:	df 93       	push	r29
    41a8:	cd b7       	in	r28, 0x3d	; 61
    41aa:	de b7       	in	r29, 0x3e	; 62
    41ac:	ca 1b       	sub	r28, r26
    41ae:	db 0b       	sbc	r29, r27
    41b0:	0f b6       	in	r0, 0x3f	; 63
    41b2:	f8 94       	cli
    41b4:	de bf       	out	0x3e, r29	; 62
    41b6:	0f be       	out	0x3f, r0	; 63
    41b8:	cd bf       	out	0x3d, r28	; 61
    41ba:	09 94       	ijmp

000041bc <__epilogue_restores__>:
    41bc:	2a 88       	ldd	r2, Y+18	; 0x12
    41be:	39 88       	ldd	r3, Y+17	; 0x11
    41c0:	48 88       	ldd	r4, Y+16	; 0x10
    41c2:	5f 84       	ldd	r5, Y+15	; 0x0f
    41c4:	6e 84       	ldd	r6, Y+14	; 0x0e
    41c6:	7d 84       	ldd	r7, Y+13	; 0x0d
    41c8:	8c 84       	ldd	r8, Y+12	; 0x0c
    41ca:	9b 84       	ldd	r9, Y+11	; 0x0b
    41cc:	aa 84       	ldd	r10, Y+10	; 0x0a
    41ce:	b9 84       	ldd	r11, Y+9	; 0x09
    41d0:	c8 84       	ldd	r12, Y+8	; 0x08
    41d2:	df 80       	ldd	r13, Y+7	; 0x07
    41d4:	ee 80       	ldd	r14, Y+6	; 0x06
    41d6:	fd 80       	ldd	r15, Y+5	; 0x05
    41d8:	0c 81       	ldd	r16, Y+4	; 0x04
    41da:	1b 81       	ldd	r17, Y+3	; 0x03
    41dc:	aa 81       	ldd	r26, Y+2	; 0x02
    41de:	b9 81       	ldd	r27, Y+1	; 0x01
    41e0:	ce 0f       	add	r28, r30
    41e2:	d1 1d       	adc	r29, r1
    41e4:	0f b6       	in	r0, 0x3f	; 63
    41e6:	f8 94       	cli
    41e8:	de bf       	out	0x3e, r29	; 62
    41ea:	0f be       	out	0x3f, r0	; 63
    41ec:	cd bf       	out	0x3d, r28	; 61
    41ee:	ed 01       	movw	r28, r26
    41f0:	08 95       	ret

000041f2 <itoa>:
    41f2:	fb 01       	movw	r30, r22
    41f4:	9f 01       	movw	r18, r30
    41f6:	e8 94       	clt
    41f8:	42 30       	cpi	r20, 0x02	; 2
    41fa:	c4 f0       	brlt	.+48     	; 0x422c <itoa+0x3a>
    41fc:	45 32       	cpi	r20, 0x25	; 37
    41fe:	b4 f4       	brge	.+44     	; 0x422c <itoa+0x3a>
    4200:	4a 30       	cpi	r20, 0x0A	; 10
    4202:	29 f4       	brne	.+10     	; 0x420e <itoa+0x1c>
    4204:	97 fb       	bst	r25, 7
    4206:	1e f4       	brtc	.+6      	; 0x420e <itoa+0x1c>
    4208:	90 95       	com	r25
    420a:	81 95       	neg	r24
    420c:	9f 4f       	sbci	r25, 0xFF	; 255
    420e:	64 2f       	mov	r22, r20
    4210:	77 27       	eor	r23, r23
    4212:	0e 94 2a 21 	call	0x4254	; 0x4254 <__udivmodhi4>
    4216:	80 5d       	subi	r24, 0xD0	; 208
    4218:	8a 33       	cpi	r24, 0x3A	; 58
    421a:	0c f0       	brlt	.+2      	; 0x421e <itoa+0x2c>
    421c:	89 5d       	subi	r24, 0xD9	; 217
    421e:	81 93       	st	Z+, r24
    4220:	cb 01       	movw	r24, r22
    4222:	00 97       	sbiw	r24, 0x00	; 0
    4224:	a1 f7       	brne	.-24     	; 0x420e <itoa+0x1c>
    4226:	16 f4       	brtc	.+4      	; 0x422c <itoa+0x3a>
    4228:	5d e2       	ldi	r21, 0x2D	; 45
    422a:	51 93       	st	Z+, r21
    422c:	10 82       	st	Z, r1
    422e:	c9 01       	movw	r24, r18
    4230:	0c 94 1a 21 	jmp	0x4234	; 0x4234 <strrev>

00004234 <strrev>:
    4234:	dc 01       	movw	r26, r24
    4236:	fc 01       	movw	r30, r24
    4238:	67 2f       	mov	r22, r23
    423a:	71 91       	ld	r23, Z+
    423c:	77 23       	and	r23, r23
    423e:	e1 f7       	brne	.-8      	; 0x4238 <strrev+0x4>
    4240:	32 97       	sbiw	r30, 0x02	; 2
    4242:	04 c0       	rjmp	.+8      	; 0x424c <strrev+0x18>
    4244:	7c 91       	ld	r23, X
    4246:	6d 93       	st	X+, r22
    4248:	70 83       	st	Z, r23
    424a:	62 91       	ld	r22, -Z
    424c:	ae 17       	cp	r26, r30
    424e:	bf 07       	cpc	r27, r31
    4250:	c8 f3       	brcs	.-14     	; 0x4244 <strrev+0x10>
    4252:	08 95       	ret

00004254 <__udivmodhi4>:
    4254:	aa 1b       	sub	r26, r26
    4256:	bb 1b       	sub	r27, r27
    4258:	51 e1       	ldi	r21, 0x11	; 17
    425a:	07 c0       	rjmp	.+14     	; 0x426a <__udivmodhi4_ep>

0000425c <__udivmodhi4_loop>:
    425c:	aa 1f       	adc	r26, r26
    425e:	bb 1f       	adc	r27, r27
    4260:	a6 17       	cp	r26, r22
    4262:	b7 07       	cpc	r27, r23
    4264:	10 f0       	brcs	.+4      	; 0x426a <__udivmodhi4_ep>
    4266:	a6 1b       	sub	r26, r22
    4268:	b7 0b       	sbc	r27, r23

0000426a <__udivmodhi4_ep>:
    426a:	88 1f       	adc	r24, r24
    426c:	99 1f       	adc	r25, r25
    426e:	5a 95       	dec	r21
    4270:	a9 f7       	brne	.-22     	; 0x425c <__udivmodhi4_loop>
    4272:	80 95       	com	r24
    4274:	90 95       	com	r25
    4276:	bc 01       	movw	r22, r24
    4278:	cd 01       	movw	r24, r26
    427a:	08 95       	ret

0000427c <_exit>:
    427c:	f8 94       	cli

0000427e <__stop_program>:
    427e:	ff cf       	rjmp	.-2      	; 0x427e <__stop_program>
